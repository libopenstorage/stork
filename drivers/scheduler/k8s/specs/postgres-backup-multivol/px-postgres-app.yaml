apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      schedulerName: stork
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                      - postgres
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: postgres
          image: postgres:9.5
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: pgbench
            - name: POSTGRES_PASSWORD
              value: superpostgres
            - name: PGBENCH_PASSWORD
              value: superpostgres
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            {{ if .ClaimsCount }}
            {{- range $val := Iterate .ClaimsCount }}
            - name: postgredb-{{ $val }}
              mountPath: /var/lib/postgresql/data{{ $val }}
            {{- end }}
            {{ else }}
            - name: postgredb
              mountPath: /var/lib/postgresql/data
            {{- end }}
          readinessProbe:
            exec:
              command: ["psql", "-U", "pgbench", "-c", "CREATE TABLE IF NOT EXISTS test_table ( test_text TEXT ); INSERT INTO test_table VALUES ( 'test_message' ); SELECT * FROM test_table; SELECT pg_sleep(1); DELETE FROM test_table;"]
            initialDelaySeconds: 15
            timeoutSeconds: 2
          livenessProbe:
            exec:
              command: ["psql", "-U", "pgbench", "-c", "CREATE TABLE IF NOT EXISTS test_table ( test_text TEXT ); INSERT INTO test_table VALUES ( 'test_message' ); SELECT * FROM test_table; SELECT pg_sleep(1); DELETE FROM test_table;"]
            initialDelaySeconds: 45
            timeoutSeconds: 2
      volumes:
      {{ if .ClaimsCount }}
        {{- range $val := Iterate .ClaimsCount }}
        - name: postgredb-{{ $val }}
          persistentVolumeClaim:
            claimName: postgres-data-{{ $val }}
      {{- end }}
      {{- else }}
        - name: postgredb
          persistentVolumeClaim:
            claimName: postgres-data
      {{- end }}