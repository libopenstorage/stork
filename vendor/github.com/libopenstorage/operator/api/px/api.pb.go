/// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: px/api/api.proto

package api

import (
	context "context"
	api "github.com/libopenstorage/openstorage/api"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PoolPriority defines storage pool priorities
type PoolPriority int32

const (
	PoolPriority_Unknown PoolPriority = 0
	PoolPriority_Low     PoolPriority = 1
	PoolPriority_Medium  PoolPriority = 2
	PoolPriority_High    PoolPriority = 3
)

// Enum value maps for PoolPriority.
var (
	PoolPriority_name = map[int32]string{
		0: "Unknown",
		1: "Low",
		2: "Medium",
		3: "High",
	}
	PoolPriority_value = map[string]int32{
		"Unknown": 0,
		"Low":     1,
		"Medium":  2,
		"High":    3,
	}
)

func (x PoolPriority) Enum() *PoolPriority {
	p := new(PoolPriority)
	*p = x
	return p
}

func (x PoolPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[0].Descriptor()
}

func (PoolPriority) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[0]
}

func (x PoolPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolPriority.Descriptor instead.
func (PoolPriority) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{0}
}

// Defines times of day
type Weekday int32

const (
	// Sunday
	Weekday_Sunday Weekday = 0
	// Monday
	Weekday_Monday Weekday = 1
	// Tuesday
	Weekday_Tuesday Weekday = 2
	// Wednesday
	Weekday_Wednesday Weekday = 3
	// Thursday
	Weekday_Thursday Weekday = 4
	// Friday
	Weekday_Friday Weekday = 5
	// Saturday
	Weekday_Saturday Weekday = 6
)

// Enum value maps for Weekday.
var (
	Weekday_name = map[int32]string{
		0: "Sunday",
		1: "Monday",
		2: "Tuesday",
		3: "Wednesday",
		4: "Thursday",
		5: "Friday",
		6: "Saturday",
	}
	Weekday_value = map[string]int32{
		"Sunday":    0,
		"Monday":    1,
		"Tuesday":   2,
		"Wednesday": 3,
		"Thursday":  4,
		"Friday":    5,
		"Saturday":  6,
	}
)

func (x Weekday) Enum() *Weekday {
	p := new(Weekday)
	*p = x
	return p
}

func (x Weekday) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Weekday) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[1].Descriptor()
}

func (Weekday) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[1]
}

func (x Weekday) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Weekday.Descriptor instead.
func (Weekday) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{1}
}

type BootstrapNodeState int32

const (
	BootstrapNodeState_UnknownNodeState BootstrapNodeState = 0
	BootstrapNodeState_InProgress       BootstrapNodeState = 1
	BootstrapNodeState_Operational      BootstrapNodeState = 2
	BootstrapNodeState_SuspectDown      BootstrapNodeState = 3
)

// Enum value maps for BootstrapNodeState.
var (
	BootstrapNodeState_name = map[int32]string{
		0: "UnknownNodeState",
		1: "InProgress",
		2: "Operational",
		3: "SuspectDown",
	}
	BootstrapNodeState_value = map[string]int32{
		"UnknownNodeState": 0,
		"InProgress":       1,
		"Operational":      2,
		"SuspectDown":      3,
	}
)

func (x BootstrapNodeState) Enum() *BootstrapNodeState {
	p := new(BootstrapNodeState)
	*p = x
	return p
}

func (x BootstrapNodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BootstrapNodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[2].Descriptor()
}

func (BootstrapNodeState) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[2]
}

func (x BootstrapNodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BootstrapNodeState.Descriptor instead.
func (BootstrapNodeState) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{2}
}

type BootstrapNodeType int32

const (
	BootstrapNodeType_UnknownNodeType BootstrapNodeType = 0
	BootstrapNodeType_Leader          BootstrapNodeType = 1
	BootstrapNodeType_Member          BootstrapNodeType = 2
)

// Enum value maps for BootstrapNodeType.
var (
	BootstrapNodeType_name = map[int32]string{
		0: "UnknownNodeType",
		1: "Leader",
		2: "Member",
	}
	BootstrapNodeType_value = map[string]int32{
		"UnknownNodeType": 0,
		"Leader":          1,
		"Member":          2,
	}
)

func (x BootstrapNodeType) Enum() *BootstrapNodeType {
	p := new(BootstrapNodeType)
	*p = x
	return p
}

func (x BootstrapNodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BootstrapNodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[3].Descriptor()
}

func (BootstrapNodeType) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[3]
}

func (x BootstrapNodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BootstrapNodeType.Descriptor instead.
func (BootstrapNodeType) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{3}
}

type DataDirType int32

const (
	DataDirType_UnknownDataDirType DataDirType = 0
	DataDirType_MetadataDevice     DataDirType = 1
	DataDirType_KvdbDevice         DataDirType = 2
	DataDirType_BtrfsSubvolume     DataDirType = 3
)

// Enum value maps for DataDirType.
var (
	DataDirType_name = map[int32]string{
		0: "UnknownDataDirType",
		1: "MetadataDevice",
		2: "KvdbDevice",
		3: "BtrfsSubvolume",
	}
	DataDirType_value = map[string]int32{
		"UnknownDataDirType": 0,
		"MetadataDevice":     1,
		"KvdbDevice":         2,
		"BtrfsSubvolume":     3,
	}
)

func (x DataDirType) Enum() *DataDirType {
	p := new(DataDirType)
	*p = x
	return p
}

func (x DataDirType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataDirType) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[4].Descriptor()
}

func (DataDirType) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[4]
}

func (x DataDirType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataDirType.Descriptor instead.
func (DataDirType) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{4}
}

type BlockDriverType int32

const (
	BlockDriverType_UnknownBlockDriverType BlockDriverType = 0
	BlockDriverType_Native                 BlockDriverType = 1
	BlockDriverType_External               BlockDriverType = 2
	BlockDriverType_Nbd                    BlockDriverType = 3
)

// Enum value maps for BlockDriverType.
var (
	BlockDriverType_name = map[int32]string{
		0: "UnknownBlockDriverType",
		1: "Native",
		2: "External",
		3: "Nbd",
	}
	BlockDriverType_value = map[string]int32{
		"UnknownBlockDriverType": 0,
		"Native":                 1,
		"External":               2,
		"Nbd":                    3,
	}
)

func (x BlockDriverType) Enum() *BlockDriverType {
	p := new(BlockDriverType)
	*p = x
	return p
}

func (x BlockDriverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockDriverType) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[5].Descriptor()
}

func (BlockDriverType) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[5]
}

func (x BlockDriverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockDriverType.Descriptor instead.
func (BlockDriverType) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{5}
}

// TargetDsType type of target data store
type TargetDsType int32

const (
	TargetDsType_UnknownTargetDsType TargetDsType = 0
	TargetDsType_ExternalFs          TargetDsType = 1
	TargetDsType_PXV                 TargetDsType = 2
)

// Enum value maps for TargetDsType.
var (
	TargetDsType_name = map[int32]string{
		0: "UnknownTargetDsType",
		1: "ExternalFs",
		2: "PXV",
	}
	TargetDsType_value = map[string]int32{
		"UnknownTargetDsType": 0,
		"ExternalFs":          1,
		"PXV":                 2,
	}
)

func (x TargetDsType) Enum() *TargetDsType {
	p := new(TargetDsType)
	*p = x
	return p
}

func (x TargetDsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetDsType) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[6].Descriptor()
}

func (TargetDsType) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[6]
}

func (x TargetDsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetDsType.Descriptor instead.
func (TargetDsType) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{6}
}

// PoolType storage pool type
type PoolType int32

const (
	PoolType_UnknownPoolType PoolType = 0
	PoolType_Btrfs           PoolType = 1
	PoolType_Dmthin          PoolType = 2
	PoolType_Mdraid          PoolType = 3
	PoolType_Ext4            PoolType = 4
	PoolType_Nocow           PoolType = 5
	PoolType_Lvm             PoolType = 6
)

// Enum value maps for PoolType.
var (
	PoolType_name = map[int32]string{
		0: "UnknownPoolType",
		1: "Btrfs",
		2: "Dmthin",
		3: "Mdraid",
		4: "Ext4",
		5: "Nocow",
		6: "Lvm",
	}
	PoolType_value = map[string]int32{
		"UnknownPoolType": 0,
		"Btrfs":           1,
		"Dmthin":          2,
		"Mdraid":          3,
		"Ext4":            4,
		"Nocow":           5,
		"Lvm":             6,
	}
)

func (x PoolType) Enum() *PoolType {
	p := new(PoolType)
	*p = x
	return p
}

func (x PoolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolType) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[7].Descriptor()
}

func (PoolType) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[7]
}

func (x PoolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolType.Descriptor instead.
func (PoolType) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{7}
}

// StatusCode is an enum that holds all the Telemetry error codes.
type Telemetry_StatusCode int32

const (
	// No errorrs detected. Troubleshooter was able to succesfully upload a test file to arcus
	Telemetry_Unknown Telemetry_StatusCode = 0
	//  Telemetry has a valid appliance certificate and can communicate with Arcus. However,
	//  some other failure occurred when trying to upload a test file. There may be an issue on the cloud side.
	Telemetry_LogUploadFailed Telemetry_StatusCode = 1
	// Telemetry has an appliance certificate, but it is either not yet valid (highly unlikely) or already expired.
	// It is likely that something went wrong during the automated certificate renewal process.
	Telemetry_AppCertInvalid Telemetry_StatusCode = 2
	// Telemetry thinks it has an appliance certificate, but there was an error in trying to read it.
	Telemetry_AppCertUnknown Telemetry_StatusCode = 3
	// When Telemetry sends a certificate signing request, it is signed by an on-array activation keyif one exists.
	// Otherwise, it is signed by the default release key. Arcus Auth validates the signature against the public
	// key that is stored in the Arcus Keybox. If there is a mismatch, registration will fail with this error.
	Telemetry_RegInvalidJwt Telemetry_StatusCode = 4
	// This appliance id has already been used/registered in the past. We cannot register duplicate appliance ids.
	Telemetry_RegAlreadyRegistered Telemetry_StatusCode = 5
	// This appliance is one that requires pre-registration (e.g. VM collector, CBS), but it has not been preregistered yet.
	Telemetry_RegNotRegistered Telemetry_StatusCode = 6
	// Telemetry ran into some other error during the registration process.
	Telemetry_RegUnkown Telemetry_StatusCode = 7
	// Telemetry timed out while trying to hit restricted-rest.cloud-support.purestorage.com/ping.
	// The troubleshooter was unable to find more specific errors.
	Telemetry_RestrictedPingTimeout Telemetry_StatusCode = 8
	// Telemetry hit a "Network is unreachable" error while trying to hit restricted-rest.cloud-support.purestorage.com/ping.
	// The troubleshooter was unable to find more specific errors.
	Telemetry_RestrictedPingUnreachable Telemetry_StatusCode = 9
	// Telemetry received some other error while trying to hit restricted-rest.cloud-support.purestorage.com/ping.
	// The troubleshooter was unable to find more specific errors.
	Telemetry_RestrictedPingUnknown Telemetry_StatusCode = 10
	// The proxy url provided to Telemetry is in an invalid url format. The internal regex for parsing is:
	//^(?<protocol>https?)://((?<username>.+):(?<password>.+)@)?
	//((?<ipv6hostname>\\[.+\\])|(?<hostname>[A-Za-z0-9-.]+))(:(?<port>\\d+))?
	Telemetry_ProxyUrlParse Telemetry_StatusCode = 11
	// Telemetry received a timeout when trying to perform a DNS lookup on rest.cloud-support.purestorage.com, restricted-rest.cloud-support.purestorage.com, or the provided proxy url, if it exists.
	Telemetry_DnsTimeout Telemetry_StatusCode = 12
	// Telemetry received some other error when trying to perform a DNS lookup on rest.cloud-support.purestorage.com, restricted-rest.cloud-support.purestorage.com, or the provided proxy url, if it exists.
	Telemetry_DnsUnkown Telemetry_StatusCode = 13
	// Telemetry was unable to establish a socket connection to the provided proxy.
	Telemetry_ProxyConnection Telemetry_StatusCode = 14
	//  SDK threw an error.
	Telemetry_SdkError Telemetry_StatusCode = 15
	// Success
	Telemetry_Success Telemetry_StatusCode = 100
)

// Enum value maps for Telemetry_StatusCode.
var (
	Telemetry_StatusCode_name = map[int32]string{
		0:   "Unknown",
		1:   "LogUploadFailed",
		2:   "AppCertInvalid",
		3:   "AppCertUnknown",
		4:   "RegInvalidJwt",
		5:   "RegAlreadyRegistered",
		6:   "RegNotRegistered",
		7:   "RegUnkown",
		8:   "RestrictedPingTimeout",
		9:   "RestrictedPingUnreachable",
		10:  "RestrictedPingUnknown",
		11:  "ProxyUrlParse",
		12:  "DnsTimeout",
		13:  "DnsUnkown",
		14:  "ProxyConnection",
		15:  "SdkError",
		100: "Success",
	}
	Telemetry_StatusCode_value = map[string]int32{
		"Unknown":                   0,
		"LogUploadFailed":           1,
		"AppCertInvalid":            2,
		"AppCertUnknown":            3,
		"RegInvalidJwt":             4,
		"RegAlreadyRegistered":      5,
		"RegNotRegistered":          6,
		"RegUnkown":                 7,
		"RestrictedPingTimeout":     8,
		"RestrictedPingUnreachable": 9,
		"RestrictedPingUnknown":     10,
		"ProxyUrlParse":             11,
		"DnsTimeout":                12,
		"DnsUnkown":                 13,
		"ProxyConnection":           14,
		"SdkError":                  15,
		"Success":                   100,
	}
)

func (x Telemetry_StatusCode) Enum() *Telemetry_StatusCode {
	p := new(Telemetry_StatusCode)
	*p = x
	return p
}

func (x Telemetry_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Telemetry_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[8].Descriptor()
}

func (Telemetry_StatusCode) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[8]
}

func (x Telemetry_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Telemetry_StatusCode.Descriptor instead.
func (Telemetry_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{8, 0}
}

// Maintenance operation Enum
type Maintenance_OperationType int32

const (
	// Do not use.
	Maintenance_Unknown Maintenance_OperationType = 0
	// Enter maintenance mode
	Maintenance_Enter Maintenance_OperationType = 1
	// Exit maintenance mode
	Maintenance_Exit Maintenance_OperationType = 2
	// Repair Node
	Maintenance_Repair Maintenance_OperationType = 3
)

// Enum value maps for Maintenance_OperationType.
var (
	Maintenance_OperationType_name = map[int32]string{
		0: "Unknown",
		1: "Enter",
		2: "Exit",
		3: "Repair",
	}
	Maintenance_OperationType_value = map[string]int32{
		"Unknown": 0,
		"Enter":   1,
		"Exit":    2,
		"Repair":  3,
	}
)

func (x Maintenance_OperationType) Enum() *Maintenance_OperationType {
	p := new(Maintenance_OperationType)
	*p = x
	return p
}

func (x Maintenance_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Maintenance_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[9].Descriptor()
}

func (Maintenance_OperationType) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[9]
}

func (x Maintenance_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Maintenance_OperationType.Descriptor instead.
func (Maintenance_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{19, 0}
}

// CallHome operation Enum
type CallHome_OperationType int32

const (
	//Do not use.
	CallHome_Unknown CallHome_OperationType = 0
	// Enable callhome
	CallHome_Enable CallHome_OperationType = 1
	// Disbale callhome
	CallHome_Disable CallHome_OperationType = 2
)

// Enum value maps for CallHome_OperationType.
var (
	CallHome_OperationType_name = map[int32]string{
		0: "Unknown",
		1: "Enable",
		2: "Disable",
	}
	CallHome_OperationType_value = map[string]int32{
		"Unknown": 0,
		"Enable":  1,
		"Disable": 2,
	}
)

func (x CallHome_OperationType) Enum() *CallHome_OperationType {
	p := new(CallHome_OperationType)
	*p = x
	return p
}

func (x CallHome_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallHome_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[10].Descriptor()
}

func (CallHome_OperationType) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[10]
}

func (x CallHome_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallHome_OperationType.Descriptor instead.
func (CallHome_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{20, 0}
}

// CacheFlush operation Enum
type CacheFlush_OperationType int32

const (
	//Do not use.
	CacheFlush_Unknown CacheFlush_OperationType = 0
	// Start flushing
	CacheFlush_Start CacheFlush_OperationType = 1
	// Show status of in progress cache flushing
	CacheFlush_Status CacheFlush_OperationType = 2
)

// Enum value maps for CacheFlush_OperationType.
var (
	CacheFlush_OperationType_name = map[int32]string{
		0: "Unknown",
		1: "Start",
		2: "Status",
	}
	CacheFlush_OperationType_value = map[string]int32{
		"Unknown": 0,
		"Start":   1,
		"Status":  2,
	}
)

func (x CacheFlush_OperationType) Enum() *CacheFlush_OperationType {
	p := new(CacheFlush_OperationType)
	*p = x
	return p
}

func (x CacheFlush_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheFlush_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[11].Descriptor()
}

func (CacheFlush_OperationType) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[11]
}

func (x CacheFlush_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheFlush_OperationType.Descriptor instead.
func (CacheFlush_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{58, 0}
}

type DeviceScan_OperationType int32

const (
	//Do not use.
	DeviceScan_UnknownOperation DeviceScan_OperationType = 0
	// Start device bad block scan
	DeviceScan_Start DeviceScan_OperationType = 1
	// Resume device bad block scan
	DeviceScan_Resume DeviceScan_OperationType = 2
	// Stop device bad block scan
	DeviceScan_Stop DeviceScan_OperationType = 3
	// Pause device bad block scan
	DeviceScan_Pause DeviceScan_OperationType = 4
)

// Enum value maps for DeviceScan_OperationType.
var (
	DeviceScan_OperationType_name = map[int32]string{
		0: "UnknownOperation",
		1: "Start",
		2: "Resume",
		3: "Stop",
		4: "Pause",
	}
	DeviceScan_OperationType_value = map[string]int32{
		"UnknownOperation": 0,
		"Start":            1,
		"Resume":           2,
		"Stop":             3,
		"Pause":            4,
	}
)

func (x DeviceScan_OperationType) Enum() *DeviceScan_OperationType {
	p := new(DeviceScan_OperationType)
	*p = x
	return p
}

func (x DeviceScan_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceScan_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[12].Descriptor()
}

func (DeviceScan_OperationType) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[12]
}

func (x DeviceScan_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceScan_OperationType.Descriptor instead.
func (DeviceScan_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{63, 0}
}

type DeviceScan_ResponseType int32

const (
	//Do not use.
	DeviceScan_UnknownResponse DeviceScan_ResponseType = 0
	// Device scan started, stopped, paused or resumed successfully
	DeviceScan_Ok DeviceScan_ResponseType = 1
	// device scan is already in progress
	DeviceScan_InProgress DeviceScan_ResponseType = 2
	// no device scan is running to resume or to stop
	DeviceScan_NotFound DeviceScan_ResponseType = 3
	// already exists paused device scan, need to resume or cancel incomplete scan to start
	DeviceScan_AlreadyExists DeviceScan_ResponseType = 4
)

// Enum value maps for DeviceScan_ResponseType.
var (
	DeviceScan_ResponseType_name = map[int32]string{
		0: "UnknownResponse",
		1: "Ok",
		2: "InProgress",
		3: "NotFound",
		4: "AlreadyExists",
	}
	DeviceScan_ResponseType_value = map[string]int32{
		"UnknownResponse": 0,
		"Ok":              1,
		"InProgress":      2,
		"NotFound":        3,
		"AlreadyExists":   4,
	}
)

func (x DeviceScan_ResponseType) Enum() *DeviceScan_ResponseType {
	p := new(DeviceScan_ResponseType)
	*p = x
	return p
}

func (x DeviceScan_ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceScan_ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[13].Descriptor()
}

func (DeviceScan_ResponseType) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[13]
}

func (x DeviceScan_ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceScan_ResponseType.Descriptor instead.
func (DeviceScan_ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{63, 1}
}

type Storage_Status int32

const (
	Storage_UnknownStorageStatus Storage_Status = 0
	// NotPresent empty storage spec.
	Storage_NotPresent Storage_Status = 1
	// Init storage is intializing.
	Storage_Initializing Storage_Status = 2
	// Up status healthy
	Storage_Up Storage_Status = 3
	// Down status failure.
	Storage_Down Storage_Status = 4
	// StrorageRebalance operation in progress.
	Storage_StorageRebalance Storage_Status = 5
	// DriveReplace operation in progress.
	Storage_DriveReplace Storage_Status = 6
	// StorageDown module is up but storage devices are down.
	Storage_StorageDown Storage_Status = 7
	// Degraded status up but with degraded performance.
	// In a RAID group, this may indicate a problem with one or more drives
	Storage_Degraded Storage_Status = 8
	// Maintenance status
	Storage_Maintenance Storage_Status = 9
	// NeedsReboot
	Storage_NeedsReboot Storage_Status = 10
	// Error state
	Storage_Error Storage_Status = 11
	// Initialization Error state
	Storage_InitializationError Storage_Status = 12
	// KernelDriverError error communicating with kernel driver.
	Storage_KernelDriverError Storage_Status = 13
	// ResyncStatus means volume is resyncing.
	Storage_Resync Storage_Status = 14
	// StorageFull indicates no free space.
	Storage_StorageFull Storage_Status = 15
	// StorageResize pool resize in progress.
	Storage_StorageResize Storage_Status = 16
	// Decommissioned indicates node is marked for decommissioning.
	Storage_Decommissioned Storage_Status = 17
	// StorageCacheFlush indicates cache flush is in progress
	Storage_CacheFlush Storage_Status = 18
	// Pool Maintenance indicates storage down
	Storage_PoolMaintenance Storage_Status = 19
	// Cordon indicates pool is auto cordorned
	Storage_Cordon Storage_Status = 20
)

// Enum value maps for Storage_Status.
var (
	Storage_Status_name = map[int32]string{
		0:  "UnknownStorageStatus",
		1:  "NotPresent",
		2:  "Initializing",
		3:  "Up",
		4:  "Down",
		5:  "StorageRebalance",
		6:  "DriveReplace",
		7:  "StorageDown",
		8:  "Degraded",
		9:  "Maintenance",
		10: "NeedsReboot",
		11: "Error",
		12: "InitializationError",
		13: "KernelDriverError",
		14: "Resync",
		15: "StorageFull",
		16: "StorageResize",
		17: "Decommissioned",
		18: "CacheFlush",
		19: "PoolMaintenance",
		20: "Cordon",
	}
	Storage_Status_value = map[string]int32{
		"UnknownStorageStatus": 0,
		"NotPresent":           1,
		"Initializing":         2,
		"Up":                   3,
		"Down":                 4,
		"StorageRebalance":     5,
		"DriveReplace":         6,
		"StorageDown":          7,
		"Degraded":             8,
		"Maintenance":          9,
		"NeedsReboot":          10,
		"Error":                11,
		"InitializationError":  12,
		"KernelDriverError":    13,
		"Resync":               14,
		"StorageFull":          15,
		"StorageResize":        16,
		"Decommissioned":       17,
		"CacheFlush":           18,
		"PoolMaintenance":      19,
		"Cordon":               20,
	}
)

func (x Storage_Status) Enum() *Storage_Status {
	p := new(Storage_Status)
	*p = x
	return p
}

func (x Storage_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Storage_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[14].Descriptor()
}

func (Storage_Status) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[14]
}

func (x Storage_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Storage_Status.Descriptor instead.
func (Storage_Status) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{84, 0}
}

// DriveRebalance operation Enum
type DriveRebalance_OperationType int32

const (
	//Do not use.
	DriveRebalance_Unknown DriveRebalance_OperationType = 0
	// Start drive rebalance
	DriveRebalance_Start DriveRebalance_OperationType = 1
	// Show status of in progress operation
	DriveRebalance_Status DriveRebalance_OperationType = 2
	// Cancel rebalance process
	DriveRebalance_Cancel DriveRebalance_OperationType = 3
)

// Enum value maps for DriveRebalance_OperationType.
var (
	DriveRebalance_OperationType_name = map[int32]string{
		0: "Unknown",
		1: "Start",
		2: "Status",
		3: "Cancel",
	}
	DriveRebalance_OperationType_value = map[string]int32{
		"Unknown": 0,
		"Start":   1,
		"Status":  2,
		"Cancel":  3,
	}
)

func (x DriveRebalance_OperationType) Enum() *DriveRebalance_OperationType {
	p := new(DriveRebalance_OperationType)
	*p = x
	return p
}

func (x DriveRebalance_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DriveRebalance_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[15].Descriptor()
}

func (DriveRebalance_OperationType) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[15]
}

func (x DriveRebalance_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DriveRebalance_OperationType.Descriptor instead.
func (DriveRebalance_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{107, 0}
}

// DriveReplace operation Enum
type DriveReplace_OperationType int32

const (
	//Do not use.
	DriveReplace_Unknown DriveReplace_OperationType = 0
	// Start replace adding
	DriveReplace_Start DriveReplace_OperationType = 1
	// Show status of in progress operation
	DriveReplace_Status DriveReplace_OperationType = 2
	// Cancel replace process
	DriveReplace_Cancel DriveReplace_OperationType = 3
)

// Enum value maps for DriveReplace_OperationType.
var (
	DriveReplace_OperationType_name = map[int32]string{
		0: "Unknown",
		1: "Start",
		2: "Status",
		3: "Cancel",
	}
	DriveReplace_OperationType_value = map[string]int32{
		"Unknown": 0,
		"Start":   1,
		"Status":  2,
		"Cancel":  3,
	}
)

func (x DriveReplace_OperationType) Enum() *DriveReplace_OperationType {
	p := new(DriveReplace_OperationType)
	*p = x
	return p
}

func (x DriveReplace_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DriveReplace_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[16].Descriptor()
}

func (DriveReplace_OperationType) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[16]
}

func (x DriveReplace_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DriveReplace_OperationType.Descriptor instead.
func (DriveReplace_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{109, 0}
}

// Severity Enum
type LicenseCondition_Severity int32

const (
	// Do not use.
	LicenseCondition_UNSPECIFIED LicenseCondition_Severity = 0
	// Used for an informational message
	LicenseCondition_INFO LicenseCondition_Severity = 1
	// Used for a warning message
	LicenseCondition_WARNING LicenseCondition_Severity = 2
	// Used for an error message
	LicenseCondition_ERROR LicenseCondition_Severity = 3
)

// Enum value maps for LicenseCondition_Severity.
var (
	LicenseCondition_Severity_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "INFO",
		2: "WARNING",
		3: "ERROR",
	}
	LicenseCondition_Severity_value = map[string]int32{
		"UNSPECIFIED": 0,
		"INFO":        1,
		"WARNING":     2,
		"ERROR":       3,
	}
)

func (x LicenseCondition_Severity) Enum() *LicenseCondition_Severity {
	p := new(LicenseCondition_Severity)
	*p = x
	return p
}

func (x LicenseCondition_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseCondition_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_px_api_api_proto_enumTypes[17].Descriptor()
}

func (LicenseCondition_Severity) Type() protoreflect.EnumType {
	return &file_px_api_api_proto_enumTypes[17]
}

func (x LicenseCondition_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseCondition_Severity.Descriptor instead.
func (LicenseCondition_Severity) EnumDescriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{132, 0}
}

type PureArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PureArray) Reset() {
	*x = PureArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PureArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PureArray) ProtoMessage() {}

func (x *PureArray) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PureArray.ProtoReflect.Descriptor instead.
func (*PureArray) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{0}
}

func (x *PureArray) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PureComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResourceType string `protobuf:"bytes,3,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
}

func (x *PureComponent) Reset() {
	*x = PureComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PureComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PureComponent) ProtoMessage() {}

func (x *PureComponent) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PureComponent.ProtoReflect.Descriptor instead.
func (*PureComponent) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{1}
}

func (x *PureComponent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PureComponent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PureComponent) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

// PureAlert is  added to become compatible with Pure1 Alerts.
// In our callhome data we convert our alerts to this schema: https://github.dev.purestorage.com/Pure1/arcus-alerts/blob/master/arcus-alerts-service/src/main/resources/alerts_schema.json
type PureAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Array       *PureArray     `protobuf:"bytes,1,opt,name=array,proto3" json:"array,omitempty"`
	Component   *PureComponent `protobuf:"bytes,2,opt,name=component,proto3" json:"component,omitempty"`
	Id          string         `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Code        int64          `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Description string         `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Summary     string         `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	Severity    string         `protobuf:"bytes,7,opt,name=severity,proto3" json:"severity,omitempty"`
	State       string         `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	Created     int64          `protobuf:"varint,9,opt,name=created,proto3" json:"created,omitempty"`
	Updated     int64          `protobuf:"varint,10,opt,name=updated,proto3" json:"updated,omitempty"`
	Origin      string         `protobuf:"bytes,11,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *PureAlert) Reset() {
	*x = PureAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PureAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PureAlert) ProtoMessage() {}

func (x *PureAlert) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PureAlert.ProtoReflect.Descriptor instead.
func (*PureAlert) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{2}
}

func (x *PureAlert) GetArray() *PureArray {
	if x != nil {
		return x.Array
	}
	return nil
}

func (x *PureAlert) GetComponent() *PureComponent {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *PureAlert) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PureAlert) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PureAlert) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PureAlert) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *PureAlert) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *PureAlert) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PureAlert) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *PureAlert) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *PureAlert) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

// Empty Request
type PxMeteringStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxMeteringStatusRequest) Reset() {
	*x = PxMeteringStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxMeteringStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxMeteringStatusRequest) ProtoMessage() {}

func (x *PxMeteringStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxMeteringStatusRequest.ProtoReflect.Descriptor instead.
func (*PxMeteringStatusRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{3}
}

// Response containing the health status of the metering agent
type PxMeteringStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status is the high level status of telemetry
	Status *MeteringStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PxMeteringStatusResponse) Reset() {
	*x = PxMeteringStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxMeteringStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxMeteringStatusResponse) ProtoMessage() {}

func (x *PxMeteringStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxMeteringStatusResponse.ProtoReflect.Descriptor instead.
func (*PxMeteringStatusResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{4}
}

func (x *PxMeteringStatusResponse) GetStatus() *MeteringStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// MeteringStatus
type MeteringStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeteringAgentStatus bool `protobuf:"varint,1,opt,name=metering_agent_status,json=meteringAgentStatus,proto3" json:"metering_agent_status,omitempty"`
}

func (x *MeteringStatus) Reset() {
	*x = MeteringStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeteringStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeteringStatus) ProtoMessage() {}

func (x *MeteringStatus) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeteringStatus.ProtoReflect.Descriptor instead.
func (*MeteringStatus) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{5}
}

func (x *MeteringStatus) GetMeteringAgentStatus() bool {
	if x != nil {
		return x.MeteringAgentStatus
	}
	return false
}

// PxTelemetryCheck
type PxTelemetryCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status      string                   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Description string                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Message     string                   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Details     *PxTelemetryCheckDetails `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *PxTelemetryCheck) Reset() {
	*x = PxTelemetryCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxTelemetryCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxTelemetryCheck) ProtoMessage() {}

func (x *PxTelemetryCheck) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxTelemetryCheck.ProtoReflect.Descriptor instead.
func (*PxTelemetryCheck) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{6}
}

func (x *PxTelemetryCheck) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PxTelemetryCheck) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PxTelemetryCheck) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PxTelemetryCheck) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PxTelemetryCheck) GetDetails() *PxTelemetryCheckDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

// PxTelemetryCheckDetails
type PxTelemetryCheckDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname         string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ActivationPubKey string `protobuf:"bytes,2,opt,name=activation_pub_key,json=activationPubKey,proto3" json:"activation_pub_key,omitempty"`
	ProxyUrl         string `protobuf:"bytes,3,opt,name=proxy_url,json=proxyUrl,proto3" json:"proxy_url,omitempty"`
	Port             int64  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *PxTelemetryCheckDetails) Reset() {
	*x = PxTelemetryCheckDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxTelemetryCheckDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxTelemetryCheckDetails) ProtoMessage() {}

func (x *PxTelemetryCheckDetails) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxTelemetryCheckDetails.ProtoReflect.Descriptor instead.
func (*PxTelemetryCheckDetails) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{7}
}

func (x *PxTelemetryCheckDetails) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *PxTelemetryCheckDetails) GetActivationPubKey() string {
	if x != nil {
		return x.ActivationPubKey
	}
	return ""
}

func (x *PxTelemetryCheckDetails) GetProxyUrl() string {
	if x != nil {
		return x.ProxyUrl
	}
	return ""
}

func (x *PxTelemetryCheckDetails) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Telemetry objects
// https://wiki.purestorage.com/display/psw/CCM+Cloud+Connection+Troubleshooting+Endpoint+Design
type Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{8}
}

// TelemetryStatusResponse is what is returned in response of a CCM status/troubleshoot endpoint request
// Reference: https://github.dev.purestorage.com/CloudConnect/CCM/blob/trunk/status/src/main/java/com/purestorage/status/response/ConnectionInfoResponse.java
type TelemetryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *TelemetryStatus `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *TelemetryStatusResponse) Reset() {
	*x = TelemetryStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryStatusResponse) ProtoMessage() {}

func (x *TelemetryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryStatusResponse.ProtoReflect.Descriptor instead.
func (*TelemetryStatusResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{9}
}

func (x *TelemetryStatusResponse) GetResponse() *TelemetryStatus {
	if x != nil {
		return x.Response
	}
	return nil
}

type TelemetryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Environment variable indicating internal or external (staging vs production)
	Env string `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	// Product Name is the product name of this appliance.
	ProductName string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// Appliance Id  is the appliance id.
	ApplianceId string `protobuf:"bytes,3,opt,name=appliance_id,json=applianceId,proto3" json:"appliance_id,omitempty"`
	// Component is status of the component as identified by telemetry
	Component *TelemetryStatusComponent `protobuf:"bytes,4,opt,name=component,proto3" json:"component,omitempty"`
	// Ping is status of ping to arcus
	Ping *TelemetryCommonStatus `protobuf:"bytes,5,opt,name=ping,proto3" json:"ping,omitempty"`
	// Mediator is status of mediator between CCM and arcus
	Mediator *TelemetryCommonStatus `protobuf:"bytes,6,opt,name=mediator,proto3" json:"mediator,omitempty"`
	// ApplianceCert is status of the CCM appliance cert
	ApplianceCert *TelemetryCertStatus `protobuf:"bytes,7,opt,name=appliance_cert,json=applianceCert,proto3" json:"appliance_cert,omitempty"`
	// ReleaseCert is status of the CCM release cert
	ReleaseCert *TelemetryCertStatus `protobuf:"bytes,8,opt,name=release_cert,json=releaseCert,proto3" json:"release_cert,omitempty"`
	// ServerStatus is status of the CCM server itself
	ServerStatus *TelemetryServerStatus `protobuf:"bytes,9,opt,name=server_status,json=serverStatus,proto3" json:"server_status,omitempty"`
}

func (x *TelemetryStatus) Reset() {
	*x = TelemetryStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryStatus) ProtoMessage() {}

func (x *TelemetryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryStatus.ProtoReflect.Descriptor instead.
func (*TelemetryStatus) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{10}
}

func (x *TelemetryStatus) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *TelemetryStatus) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *TelemetryStatus) GetApplianceId() string {
	if x != nil {
		return x.ApplianceId
	}
	return ""
}

func (x *TelemetryStatus) GetComponent() *TelemetryStatusComponent {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *TelemetryStatus) GetPing() *TelemetryCommonStatus {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *TelemetryStatus) GetMediator() *TelemetryCommonStatus {
	if x != nil {
		return x.Mediator
	}
	return nil
}

func (x *TelemetryStatus) GetApplianceCert() *TelemetryCertStatus {
	if x != nil {
		return x.ApplianceCert
	}
	return nil
}

func (x *TelemetryStatus) GetReleaseCert() *TelemetryCertStatus {
	if x != nil {
		return x.ReleaseCert
	}
	return nil
}

func (x *TelemetryStatus) GetServerStatus() *TelemetryServerStatus {
	if x != nil {
		return x.ServerStatus
	}
	return nil
}

// TelemetryStatusComponent is data type for status of a telemetry component
// Reference: https://github.dev.purestorage.com/CloudConnect/CCM/blob/trunk/status/src/main/java/com/purestorage/status/response/ComponentDebugResponse.java
type TelemetryStatusComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is name of the component
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Hostname is the hostname of the node where it is running
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// LocalAddress of the component
	LocalAddress string `protobuf:"bytes,3,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
}

func (x *TelemetryStatusComponent) Reset() {
	*x = TelemetryStatusComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryStatusComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryStatusComponent) ProtoMessage() {}

func (x *TelemetryStatusComponent) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryStatusComponent.ProtoReflect.Descriptor instead.
func (*TelemetryStatusComponent) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{11}
}

func (x *TelemetryStatusComponent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TelemetryStatusComponent) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *TelemetryStatusComponent) GetLocalAddress() string {
	if x != nil {
		return x.LocalAddress
	}
	return ""
}

// TelemetryCommonStatus is a common data type that is returned for various statuses in the telemetry response
type TelemetryCommonStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status is status. Can be "SUCCESS", "ERROR" or "NOT_FOUND"
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Message is user friendly message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Path is an optional location of where the status component is stored
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *TelemetryCommonStatus) Reset() {
	*x = TelemetryCommonStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryCommonStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryCommonStatus) ProtoMessage() {}

func (x *TelemetryCommonStatus) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryCommonStatus.ProtoReflect.Descriptor instead.
func (*TelemetryCommonStatus) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{12}
}

func (x *TelemetryCommonStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TelemetryCommonStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TelemetryCommonStatus) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// TelemetryCertStatus is response structure for the certificate status
// Reference: https://github.dev.purestorage.com/CloudConnect/CCM/blob/trunk/core/src/main/java/com/purestorage/core/response/CertDebugResponse.java
type TelemetryCertStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Path           string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Version        string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	SerialNumber   string `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Issuer         string `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	SignatureAlg   string `protobuf:"bytes,6,opt,name=signature_alg,json=signatureAlg,proto3" json:"signature_alg,omitempty"`
	ExpirationDate string `protobuf:"bytes,7,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Subject        string `protobuf:"bytes,8,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *TelemetryCertStatus) Reset() {
	*x = TelemetryCertStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryCertStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryCertStatus) ProtoMessage() {}

func (x *TelemetryCertStatus) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryCertStatus.ProtoReflect.Descriptor instead.
func (*TelemetryCertStatus) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{13}
}

func (x *TelemetryCertStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TelemetryCertStatus) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TelemetryCertStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TelemetryCertStatus) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TelemetryCertStatus) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *TelemetryCertStatus) GetSignatureAlg() string {
	if x != nil {
		return x.SignatureAlg
	}
	return ""
}

func (x *TelemetryCertStatus) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *TelemetryCertStatus) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

// TelemetryServerStatus is response structure for status of the CCM telemetry server
// Reference: https://github.dev.purestorage.com/CloudConnect/CCM/blob/trunk/core/src/main/java/com/purestorage/core/response/ServerStatus.java
type TelemetryServerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerReady       bool   `protobuf:"varint,1,opt,name=server_ready,json=serverReady,proto3" json:"server_ready,omitempty"`
	LastLogUploadTime uint64 `protobuf:"varint,2,opt,name=last_log_upload_time,json=lastLogUploadTime,proto3" json:"last_log_upload_time,omitempty"`
	StartTime         string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	UptimeInSeconds   uint64 `protobuf:"varint,4,opt,name=uptimeInSeconds,proto3" json:"uptimeInSeconds,omitempty"`
}

func (x *TelemetryServerStatus) Reset() {
	*x = TelemetryServerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryServerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryServerStatus) ProtoMessage() {}

func (x *TelemetryServerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryServerStatus.ProtoReflect.Descriptor instead.
func (*TelemetryServerStatus) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{14}
}

func (x *TelemetryServerStatus) GetServerReady() bool {
	if x != nil {
		return x.ServerReady
	}
	return false
}

func (x *TelemetryServerStatus) GetLastLogUploadTime() uint64 {
	if x != nil {
		return x.LastLogUploadTime
	}
	return 0
}

func (x *TelemetryServerStatus) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TelemetryServerStatus) GetUptimeInSeconds() uint64 {
	if x != nil {
		return x.UptimeInSeconds
	}
	return 0
}

// TelemetryConnectionStatusResponse is what is returned in response of a CCM status/troubleshoot-cloud-connection endpoint
// request
// Reference: https://wiki.purestorage.com/display/psw/CCM+Cloud+Connection+Troubleshooting+Endpoint+Design
type TelemetryConnectionStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *TelemetryConnectionStatus `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *TelemetryConnectionStatusResponse) Reset() {
	*x = TelemetryConnectionStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryConnectionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryConnectionStatusResponse) ProtoMessage() {}

func (x *TelemetryConnectionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryConnectionStatusResponse.ProtoReflect.Descriptor instead.
func (*TelemetryConnectionStatusResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{15}
}

func (x *TelemetryConnectionStatusResponse) GetResponse() *TelemetryConnectionStatus {
	if x != nil {
		return x.Response
	}
	return nil
}

type TelemetryConnectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TelemetryVersion is the version of the ccm client.
	CcmVersion string `protobuf:"bytes,1,opt,name=ccm_version,json=ccmVersion,proto3" json:"ccm_version,omitempty"`
	// Environment variable indicating internal or external (staging vs production)
	Env string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	// Product Name is the product name of this appliance.
	ProductName string `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// Appliance Id  is the appliance id.
	ApplianceId string `protobuf:"bytes,4,opt,name=appliance_id,json=applianceId,proto3" json:"appliance_id,omitempty"`
	// CertTypeInUse is either appliance or release
	CertTypeInUse string `protobuf:"bytes,5,opt,name=cert_type_in_use,json=certTypeInUse,proto3" json:"cert_type_in_use,omitempty"`
	// Checks is an array of checks that were performed during the test.
	Checks []*PxTelemetryCheck `protobuf:"bytes,6,rep,name=checks,proto3" json:"checks,omitempty"`
	// Errorcode is the overal error code
	ErrorCode Telemetry_StatusCode `protobuf:"varint,7,opt,name=error_code,json=errorCode,proto3,enum=portworx.api.Telemetry_StatusCode" json:"error_code,omitempty"`
}

func (x *TelemetryConnectionStatus) Reset() {
	*x = TelemetryConnectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryConnectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryConnectionStatus) ProtoMessage() {}

func (x *TelemetryConnectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryConnectionStatus.ProtoReflect.Descriptor instead.
func (*TelemetryConnectionStatus) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{16}
}

func (x *TelemetryConnectionStatus) GetCcmVersion() string {
	if x != nil {
		return x.CcmVersion
	}
	return ""
}

func (x *TelemetryConnectionStatus) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *TelemetryConnectionStatus) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *TelemetryConnectionStatus) GetApplianceId() string {
	if x != nil {
		return x.ApplianceId
	}
	return ""
}

func (x *TelemetryConnectionStatus) GetCertTypeInUse() string {
	if x != nil {
		return x.CertTypeInUse
	}
	return ""
}

func (x *TelemetryConnectionStatus) GetChecks() []*PxTelemetryCheck {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *TelemetryConnectionStatus) GetErrorCode() Telemetry_StatusCode {
	if x != nil {
		return x.ErrorCode
	}
	return Telemetry_Unknown
}

// Empty Request
type PxTelemetryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxTelemetryStatusRequest) Reset() {
	*x = PxTelemetryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxTelemetryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxTelemetryStatusRequest) ProtoMessage() {}

func (x *PxTelemetryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxTelemetryStatusRequest.ProtoReflect.Descriptor instead.
func (*PxTelemetryStatusRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{17}
}

// Response containing the status of the Telemetry server
type PxTelemetryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status is the high level status of telemetry
	Status *TelemetryStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// ConnectionStatus is additional status regarding the connection of telemetry to remote arcus endpoint
	ConnectionStatus *TelemetryConnectionStatus `protobuf:"bytes,2,opt,name=connection_status,json=connectionStatus,proto3" json:"connection_status,omitempty"`
}

func (x *PxTelemetryStatusResponse) Reset() {
	*x = PxTelemetryStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxTelemetryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxTelemetryStatusResponse) ProtoMessage() {}

func (x *PxTelemetryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxTelemetryStatusResponse.ProtoReflect.Descriptor instead.
func (*PxTelemetryStatusResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{18}
}

func (x *PxTelemetryStatusResponse) GetStatus() *TelemetryStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PxTelemetryStatusResponse) GetConnectionStatus() *TelemetryConnectionStatus {
	if x != nil {
		return x.ConnectionStatus
	}
	return nil
}

// Maintenance objects
type Maintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Maintenance) Reset() {
	*x = Maintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Maintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maintenance) ProtoMessage() {}

func (x *Maintenance) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maintenance.ProtoReflect.Descriptor instead.
func (*Maintenance) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{19}
}

type CallHome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallHome) Reset() {
	*x = CallHome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHome) ProtoMessage() {}

func (x *CallHome) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHome.ProtoReflect.Descriptor instead.
func (*CallHome) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{20}
}

// Request to Update Maintenance Ops
type PxMaintenanceOpsUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of maintenance operation
	Operation Maintenance_OperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=portworx.api.Maintenance_OperationType" json:"operation,omitempty"`
}

func (x *PxMaintenanceOpsUpdateRequest) Reset() {
	*x = PxMaintenanceOpsUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxMaintenanceOpsUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxMaintenanceOpsUpdateRequest) ProtoMessage() {}

func (x *PxMaintenanceOpsUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxMaintenanceOpsUpdateRequest.ProtoReflect.Descriptor instead.
func (*PxMaintenanceOpsUpdateRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{21}
}

func (x *PxMaintenanceOpsUpdateRequest) GetOperation() Maintenance_OperationType {
	if x != nil {
		return x.Operation
	}
	return Maintenance_Unknown
}

// Response to Update Maintenance Ops
type PxMaintenanceOpsUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxMaintenanceOpsUpdateResponse) Reset() {
	*x = PxMaintenanceOpsUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxMaintenanceOpsUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxMaintenanceOpsUpdateResponse) ProtoMessage() {}

func (x *PxMaintenanceOpsUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxMaintenanceOpsUpdateResponse.ProtoReflect.Descriptor instead.
func (*PxMaintenanceOpsUpdateResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{22}
}

// Request to Update CallHome feature
type PxCallHomeUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of CallHome operation
	Operation CallHome_OperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=portworx.api.CallHome_OperationType" json:"operation,omitempty"`
}

func (x *PxCallHomeUpdateRequest) Reset() {
	*x = PxCallHomeUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxCallHomeUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxCallHomeUpdateRequest) ProtoMessage() {}

func (x *PxCallHomeUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxCallHomeUpdateRequest.ProtoReflect.Descriptor instead.
func (*PxCallHomeUpdateRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{23}
}

func (x *PxCallHomeUpdateRequest) GetOperation() CallHome_OperationType {
	if x != nil {
		return x.Operation
	}
	return CallHome_Unknown
}

// Response to Update CallHome mode
type PxCallHomeUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxCallHomeUpdateResponse) Reset() {
	*x = PxCallHomeUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxCallHomeUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxCallHomeUpdateResponse) ProtoMessage() {}

func (x *PxCallHomeUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxCallHomeUpdateResponse.ProtoReflect.Descriptor instead.
func (*PxCallHomeUpdateResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{24}
}

// Request for audit method.
type PxAuditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxAuditRequest) Reset() {
	*x = PxAuditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxAuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxAuditRequest) ProtoMessage() {}

func (x *PxAuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxAuditRequest.ProtoReflect.Descriptor instead.
func (*PxAuditRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{25}
}

// Audit result object.
type AuditResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error String while getting audit result.
	Err string `protobuf:"bytes,1,opt,name=Err,proto3" json:"Err,omitempty"`
	// source of the audit.
	AuditSource string `protobuf:"bytes,2,opt,name=AuditSource,proto3" json:"AuditSource,omitempty"`
	// status of the audit.
	// AuditStatus will be one of the value from ["green", "yellow", "red"].
	AuditStatus string `protobuf:"bytes,3,opt,name=AuditStatus,proto3" json:"AuditStatus,omitempty"`
	// Audit message.
	AuditMessage string `protobuf:"bytes,4,opt,name=AuditMessage,proto3" json:"AuditMessage,omitempty"`
}

func (x *AuditResult) Reset() {
	*x = AuditResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditResult) ProtoMessage() {}

func (x *AuditResult) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditResult.ProtoReflect.Descriptor instead.
func (*AuditResult) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{26}
}

func (x *AuditResult) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *AuditResult) GetAuditSource() string {
	if x != nil {
		return x.AuditSource
	}
	return ""
}

func (x *AuditResult) GetAuditStatus() string {
	if x != nil {
		return x.AuditStatus
	}
	return ""
}

func (x *AuditResult) GetAuditMessage() string {
	if x != nil {
		return x.AuditMessage
	}
	return ""
}

// Response message for audit method.
type PxAuditResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AuditResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *PxAuditResponse) Reset() {
	*x = PxAuditResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxAuditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxAuditResponse) ProtoMessage() {}

func (x *PxAuditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxAuditResponse.ProtoReflect.Descriptor instead.
func (*PxAuditResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{27}
}

func (x *PxAuditResponse) GetResults() []*AuditResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// emailconfig object for alert.
type EmailConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username to authenticate with smtp-server
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// password to authenticate with smtp-server
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// ip or dns name for smtp server
	ServerHost string `protobuf:"bytes,3,opt,name=server_host,json=serverHost,proto3" json:"server_host,omitempty"`
	// port for smtp server
	ServerPort string `protobuf:"bytes,4,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	// recipient of alert emails
	Recipient string `protobuf:"bytes,5,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// notify status
	Notify bool `protobuf:"varint,6,opt,name=notify,proto3" json:"notify,omitempty"`
	// minimum severity for email trigger
	// it can be one of severity_type_alarm and severity_type_warning
	// from openstorage.api.severitytype enum values.
	Severity api.SeverityType `protobuf:"varint,7,opt,name=severity,proto3,enum=openstorage.api.SeverityType" json:"severity,omitempty"`
	// version string to help implement encryption when upgrading
	Version string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	//  sender of alert emails
	Sender string `protobuf:"bytes,9,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (x *EmailConfig) Reset() {
	*x = EmailConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailConfig) ProtoMessage() {}

func (x *EmailConfig) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailConfig.ProtoReflect.Descriptor instead.
func (*EmailConfig) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{28}
}

func (x *EmailConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EmailConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *EmailConfig) GetServerHost() string {
	if x != nil {
		return x.ServerHost
	}
	return ""
}

func (x *EmailConfig) GetServerPort() string {
	if x != nil {
		return x.ServerPort
	}
	return ""
}

func (x *EmailConfig) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *EmailConfig) GetNotify() bool {
	if x != nil {
		return x.Notify
	}
	return false
}

func (x *EmailConfig) GetSeverity() api.SeverityType {
	if x != nil {
		return x.Severity
	}
	return api.SeverityType_SEVERITY_TYPE_NONE
}

func (x *EmailConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *EmailConfig) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

// response message
type KvdbEndPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndPoint         string   `protobuf:"bytes,1,opt,name=end_point,json=endPoint,proto3" json:"end_point,omitempty"`
	SslSubject       string   `protobuf:"bytes,2,opt,name=ssl_subject,json=sslSubject,proto3" json:"ssl_subject,omitempty"`
	SslExpires       string   `protobuf:"bytes,3,opt,name=ssl_expires,json=sslExpires,proto3" json:"ssl_expires,omitempty"`
	SslIssuerSubject []string `protobuf:"bytes,4,rep,name=ssl_issuer_subject,json=sslIssuerSubject,proto3" json:"ssl_issuer_subject,omitempty"`
}

func (x *KvdbEndPoints) Reset() {
	*x = KvdbEndPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvdbEndPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvdbEndPoints) ProtoMessage() {}

func (x *KvdbEndPoints) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvdbEndPoints.ProtoReflect.Descriptor instead.
func (*KvdbEndPoints) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{29}
}

func (x *KvdbEndPoints) GetEndPoint() string {
	if x != nil {
		return x.EndPoint
	}
	return ""
}

func (x *KvdbEndPoints) GetSslSubject() string {
	if x != nil {
		return x.SslSubject
	}
	return ""
}

func (x *KvdbEndPoints) GetSslExpires() string {
	if x != nil {
		return x.SslExpires
	}
	return ""
}

func (x *KvdbEndPoints) GetSslIssuerSubject() []string {
	if x != nil {
		return x.SslIssuerSubject
	}
	return nil
}

// kvdb member info
type KvdbMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerUrls   []string `protobuf:"bytes,1,rep,name=peer_urls,json=peerUrls,proto3" json:"peer_urls,omitempty"`
	ClientUrls []string `protobuf:"bytes,2,rep,name=client_urls,json=clientUrls,proto3" json:"client_urls,omitempty"`
	Leader     bool     `protobuf:"varint,3,opt,name=leader,proto3" json:"leader,omitempty"`
	DbSize     int64    `protobuf:"varint,4,opt,name=db_size,json=dbSize,proto3" json:"db_size,omitempty"`
	IsHealthy  bool     `protobuf:"varint,5,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty"`
	Id         string   `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KvdbMemberInfo) Reset() {
	*x = KvdbMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvdbMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvdbMemberInfo) ProtoMessage() {}

func (x *KvdbMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvdbMemberInfo.ProtoReflect.Descriptor instead.
func (*KvdbMemberInfo) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{30}
}

func (x *KvdbMemberInfo) GetPeerUrls() []string {
	if x != nil {
		return x.PeerUrls
	}
	return nil
}

func (x *KvdbMemberInfo) GetClientUrls() []string {
	if x != nil {
		return x.ClientUrls
	}
	return nil
}

func (x *KvdbMemberInfo) GetLeader() bool {
	if x != nil {
		return x.Leader
	}
	return false
}

func (x *KvdbMemberInfo) GetDbSize() int64 {
	if x != nil {
		return x.DbSize
	}
	return 0
}

func (x *KvdbMemberInfo) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

func (x *KvdbMemberInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// request message to set email config for alert
type PxSetEmailConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailConfig *EmailConfig `protobuf:"bytes,1,opt,name=email_config,json=emailConfig,proto3" json:"email_config,omitempty"`
}

func (x *PxSetEmailConfigRequest) Reset() {
	*x = PxSetEmailConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxSetEmailConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxSetEmailConfigRequest) ProtoMessage() {}

func (x *PxSetEmailConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxSetEmailConfigRequest.ProtoReflect.Descriptor instead.
func (*PxSetEmailConfigRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{31}
}

func (x *PxSetEmailConfigRequest) GetEmailConfig() *EmailConfig {
	if x != nil {
		return x.EmailConfig
	}
	return nil
}

// response message to set email config for alert
type PxSetEmailConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxSetEmailConfigResponse) Reset() {
	*x = PxSetEmailConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxSetEmailConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxSetEmailConfigResponse) ProtoMessage() {}

func (x *PxSetEmailConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxSetEmailConfigResponse.ProtoReflect.Descriptor instead.
func (*PxSetEmailConfigResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{32}
}

// request message to get email config for alert
type PxGetEmailConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxGetEmailConfigRequest) Reset() {
	*x = PxGetEmailConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxGetEmailConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxGetEmailConfigRequest) ProtoMessage() {}

func (x *PxGetEmailConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxGetEmailConfigRequest.ProtoReflect.Descriptor instead.
func (*PxGetEmailConfigRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{33}
}

// response message to get email config for alert
type PxGetEmailConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailConfig *EmailConfig `protobuf:"bytes,1,opt,name=email_config,json=emailConfig,proto3" json:"email_config,omitempty"`
}

func (x *PxGetEmailConfigResponse) Reset() {
	*x = PxGetEmailConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxGetEmailConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxGetEmailConfigResponse) ProtoMessage() {}

func (x *PxGetEmailConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxGetEmailConfigResponse.ProtoReflect.Descriptor instead.
func (*PxGetEmailConfigResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{34}
}

func (x *PxGetEmailConfigResponse) GetEmailConfig() *EmailConfig {
	if x != nil {
		return x.EmailConfig
	}
	return nil
}

// request message to delete email config for alert
type PxDeleteEmailConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxDeleteEmailConfigRequest) Reset() {
	*x = PxDeleteEmailConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDeleteEmailConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDeleteEmailConfigRequest) ProtoMessage() {}

func (x *PxDeleteEmailConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDeleteEmailConfigRequest.ProtoReflect.Descriptor instead.
func (*PxDeleteEmailConfigRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{35}
}

// response message to delete email config for alert
type PxDeleteEmailConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxDeleteEmailConfigResponse) Reset() {
	*x = PxDeleteEmailConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDeleteEmailConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDeleteEmailConfigResponse) ProtoMessage() {}

func (x *PxDeleteEmailConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDeleteEmailConfigResponse.ProtoReflect.Descriptor instead.
func (*PxDeleteEmailConfigResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{36}
}

// slackconfig object for alert.
type SlackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// webhook to talk to
	Webhookurl string `protobuf:"bytes,1,opt,name=webhookurl,proto3" json:"webhookurl,omitempty"`
	// minimum severity for slack trigger
	// it can be one of severity_type_alarm and severity_type_warning
	// from openstorage.api.severitytype enum values.
	Severity api.SeverityType `protobuf:"varint,7,opt,name=severity,proto3,enum=openstorage.api.SeverityType" json:"severity,omitempty"`
}

func (x *SlackConfig) Reset() {
	*x = SlackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackConfig) ProtoMessage() {}

func (x *SlackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackConfig.ProtoReflect.Descriptor instead.
func (*SlackConfig) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{37}
}

func (x *SlackConfig) GetWebhookurl() string {
	if x != nil {
		return x.Webhookurl
	}
	return ""
}

func (x *SlackConfig) GetSeverity() api.SeverityType {
	if x != nil {
		return x.Severity
	}
	return api.SeverityType_SEVERITY_TYPE_NONE
}

// request message to set slack config for alert
type PxSetSlackConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlackConfig *SlackConfig `protobuf:"bytes,1,opt,name=slack_config,json=slackConfig,proto3" json:"slack_config,omitempty"`
}

func (x *PxSetSlackConfigRequest) Reset() {
	*x = PxSetSlackConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxSetSlackConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxSetSlackConfigRequest) ProtoMessage() {}

func (x *PxSetSlackConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxSetSlackConfigRequest.ProtoReflect.Descriptor instead.
func (*PxSetSlackConfigRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{38}
}

func (x *PxSetSlackConfigRequest) GetSlackConfig() *SlackConfig {
	if x != nil {
		return x.SlackConfig
	}
	return nil
}

// response message to set slack config for alert
type PxSetSlackConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxSetSlackConfigResponse) Reset() {
	*x = PxSetSlackConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxSetSlackConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxSetSlackConfigResponse) ProtoMessage() {}

func (x *PxSetSlackConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxSetSlackConfigResponse.ProtoReflect.Descriptor instead.
func (*PxSetSlackConfigResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{39}
}

// request message to delete slack config for alert
type PxDeleteSlackConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxDeleteSlackConfigRequest) Reset() {
	*x = PxDeleteSlackConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDeleteSlackConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDeleteSlackConfigRequest) ProtoMessage() {}

func (x *PxDeleteSlackConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDeleteSlackConfigRequest.ProtoReflect.Descriptor instead.
func (*PxDeleteSlackConfigRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{40}
}

// response message to delete slack config for alert
type PxDeleteSlackConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxDeleteSlackConfigResponse) Reset() {
	*x = PxDeleteSlackConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDeleteSlackConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDeleteSlackConfigResponse) ProtoMessage() {}

func (x *PxDeleteSlackConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDeleteSlackConfigResponse.ProtoReflect.Descriptor instead.
func (*PxDeleteSlackConfigResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{41}
}

// request message to get slack config for alert
type PxGetSlackConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxGetSlackConfigRequest) Reset() {
	*x = PxGetSlackConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxGetSlackConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxGetSlackConfigRequest) ProtoMessage() {}

func (x *PxGetSlackConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxGetSlackConfigRequest.ProtoReflect.Descriptor instead.
func (*PxGetSlackConfigRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{42}
}

// response message to get slack config for alert
type PxGetSlackConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlackConfig *SlackConfig `protobuf:"bytes,1,opt,name=slack_config,json=slackConfig,proto3" json:"slack_config,omitempty"`
}

func (x *PxGetSlackConfigResponse) Reset() {
	*x = PxGetSlackConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxGetSlackConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxGetSlackConfigResponse) ProtoMessage() {}

func (x *PxGetSlackConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxGetSlackConfigResponse.ProtoReflect.Descriptor instead.
func (*PxGetSlackConfigResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{43}
}

func (x *PxGetSlackConfigResponse) GetSlackConfig() *SlackConfig {
	if x != nil {
		return x.SlackConfig
	}
	return nil
}

// Request message to exit or stop Px daemon.
type PxExitDaemonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxExitDaemonRequest) Reset() {
	*x = PxExitDaemonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxExitDaemonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxExitDaemonRequest) ProtoMessage() {}

func (x *PxExitDaemonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxExitDaemonRequest.ProtoReflect.Descriptor instead.
func (*PxExitDaemonRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{44}
}

// Response message to exit or stop Px daemon.
type PxExitDaemonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxExitDaemonResponse) Reset() {
	*x = PxExitDaemonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxExitDaemonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxExitDaemonResponse) ProtoMessage() {}

func (x *PxExitDaemonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxExitDaemonResponse.ProtoReflect.Descriptor instead.
func (*PxExitDaemonResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{45}
}

// Request message for fetching kvdb endpoints
type PxKvdbEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxKvdbEndpointRequest) Reset() {
	*x = PxKvdbEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxKvdbEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxKvdbEndpointRequest) ProtoMessage() {}

func (x *PxKvdbEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxKvdbEndpointRequest.ProtoReflect.Descriptor instead.
func (*PxKvdbEndpointRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{46}
}

// Response message for fetching kvdb endpoints
type PxKvdbEndpointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KvdbEndPoints []*KvdbEndPoints `protobuf:"bytes,1,rep,name=kvdb_end_points,json=kvdbEndPoints,proto3" json:"kvdb_end_points,omitempty"`
}

func (x *PxKvdbEndpointResponse) Reset() {
	*x = PxKvdbEndpointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxKvdbEndpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxKvdbEndpointResponse) ProtoMessage() {}

func (x *PxKvdbEndpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxKvdbEndpointResponse.ProtoReflect.Descriptor instead.
func (*PxKvdbEndpointResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{47}
}

func (x *PxKvdbEndpointResponse) GetKvdbEndPoints() []*KvdbEndPoints {
	if x != nil {
		return x.KvdbEndPoints
	}
	return nil
}

// Pool cache enable/disable request.
type PxToggleStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pool ID
	PoolId int64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// defines Storage Pool Cache status
	Enable bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *PxToggleStatusRequest) Reset() {
	*x = PxToggleStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxToggleStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxToggleStatusRequest) ProtoMessage() {}

func (x *PxToggleStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxToggleStatusRequest.ProtoReflect.Descriptor instead.
func (*PxToggleStatusRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{48}
}

func (x *PxToggleStatusRequest) GetPoolId() int64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *PxToggleStatusRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

// Pool cache enable/disable response.
type PxToggleStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: should we carry this message?
	// cache is supported only by lvm driver and in case of successful cache attachment
	// it just returns "successful" string, we can just generate it if there is no error
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PxToggleStatusResponse) Reset() {
	*x = PxToggleStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxToggleStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxToggleStatusResponse) ProtoMessage() {}

func (x *PxToggleStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxToggleStatusResponse.ProtoReflect.Descriptor instead.
func (*PxToggleStatusResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{49}
}

func (x *PxToggleStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Pool cache info request.
type PxCacheInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pool ID
	PoolId int64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (x *PxCacheInfoRequest) Reset() {
	*x = PxCacheInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxCacheInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxCacheInfoRequest) ProtoMessage() {}

func (x *PxCacheInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxCacheInfoRequest.ProtoReflect.Descriptor instead.
func (*PxCacheInfoRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{50}
}

func (x *PxCacheInfoRequest) GetPoolId() int64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

// Pool cache info response.
type PxCacheInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CacheInfo `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *PxCacheInfoResponse) Reset() {
	*x = PxCacheInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxCacheInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxCacheInfoResponse) ProtoMessage() {}

func (x *PxCacheInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxCacheInfoResponse.ProtoReflect.Descriptor instead.
func (*PxCacheInfoResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{51}
}

func (x *PxCacheInfoResponse) GetResult() *CacheInfo {
	if x != nil {
		return x.Result
	}
	return nil
}

// CacheInfo provides statistics and config params of a cached lvm lv
type CacheInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pool is the pool id for which caching is attached to
	// TODO: it is better to name it pool_id but it is remained unchanged
	Pool int64 `protobuf:"varint,1,opt,name=pool,proto3" json:"pool,omitempty"`
	// members lists all the cache devices used for caching
	Members []string `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	// enabled flags whether the cache is attached and active or detached
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// cache_total_blocks total cache blocks
	CacheTotalBlocks uint64 `protobuf:"varint,4,opt,name=cache_total_blocks,json=cacheTotalBlocks,proto3" json:"cache_total_blocks,omitempty"`
	// cache_used_blocks used cache blocks
	CacheUsedBlocks uint64 `protobuf:"varint,5,opt,name=cache_used_blocks,json=cacheUsedBlocks,proto3" json:"cache_used_blocks,omitempty"`
	// cache_dirty_blocks dirty cache blocks
	CacheDirtyBlocks uint64 `protobuf:"varint,6,opt,name=cache_dirty_blocks,json=cacheDirtyBlocks,proto3" json:"cache_dirty_blocks,omitempty"`
	// cache_read_hits read hits
	CacheReadHits uint64 `protobuf:"varint,7,opt,name=cache_read_hits,json=cacheReadHits,proto3" json:"cache_read_hits,omitempty"`
	// cache_read_misses read misses
	CacheReadMisses uint64 `protobuf:"varint,8,opt,name=cache_read_misses,json=cacheReadMisses,proto3" json:"cache_read_misses,omitempty"`
	// cache_write_hits write hits
	CacheWriteHits uint64 `protobuf:"varint,9,opt,name=cache_write_hits,json=cacheWriteHits,proto3" json:"cache_write_hits,omitempty"`
	// cache_write_misses write miss
	CacheWriteMisses uint64 `protobuf:"varint,10,opt,name=cache_write_misses,json=cacheWriteMisses,proto3" json:"cache_write_misses,omitempty"`
	// cache_chunk_size is the configured cache block size
	CacheChunkSize uint64 `protobuf:"varint,11,opt,name=cache_chunk_size,json=cacheChunkSize,proto3" json:"cache_chunk_size,omitempty"`
	// cache_mode is writeback, writethrough etc
	Cachemode string `protobuf:"bytes,12,opt,name=cachemode,proto3" json:"cachemode,omitempty"`
	// cache_policy is more internal config param, mq, smq etc
	CachePolicy string `protobuf:"bytes,13,opt,name=cache_policy,json=cachePolicy,proto3" json:"cache_policy,omitempty"`
	// cache_settings is additional config param, for the assigned policy
	CacheSettings string `protobuf:"bytes,14,opt,name=cache_settings,json=cacheSettings,proto3" json:"cache_settings,omitempty"`
	// migration stats
	// migrate_promote is count of blocks promoted to cache
	CachePromotion uint64 `protobuf:"varint,15,opt,name=cache_promotion,json=cachePromotion,proto3" json:"cache_promotion,omitempty"`
	// migrate_demote is count of blocks demoted from cache
	CacheDemotion uint64 `protobuf:"varint,16,opt,name=cache_demotion,json=cacheDemotion,proto3" json:"cache_demotion,omitempty"`
	// cache approx internal IO bandwidth
	CacheIoMbps uint64 `protobuf:"varint,17,opt,name=cache_io_mbps,json=cacheIoMbps,proto3" json:"cache_io_mbps,omitempty"`
	// current cache state
	DirtyState string `protobuf:"bytes,18,opt,name=dirty_state,json=dirtyState,proto3" json:"dirty_state,omitempty"`
	// auto tune enabled
	AutoTune bool `protobuf:"varint,19,opt,name=auto_tune,json=autoTune,proto3" json:"auto_tune,omitempty"`
	// min dirty block threshold
	MinDirtyThreshold uint32 `protobuf:"varint,20,opt,name=min_dirty_threshold,json=minDirtyThreshold,proto3" json:"min_dirty_threshold,omitempty"`
	// max dirty block threshold
	MaxDirtyThreshold uint32 `protobuf:"varint,21,opt,name=max_dirty_threshold,json=maxDirtyThreshold,proto3" json:"max_dirty_threshold,omitempty"`
}

func (x *CacheInfo) Reset() {
	*x = CacheInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheInfo) ProtoMessage() {}

func (x *CacheInfo) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheInfo.ProtoReflect.Descriptor instead.
func (*CacheInfo) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{52}
}

func (x *CacheInfo) GetPool() int64 {
	if x != nil {
		return x.Pool
	}
	return 0
}

func (x *CacheInfo) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CacheInfo) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CacheInfo) GetCacheTotalBlocks() uint64 {
	if x != nil {
		return x.CacheTotalBlocks
	}
	return 0
}

func (x *CacheInfo) GetCacheUsedBlocks() uint64 {
	if x != nil {
		return x.CacheUsedBlocks
	}
	return 0
}

func (x *CacheInfo) GetCacheDirtyBlocks() uint64 {
	if x != nil {
		return x.CacheDirtyBlocks
	}
	return 0
}

func (x *CacheInfo) GetCacheReadHits() uint64 {
	if x != nil {
		return x.CacheReadHits
	}
	return 0
}

func (x *CacheInfo) GetCacheReadMisses() uint64 {
	if x != nil {
		return x.CacheReadMisses
	}
	return 0
}

func (x *CacheInfo) GetCacheWriteHits() uint64 {
	if x != nil {
		return x.CacheWriteHits
	}
	return 0
}

func (x *CacheInfo) GetCacheWriteMisses() uint64 {
	if x != nil {
		return x.CacheWriteMisses
	}
	return 0
}

func (x *CacheInfo) GetCacheChunkSize() uint64 {
	if x != nil {
		return x.CacheChunkSize
	}
	return 0
}

func (x *CacheInfo) GetCachemode() string {
	if x != nil {
		return x.Cachemode
	}
	return ""
}

func (x *CacheInfo) GetCachePolicy() string {
	if x != nil {
		return x.CachePolicy
	}
	return ""
}

func (x *CacheInfo) GetCacheSettings() string {
	if x != nil {
		return x.CacheSettings
	}
	return ""
}

func (x *CacheInfo) GetCachePromotion() uint64 {
	if x != nil {
		return x.CachePromotion
	}
	return 0
}

func (x *CacheInfo) GetCacheDemotion() uint64 {
	if x != nil {
		return x.CacheDemotion
	}
	return 0
}

func (x *CacheInfo) GetCacheIoMbps() uint64 {
	if x != nil {
		return x.CacheIoMbps
	}
	return 0
}

func (x *CacheInfo) GetDirtyState() string {
	if x != nil {
		return x.DirtyState
	}
	return ""
}

func (x *CacheInfo) GetAutoTune() bool {
	if x != nil {
		return x.AutoTune
	}
	return false
}

func (x *CacheInfo) GetMinDirtyThreshold() uint32 {
	if x != nil {
		return x.MinDirtyThreshold
	}
	return 0
}

func (x *CacheInfo) GetMaxDirtyThreshold() uint32 {
	if x != nil {
		return x.MaxDirtyThreshold
	}
	return 0
}

// Request message for ferching kvdb member info
type PxKvdbMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxKvdbMemberRequest) Reset() {
	*x = PxKvdbMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxKvdbMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxKvdbMemberRequest) ProtoMessage() {}

func (x *PxKvdbMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxKvdbMemberRequest.ProtoReflect.Descriptor instead.
func (*PxKvdbMemberRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{53}
}

// Response message for ferching kvdb member info
type PxKvdbMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Here string is the node id.
	KvdbMemberInfo map[string]*KvdbMemberInfo `protobuf:"bytes,1,rep,name=kvdb_member_info,json=kvdbMemberInfo,proto3" json:"kvdb_member_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PxKvdbMemberResponse) Reset() {
	*x = PxKvdbMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxKvdbMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxKvdbMemberResponse) ProtoMessage() {}

func (x *PxKvdbMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxKvdbMemberResponse.ProtoReflect.Descriptor instead.
func (*PxKvdbMemberResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{54}
}

func (x *PxKvdbMemberResponse) GetKvdbMemberInfo() map[string]*KvdbMemberInfo {
	if x != nil {
		return x.KvdbMemberInfo
	}
	return nil
}

// PxCacheConfigRequest carries cache parameters to set
type PxCacheConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *CacheConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *PxCacheConfigRequest) Reset() {
	*x = PxCacheConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxCacheConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxCacheConfigRequest) ProtoMessage() {}

func (x *PxCacheConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxCacheConfigRequest.ProtoReflect.Descriptor instead.
func (*PxCacheConfigRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{55}
}

func (x *PxCacheConfigRequest) GetConfig() *CacheConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// PxCacheConfigResponse returns current CacheInfo entity which was updated by PxCacheConfigRequest
type PxCacheConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CacheInfo `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *PxCacheConfigResponse) Reset() {
	*x = PxCacheConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxCacheConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxCacheConfigResponse) ProtoMessage() {}

func (x *PxCacheConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxCacheConfigResponse.ProtoReflect.Descriptor instead.
func (*PxCacheConfigResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{56}
}

func (x *PxCacheConfigResponse) GetResult() *CacheInfo {
	if x != nil {
		return x.Result
	}
	return nil
}

// CacheConfig represents modifiable cache config parameters
// TODO: try to think over option of embedding CacheConfig into CacheInfo
type CacheConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pool is the pool id for which caching is attached to
	PoolId int64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// cache_mode is writeback, writethrough etc
	Cachemode string `protobuf:"bytes,2,opt,name=cachemode,proto3" json:"cachemode,omitempty"`
	// cache_chunk_size is the configured cache block size
	CacheChunkSize uint64 `protobuf:"varint,3,opt,name=cache_chunk_size,json=cacheChunkSize,proto3" json:"cache_chunk_size,omitempty"`
	// cache_policy is more internal config param, mq, smq etc
	CachePolicy string `protobuf:"bytes,4,opt,name=cache_policy,json=cachePolicy,proto3" json:"cache_policy,omitempty"`
	// cache_settings is additional config param, for the assigned policy
	CacheSettings string `protobuf:"bytes,5,opt,name=cache_settings,json=cacheSettings,proto3" json:"cache_settings,omitempty"`
}

func (x *CacheConfig) Reset() {
	*x = CacheConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheConfig) ProtoMessage() {}

func (x *CacheConfig) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheConfig.ProtoReflect.Descriptor instead.
func (*CacheConfig) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{57}
}

func (x *CacheConfig) GetPoolId() int64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *CacheConfig) GetCachemode() string {
	if x != nil {
		return x.Cachemode
	}
	return ""
}

func (x *CacheConfig) GetCacheChunkSize() uint64 {
	if x != nil {
		return x.CacheChunkSize
	}
	return 0
}

func (x *CacheConfig) GetCachePolicy() string {
	if x != nil {
		return x.CachePolicy
	}
	return ""
}

func (x *CacheConfig) GetCacheSettings() string {
	if x != nil {
		return x.CacheSettings
	}
	return ""
}

type CacheFlush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CacheFlush) Reset() {
	*x = CacheFlush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheFlush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheFlush) ProtoMessage() {}

func (x *CacheFlush) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheFlush.ProtoReflect.Descriptor instead.
func (*CacheFlush) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{58}
}

// PxCacheFlushRequest message to carry cache flush operation
type PxCacheFlushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pool ID
	PoolId int64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// CacheFlush operation
	Operation CacheFlush_OperationType `protobuf:"varint,2,opt,name=operation,proto3,enum=portworx.api.CacheFlush_OperationType" json:"operation,omitempty"`
}

func (x *PxCacheFlushRequest) Reset() {
	*x = PxCacheFlushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxCacheFlushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxCacheFlushRequest) ProtoMessage() {}

func (x *PxCacheFlushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxCacheFlushRequest.ProtoReflect.Descriptor instead.
func (*PxCacheFlushRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{59}
}

func (x *PxCacheFlushRequest) GetPoolId() int64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *PxCacheFlushRequest) GetOperation() CacheFlush_OperationType {
	if x != nil {
		return x.Operation
	}
	return CacheFlush_Unknown
}

// PxCacheFlushResponse returns message
type PxCacheFlushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// driver message
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PxCacheFlushResponse) Reset() {
	*x = PxCacheFlushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxCacheFlushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxCacheFlushResponse) ProtoMessage() {}

func (x *PxCacheFlushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxCacheFlushResponse.ProtoReflect.Descriptor instead.
func (*PxCacheFlushResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{60}
}

func (x *PxCacheFlushResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// PxPoolUpdateRequest contains Storage Pool parameters to set
type PxPoolUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of Pool to update
	PoolId int64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// pool priority to set
	Priority PoolPriority `protobuf:"varint,2,opt,name=priority,proto3,enum=portworx.api.PoolPriority" json:"priority,omitempty"`
	// pool labels to update
	Labels *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=labels,proto3" json:"labels,omitempty"`
	// if true it resizes a pool to the max possible size
	Resize bool `protobuf:"varint,4,opt,name=resize,proto3" json:"resize,omitempty"`
	// removes info about the most recent operation being performed on a storage pool
	ResetLastOperation bool `protobuf:"varint,5,opt,name=reset_last_operation,json=resetLastOperation,proto3" json:"reset_last_operation,omitempty"`
	// if true it allows deprecated pool update requests
	SkipDeprecation bool `protobuf:"varint,6,opt,name=skip_deprecation,json=skipDeprecation,proto3" json:"skip_deprecation,omitempty"`
}

func (x *PxPoolUpdateRequest) Reset() {
	*x = PxPoolUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxPoolUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxPoolUpdateRequest) ProtoMessage() {}

func (x *PxPoolUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxPoolUpdateRequest.ProtoReflect.Descriptor instead.
func (*PxPoolUpdateRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{61}
}

func (x *PxPoolUpdateRequest) GetPoolId() int64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *PxPoolUpdateRequest) GetPriority() PoolPriority {
	if x != nil {
		return x.Priority
	}
	return PoolPriority_Unknown
}

func (x *PxPoolUpdateRequest) GetLabels() *wrapperspb.StringValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PxPoolUpdateRequest) GetResize() bool {
	if x != nil {
		return x.Resize
	}
	return false
}

func (x *PxPoolUpdateRequest) GetResetLastOperation() bool {
	if x != nil {
		return x.ResetLastOperation
	}
	return false
}

func (x *PxPoolUpdateRequest) GetSkipDeprecation() bool {
	if x != nil {
		return x.SkipDeprecation
	}
	return false
}

type PxPoolUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxPoolUpdateResponse) Reset() {
	*x = PxPoolUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxPoolUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxPoolUpdateResponse) ProtoMessage() {}

func (x *PxPoolUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxPoolUpdateResponse.ProtoReflect.Descriptor instead.
func (*PxPoolUpdateResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{62}
}

type DeviceScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceScan) Reset() {
	*x = DeviceScan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceScan) ProtoMessage() {}

func (x *DeviceScan) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceScan.ProtoReflect.Descriptor instead.
func (*DeviceScan) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{63}
}

type PxDeviceScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation DeviceScan_OperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=portworx.api.DeviceScan_OperationType" json:"operation,omitempty"`
}

func (x *PxDeviceScanRequest) Reset() {
	*x = PxDeviceScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDeviceScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDeviceScanRequest) ProtoMessage() {}

func (x *PxDeviceScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDeviceScanRequest.ProtoReflect.Descriptor instead.
func (*PxDeviceScanRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{64}
}

func (x *PxDeviceScanRequest) GetOperation() DeviceScan_OperationType {
	if x != nil {
		return x.Operation
	}
	return DeviceScan_UnknownOperation
}

// PxScanStatus message carries scan results
type PxScanStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result of last completed device scan
	LastScan string `protobuf:"bytes,1,opt,name=last_scan,json=lastScan,proto3" json:"last_scan,omitempty"`
	// status of currently running scan, if any
	RunningScan string `protobuf:"bytes,2,opt,name=running_scan,json=runningScan,proto3" json:"running_scan,omitempty"`
}

func (x *PxScanStatus) Reset() {
	*x = PxScanStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxScanStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxScanStatus) ProtoMessage() {}

func (x *PxScanStatus) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxScanStatus.ProtoReflect.Descriptor instead.
func (*PxScanStatus) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{65}
}

func (x *PxScanStatus) GetLastScan() string {
	if x != nil {
		return x.LastScan
	}
	return ""
}

func (x *PxScanStatus) GetRunningScan() string {
	if x != nil {
		return x.RunningScan
	}
	return ""
}

type PxDeviceScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result DeviceScan_ResponseType `protobuf:"varint,1,opt,name=result,proto3,enum=portworx.api.DeviceScan_ResponseType" json:"result,omitempty"`
}

func (x *PxDeviceScanResponse) Reset() {
	*x = PxDeviceScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDeviceScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDeviceScanResponse) ProtoMessage() {}

func (x *PxDeviceScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDeviceScanResponse.ProtoReflect.Descriptor instead.
func (*PxDeviceScanResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{66}
}

func (x *PxDeviceScanResponse) GetResult() DeviceScan_ResponseType {
	if x != nil {
		return x.Result
	}
	return DeviceScan_UnknownResponse
}

type PxDeviceScanStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxDeviceScanStatusRequest) Reset() {
	*x = PxDeviceScanStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDeviceScanStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDeviceScanStatusRequest) ProtoMessage() {}

func (x *PxDeviceScanStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDeviceScanStatusRequest.ProtoReflect.Descriptor instead.
func (*PxDeviceScanStatusRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{67}
}

type PxDeviceScanStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *PxScanStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PxDeviceScanStatusResponse) Reset() {
	*x = PxDeviceScanStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDeviceScanStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDeviceScanStatusResponse) ProtoMessage() {}

func (x *PxDeviceScanStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDeviceScanStatusResponse.ProtoReflect.Descriptor instead.
func (*PxDeviceScanStatusResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{68}
}

func (x *PxDeviceScanStatusResponse) GetStatus() *PxScanStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Defines a daily schedule
type ScheduleIntervalDaily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Range: 0-23
	Hour int32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	// Range: 0-59
	Minute int32 `protobuf:"varint,2,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *ScheduleIntervalDaily) Reset() {
	*x = ScheduleIntervalDaily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleIntervalDaily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleIntervalDaily) ProtoMessage() {}

func (x *ScheduleIntervalDaily) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleIntervalDaily.ProtoReflect.Descriptor instead.
func (*ScheduleIntervalDaily) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{69}
}

func (x *ScheduleIntervalDaily) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *ScheduleIntervalDaily) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

// Defines a weekly schedule
type ScheduleIntervalWeekly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day Weekday `protobuf:"varint,1,opt,name=day,proto3,enum=portworx.api.Weekday" json:"day,omitempty"`
	// Range: 0-23
	Hour int32 `protobuf:"varint,2,opt,name=hour,proto3" json:"hour,omitempty"`
	// Range: 0-59
	Minute int32 `protobuf:"varint,3,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *ScheduleIntervalWeekly) Reset() {
	*x = ScheduleIntervalWeekly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleIntervalWeekly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleIntervalWeekly) ProtoMessage() {}

func (x *ScheduleIntervalWeekly) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleIntervalWeekly.ProtoReflect.Descriptor instead.
func (*ScheduleIntervalWeekly) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{70}
}

func (x *ScheduleIntervalWeekly) GetDay() Weekday {
	if x != nil {
		return x.Day
	}
	return Weekday_Sunday
}

func (x *ScheduleIntervalWeekly) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *ScheduleIntervalWeekly) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

// Defines a monthly schedule
type ScheduleIntervalMonthly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Range: 1-28
	Day int32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	// Range: 0-59
	Hour int32 `protobuf:"varint,2,opt,name=hour,proto3" json:"hour,omitempty"`
	// Range: 0-59
	Minute int32 `protobuf:"varint,3,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *ScheduleIntervalMonthly) Reset() {
	*x = ScheduleIntervalMonthly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleIntervalMonthly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleIntervalMonthly) ProtoMessage() {}

func (x *ScheduleIntervalMonthly) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleIntervalMonthly.ProtoReflect.Descriptor instead.
func (*ScheduleIntervalMonthly) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{71}
}

func (x *ScheduleIntervalMonthly) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *ScheduleIntervalMonthly) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *ScheduleIntervalMonthly) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

// Defines a schedule interval
type ScheduleInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PeriodType:
	//	*ScheduleInterval_Daily
	//	*ScheduleInterval_Weekly
	//	*ScheduleInterval_Monthly
	PeriodType isScheduleInterval_PeriodType `protobuf_oneof:"period_type"`
}

func (x *ScheduleInterval) Reset() {
	*x = ScheduleInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleInterval) ProtoMessage() {}

func (x *ScheduleInterval) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleInterval.ProtoReflect.Descriptor instead.
func (*ScheduleInterval) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{72}
}

func (m *ScheduleInterval) GetPeriodType() isScheduleInterval_PeriodType {
	if m != nil {
		return m.PeriodType
	}
	return nil
}

func (x *ScheduleInterval) GetDaily() *ScheduleIntervalDaily {
	if x, ok := x.GetPeriodType().(*ScheduleInterval_Daily); ok {
		return x.Daily
	}
	return nil
}

func (x *ScheduleInterval) GetWeekly() *ScheduleIntervalWeekly {
	if x, ok := x.GetPeriodType().(*ScheduleInterval_Weekly); ok {
		return x.Weekly
	}
	return nil
}

func (x *ScheduleInterval) GetMonthly() *ScheduleIntervalMonthly {
	if x, ok := x.GetPeriodType().(*ScheduleInterval_Monthly); ok {
		return x.Monthly
	}
	return nil
}

type isScheduleInterval_PeriodType interface {
	isScheduleInterval_PeriodType()
}

type ScheduleInterval_Daily struct {
	// Daily policy
	Daily *ScheduleIntervalDaily `protobuf:"bytes,1,opt,name=daily,proto3,oneof"`
}

type ScheduleInterval_Weekly struct {
	// Weekly policy
	Weekly *ScheduleIntervalWeekly `protobuf:"bytes,2,opt,name=weekly,proto3,oneof"`
}

type ScheduleInterval_Monthly struct {
	// Monthly policy
	Monthly *ScheduleIntervalMonthly `protobuf:"bytes,3,opt,name=monthly,proto3,oneof"`
}

func (*ScheduleInterval_Daily) isScheduleInterval_PeriodType() {}

func (*ScheduleInterval_Weekly) isScheduleInterval_PeriodType() {}

func (*ScheduleInterval_Monthly) isScheduleInterval_PeriodType() {}

type PxDeviceScanScheduleGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxDeviceScanScheduleGetRequest) Reset() {
	*x = PxDeviceScanScheduleGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDeviceScanScheduleGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDeviceScanScheduleGetRequest) ProtoMessage() {}

func (x *PxDeviceScanScheduleGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDeviceScanScheduleGetRequest.ProtoReflect.Descriptor instead.
func (*PxDeviceScanScheduleGetRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{73}
}

type PxDeviceScanScheduleClearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxDeviceScanScheduleClearRequest) Reset() {
	*x = PxDeviceScanScheduleClearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDeviceScanScheduleClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDeviceScanScheduleClearRequest) ProtoMessage() {}

func (x *PxDeviceScanScheduleClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDeviceScanScheduleClearRequest.ProtoReflect.Descriptor instead.
func (*PxDeviceScanScheduleClearRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{74}
}

type PxDeviceScanScheduleSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleIntervals []*ScheduleInterval `protobuf:"bytes,1,rep,name=schedule_intervals,json=scheduleIntervals,proto3" json:"schedule_intervals,omitempty"`
}

func (x *PxDeviceScanScheduleSetRequest) Reset() {
	*x = PxDeviceScanScheduleSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDeviceScanScheduleSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDeviceScanScheduleSetRequest) ProtoMessage() {}

func (x *PxDeviceScanScheduleSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDeviceScanScheduleSetRequest.ProtoReflect.Descriptor instead.
func (*PxDeviceScanScheduleSetRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{75}
}

func (x *PxDeviceScanScheduleSetRequest) GetScheduleIntervals() []*ScheduleInterval {
	if x != nil {
		return x.ScheduleIntervals
	}
	return nil
}

type PxDeviceScanScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleIntervals []*ScheduleInterval `protobuf:"bytes,1,rep,name=schedule_intervals,json=scheduleIntervals,proto3" json:"schedule_intervals,omitempty"`
}

func (x *PxDeviceScanScheduleResponse) Reset() {
	*x = PxDeviceScanScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDeviceScanScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDeviceScanScheduleResponse) ProtoMessage() {}

func (x *PxDeviceScanScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDeviceScanScheduleResponse.ProtoReflect.Descriptor instead.
func (*PxDeviceScanScheduleResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{76}
}

func (x *PxDeviceScanScheduleResponse) GetScheduleIntervals() []*ScheduleInterval {
	if x != nil {
		return x.ScheduleIntervals
	}
	return nil
}

// BootstrapEntry identifies a node with its IP and ID which is part of a kvdb cluster
type BootstrapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the kvdb node
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// IP of the kvdb node
	Ip string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// Index of the kvdb node
	Index int64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	// State indicates the state of the Node in the bootstrap state machine
	State BootstrapNodeState `protobuf:"varint,4,opt,name=state,proto3,enum=portworx.api.BootstrapNodeState" json:"state,omitempty"`
	// Type indicates the type of kvdb node
	Type BootstrapNodeType `protobuf:"varint,5,opt,name=type,proto3,enum=portworx.api.BootstrapNodeType" json:"type,omitempty"`
	// Ts is the last updated timestamp of this bootstrap entry
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Version is the bootstrap entry version
	Version string `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	// ClientPort is the client port for kvdb node
	ClientPort string `protobuf:"bytes,8,opt,name=client_port,json=clientPort,proto3" json:"client_port,omitempty"`
	// Domain is the domain name advertised in the peer urls for this kvdb node
	// The DomainName is only used for kvdb's peer urls.
	// This enables us to change the actual peer IP being used by the nodes while keeping the domain
	// name the same. The client url is always based of an IP.
	Domain string `protobuf:"bytes,9,opt,name=domain,proto3" json:"domain,omitempty"`
	// DataDirType is the type of data directory being used by internal kvdb on
	// this node
	Datadir DataDirType `protobuf:"varint,10,opt,name=datadir,proto3,enum=portworx.api.DataDirType" json:"datadir,omitempty"`
}

func (x *BootstrapEntry) Reset() {
	*x = BootstrapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapEntry) ProtoMessage() {}

func (x *BootstrapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapEntry.ProtoReflect.Descriptor instead.
func (*BootstrapEntry) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{77}
}

func (x *BootstrapEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BootstrapEntry) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *BootstrapEntry) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BootstrapEntry) GetState() BootstrapNodeState {
	if x != nil {
		return x.State
	}
	return BootstrapNodeState_UnknownNodeState
}

func (x *BootstrapEntry) GetType() BootstrapNodeType {
	if x != nil {
		return x.Type
	}
	return BootstrapNodeType_UnknownNodeType
}

func (x *BootstrapEntry) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *BootstrapEntry) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BootstrapEntry) GetClientPort() string {
	if x != nil {
		return x.ClientPort
	}
	return ""
}

func (x *BootstrapEntry) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *BootstrapEntry) GetDatadir() DataDirType {
	if x != nil {
		return x.Datadir
	}
	return DataDirType_UnknownDataDirType
}

type PxKvdbGetBootstrapEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxKvdbGetBootstrapEntriesRequest) Reset() {
	*x = PxKvdbGetBootstrapEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxKvdbGetBootstrapEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxKvdbGetBootstrapEntriesRequest) ProtoMessage() {}

func (x *PxKvdbGetBootstrapEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxKvdbGetBootstrapEntriesRequest.ProtoReflect.Descriptor instead.
func (*PxKvdbGetBootstrapEntriesRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{78}
}

type PxKvdbGetBootstrapEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*BootstrapEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *PxKvdbGetBootstrapEntriesResponse) Reset() {
	*x = PxKvdbGetBootstrapEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxKvdbGetBootstrapEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxKvdbGetBootstrapEntriesResponse) ProtoMessage() {}

func (x *PxKvdbGetBootstrapEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxKvdbGetBootstrapEntriesResponse.ProtoReflect.Descriptor instead.
func (*PxKvdbGetBootstrapEntriesResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{79}
}

func (x *PxKvdbGetBootstrapEntriesResponse) GetEntries() []*BootstrapEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type PxKvdbGetDeviceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxKvdbGetDeviceInfoRequest) Reset() {
	*x = PxKvdbGetDeviceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxKvdbGetDeviceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxKvdbGetDeviceInfoRequest) ProtoMessage() {}

func (x *PxKvdbGetDeviceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxKvdbGetDeviceInfoRequest.ProtoReflect.Descriptor instead.
func (*PxKvdbGetDeviceInfoRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{80}
}

type PxKvdbGetDeviceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the device
	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// size of the device
	DeviceSize int64 `protobuf:"varint,2,opt,name=device_size,json=deviceSize,proto3" json:"device_size,omitempty"`
	// type of kvdb device
	Type DataDirType `protobuf:"varint,3,opt,name=type,proto3,enum=portworx.api.DataDirType" json:"type,omitempty"`
	// err is set when failed to get device info
	Err string `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *PxKvdbGetDeviceInfoResponse) Reset() {
	*x = PxKvdbGetDeviceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxKvdbGetDeviceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxKvdbGetDeviceInfoResponse) ProtoMessage() {}

func (x *PxKvdbGetDeviceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxKvdbGetDeviceInfoResponse.ProtoReflect.Descriptor instead.
func (*PxKvdbGetDeviceInfoResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{81}
}

func (x *PxKvdbGetDeviceInfoResponse) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PxKvdbGetDeviceInfoResponse) GetDeviceSize() int64 {
	if x != nil {
		return x.DeviceSize
	}
	return 0
}

func (x *PxKvdbGetDeviceInfoResponse) GetType() DataDirType {
	if x != nil {
		return x.Type
	}
	return DataDirType_UnknownDataDirType
}

func (x *PxKvdbGetDeviceInfoResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type PxDefragmentKvdbNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kvdb cluster node endpoint
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// timeout in seconds
	Timeout int64 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// if true defragmentaion will be started without check that all kvdb cluster nodes are healthy
	Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *PxDefragmentKvdbNodeRequest) Reset() {
	*x = PxDefragmentKvdbNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDefragmentKvdbNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDefragmentKvdbNodeRequest) ProtoMessage() {}

func (x *PxDefragmentKvdbNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDefragmentKvdbNodeRequest.ProtoReflect.Descriptor instead.
func (*PxDefragmentKvdbNodeRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{82}
}

func (x *PxDefragmentKvdbNodeRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *PxDefragmentKvdbNodeRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *PxDefragmentKvdbNodeRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type PxDefragmentKvdbNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxDefragmentKvdbNodeResponse) Reset() {
	*x = PxDefragmentKvdbNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDefragmentKvdbNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDefragmentKvdbNodeResponse) ProtoMessage() {}

func (x *PxDefragmentKvdbNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDefragmentKvdbNodeResponse.ProtoReflect.Descriptor instead.
func (*PxDefragmentKvdbNodeResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{83}
}

type Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Storage) Reset() {
	*x = Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage) ProtoMessage() {}

func (x *Storage) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage.ProtoReflect.Descriptor instead.
func (*Storage) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{84}
}

type StorageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Physical LUNs/Storage Resources
	Resources         map[string]*api.StorageResource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourcesLastScan string                          `protobuf:"bytes,2,opt,name=resources_last_scan,json=resourcesLastScan,proto3" json:"resources_last_scan,omitempty"`
	ResourcesCount    int64                           `protobuf:"varint,3,opt,name=resources_count,json=resourcesCount,proto3" json:"resources_count,omitempty"`
	// Local storage volume UUID
	ResourceUuid string `protobuf:"bytes,4,opt,name=resource_uuid,json=resourceUuid,proto3" json:"resource_uuid,omitempty"`
	// ResourceJournal represents the journal device.
	ResourceJournal *api.StorageResource `protobuf:"bytes,5,opt,name=resource_journal,json=resourceJournal,proto3" json:"resource_journal,omitempty"`
	// ResourceJournalUUID is the journal device UUID
	ResourceJournalUuid string `protobuf:"bytes,6,opt,name=resource_journal_uuid,json=resourceJournalUuid,proto3" json:"resource_journal_uuid,omitempty"`
	// ResourceSystemMetadata represents the device for metatdata.
	ResourceSystemMetadata *api.StorageResource `protobuf:"bytes,7,opt,name=resource_system_metadata,json=resourceSystemMetadata,proto3" json:"resource_system_metadata,omitempty"`
	// ResourceSystemMetadataUUID is the filesystem UUID on the metadata device.
	ResourceSystemMetadataUuid string `protobuf:"bytes,8,opt,name=resource_system_metadata_uuid,json=resourceSystemMetadataUuid,proto3" json:"resource_system_metadata_uuid,omitempty"`
	// Aggregated measurements across the luns.
	ReadThroughput  float64 `protobuf:"fixed64,9,opt,name=read_throughput,json=readThroughput,proto3" json:"read_throughput,omitempty"`
	WriteThroughput float64 `protobuf:"fixed64,10,opt,name=write_throughput,json=writeThroughput,proto3" json:"write_throughput,omitempty"`
	Random_4KIops   float64 `protobuf:"fixed64,11,opt,name=random_4k_iops,json=random4kIops,proto3" json:"random_4k_iops,omitempty"`
	// Status storage status.
	Status Storage_Status `protobuf:"varint,12,opt,name=status,proto3,enum=portworx.api.Storage_Status" json:"status,omitempty"`
	// Btrfs raided sizes.
	TotalSize uint64 `protobuf:"varint,13,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	Used      uint64 `protobuf:"varint,14,opt,name=used,proto3" json:"used,omitempty"`
	LastError string `protobuf:"bytes,15,opt,name=last_error,json=lastError,proto3" json:"last_error,omitempty"`
	// CacheInfo retrieves cache status/stats for this pool
	Cache *CacheInfo `protobuf:"bytes,16,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *StorageInfo) Reset() {
	*x = StorageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageInfo) ProtoMessage() {}

func (x *StorageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageInfo.ProtoReflect.Descriptor instead.
func (*StorageInfo) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{85}
}

func (x *StorageInfo) GetResources() map[string]*api.StorageResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *StorageInfo) GetResourcesLastScan() string {
	if x != nil {
		return x.ResourcesLastScan
	}
	return ""
}

func (x *StorageInfo) GetResourcesCount() int64 {
	if x != nil {
		return x.ResourcesCount
	}
	return 0
}

func (x *StorageInfo) GetResourceUuid() string {
	if x != nil {
		return x.ResourceUuid
	}
	return ""
}

func (x *StorageInfo) GetResourceJournal() *api.StorageResource {
	if x != nil {
		return x.ResourceJournal
	}
	return nil
}

func (x *StorageInfo) GetResourceJournalUuid() string {
	if x != nil {
		return x.ResourceJournalUuid
	}
	return ""
}

func (x *StorageInfo) GetResourceSystemMetadata() *api.StorageResource {
	if x != nil {
		return x.ResourceSystemMetadata
	}
	return nil
}

func (x *StorageInfo) GetResourceSystemMetadataUuid() string {
	if x != nil {
		return x.ResourceSystemMetadataUuid
	}
	return ""
}

func (x *StorageInfo) GetReadThroughput() float64 {
	if x != nil {
		return x.ReadThroughput
	}
	return 0
}

func (x *StorageInfo) GetWriteThroughput() float64 {
	if x != nil {
		return x.WriteThroughput
	}
	return 0
}

func (x *StorageInfo) GetRandom_4KIops() float64 {
	if x != nil {
		return x.Random_4KIops
	}
	return 0
}

func (x *StorageInfo) GetStatus() Storage_Status {
	if x != nil {
		return x.Status
	}
	return Storage_UnknownStorageStatus
}

func (x *StorageInfo) GetTotalSize() uint64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *StorageInfo) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *StorageInfo) GetLastError() string {
	if x != nil {
		return x.LastError
	}
	return ""
}

func (x *StorageInfo) GetCache() *CacheInfo {
	if x != nil {
		return x.Cache
	}
	return nil
}

// CloudResourceInfo provides metadata information on a cloud resource.
type CloudResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the cloud resource.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// ID of the cloud resource.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Labels on the cloud resource.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Zone where the resource exists.
	Zone string `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	// Region where the resource exists.
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *CloudResourceInfo) Reset() {
	*x = CloudResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceInfo) ProtoMessage() {}

func (x *CloudResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceInfo.ProtoReflect.Descriptor instead.
func (*CloudResourceInfo) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{86}
}

func (x *CloudResourceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudResourceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudResourceInfo) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CloudResourceInfo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CloudResourceInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// InstanceGroupInfo encapsulates info for a cloud instance group. In AWS this
// maps to ASG.
type InstanceGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudResourceInfo *CloudResourceInfo `protobuf:"bytes,1,opt,name=cloud_resource_info,json=cloudResourceInfo,proto3" json:"cloud_resource_info,omitempty"`
	// AutoscalingEnabled is true if auto scaling is turned on
	AutoscalingEnabled bool `protobuf:"varint,2,opt,name=autoscaling_enabled,json=autoscalingEnabled,proto3" json:"autoscaling_enabled,omitempty"`
	// Min number of nodes in the instance group
	Min *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=min,proto3" json:"min,omitempty"`
	// Max number of nodes in the instance group
	Max *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	// Zones that the instance group is part of
	Zones []string `protobuf:"bytes,5,rep,name=zones,proto3" json:"zones,omitempty"`
}

func (x *InstanceGroupInfo) Reset() {
	*x = InstanceGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroupInfo) ProtoMessage() {}

func (x *InstanceGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroupInfo.ProtoReflect.Descriptor instead.
func (*InstanceGroupInfo) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{87}
}

func (x *InstanceGroupInfo) GetCloudResourceInfo() *CloudResourceInfo {
	if x != nil {
		return x.CloudResourceInfo
	}
	return nil
}

func (x *InstanceGroupInfo) GetAutoscalingEnabled() bool {
	if x != nil {
		return x.AutoscalingEnabled
	}
	return false
}

func (x *InstanceGroupInfo) GetMin() *wrapperspb.Int64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *InstanceGroupInfo) GetMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *InstanceGroupInfo) GetZones() []string {
	if x != nil {
		return x.Zones
	}
	return nil
}

type Geography struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provider represents the cloud provider
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// Region represents large geographical location, like
	// North East America, North West America etc.
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// Zone represents a data center within a Region.
	// Zones within a Region are connected via low-latency links.
	Zone string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	// Datacenter specifies large geographical location
	DataCenter string `protobuf:"bytes,4,opt,name=data_center,json=dataCenter,proto3" json:"data_center,omitempty"`
	// Row specifies the row within the data center which hosts the node
	Row string `protobuf:"bytes,5,opt,name=row,proto3" json:"row,omitempty"`
	// Rack specifies the rack within the data center which hosts the node
	Rack string `protobuf:"bytes,6,opt,name=rack,proto3" json:"rack,omitempty"`
	// Chassis specifies the chassis within the data center which hosts the hypervisor or node
	Chassis string `protobuf:"bytes,7,opt,name=chassis,proto3" json:"chassis,omitempty"`
	// Hypervisor specifies the hypervisor (if any) within the chassis which hosts the node
	Hypervisor string `protobuf:"bytes,8,opt,name=hypervisor,proto3" json:"hypervisor,omitempty"`
	// Node specifies the node in chassis or rack on which px runs
	Node string `protobuf:"bytes,9,opt,name=node,proto3" json:"node,omitempty"`
	// InstanceGroup is the autoscaling instance group controller the instance
	InstanceGroup *InstanceGroupInfo `protobuf:"bytes,10,opt,name=instance_group,json=instanceGroup,proto3" json:"instance_group,omitempty"`
}

func (x *Geography) Reset() {
	*x = Geography{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Geography) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geography) ProtoMessage() {}

func (x *Geography) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geography.ProtoReflect.Descriptor instead.
func (*Geography) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{88}
}

func (x *Geography) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Geography) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Geography) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Geography) GetDataCenter() string {
	if x != nil {
		return x.DataCenter
	}
	return ""
}

func (x *Geography) GetRow() string {
	if x != nil {
		return x.Row
	}
	return ""
}

func (x *Geography) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

func (x *Geography) GetChassis() string {
	if x != nil {
		return x.Chassis
	}
	return ""
}

func (x *Geography) GetHypervisor() string {
	if x != nil {
		return x.Hypervisor
	}
	return ""
}

func (x *Geography) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *Geography) GetInstanceGroup() *InstanceGroupInfo {
	if x != nil {
		return x.InstanceGroup
	}
	return nil
}

type StoragePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool *api.StoragePool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	// CosAdmin is the configured Cos for this pool.
	CosAdmin api.CosType `protobuf:"varint,2,opt,name=cos_admin,json=cosAdmin,proto3,enum=openstorage.api.CosType" json:"cos_admin,omitempty"`
	// Info contains storage drives for this pool.
	Info *StorageInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	// Status Current operational status
	Status Storage_Status `protobuf:"varint,4,opt,name=status,proto3,enum=portworx.api.Storage_Status" json:"status,omitempty"`
	// ReserveFactor decides how much space to reserve for provisioned volumes.
	// It is a number between 0 and 100. Deprecated.
	ReserveFactor int64 `protobuf:"varint,5,opt,name=reserve_factor,json=reserveFactor,proto3" json:"reserve_factor,omitempty"`
	// SnapReserveFactor controls reservation for snapshot volumes. Deprecated.
	SnapReserveFactor int64 `protobuf:"varint,6,opt,name=snap_reserve_factor,json=snapReserveFactor,proto3" json:"snap_reserve_factor,omitempty"`
}

func (x *StoragePool) Reset() {
	*x = StoragePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoragePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePool) ProtoMessage() {}

func (x *StoragePool) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePool.ProtoReflect.Descriptor instead.
func (*StoragePool) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{89}
}

func (x *StoragePool) GetPool() *api.StoragePool {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *StoragePool) GetCosAdmin() api.CosType {
	if x != nil {
		return x.CosAdmin
	}
	return api.CosType_NONE
}

func (x *StoragePool) GetInfo() *StorageInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *StoragePool) GetStatus() Storage_Status {
	if x != nil {
		return x.Status
	}
	return Storage_UnknownStorageStatus
}

func (x *StoragePool) GetReserveFactor() int64 {
	if x != nil {
		return x.ReserveFactor
	}
	return 0
}

func (x *StoragePool) GetSnapReserveFactor() int64 {
	if x != nil {
		return x.SnapReserveFactor
	}
	return 0
}

type StorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DriverName backing storage driver.
	DriverName string `protobuf:"bytes,1,opt,name=driver_name,json=driverName,proto3" json:"driver_name,omitempty"`
	// SwVersion
	SwVersion string `protobuf:"bytes,2,opt,name=sw_version,json=swVersion,proto3" json:"sw_version,omitempty"`
	// BlockDriverType defines the source of block device.
	BlockDriver BlockDriverType `protobuf:"varint,3,opt,name=block_driver,json=blockDriver,proto3,enum=portworx.api.BlockDriverType" json:"block_driver,omitempty"`
	// TargetDsType defines type of target data store
	TargetDsType TargetDsType `protobuf:"varint,4,opt,name=target_ds_type,json=targetDsType,proto3,enum=portworx.api.TargetDsType" json:"target_ds_type,omitempty"`
	// Version
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// NID Node ID
	Nid int32 `protobuf:"varint,6,opt,name=nid,proto3" json:"nid,omitempty"`
	// MID Machine ID
	Mid string `protobuf:"bytes,7,opt,name=mid,proto3" json:"mid,omitempty"`
	// PeerAddr is the advertised URL for peer communication
	PeerAddr string `protobuf:"bytes,8,opt,name=peer_addr,json=peerAddr,proto3" json:"peer_addr,omitempty"`
	// ClientAddr is the advertised URL for client communication
	ClientAddr string `protobuf:"bytes,9,opt,name=client_addr,json=clientAddr,proto3" json:"client_addr,omitempty"`
	// StorageVol is the path to the root data partition.
	StorageVol string `protobuf:"bytes,10,opt,name=storage_vol,json=storageVol,proto3" json:"storage_vol,omitempty"`
	// StorageVolMD is the path to root metadata partition.
	StorageVolMd string `protobuf:"bytes,11,opt,name=storage_vol_md,json=storageVolMd,proto3" json:"storage_vol_md,omitempty"`
	// JournalDev is the path to the journal block device
	JournalDev string `protobuf:"bytes,12,opt,name=journal_dev,json=journalDev,proto3" json:"journal_dev,omitempty"`
	// SystemMetadataDev is the path to the metadata block device
	SystemMetadataDev string `protobuf:"bytes,13,opt,name=system_metadata_dev,json=systemMetadataDev,proto3" json:"system_metadata_dev,omitempty"`
	// Info has data storage drives for this node
	Info *StorageInfo `protobuf:"bytes,14,opt,name=info,proto3" json:"info,omitempty"`
	// MdInfo has metadata storage drives for this node
	MdInfo *StorageInfo `protobuf:"bytes,15,opt,name=md_info,json=mdInfo,proto3" json:"md_info,omitempty"`
	// Geo specified node Geography
	Geo *Geography `protobuf:"bytes,16,opt,name=geo,proto3" json:"geo,omitempty"`
	// DebugLevel controls the checks and fences set in storage.
	DebugLevel string `protobuf:"bytes,17,opt,name=debug_level,json=debugLevel,proto3" json:"debug_level,omitempty"`
	// Labels name value pairs.
	Labels map[string]string `protobuf:"bytes,18,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// OpStatus Current operational status
	OpStatus Storage_Status `protobuf:"varint,19,opt,name=op_status,json=opStatus,proto3,enum=portworx.api.Storage_Status" json:"op_status,omitempty"`
	// ErrStatus is the Current err status
	ErrStatus int64 `protobuf:"varint,20,opt,name=err_status,json=errStatus,proto3" json:"err_status,omitempty"`
	// HAOpStatus  is the current HA Operation status
	HaOpStatus int64 `protobuf:"varint,21,opt,name=ha_op_status,json=haOpStatus,proto3" json:"ha_op_status,omitempty"`
	// Decommissioned is true if this node has been removed..
	Decommissioned bool `protobuf:"varint,22,opt,name=decommissioned,proto3" json:"decommissioned,omitempty"`
	// DataPools set of disk pools.
	DataPools []*StoragePool `protobuf:"bytes,23,rep,name=data_pools,json=dataPools,proto3" json:"data_pools,omitempty"`
	// DataPoolType backing storage pool type.
	DataPoolType PoolType `protobuf:"varint,24,opt,name=data_pool_type,json=dataPoolType,proto3,enum=portworx.api.PoolType" json:"data_pool_type,omitempty"`
	// MdPool backing storage pool for metadata.
	MdPoolId int64 `protobuf:"varint,25,opt,name=md_pool_id,json=mdPoolId,proto3" json:"md_pool_id,omitempty"`
	// RaidLevel user desired raid level.
	RaidLevel string `protobuf:"bytes,26,opt,name=raid_level,json=raidLevel,proto3" json:"raid_level,omitempty"`
	// ScanSchedule contains the device scan schedule in YAML format
	ScanSchedule string `protobuf:"bytes,27,opt,name=scan_schedule,json=scanSchedule,proto3" json:"scan_schedule,omitempty"`
	// AsyncIO if true enables async i/o for backing storage
	AsyncIo bool `protobuf:"varint,28,opt,name=async_io,json=asyncIo,proto3" json:"async_io,omitempty"`
	// NumThreads is the number of threads in the thread pool
	NumThreads uint32 `protobuf:"varint,29,opt,name=num_threads,json=numThreads,proto3" json:"num_threads,omitempty"`
	// CacheDevices specifies the array of all global cache devices on this node
	CacheDevices []string `protobuf:"bytes,30,rep,name=cache_devices,json=cacheDevices,proto3" json:"cache_devices,omitempty"`
	// DedicatedCache Caching attributes - constrain assignment of cache drives from -cache only
	DedicatedCache bool `protobuf:"varint,31,opt,name=dedicated_cache,json=dedicatedCache,proto3" json:"dedicated_cache,omitempty"`
	// DomainId of this node
	DomainId string `protobuf:"bytes,32,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// fastpath extensions
	// px-fastpath feature enable flag
	FastpathEnable bool `protobuf:"varint,33,opt,name=fastpath_enable,json=fastpathEnable,proto3" json:"fastpath_enable,omitempty"`
	// px-fastpath feature setup in secure communication mode
	FastpathSecure bool `protobuf:"varint,34,opt,name=fastpath_secure,json=fastpathSecure,proto3" json:"fastpath_secure,omitempty"`
	// px-fastpath feature setup to fallback to native path
	FastpathFallback bool `protobuf:"varint,35,opt,name=fastpath_fallback,json=fastpathFallback,proto3" json:"fastpath_fallback,omitempty"`
	// px-fastpath feature setup to use specified protocol
	FastpathProtocol string `protobuf:"bytes,36,opt,name=fastpath_protocol,json=fastpathProtocol,proto3" json:"fastpath_protocol,omitempty"`
	// px-fastpath feature network port configuration
	FastpathPort uint32 `protobuf:"varint,37,opt,name=fastpath_port,json=fastpathPort,proto3" json:"fastpath_port,omitempty"`
	// px-cache extension for cache blocksize from config
	CacheBlksize uint64 `protobuf:"varint,38,opt,name=cache_blksize,json=cacheBlksize,proto3" json:"cache_blksize,omitempty"`
	// px-fastpath allow volumes with multiple replicas(1+)
	FastpathAllowMultiReplicas bool `protobuf:"varint,39,opt,name=fastpath_allow_multi_replicas,json=fastpathAllowMultiReplicas,proto3" json:"fastpath_allow_multi_replicas,omitempty"`
	// enable data integrity module for backing drives
	EnableIntegrity bool `protobuf:"varint,40,opt,name=enable_integrity,json=enableIntegrity,proto3" json:"enable_integrity,omitempty"`
}

func (x *StorageSpec) Reset() {
	*x = StorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageSpec) ProtoMessage() {}

func (x *StorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageSpec.ProtoReflect.Descriptor instead.
func (*StorageSpec) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{90}
}

func (x *StorageSpec) GetDriverName() string {
	if x != nil {
		return x.DriverName
	}
	return ""
}

func (x *StorageSpec) GetSwVersion() string {
	if x != nil {
		return x.SwVersion
	}
	return ""
}

func (x *StorageSpec) GetBlockDriver() BlockDriverType {
	if x != nil {
		return x.BlockDriver
	}
	return BlockDriverType_UnknownBlockDriverType
}

func (x *StorageSpec) GetTargetDsType() TargetDsType {
	if x != nil {
		return x.TargetDsType
	}
	return TargetDsType_UnknownTargetDsType
}

func (x *StorageSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StorageSpec) GetNid() int32 {
	if x != nil {
		return x.Nid
	}
	return 0
}

func (x *StorageSpec) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *StorageSpec) GetPeerAddr() string {
	if x != nil {
		return x.PeerAddr
	}
	return ""
}

func (x *StorageSpec) GetClientAddr() string {
	if x != nil {
		return x.ClientAddr
	}
	return ""
}

func (x *StorageSpec) GetStorageVol() string {
	if x != nil {
		return x.StorageVol
	}
	return ""
}

func (x *StorageSpec) GetStorageVolMd() string {
	if x != nil {
		return x.StorageVolMd
	}
	return ""
}

func (x *StorageSpec) GetJournalDev() string {
	if x != nil {
		return x.JournalDev
	}
	return ""
}

func (x *StorageSpec) GetSystemMetadataDev() string {
	if x != nil {
		return x.SystemMetadataDev
	}
	return ""
}

func (x *StorageSpec) GetInfo() *StorageInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *StorageSpec) GetMdInfo() *StorageInfo {
	if x != nil {
		return x.MdInfo
	}
	return nil
}

func (x *StorageSpec) GetGeo() *Geography {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *StorageSpec) GetDebugLevel() string {
	if x != nil {
		return x.DebugLevel
	}
	return ""
}

func (x *StorageSpec) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *StorageSpec) GetOpStatus() Storage_Status {
	if x != nil {
		return x.OpStatus
	}
	return Storage_UnknownStorageStatus
}

func (x *StorageSpec) GetErrStatus() int64 {
	if x != nil {
		return x.ErrStatus
	}
	return 0
}

func (x *StorageSpec) GetHaOpStatus() int64 {
	if x != nil {
		return x.HaOpStatus
	}
	return 0
}

func (x *StorageSpec) GetDecommissioned() bool {
	if x != nil {
		return x.Decommissioned
	}
	return false
}

func (x *StorageSpec) GetDataPools() []*StoragePool {
	if x != nil {
		return x.DataPools
	}
	return nil
}

func (x *StorageSpec) GetDataPoolType() PoolType {
	if x != nil {
		return x.DataPoolType
	}
	return PoolType_UnknownPoolType
}

func (x *StorageSpec) GetMdPoolId() int64 {
	if x != nil {
		return x.MdPoolId
	}
	return 0
}

func (x *StorageSpec) GetRaidLevel() string {
	if x != nil {
		return x.RaidLevel
	}
	return ""
}

func (x *StorageSpec) GetScanSchedule() string {
	if x != nil {
		return x.ScanSchedule
	}
	return ""
}

func (x *StorageSpec) GetAsyncIo() bool {
	if x != nil {
		return x.AsyncIo
	}
	return false
}

func (x *StorageSpec) GetNumThreads() uint32 {
	if x != nil {
		return x.NumThreads
	}
	return 0
}

func (x *StorageSpec) GetCacheDevices() []string {
	if x != nil {
		return x.CacheDevices
	}
	return nil
}

func (x *StorageSpec) GetDedicatedCache() bool {
	if x != nil {
		return x.DedicatedCache
	}
	return false
}

func (x *StorageSpec) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *StorageSpec) GetFastpathEnable() bool {
	if x != nil {
		return x.FastpathEnable
	}
	return false
}

func (x *StorageSpec) GetFastpathSecure() bool {
	if x != nil {
		return x.FastpathSecure
	}
	return false
}

func (x *StorageSpec) GetFastpathFallback() bool {
	if x != nil {
		return x.FastpathFallback
	}
	return false
}

func (x *StorageSpec) GetFastpathProtocol() string {
	if x != nil {
		return x.FastpathProtocol
	}
	return ""
}

func (x *StorageSpec) GetFastpathPort() uint32 {
	if x != nil {
		return x.FastpathPort
	}
	return 0
}

func (x *StorageSpec) GetCacheBlksize() uint64 {
	if x != nil {
		return x.CacheBlksize
	}
	return 0
}

func (x *StorageSpec) GetFastpathAllowMultiReplicas() bool {
	if x != nil {
		return x.FastpathAllowMultiReplicas
	}
	return false
}

func (x *StorageSpec) GetEnableIntegrity() bool {
	if x != nil {
		return x.EnableIntegrity
	}
	return false
}

type PxGetStorageSpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxGetStorageSpecRequest) Reset() {
	*x = PxGetStorageSpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxGetStorageSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxGetStorageSpecRequest) ProtoMessage() {}

func (x *PxGetStorageSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxGetStorageSpecRequest.ProtoReflect.Descriptor instead.
func (*PxGetStorageSpecRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{91}
}

type PxGetStorageSpecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec *StorageSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *PxGetStorageSpecResponse) Reset() {
	*x = PxGetStorageSpecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxGetStorageSpecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxGetStorageSpecResponse) ProtoMessage() {}

func (x *PxGetStorageSpecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxGetStorageSpecResponse.ProtoReflect.Descriptor instead.
func (*PxGetStorageSpecResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{92}
}

func (x *PxGetStorageSpecResponse) GetSpec() *StorageSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type PxGetNodeStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxGetNodeStatRequest) Reset() {
	*x = PxGetNodeStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxGetNodeStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxGetNodeStatRequest) ProtoMessage() {}

func (x *PxGetNodeStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxGetNodeStatRequest.ProtoReflect.Descriptor instead.
func (*PxGetNodeStatRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{93}
}

type PxGetNodeStatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stat string `protobuf:"bytes,1,opt,name=stat,proto3" json:"stat,omitempty"`
}

func (x *PxGetNodeStatResponse) Reset() {
	*x = PxGetNodeStatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxGetNodeStatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxGetNodeStatResponse) ProtoMessage() {}

func (x *PxGetNodeStatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxGetNodeStatResponse.ProtoReflect.Descriptor instead.
func (*PxGetNodeStatResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{94}
}

func (x *PxGetNodeStatResponse) GetStat() string {
	if x != nil {
		return x.Stat
	}
	return ""
}

type PxRelaxedReclaimShowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxRelaxedReclaimShowRequest) Reset() {
	*x = PxRelaxedReclaimShowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxRelaxedReclaimShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxRelaxedReclaimShowRequest) ProtoMessage() {}

func (x *PxRelaxedReclaimShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxRelaxedReclaimShowRequest.ProtoReflect.Descriptor instead.
func (*PxRelaxedReclaimShowRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{95}
}

type PxRelaxedReclaimShowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of dev_ids sitting in the RelaxedReclaim Q
	DevIds []string `protobuf:"bytes,1,rep,name=dev_ids,json=devIds,proto3" json:"dev_ids,omitempty"`
}

func (x *PxRelaxedReclaimShowResponse) Reset() {
	*x = PxRelaxedReclaimShowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxRelaxedReclaimShowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxRelaxedReclaimShowResponse) ProtoMessage() {}

func (x *PxRelaxedReclaimShowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxRelaxedReclaimShowResponse.ProtoReflect.Descriptor instead.
func (*PxRelaxedReclaimShowResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{96}
}

func (x *PxRelaxedReclaimShowResponse) GetDevIds() []string {
	if x != nil {
		return x.DevIds
	}
	return nil
}

type PxRelaxedReclaimDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dev_id to delete from the Q
	DevId string `protobuf:"bytes,1,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
}

func (x *PxRelaxedReclaimDeleteRequest) Reset() {
	*x = PxRelaxedReclaimDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxRelaxedReclaimDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxRelaxedReclaimDeleteRequest) ProtoMessage() {}

func (x *PxRelaxedReclaimDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxRelaxedReclaimDeleteRequest.ProtoReflect.Descriptor instead.
func (*PxRelaxedReclaimDeleteRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{97}
}

func (x *PxRelaxedReclaimDeleteRequest) GetDevId() string {
	if x != nil {
		return x.DevId
	}
	return ""
}

type PxRelaxedReclaimDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status return ESUCCESS or ENOENT
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PxRelaxedReclaimDeleteResponse) Reset() {
	*x = PxRelaxedReclaimDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxRelaxedReclaimDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxRelaxedReclaimDeleteResponse) ProtoMessage() {}

func (x *PxRelaxedReclaimDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxRelaxedReclaimDeleteResponse.ProtoReflect.Descriptor instead.
func (*PxRelaxedReclaimDeleteResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{98}
}

func (x *PxRelaxedReclaimDeleteResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type PxRelaxedReclaimPurgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxRelaxedReclaimPurgeRequest) Reset() {
	*x = PxRelaxedReclaimPurgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxRelaxedReclaimPurgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxRelaxedReclaimPurgeRequest) ProtoMessage() {}

func (x *PxRelaxedReclaimPurgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxRelaxedReclaimPurgeRequest.ProtoReflect.Descriptor instead.
func (*PxRelaxedReclaimPurgeRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{99}
}

type PxRelaxedReclaimPurgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// num_purged returns number of volumes purged
	NumPurged uint64 `protobuf:"varint,1,opt,name=num_purged,json=numPurged,proto3" json:"num_purged,omitempty"`
}

func (x *PxRelaxedReclaimPurgeResponse) Reset() {
	*x = PxRelaxedReclaimPurgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxRelaxedReclaimPurgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxRelaxedReclaimPurgeResponse) ProtoMessage() {}

func (x *PxRelaxedReclaimPurgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxRelaxedReclaimPurgeResponse.ProtoReflect.Descriptor instead.
func (*PxRelaxedReclaimPurgeResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{100}
}

func (x *PxRelaxedReclaimPurgeResponse) GetNumPurged() uint64 {
	if x != nil {
		return x.NumPurged
	}
	return 0
}

type PxNRCPauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resume bool `protobuf:"varint,1,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *PxNRCPauseRequest) Reset() {
	*x = PxNRCPauseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxNRCPauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxNRCPauseRequest) ProtoMessage() {}

func (x *PxNRCPauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxNRCPauseRequest.ProtoReflect.Descriptor instead.
func (*PxNRCPauseRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{101}
}

func (x *PxNRCPauseRequest) GetResume() bool {
	if x != nil {
		return x.Resume
	}
	return false
}

type PxNRCPauseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// num_resumed returns number of SMs resumed
	NumResumed uint64 `protobuf:"varint,1,opt,name=num_resumed,json=numResumed,proto3" json:"num_resumed,omitempty"`
}

func (x *PxNRCPauseResponse) Reset() {
	*x = PxNRCPauseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxNRCPauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxNRCPauseResponse) ProtoMessage() {}

func (x *PxNRCPauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxNRCPauseResponse.ProtoReflect.Descriptor instead.
func (*PxNRCPauseResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{102}
}

func (x *PxNRCPauseResponse) GetNumResumed() uint64 {
	if x != nil {
		return x.NumResumed
	}
	return 0
}

type PxPreShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options map[string]string `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PxPreShutdownRequest) Reset() {
	*x = PxPreShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxPreShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxPreShutdownRequest) ProtoMessage() {}

func (x *PxPreShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxPreShutdownRequest.ProtoReflect.Descriptor instead.
func (*PxPreShutdownRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{103}
}

func (x *PxPreShutdownRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type PxPreShutdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[string]string `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PxPreShutdownResponse) Reset() {
	*x = PxPreShutdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxPreShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxPreShutdownResponse) ProtoMessage() {}

func (x *PxPreShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxPreShutdownResponse.ProtoReflect.Descriptor instead.
func (*PxPreShutdownResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{104}
}

func (x *PxPreShutdownResponse) GetResult() map[string]string {
	if x != nil {
		return x.Result
	}
	return nil
}

type PxDriveCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetailedReport bool `protobuf:"varint,1,opt,name=detailed_report,json=detailedReport,proto3" json:"detailed_report,omitempty"`
}

func (x *PxDriveCheckRequest) Reset() {
	*x = PxDriveCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDriveCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDriveCheckRequest) ProtoMessage() {}

func (x *PxDriveCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDriveCheckRequest.ProtoReflect.Descriptor instead.
func (*PxDriveCheckRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{105}
}

func (x *PxDriveCheckRequest) GetDetailedReport() bool {
	if x != nil {
		return x.DetailedReport
	}
	return false
}

type PxDriveCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *PxDriveCheckResponse) Reset() {
	*x = PxDriveCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDriveCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDriveCheckResponse) ProtoMessage() {}

func (x *PxDriveCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDriveCheckResponse.ProtoReflect.Descriptor instead.
func (*PxDriveCheckResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{106}
}

func (x *PxDriveCheckResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DriveRebalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DriveRebalance) Reset() {
	*x = DriveRebalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriveRebalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriveRebalance) ProtoMessage() {}

func (x *DriveRebalance) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriveRebalance.ProtoReflect.Descriptor instead.
func (*DriveRebalance) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{107}
}

type PxDriveRebalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op DriveRebalance_OperationType `protobuf:"varint,1,opt,name=op,proto3,enum=portworx.api.DriveRebalance_OperationType" json:"op,omitempty"`
	// pool ID to start rebalance
	PoolId int64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// if true balances block groups with usage under 85 percent, only applicable to btrfs drives
	Full bool `protobuf:"varint,3,opt,name=full,proto3" json:"full,omitempty"`
}

func (x *PxDriveRebalanceRequest) Reset() {
	*x = PxDriveRebalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDriveRebalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDriveRebalanceRequest) ProtoMessage() {}

func (x *PxDriveRebalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDriveRebalanceRequest.ProtoReflect.Descriptor instead.
func (*PxDriveRebalanceRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{108}
}

func (x *PxDriveRebalanceRequest) GetOp() DriveRebalance_OperationType {
	if x != nil {
		return x.Op
	}
	return DriveRebalance_Unknown
}

func (x *PxDriveRebalanceRequest) GetPoolId() int64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *PxDriveRebalanceRequest) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

type DriveReplace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DriveReplace) Reset() {
	*x = DriveReplace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriveReplace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriveReplace) ProtoMessage() {}

func (x *DriveReplace) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriveReplace.ProtoReflect.Descriptor instead.
func (*DriveReplace) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{109}
}

type PxDriveRebalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *PxDriveRebalanceResponse) Reset() {
	*x = PxDriveRebalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDriveRebalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDriveRebalanceResponse) ProtoMessage() {}

func (x *PxDriveRebalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDriveRebalanceResponse.ProtoReflect.Descriptor instead.
func (*PxDriveRebalanceResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{110}
}

func (x *PxDriveRebalanceResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PxDriveReplaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   string                     `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target   string                     `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Op       DriveReplace_OperationType `protobuf:"varint,3,opt,name=op,proto3,enum=portworx.api.DriveReplace_OperationType" json:"op,omitempty"`
	Force    bool                       `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	Metadata bool                       `protobuf:"varint,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *PxDriveReplaceRequest) Reset() {
	*x = PxDriveReplaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDriveReplaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDriveReplaceRequest) ProtoMessage() {}

func (x *PxDriveReplaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDriveReplaceRequest.ProtoReflect.Descriptor instead.
func (*PxDriveReplaceRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{111}
}

func (x *PxDriveReplaceRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PxDriveReplaceRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PxDriveReplaceRequest) GetOp() DriveReplace_OperationType {
	if x != nil {
		return x.Op
	}
	return DriveReplace_Unknown
}

func (x *PxDriveReplaceRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *PxDriveReplaceRequest) GetMetadata() bool {
	if x != nil {
		return x.Metadata
	}
	return false
}

type PxDriveReplaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *PxDriveReplaceResponse) Reset() {
	*x = PxDriveReplaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxDriveReplaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxDriveReplaceResponse) ProtoMessage() {}

func (x *PxDriveReplaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxDriveReplaceResponse.ProtoReflect.Descriptor instead.
func (*PxDriveReplaceResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{112}
}

func (x *PxDriveReplaceResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PxSystemMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxSystemMetadataRequest) Reset() {
	*x = PxSystemMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxSystemMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxSystemMetadataRequest) ProtoMessage() {}

func (x *PxSystemMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxSystemMetadataRequest.ProtoReflect.Descriptor instead.
func (*PxSystemMetadataRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{113}
}

type PxSystemMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *PxSystemMetadataResponse) Reset() {
	*x = PxSystemMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxSystemMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxSystemMetadataResponse) ProtoMessage() {}

func (x *PxSystemMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxSystemMetadataResponse.ProtoReflect.Descriptor instead.
func (*PxSystemMetadataResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{114}
}

func (x *PxSystemMetadataResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// PxPoolDeleteRequest contains Storage Pool ID to delete
type PxPoolDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of Pool to delete
	PoolId int64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (x *PxPoolDeleteRequest) Reset() {
	*x = PxPoolDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxPoolDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxPoolDeleteRequest) ProtoMessage() {}

func (x *PxPoolDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxPoolDeleteRequest.ProtoReflect.Descriptor instead.
func (*PxPoolDeleteRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{115}
}

func (x *PxPoolDeleteRequest) GetPoolId() int64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

type PxPoolDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxPoolDeleteResponse) Reset() {
	*x = PxPoolDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxPoolDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxPoolDeleteResponse) ProtoMessage() {}

func (x *PxPoolDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxPoolDeleteResponse.ProtoReflect.Descriptor instead.
func (*PxPoolDeleteResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{116}
}

// PxPoolMaintenanceRequest contains operation
type PxPoolMaintenanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// supported operations are: Enter and Exit
	Operation Maintenance_OperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=portworx.api.Maintenance_OperationType" json:"operation,omitempty"`
}

func (x *PxPoolMaintenanceRequest) Reset() {
	*x = PxPoolMaintenanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxPoolMaintenanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxPoolMaintenanceRequest) ProtoMessage() {}

func (x *PxPoolMaintenanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxPoolMaintenanceRequest.ProtoReflect.Descriptor instead.
func (*PxPoolMaintenanceRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{117}
}

func (x *PxPoolMaintenanceRequest) GetOperation() Maintenance_OperationType {
	if x != nil {
		return x.Operation
	}
	return Maintenance_Unknown
}

type PxPoolMaintenanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxPoolMaintenanceResponse) Reset() {
	*x = PxPoolMaintenanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxPoolMaintenanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxPoolMaintenanceResponse) ProtoMessage() {}

func (x *PxPoolMaintenanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxPoolMaintenanceResponse.ProtoReflect.Descriptor instead.
func (*PxPoolMaintenanceResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{118}
}

// Request to install license by activation ID
type PxLicenseInstallByActivationIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of copies to be activated
	Copies int64 `protobuf:"varint,1,opt,name=copies,proto3" json:"copies,omitempty"`
	// activation ID
	ActivationId string `protobuf:"bytes,2,opt,name=activation_id,json=activationId,proto3" json:"activation_id,omitempty"`
}

func (x *PxLicenseInstallByActivationIDRequest) Reset() {
	*x = PxLicenseInstallByActivationIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicenseInstallByActivationIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicenseInstallByActivationIDRequest) ProtoMessage() {}

func (x *PxLicenseInstallByActivationIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicenseInstallByActivationIDRequest.ProtoReflect.Descriptor instead.
func (*PxLicenseInstallByActivationIDRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{119}
}

func (x *PxLicenseInstallByActivationIDRequest) GetCopies() int64 {
	if x != nil {
		return x.Copies
	}
	return 0
}

func (x *PxLicenseInstallByActivationIDRequest) GetActivationId() string {
	if x != nil {
		return x.ActivationId
	}
	return ""
}

// Empty Response
type PxLicenseInstallByActivationIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxLicenseInstallByActivationIDResponse) Reset() {
	*x = PxLicenseInstallByActivationIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicenseInstallByActivationIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicenseInstallByActivationIDResponse) ProtoMessage() {}

func (x *PxLicenseInstallByActivationIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicenseInstallByActivationIDResponse.ProtoReflect.Descriptor instead.
func (*PxLicenseInstallByActivationIDResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{120}
}

// Request to install license by specifying the license BLOB
type PxLicenseInstallByLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// license BLOB
	License []byte `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	// cluster ID. If specified, overwrites the identity of the cluster. Used when transferring license from another
	// cluster to this cluster.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *PxLicenseInstallByLicenseRequest) Reset() {
	*x = PxLicenseInstallByLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicenseInstallByLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicenseInstallByLicenseRequest) ProtoMessage() {}

func (x *PxLicenseInstallByLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicenseInstallByLicenseRequest.ProtoReflect.Descriptor instead.
func (*PxLicenseInstallByLicenseRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{121}
}

func (x *PxLicenseInstallByLicenseRequest) GetLicense() []byte {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *PxLicenseInstallByLicenseRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// Empty Response
type PxLicenseInstallByLicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxLicenseInstallByLicenseResponse) Reset() {
	*x = PxLicenseInstallByLicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicenseInstallByLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicenseInstallByLicenseResponse) ProtoMessage() {}

func (x *PxLicenseInstallByLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicenseInstallByLicenseResponse.ProtoReflect.Descriptor instead.
func (*PxLicenseInstallByLicenseResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{122}
}

// Request to uninstall the license by specifying the activation id
type PxLicenseUninstallByActivationIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// activation ID
	ActivationId string `protobuf:"bytes,1,opt,name=activation_id,json=activationId,proto3" json:"activation_id,omitempty"`
}

func (x *PxLicenseUninstallByActivationIDRequest) Reset() {
	*x = PxLicenseUninstallByActivationIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicenseUninstallByActivationIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicenseUninstallByActivationIDRequest) ProtoMessage() {}

func (x *PxLicenseUninstallByActivationIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicenseUninstallByActivationIDRequest.ProtoReflect.Descriptor instead.
func (*PxLicenseUninstallByActivationIDRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{123}
}

func (x *PxLicenseUninstallByActivationIDRequest) GetActivationId() string {
	if x != nil {
		return x.ActivationId
	}
	return ""
}

// Empty Response
type PxLicenseUninstallByActivationIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxLicenseUninstallByActivationIDResponse) Reset() {
	*x = PxLicenseUninstallByActivationIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicenseUninstallByActivationIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicenseUninstallByActivationIDResponse) ProtoMessage() {}

func (x *PxLicenseUninstallByActivationIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicenseUninstallByActivationIDResponse.ProtoReflect.Descriptor instead.
func (*PxLicenseUninstallByActivationIDResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{124}
}

// Empty request to release the license from this cluster
type PxLicenseReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the cluster to which the license is being transfrred
	DestinationClusterId string `protobuf:"bytes,1,opt,name=destination_cluster_id,json=destinationClusterId,proto3" json:"destination_cluster_id,omitempty"`
}

func (x *PxLicenseReleaseRequest) Reset() {
	*x = PxLicenseReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicenseReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicenseReleaseRequest) ProtoMessage() {}

func (x *PxLicenseReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicenseReleaseRequest.ProtoReflect.Descriptor instead.
func (*PxLicenseReleaseRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{125}
}

func (x *PxLicenseReleaseRequest) GetDestinationClusterId() string {
	if x != nil {
		return x.DestinationClusterId
	}
	return ""
}

// Response to the request to release the license
type PxLicenseReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// license BLOB
	License []byte `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	// cluster ID associated with the released license blob
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *PxLicenseReleaseResponse) Reset() {
	*x = PxLicenseReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicenseReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicenseReleaseResponse) ProtoMessage() {}

func (x *PxLicenseReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicenseReleaseResponse.ProtoReflect.Descriptor instead.
func (*PxLicenseReleaseResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{126}
}

func (x *PxLicenseReleaseResponse) GetLicense() []byte {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *PxLicenseReleaseResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// Request to set the license server information
type PxLicenseSetServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// License server endpoints. Only 2 are allowed. The first one in the list is the primary and the second is the backup.
	Endpoints []string `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// For how long (in seconds) to lease the floating license. License is automatically refreshed long before
	// the lease expires. Default is 7 days.
	BorrowInterval int32 `protobuf:"varint,2,opt,name=borrow_interval,json=borrowInterval,proto3" json:"borrow_interval,omitempty"`
	// How often (in seconds) each node should refresh the license by contacting the license server. It is recommended
	// that this field be left empty in which case it will be set automatically.
	RefreshInterval int32 `protobuf:"varint,3,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
	// Additional licensed features to be activated on all the nodes of this Portworx cluster. When license server
	// has limited seats shared by multiple clusters, this field allows user to select which cluster gets a particular
	// feature.
	AdditionalFeatures []string `protobuf:"bytes,4,rep,name=additional_features,json=additionalFeatures,proto3" json:"additional_features,omitempty"`
	// Root and intermediate certificates for license server.
	CaBundle string `protobuf:"bytes,5,opt,name=ca_bundle,json=caBundle,proto3" json:"ca_bundle,omitempty"`
}

func (x *PxLicenseSetServerRequest) Reset() {
	*x = PxLicenseSetServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicenseSetServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicenseSetServerRequest) ProtoMessage() {}

func (x *PxLicenseSetServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicenseSetServerRequest.ProtoReflect.Descriptor instead.
func (*PxLicenseSetServerRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{127}
}

func (x *PxLicenseSetServerRequest) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *PxLicenseSetServerRequest) GetBorrowInterval() int32 {
	if x != nil {
		return x.BorrowInterval
	}
	return 0
}

func (x *PxLicenseSetServerRequest) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *PxLicenseSetServerRequest) GetAdditionalFeatures() []string {
	if x != nil {
		return x.AdditionalFeatures
	}
	return nil
}

func (x *PxLicenseSetServerRequest) GetCaBundle() string {
	if x != nil {
		return x.CaBundle
	}
	return ""
}

// Empty Response
type PxLicenseSetServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxLicenseSetServerResponse) Reset() {
	*x = PxLicenseSetServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicenseSetServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicenseSetServerResponse) ProtoMessage() {}

func (x *PxLicenseSetServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicenseSetServerResponse.ProtoReflect.Descriptor instead.
func (*PxLicenseSetServerResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{128}
}

// Empty Request
type PxLicenseStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxLicenseStatusRequest) Reset() {
	*x = PxLicenseStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicenseStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicenseStatusRequest) ProtoMessage() {}

func (x *PxLicenseStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicenseStatusRequest.ProtoReflect.Descriptor instead.
func (*PxLicenseStatusRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{129}
}

// Response containing the status of the license
type PxLicenseStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *LicenseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PxLicenseStatusResponse) Reset() {
	*x = PxLicenseStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicenseStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicenseStatusResponse) ProtoMessage() {}

func (x *PxLicenseStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicenseStatusResponse.ProtoReflect.Descriptor instead.
func (*PxLicenseStatusResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{130}
}

func (x *PxLicenseStatusResponse) GetStatus() *LicenseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// LicenseStatus is the message used to describe status of the license.
type LicenseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SKU of the license.
	Sku string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	// License expiry date, if any. If the license is permanent (non-expiring), the "seconds" field is 0.
	// When using a floating license from a license server, each node leases the license
	// for a short time and then renews the lease before it expires. In such case, this field indicates
	// when the current lease expires on the node that is serving the request.
	ExpiresOn *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires_on,json=expiresOn,proto3" json:"expires_on,omitempty"`
	// Endpoints for the license server, if any.
	LicenseServerEndpoints []string `protobuf:"bytes,3,rep,name=licenseServerEndpoints,proto3" json:"licenseServerEndpoints,omitempty"`
	// Messages associated with the license indicating any errors, warnings etc.
	Conditions []*LicenseCondition `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *LicenseStatus) Reset() {
	*x = LicenseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseStatus) ProtoMessage() {}

func (x *LicenseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseStatus.ProtoReflect.Descriptor instead.
func (*LicenseStatus) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{131}
}

func (x *LicenseStatus) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *LicenseStatus) GetExpiresOn() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresOn
	}
	return nil
}

func (x *LicenseStatus) GetLicenseServerEndpoints() []string {
	if x != nil {
		return x.LicenseServerEndpoints
	}
	return nil
}

func (x *LicenseStatus) GetConditions() []*LicenseCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// LicenseCondition has a message associated with the license.
type LicenseCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message severity
	Severity LicenseCondition_Severity `protobuf:"varint,1,opt,name=severity,proto3,enum=portworx.api.LicenseCondition_Severity" json:"severity,omitempty"`
	// Message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LicenseCondition) Reset() {
	*x = LicenseCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseCondition) ProtoMessage() {}

func (x *LicenseCondition) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseCondition.ProtoReflect.Descriptor instead.
func (*LicenseCondition) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{132}
}

func (x *LicenseCondition) GetSeverity() LicenseCondition_Severity {
	if x != nil {
		return x.Severity
	}
	return LicenseCondition_UNSPECIFIED
}

func (x *LicenseCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// LicensedFeature is the message used to describe a licensed feature.
type LicensedFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the licensed feature.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// SKU of the license.
	Sku string `protobuf:"bytes,2,opt,name=sku,proto3" json:"sku,omitempty"`
	// Description of the licensed feature.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Messages associated with the license feature indicating extra information.
	Conditions []*LicenseCondition `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Indicates whether the license is hidden from the user.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// License expiry date, if any. If the license is permanent (non-expiring), the "seconds" field is 0.
	// When using a floating license from a license server, each node leases the license
	// for a short time and then renews the lease before it expires. In such case, this field indicates
	// when the current lease expires on the node that is serving the request.
	ExpiresOn *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expires_on,json=expiresOn,proto3" json:"expires_on,omitempty"`
	// Indicates whether the feature has a valid license.
	Valid bool `protobuf:"varint,7,opt,name=valid,proto3" json:"valid,omitempty"`
	// Licensed quantity which can be one of the fields below depending on the feature.
	//
	// Types that are assignable to Quantity:
	//	*LicensedFeature_Count
	//	*LicensedFeature_CapacityTb
	//	*LicensedFeature_Enabled
	Quantity isLicensedFeature_Quantity `protobuf_oneof:"quantity"`
}

func (x *LicensedFeature) Reset() {
	*x = LicensedFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicensedFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicensedFeature) ProtoMessage() {}

func (x *LicensedFeature) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicensedFeature.ProtoReflect.Descriptor instead.
func (*LicensedFeature) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{133}
}

func (x *LicensedFeature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LicensedFeature) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *LicensedFeature) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LicensedFeature) GetConditions() []*LicenseCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *LicensedFeature) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *LicensedFeature) GetExpiresOn() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresOn
	}
	return nil
}

func (x *LicensedFeature) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (m *LicensedFeature) GetQuantity() isLicensedFeature_Quantity {
	if m != nil {
		return m.Quantity
	}
	return nil
}

func (x *LicensedFeature) GetCount() int64 {
	if x, ok := x.GetQuantity().(*LicensedFeature_Count); ok {
		return x.Count
	}
	return 0
}

func (x *LicensedFeature) GetCapacityTb() int64 {
	if x, ok := x.GetQuantity().(*LicensedFeature_CapacityTb); ok {
		return x.CapacityTb
	}
	return 0
}

func (x *LicensedFeature) GetEnabled() bool {
	if x, ok := x.GetQuantity().(*LicensedFeature_Enabled); ok {
		return x.Enabled
	}
	return false
}

type isLicensedFeature_Quantity interface {
	isLicensedFeature_Quantity()
}

type LicensedFeature_Count struct {
	// Count indicates the number of objects (nodes, volumes etc.) enabled by the license.
	// Maximum value of signed 64-bit integer ((2 ^ 63) - 1) represents the unlimited count.
	Count int64 `protobuf:"varint,200,opt,name=count,proto3,oneof"`
}

type LicensedFeature_CapacityTb struct {
	// Licensed capacity in terabytes.
	// Maximum value of signed 64-bit integer ((2 ^ 63) - 1) represents the unlimited capacity.
	CapacityTb int64 `protobuf:"varint,201,opt,name=capacity_tb,json=capacityTb,proto3,oneof"`
}

type LicensedFeature_Enabled struct {
	// Present for the features that are either enabled or disabled without any associated numeric quantity.
	Enabled bool `protobuf:"varint,202,opt,name=enabled,proto3,oneof"`
}

func (*LicensedFeature_Count) isLicensedFeature_Quantity() {}

func (*LicensedFeature_CapacityTb) isLicensedFeature_Quantity() {}

func (*LicensedFeature_Enabled) isLicensedFeature_Quantity() {}

// Empty request
type PxLicensedFeatureEnumerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxLicensedFeatureEnumerateRequest) Reset() {
	*x = PxLicensedFeatureEnumerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicensedFeatureEnumerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicensedFeatureEnumerateRequest) ProtoMessage() {}

func (x *PxLicensedFeatureEnumerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicensedFeatureEnumerateRequest.ProtoReflect.Descriptor instead.
func (*PxLicensedFeatureEnumerateRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{134}
}

// Respose to enumerate all licensed features
type PxLicensedFeatureEnumerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of licensed features
	Features []*LicensedFeature `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
}

func (x *PxLicensedFeatureEnumerateResponse) Reset() {
	*x = PxLicensedFeatureEnumerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicensedFeatureEnumerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicensedFeatureEnumerateResponse) ProtoMessage() {}

func (x *PxLicensedFeatureEnumerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicensedFeatureEnumerateResponse.ProtoReflect.Descriptor instead.
func (*PxLicensedFeatureEnumerateResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{135}
}

func (x *PxLicensedFeatureEnumerateResponse) GetFeatures() []*LicensedFeature {
	if x != nil {
		return x.Features
	}
	return nil
}

// Defines a request to inspect a licensed feature
type PxLicensedFeatureInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the licensed feature
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PxLicensedFeatureInspectRequest) Reset() {
	*x = PxLicensedFeatureInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicensedFeatureInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicensedFeatureInspectRequest) ProtoMessage() {}

func (x *PxLicensedFeatureInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicensedFeatureInspectRequest.ProtoReflect.Descriptor instead.
func (*PxLicensedFeatureInspectRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{136}
}

func (x *PxLicensedFeatureInspectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response to inspection request
type PxLicensedFeatureInspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested licensed feature
	Feature *LicensedFeature `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (x *PxLicensedFeatureInspectResponse) Reset() {
	*x = PxLicensedFeatureInspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicensedFeatureInspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicensedFeatureInspectResponse) ProtoMessage() {}

func (x *PxLicensedFeatureInspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicensedFeatureInspectResponse.ProtoReflect.Descriptor instead.
func (*PxLicensedFeatureInspectResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{137}
}

func (x *PxLicensedFeatureInspectResponse) GetFeature() *LicensedFeature {
	if x != nil {
		return x.Feature
	}
	return nil
}

// Defines a request to check if a feature is licensed
type PxLicensedFeatureCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the feature to check
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PxLicensedFeatureCheckRequest) Reset() {
	*x = PxLicensedFeatureCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicensedFeatureCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicensedFeatureCheckRequest) ProtoMessage() {}

func (x *PxLicensedFeatureCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicensedFeatureCheckRequest.ProtoReflect.Descriptor instead.
func (*PxLicensedFeatureCheckRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{138}
}

func (x *PxLicensedFeatureCheckRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response to check request.
type PxLicensedFeatureCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set to true if the feature exists and has a valid license. Otherwise, set to false.
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *PxLicensedFeatureCheckResponse) Reset() {
	*x = PxLicensedFeatureCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxLicensedFeatureCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxLicensedFeatureCheckResponse) ProtoMessage() {}

func (x *PxLicensedFeatureCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxLicensedFeatureCheckResponse.ProtoReflect.Descriptor instead.
func (*PxLicensedFeatureCheckResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{139}
}

func (x *PxLicensedFeatureCheckResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

// Empty Request
type PxStorageOptionsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PxStorageOptionsListRequest) Reset() {
	*x = PxStorageOptionsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxStorageOptionsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxStorageOptionsListRequest) ProtoMessage() {}

func (x *PxStorageOptionsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxStorageOptionsListRequest.ProtoReflect.Descriptor instead.
func (*PxStorageOptionsListRequest) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{140}
}

// Response to StorageOptions list request
type PxStorageOptionsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageOpts map[string]string `protobuf:"bytes,1,rep,name=storageOpts,proto3" json:"storageOpts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PxStorageOptionsListResponse) Reset() {
	*x = PxStorageOptionsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_px_api_api_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PxStorageOptionsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PxStorageOptionsListResponse) ProtoMessage() {}

func (x *PxStorageOptionsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_px_api_api_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PxStorageOptionsListResponse.ProtoReflect.Descriptor instead.
func (*PxStorageOptionsListResponse) Descriptor() ([]byte, []int) {
	return file_px_api_api_proto_rawDescGZIP(), []int{141}
}

func (x *PxStorageOptionsListResponse) GetStorageOpts() map[string]string {
	if x != nil {
		return x.StorageOpts
	}
	return nil
}

var File_px_api_api_proto protoreflect.FileDescriptor

var file_px_api_api_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x62, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x09, 0x50, 0x75, 0x72, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x58, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x09,
	0x50, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x72, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x78, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x18,
	0x50, 0x78, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x44,
	0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x10, 0x50, 0x78, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3f, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x78, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x50, 0x78, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xed, 0x02, 0x0a, 0x09, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0xdf, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x43,
	0x65, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x70, 0x70, 0x43, 0x65, 0x72, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4a, 0x77,
	0x74, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x65, 0x67, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x67, 0x55, 0x6e, 0x6b, 0x6f, 0x77, 0x6e,
	0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x08, 0x12, 0x1d, 0x0a,
	0x19, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x55, 0x72, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x6e,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x6e,
	0x73, 0x55, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0e, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x64, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x64, 0x22, 0x54, 0x0a, 0x17, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x83, 0x04, 0x0a, 0x0f, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x37, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x65, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x65, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6f, 0x0a, 0x18, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5d, 0x0a, 0x15, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x80, 0x02, 0x0a, 0x13, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6c,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x6c, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x15, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x68, 0x0a, 0x21, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x02, 0x0a, 0x19, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x63, 0x6d, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x63,
	0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x10, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x12, 0x41, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x78, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xa8, 0x01, 0x0a, 0x19, 0x50, 0x78, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a, 0x0b, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x3d, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x78, 0x69, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x10, 0x03, 0x22, 0x41, 0x0a, 0x08, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x6f, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x22, 0x66, 0x0a, 0x1d,
	0x50, 0x78, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x0a, 0x1e, 0x50, 0x78, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x0a, 0x17, 0x50, 0x78, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x6f, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x6f, 0x6d, 0x65, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x6f, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x10, 0x0a, 0x0e, 0x50, 0x78, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x45, 0x72, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a,
	0x0f, 0x50, 0x78, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x0b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x4b, 0x76, 0x64, 0x62, 0x45, 0x6e, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x73, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x73, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x73, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x73, 0x6c, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x73, 0x6c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x73, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0xae, 0x01, 0x0a, 0x0e, 0x4b, 0x76, 0x64, 0x62, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x72,
	0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x62, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x57, 0x0a, 0x17, 0x50, 0x78, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1a, 0x0a, 0x18, 0x50,
	0x78, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x78, 0x47, 0x65, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x58, 0x0a, 0x18, 0x50, 0x78, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1c, 0x0a, 0x1a,
	0x50, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x50, 0x78,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x0b, 0x53, 0x6c, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x22, 0x57, 0x0a, 0x17, 0x50, 0x78, 0x53, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x0c, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0b, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1a, 0x0a, 0x18,
	0x50, 0x78, 0x53, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x50, 0x78, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x50, 0x78, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x78, 0x47, 0x65, 0x74, 0x53, 0x6c,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x58, 0x0a, 0x18, 0x50, 0x78, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c,
	0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x73,
	0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x78,
	0x45, 0x78, 0x69, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x78, 0x45, 0x78, 0x69, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x78, 0x4b,
	0x76, 0x64, 0x62, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x5d, 0x0a, 0x16, 0x50, 0x78, 0x4b, 0x76, 0x64, 0x62, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0f,
	0x6b, 0x76, 0x64, 0x62, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x76, 0x64, 0x62, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x0d, 0x6b, 0x76, 0x64, 0x62, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0x48, 0x0a, 0x15, 0x50, 0x78, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x50,
	0x78, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x2d, 0x0a, 0x12, 0x50, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x46,
	0x0a, 0x13, 0x50, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xab, 0x06, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x64, 0x69, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x69, 0x72, 0x74, 0x79, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x61, 0x64, 0x48, 0x69, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x69,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6f, 0x5f, 0x6d,
	0x62, 0x70, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6f, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x74, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x72,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x74, 0x75, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f,
	0x54, 0x75, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x74,
	0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x74, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x72, 0x74,
	0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x72, 0x74, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x78, 0x4b, 0x76, 0x64, 0x62, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x14,
	0x50, 0x78, 0x4b, 0x76, 0x64, 0x62, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x10, 0x6b, 0x76, 0x64, 0x62, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78,
	0x4b, 0x76, 0x64, 0x62, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4b, 0x76, 0x64, 0x62, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6b, 0x76, 0x64, 0x62, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x5f, 0x0a, 0x13, 0x4b, 0x76, 0x64, 0x62, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x76,
	0x64, 0x62, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x14, 0x50, 0x78, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x48, 0x0a, 0x15, 0x50, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb8, 0x01, 0x0a,
	0x0b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x41, 0x0a, 0x0a, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x22, 0x33, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x02, 0x22, 0x74, 0x0a, 0x13, 0x50, 0x78,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x30, 0x0a, 0x14, 0x50, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x13, 0x50, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x44, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x78, 0x50, 0x6f, 0x6f, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd,
	0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x22, 0x51, 0x0a,
	0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x74, 0x6f, 0x70, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x04,
	0x22, 0x5c, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x04, 0x22, 0x5b,
	0x0a, 0x13, 0x50, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x0c, 0x50,
	0x78, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x6e, 0x22, 0x55, 0x0a, 0x14, 0x50,
	0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x50, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x50, 0x0a, 0x1a, 0x50, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x43, 0x0a, 0x15, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0x6d, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x12, 0x27, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x65, 0x65,
	0x6b, 0x64, 0x61, 0x79, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x17, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64,
	0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0xe1,
	0x01, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x12, 0x3e, 0x0a, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x12, 0x41, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x50, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x50, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6f, 0x0a, 0x1e, 0x50, 0x78, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x12, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x6d, 0x0a, 0x1c, 0x50, 0x78, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xf6, 0x02, 0x0a, 0x0e, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x64, 0x69, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69,
	0x72, 0x22, 0x22, 0x0a, 0x20, 0x50, 0x78, 0x4b, 0x76, 0x64, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x21, 0x50, 0x78, 0x4b, 0x76, 0x64, 0x62, 0x47,
	0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x50, 0x78, 0x4b, 0x76, 0x64, 0x62, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xa0, 0x01, 0x0a, 0x1b, 0x50, 0x78, 0x4b, 0x76, 0x64, 0x62, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x22, 0x69, 0x0a, 0x1b, 0x50, 0x78, 0x44, 0x65, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x4b, 0x76, 0x64, 0x62, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x1e,
	0x0a, 0x1c, 0x50, 0x78, 0x44, 0x65, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x76,
	0x64, 0x62, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfb,
	0x02, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x10,
	0x02, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x70, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x77,
	0x6e, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0c,
	0x12, 0x15, 0x0a, 0x11, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x79, 0x6e,
	0x63, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x75,
	0x6c, 0x6c, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x13,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x10, 0x14, 0x22, 0x84, 0x07, 0x0a,
	0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x53, 0x63, 0x61, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x4b, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0x32, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x16, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x41, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x61,
	0x64, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x5f, 0x34, 0x6b, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x34, 0x6b, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x1a, 0x5e, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x02, 0x0a, 0x11, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4f, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2f, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x09, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61,
	0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x46, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xb2, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f,
	0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x6e, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x97, 0x0d,
	0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x5f, 0x6d, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56,
	0x6f, 0x6c, 0x4d, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x44, 0x65, 0x76, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x44, 0x65, 0x76, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x6d, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x52, 0x03,
	0x67, 0x65, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x68, 0x61, 0x5f, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x61, 0x4f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x0a, 0x6d, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x61, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x61, 0x69, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6f, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x73, 0x74,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x66, 0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x61, 0x73, 0x74,
	0x70, 0x61, 0x74, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x61,
	0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x46,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x61, 0x73, 0x74, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x61, 0x73,
	0x74, 0x70, 0x61, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42, 0x6c, 0x6b, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x41,
	0x0a, 0x1d, 0x66, 0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x66, 0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x78, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x49, 0x0a, 0x18, 0x50, 0x78, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x16, 0x0a,
	0x14, 0x50, 0x78, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x15, 0x50, 0x78, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74,
	0x61, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x50, 0x78, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x37, 0x0a, 0x1c, 0x50, 0x78, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x49, 0x64, 0x73, 0x22, 0x36, 0x0a, 0x1d, 0x50, 0x78,
	0x52, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x76,
	0x49, 0x64, 0x22, 0x38, 0x0a, 0x1e, 0x50, 0x78, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1e, 0x0a, 0x1c,
	0x50, 0x78, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x1d,
	0x50, 0x78, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x65, 0x64, 0x22, 0x2b, 0x0a, 0x11,
	0x50, 0x78, 0x4e, 0x52, 0x43, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x12, 0x50, 0x78, 0x4e,
	0x52, 0x43, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64,
	0x22, 0x9d, 0x01, 0x0a, 0x14, 0x50, 0x78, 0x50, 0x72, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x50, 0x72, 0x65, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x9b, 0x01, 0x0a, 0x15, 0x50, 0x78, 0x50, 0x72, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x50, 0x72, 0x65, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e,
	0x0a, 0x13, 0x50, 0x78, 0x44, 0x72, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x28,
	0x0a, 0x14, 0x50, 0x78, 0x44, 0x72, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x51, 0x0a, 0x0e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x3f, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x03, 0x22, 0x82, 0x01, 0x0a, 0x17,
	0x50, 0x78, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c,
	0x22, 0x4f, 0x0a, 0x0c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x22, 0x3f, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10,
	0x03, 0x22, 0x2c, 0x0a, 0x18, 0x50, 0x78, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0xb3, 0x01, 0x0a, 0x15, 0x50, 0x78, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x16, 0x50, 0x78, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x78, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x18,
	0x50, 0x78, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x2e, 0x0a, 0x13, 0x50, 0x78,
	0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x78,
	0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x61, 0x0a, 0x18, 0x50, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x50, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x64, 0x0a, 0x25, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x70,
	0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x26, 0x50, 0x78, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5b, 0x0a, 0x20, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x23, 0x0a, 0x21, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x27, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4f, 0x0a, 0x17, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x53, 0x0a, 0x18, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x19, 0x50, 0x78, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x72,
	0x72, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x5f, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x17,
	0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd4, 0x01, 0x0a,
	0x0d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75,
	0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xe8, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x4f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x62, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x54, 0x62, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0x23, 0x0a, 0x21, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x22, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x1f, 0x50, 0x78, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5b,
	0x0a, 0x20, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x33, 0x0a, 0x1d, 0x50,
	0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x36, 0x0a, 0x1e, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x50, 0x78, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x1c, 0x50, 0x78, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x3a, 0x0a, 0x0c, 0x50, 0x6f, 0x6f, 0x6c, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x69, 0x67,
	0x68, 0x10, 0x03, 0x2a, 0x65, 0x0a, 0x07, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x6f,
	0x6e, 0x64, 0x61, 0x79, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x75, 0x65, 0x73, 0x64, 0x61,
	0x79, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x72, 0x69, 0x64, 0x61, 0x79, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x10, 0x06, 0x2a, 0x5c, 0x0a, 0x12, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x75, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x03, 0x2a, 0x40, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x02, 0x2a, 0x5d, 0x0a, 0x0b, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x76, 0x64, 0x62, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x74, 0x72, 0x66, 0x73, 0x53, 0x75,
	0x62, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x03, 0x2a, 0x50, 0x0a, 0x0f, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x62, 0x64, 0x10, 0x03, 0x2a, 0x40, 0x0a, 0x0c, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x46, 0x73, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x58, 0x56, 0x10, 0x02, 0x2a, 0x60, 0x0a,
	0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x74, 0x72, 0x66, 0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x6d, 0x74,
	0x68, 0x69, 0x6e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x64, 0x72, 0x61, 0x69, 0x64, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x78, 0x74, 0x34, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4e,
	0x6f, 0x63, 0x6f, 0x77, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x76, 0x6d, 0x10, 0x06, 0x32,
	0x88, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x74, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78,
	0x4d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x8c, 0x01, 0x0a, 0x11, 0x50,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x12, 0x77, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x78, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x86, 0x07, 0x0a, 0x0f, 0x50, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0xb3, 0x01,
	0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x33, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x1a, 0x24, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2d,
	0x62, 0x79, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x64,
	0x3a, 0x01, 0x2a, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42,
	0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x1a, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2d, 0x62, 0x79, 0x2d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x3a, 0x01, 0x2a, 0x12, 0xaa, 0x01, 0x0a, 0x17, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x35, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x1a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x2f, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x3a, 0x01,
	0x2a, 0x12, 0x78, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x25, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x1a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x09,
	0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12,
	0x71, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x32, 0xd3, 0x03, 0x0a, 0x17, 0x50, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x8d,
	0x01, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x64, 0x2d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x96,
	0x01, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x2d,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x8e, 0x01, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x2b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x78, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x64, 0x2d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x32, 0x94, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x7a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0xbd, 0x24, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x4f, 0x70, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a,
	0x17, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x80, 0x01, 0x0a, 0x0e,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x6f, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x6f, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x6f, 0x6d, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x68, 0x6f, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5f,
	0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12,
	0x86, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x78, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x53, 0x65, 0x74, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x1a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x47, 0x65, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x78, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x1a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x67, 0x65, 0x74, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01,
	0x2a, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x1a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x53, 0x6c,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x53, 0x65, 0x74, 0x53, 0x6c,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x78, 0x53, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x1a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65,
	0x74, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x12,
	0x92, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6c, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x1a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x3a, 0x01, 0x2a, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78,
	0x47, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x73,
	0x6c, 0x61, 0x63, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x76, 0x0a, 0x0a, 0x45, 0x78,
	0x69, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x45, 0x78, 0x69, 0x74, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x45, 0x78, 0x69,
	0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x65, 0x78, 0x69, 0x74, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4b, 0x76, 0x64, 0x62, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4b, 0x76, 0x64, 0x62, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4b, 0x76,
	0x64, 0x62, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6b, 0x76, 0x64, 0x62, 0x2f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x7f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4b, 0x76, 0x64,
	0x62, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4b, 0x76, 0x64,
	0x62, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78,
	0x4b, 0x76, 0x64, 0x62, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6b, 0x76, 0x64, 0x62, 0x2f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xa5, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4b,
	0x76, 0x64, 0x62, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x78, 0x4b, 0x76, 0x64, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x78, 0x4b, 0x76, 0x64, 0x62, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6b, 0x76, 0x64, 0x62, 0x2f, 0x62,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x89, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4b, 0x76, 0x64, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x4b, 0x76, 0x64, 0x62, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x78, 0x4b, 0x76, 0x64, 0x62, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6b, 0x76, 0x64, 0x62, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x12,
	0x44, 0x65, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x76, 0x64, 0x62, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x78, 0x44, 0x65, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x76,
	0x64, 0x62, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x44,
	0x65, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x76, 0x64, 0x62, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6b,
	0x76, 0x64, 0x62, 0x2f, 0x64, 0x65, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x6e, 0x6f,
	0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x80, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x78, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12,
	0x17, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x70, 0x65, 0x63, 0x12, 0x70, 0x0a, 0x0a, 0x50, 0x6f, 0x6f, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x1a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x0a, 0x50, 0x6f,
	0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x50, 0x6f, 0x6f,
	0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x7b, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x77,
	0x0a, 0x0a, 0x44, 0x72, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x21, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x78, 0x44, 0x72, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x78, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x7f, 0x0a, 0x0c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x78, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x76, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x12, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x1a,
	0x16, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x63,
	0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x2c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x2c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x1a, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x9e, 0x01, 0x0a, 0x17, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x76, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x94, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x52, 0x65, 0x6c,
	0x61, 0x78, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x72,
	0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x98, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x61, 0x78,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x2b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x78, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x52, 0x65,
	0x6c, 0x61, 0x78, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x1a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x3a, 0x01,
	0x2a, 0x12, 0x92, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x52, 0x65, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x52, 0x65, 0x6c, 0x61, 0x78,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x72,
	0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x69, 0x0a, 0x08, 0x4e, 0x52, 0x43, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x78, 0x4e, 0x52, 0x43, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x78, 0x4e, 0x52, 0x43, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x1a, 0x0f, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6e, 0x72, 0x63, 0x3a, 0x01,
	0x2a, 0x12, 0x7a, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x78, 0x50, 0x72, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x50, 0x72, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70,
	0x72, 0x65, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x8f, 0x01,
	0x0a, 0x14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0x94, 0x04, 0x0a, 0x18, 0x50, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x88, 0x01, 0x0a,
	0x0c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x78, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x1a, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f,
	0x6f, 0x6c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x72, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12,
	0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x6f,
	0x6c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x80, 0x01, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x1a, 0x1f, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x76,
	0x0a, 0x05, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x12, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x78, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x1a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x70, 0x78, 0x2f, 0x61,
	0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_px_api_api_proto_rawDescOnce sync.Once
	file_px_api_api_proto_rawDescData = file_px_api_api_proto_rawDesc
)

func file_px_api_api_proto_rawDescGZIP() []byte {
	file_px_api_api_proto_rawDescOnce.Do(func() {
		file_px_api_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_px_api_api_proto_rawDescData)
	})
	return file_px_api_api_proto_rawDescData
}

var file_px_api_api_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_px_api_api_proto_msgTypes = make([]protoimpl.MessageInfo, 149)
var file_px_api_api_proto_goTypes = []interface{}{
	(PoolPriority)(0),                                // 0: portworx.api.PoolPriority
	(Weekday)(0),                                     // 1: portworx.api.Weekday
	(BootstrapNodeState)(0),                          // 2: portworx.api.BootstrapNodeState
	(BootstrapNodeType)(0),                           // 3: portworx.api.BootstrapNodeType
	(DataDirType)(0),                                 // 4: portworx.api.DataDirType
	(BlockDriverType)(0),                             // 5: portworx.api.BlockDriverType
	(TargetDsType)(0),                                // 6: portworx.api.TargetDsType
	(PoolType)(0),                                    // 7: portworx.api.PoolType
	(Telemetry_StatusCode)(0),                        // 8: portworx.api.Telemetry.StatusCode
	(Maintenance_OperationType)(0),                   // 9: portworx.api.Maintenance.OperationType
	(CallHome_OperationType)(0),                      // 10: portworx.api.CallHome.OperationType
	(CacheFlush_OperationType)(0),                    // 11: portworx.api.CacheFlush.OperationType
	(DeviceScan_OperationType)(0),                    // 12: portworx.api.DeviceScan.OperationType
	(DeviceScan_ResponseType)(0),                     // 13: portworx.api.DeviceScan.ResponseType
	(Storage_Status)(0),                              // 14: portworx.api.Storage.Status
	(DriveRebalance_OperationType)(0),                // 15: portworx.api.DriveRebalance.OperationType
	(DriveReplace_OperationType)(0),                  // 16: portworx.api.DriveReplace.OperationType
	(LicenseCondition_Severity)(0),                   // 17: portworx.api.LicenseCondition.Severity
	(*PureArray)(nil),                                // 18: portworx.api.PureArray
	(*PureComponent)(nil),                            // 19: portworx.api.PureComponent
	(*PureAlert)(nil),                                // 20: portworx.api.PureAlert
	(*PxMeteringStatusRequest)(nil),                  // 21: portworx.api.PxMeteringStatusRequest
	(*PxMeteringStatusResponse)(nil),                 // 22: portworx.api.PxMeteringStatusResponse
	(*MeteringStatus)(nil),                           // 23: portworx.api.MeteringStatus
	(*PxTelemetryCheck)(nil),                         // 24: portworx.api.PxTelemetryCheck
	(*PxTelemetryCheckDetails)(nil),                  // 25: portworx.api.PxTelemetryCheckDetails
	(*Telemetry)(nil),                                // 26: portworx.api.Telemetry
	(*TelemetryStatusResponse)(nil),                  // 27: portworx.api.TelemetryStatusResponse
	(*TelemetryStatus)(nil),                          // 28: portworx.api.TelemetryStatus
	(*TelemetryStatusComponent)(nil),                 // 29: portworx.api.TelemetryStatusComponent
	(*TelemetryCommonStatus)(nil),                    // 30: portworx.api.TelemetryCommonStatus
	(*TelemetryCertStatus)(nil),                      // 31: portworx.api.TelemetryCertStatus
	(*TelemetryServerStatus)(nil),                    // 32: portworx.api.TelemetryServerStatus
	(*TelemetryConnectionStatusResponse)(nil),        // 33: portworx.api.TelemetryConnectionStatusResponse
	(*TelemetryConnectionStatus)(nil),                // 34: portworx.api.TelemetryConnectionStatus
	(*PxTelemetryStatusRequest)(nil),                 // 35: portworx.api.PxTelemetryStatusRequest
	(*PxTelemetryStatusResponse)(nil),                // 36: portworx.api.PxTelemetryStatusResponse
	(*Maintenance)(nil),                              // 37: portworx.api.Maintenance
	(*CallHome)(nil),                                 // 38: portworx.api.CallHome
	(*PxMaintenanceOpsUpdateRequest)(nil),            // 39: portworx.api.PxMaintenanceOpsUpdateRequest
	(*PxMaintenanceOpsUpdateResponse)(nil),           // 40: portworx.api.PxMaintenanceOpsUpdateResponse
	(*PxCallHomeUpdateRequest)(nil),                  // 41: portworx.api.PxCallHomeUpdateRequest
	(*PxCallHomeUpdateResponse)(nil),                 // 42: portworx.api.PxCallHomeUpdateResponse
	(*PxAuditRequest)(nil),                           // 43: portworx.api.PxAuditRequest
	(*AuditResult)(nil),                              // 44: portworx.api.AuditResult
	(*PxAuditResponse)(nil),                          // 45: portworx.api.PxAuditResponse
	(*EmailConfig)(nil),                              // 46: portworx.api.EmailConfig
	(*KvdbEndPoints)(nil),                            // 47: portworx.api.KvdbEndPoints
	(*KvdbMemberInfo)(nil),                           // 48: portworx.api.KvdbMemberInfo
	(*PxSetEmailConfigRequest)(nil),                  // 49: portworx.api.PxSetEmailConfigRequest
	(*PxSetEmailConfigResponse)(nil),                 // 50: portworx.api.PxSetEmailConfigResponse
	(*PxGetEmailConfigRequest)(nil),                  // 51: portworx.api.PxGetEmailConfigRequest
	(*PxGetEmailConfigResponse)(nil),                 // 52: portworx.api.PxGetEmailConfigResponse
	(*PxDeleteEmailConfigRequest)(nil),               // 53: portworx.api.PxDeleteEmailConfigRequest
	(*PxDeleteEmailConfigResponse)(nil),              // 54: portworx.api.PxDeleteEmailConfigResponse
	(*SlackConfig)(nil),                              // 55: portworx.api.SlackConfig
	(*PxSetSlackConfigRequest)(nil),                  // 56: portworx.api.PxSetSlackConfigRequest
	(*PxSetSlackConfigResponse)(nil),                 // 57: portworx.api.PxSetSlackConfigResponse
	(*PxDeleteSlackConfigRequest)(nil),               // 58: portworx.api.PxDeleteSlackConfigRequest
	(*PxDeleteSlackConfigResponse)(nil),              // 59: portworx.api.PxDeleteSlackConfigResponse
	(*PxGetSlackConfigRequest)(nil),                  // 60: portworx.api.PxGetSlackConfigRequest
	(*PxGetSlackConfigResponse)(nil),                 // 61: portworx.api.PxGetSlackConfigResponse
	(*PxExitDaemonRequest)(nil),                      // 62: portworx.api.PxExitDaemonRequest
	(*PxExitDaemonResponse)(nil),                     // 63: portworx.api.PxExitDaemonResponse
	(*PxKvdbEndpointRequest)(nil),                    // 64: portworx.api.PxKvdbEndpointRequest
	(*PxKvdbEndpointResponse)(nil),                   // 65: portworx.api.PxKvdbEndpointResponse
	(*PxToggleStatusRequest)(nil),                    // 66: portworx.api.PxToggleStatusRequest
	(*PxToggleStatusResponse)(nil),                   // 67: portworx.api.PxToggleStatusResponse
	(*PxCacheInfoRequest)(nil),                       // 68: portworx.api.PxCacheInfoRequest
	(*PxCacheInfoResponse)(nil),                      // 69: portworx.api.PxCacheInfoResponse
	(*CacheInfo)(nil),                                // 70: portworx.api.CacheInfo
	(*PxKvdbMemberRequest)(nil),                      // 71: portworx.api.PxKvdbMemberRequest
	(*PxKvdbMemberResponse)(nil),                     // 72: portworx.api.PxKvdbMemberResponse
	(*PxCacheConfigRequest)(nil),                     // 73: portworx.api.PxCacheConfigRequest
	(*PxCacheConfigResponse)(nil),                    // 74: portworx.api.PxCacheConfigResponse
	(*CacheConfig)(nil),                              // 75: portworx.api.CacheConfig
	(*CacheFlush)(nil),                               // 76: portworx.api.CacheFlush
	(*PxCacheFlushRequest)(nil),                      // 77: portworx.api.PxCacheFlushRequest
	(*PxCacheFlushResponse)(nil),                     // 78: portworx.api.PxCacheFlushResponse
	(*PxPoolUpdateRequest)(nil),                      // 79: portworx.api.PxPoolUpdateRequest
	(*PxPoolUpdateResponse)(nil),                     // 80: portworx.api.PxPoolUpdateResponse
	(*DeviceScan)(nil),                               // 81: portworx.api.DeviceScan
	(*PxDeviceScanRequest)(nil),                      // 82: portworx.api.PxDeviceScanRequest
	(*PxScanStatus)(nil),                             // 83: portworx.api.PxScanStatus
	(*PxDeviceScanResponse)(nil),                     // 84: portworx.api.PxDeviceScanResponse
	(*PxDeviceScanStatusRequest)(nil),                // 85: portworx.api.PxDeviceScanStatusRequest
	(*PxDeviceScanStatusResponse)(nil),               // 86: portworx.api.PxDeviceScanStatusResponse
	(*ScheduleIntervalDaily)(nil),                    // 87: portworx.api.ScheduleIntervalDaily
	(*ScheduleIntervalWeekly)(nil),                   // 88: portworx.api.ScheduleIntervalWeekly
	(*ScheduleIntervalMonthly)(nil),                  // 89: portworx.api.ScheduleIntervalMonthly
	(*ScheduleInterval)(nil),                         // 90: portworx.api.ScheduleInterval
	(*PxDeviceScanScheduleGetRequest)(nil),           // 91: portworx.api.PxDeviceScanScheduleGetRequest
	(*PxDeviceScanScheduleClearRequest)(nil),         // 92: portworx.api.PxDeviceScanScheduleClearRequest
	(*PxDeviceScanScheduleSetRequest)(nil),           // 93: portworx.api.PxDeviceScanScheduleSetRequest
	(*PxDeviceScanScheduleResponse)(nil),             // 94: portworx.api.PxDeviceScanScheduleResponse
	(*BootstrapEntry)(nil),                           // 95: portworx.api.BootstrapEntry
	(*PxKvdbGetBootstrapEntriesRequest)(nil),         // 96: portworx.api.PxKvdbGetBootstrapEntriesRequest
	(*PxKvdbGetBootstrapEntriesResponse)(nil),        // 97: portworx.api.PxKvdbGetBootstrapEntriesResponse
	(*PxKvdbGetDeviceInfoRequest)(nil),               // 98: portworx.api.PxKvdbGetDeviceInfoRequest
	(*PxKvdbGetDeviceInfoResponse)(nil),              // 99: portworx.api.PxKvdbGetDeviceInfoResponse
	(*PxDefragmentKvdbNodeRequest)(nil),              // 100: portworx.api.PxDefragmentKvdbNodeRequest
	(*PxDefragmentKvdbNodeResponse)(nil),             // 101: portworx.api.PxDefragmentKvdbNodeResponse
	(*Storage)(nil),                                  // 102: portworx.api.Storage
	(*StorageInfo)(nil),                              // 103: portworx.api.StorageInfo
	(*CloudResourceInfo)(nil),                        // 104: portworx.api.CloudResourceInfo
	(*InstanceGroupInfo)(nil),                        // 105: portworx.api.InstanceGroupInfo
	(*Geography)(nil),                                // 106: portworx.api.Geography
	(*StoragePool)(nil),                              // 107: portworx.api.StoragePool
	(*StorageSpec)(nil),                              // 108: portworx.api.StorageSpec
	(*PxGetStorageSpecRequest)(nil),                  // 109: portworx.api.PxGetStorageSpecRequest
	(*PxGetStorageSpecResponse)(nil),                 // 110: portworx.api.PxGetStorageSpecResponse
	(*PxGetNodeStatRequest)(nil),                     // 111: portworx.api.PxGetNodeStatRequest
	(*PxGetNodeStatResponse)(nil),                    // 112: portworx.api.PxGetNodeStatResponse
	(*PxRelaxedReclaimShowRequest)(nil),              // 113: portworx.api.PxRelaxedReclaimShowRequest
	(*PxRelaxedReclaimShowResponse)(nil),             // 114: portworx.api.PxRelaxedReclaimShowResponse
	(*PxRelaxedReclaimDeleteRequest)(nil),            // 115: portworx.api.PxRelaxedReclaimDeleteRequest
	(*PxRelaxedReclaimDeleteResponse)(nil),           // 116: portworx.api.PxRelaxedReclaimDeleteResponse
	(*PxRelaxedReclaimPurgeRequest)(nil),             // 117: portworx.api.PxRelaxedReclaimPurgeRequest
	(*PxRelaxedReclaimPurgeResponse)(nil),            // 118: portworx.api.PxRelaxedReclaimPurgeResponse
	(*PxNRCPauseRequest)(nil),                        // 119: portworx.api.PxNRCPauseRequest
	(*PxNRCPauseResponse)(nil),                       // 120: portworx.api.PxNRCPauseResponse
	(*PxPreShutdownRequest)(nil),                     // 121: portworx.api.PxPreShutdownRequest
	(*PxPreShutdownResponse)(nil),                    // 122: portworx.api.PxPreShutdownResponse
	(*PxDriveCheckRequest)(nil),                      // 123: portworx.api.PxDriveCheckRequest
	(*PxDriveCheckResponse)(nil),                     // 124: portworx.api.PxDriveCheckResponse
	(*DriveRebalance)(nil),                           // 125: portworx.api.DriveRebalance
	(*PxDriveRebalanceRequest)(nil),                  // 126: portworx.api.PxDriveRebalanceRequest
	(*DriveReplace)(nil),                             // 127: portworx.api.DriveReplace
	(*PxDriveRebalanceResponse)(nil),                 // 128: portworx.api.PxDriveRebalanceResponse
	(*PxDriveReplaceRequest)(nil),                    // 129: portworx.api.PxDriveReplaceRequest
	(*PxDriveReplaceResponse)(nil),                   // 130: portworx.api.PxDriveReplaceResponse
	(*PxSystemMetadataRequest)(nil),                  // 131: portworx.api.PxSystemMetadataRequest
	(*PxSystemMetadataResponse)(nil),                 // 132: portworx.api.PxSystemMetadataResponse
	(*PxPoolDeleteRequest)(nil),                      // 133: portworx.api.PxPoolDeleteRequest
	(*PxPoolDeleteResponse)(nil),                     // 134: portworx.api.PxPoolDeleteResponse
	(*PxPoolMaintenanceRequest)(nil),                 // 135: portworx.api.PxPoolMaintenanceRequest
	(*PxPoolMaintenanceResponse)(nil),                // 136: portworx.api.PxPoolMaintenanceResponse
	(*PxLicenseInstallByActivationIDRequest)(nil),    // 137: portworx.api.PxLicenseInstallByActivationIDRequest
	(*PxLicenseInstallByActivationIDResponse)(nil),   // 138: portworx.api.PxLicenseInstallByActivationIDResponse
	(*PxLicenseInstallByLicenseRequest)(nil),         // 139: portworx.api.PxLicenseInstallByLicenseRequest
	(*PxLicenseInstallByLicenseResponse)(nil),        // 140: portworx.api.PxLicenseInstallByLicenseResponse
	(*PxLicenseUninstallByActivationIDRequest)(nil),  // 141: portworx.api.PxLicenseUninstallByActivationIDRequest
	(*PxLicenseUninstallByActivationIDResponse)(nil), // 142: portworx.api.PxLicenseUninstallByActivationIDResponse
	(*PxLicenseReleaseRequest)(nil),                  // 143: portworx.api.PxLicenseReleaseRequest
	(*PxLicenseReleaseResponse)(nil),                 // 144: portworx.api.PxLicenseReleaseResponse
	(*PxLicenseSetServerRequest)(nil),                // 145: portworx.api.PxLicenseSetServerRequest
	(*PxLicenseSetServerResponse)(nil),               // 146: portworx.api.PxLicenseSetServerResponse
	(*PxLicenseStatusRequest)(nil),                   // 147: portworx.api.PxLicenseStatusRequest
	(*PxLicenseStatusResponse)(nil),                  // 148: portworx.api.PxLicenseStatusResponse
	(*LicenseStatus)(nil),                            // 149: portworx.api.LicenseStatus
	(*LicenseCondition)(nil),                         // 150: portworx.api.LicenseCondition
	(*LicensedFeature)(nil),                          // 151: portworx.api.LicensedFeature
	(*PxLicensedFeatureEnumerateRequest)(nil),        // 152: portworx.api.PxLicensedFeatureEnumerateRequest
	(*PxLicensedFeatureEnumerateResponse)(nil),       // 153: portworx.api.PxLicensedFeatureEnumerateResponse
	(*PxLicensedFeatureInspectRequest)(nil),          // 154: portworx.api.PxLicensedFeatureInspectRequest
	(*PxLicensedFeatureInspectResponse)(nil),         // 155: portworx.api.PxLicensedFeatureInspectResponse
	(*PxLicensedFeatureCheckRequest)(nil),            // 156: portworx.api.PxLicensedFeatureCheckRequest
	(*PxLicensedFeatureCheckResponse)(nil),           // 157: portworx.api.PxLicensedFeatureCheckResponse
	(*PxStorageOptionsListRequest)(nil),              // 158: portworx.api.PxStorageOptionsListRequest
	(*PxStorageOptionsListResponse)(nil),             // 159: portworx.api.PxStorageOptionsListResponse
	nil,                                              // 160: portworx.api.PxKvdbMemberResponse.KvdbMemberInfoEntry
	nil,                                              // 161: portworx.api.StorageInfo.ResourcesEntry
	nil,                                              // 162: portworx.api.CloudResourceInfo.LabelsEntry
	nil,                                              // 163: portworx.api.StorageSpec.LabelsEntry
	nil,                                              // 164: portworx.api.PxPreShutdownRequest.OptionsEntry
	nil,                                              // 165: portworx.api.PxPreShutdownResponse.ResultEntry
	nil,                                              // 166: portworx.api.PxStorageOptionsListResponse.StorageOptsEntry
	(api.SeverityType)(0),                            // 167: openstorage.api.SeverityType
	(*wrapperspb.StringValue)(nil),                   // 168: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),                    // 169: google.protobuf.Timestamp
	(*api.StorageResource)(nil),                      // 170: openstorage.api.StorageResource
	(*wrapperspb.Int64Value)(nil),                    // 171: google.protobuf.Int64Value
	(*api.StoragePool)(nil),                          // 172: openstorage.api.StoragePool
	(api.CosType)(0),                                 // 173: openstorage.api.CosType
}
var file_px_api_api_proto_depIdxs = []int32{
	18,  // 0: portworx.api.PureAlert.array:type_name -> portworx.api.PureArray
	19,  // 1: portworx.api.PureAlert.component:type_name -> portworx.api.PureComponent
	23,  // 2: portworx.api.PxMeteringStatusResponse.status:type_name -> portworx.api.MeteringStatus
	25,  // 3: portworx.api.PxTelemetryCheck.details:type_name -> portworx.api.PxTelemetryCheckDetails
	28,  // 4: portworx.api.TelemetryStatusResponse.response:type_name -> portworx.api.TelemetryStatus
	29,  // 5: portworx.api.TelemetryStatus.component:type_name -> portworx.api.TelemetryStatusComponent
	30,  // 6: portworx.api.TelemetryStatus.ping:type_name -> portworx.api.TelemetryCommonStatus
	30,  // 7: portworx.api.TelemetryStatus.mediator:type_name -> portworx.api.TelemetryCommonStatus
	31,  // 8: portworx.api.TelemetryStatus.appliance_cert:type_name -> portworx.api.TelemetryCertStatus
	31,  // 9: portworx.api.TelemetryStatus.release_cert:type_name -> portworx.api.TelemetryCertStatus
	32,  // 10: portworx.api.TelemetryStatus.server_status:type_name -> portworx.api.TelemetryServerStatus
	34,  // 11: portworx.api.TelemetryConnectionStatusResponse.response:type_name -> portworx.api.TelemetryConnectionStatus
	24,  // 12: portworx.api.TelemetryConnectionStatus.checks:type_name -> portworx.api.PxTelemetryCheck
	8,   // 13: portworx.api.TelemetryConnectionStatus.error_code:type_name -> portworx.api.Telemetry.StatusCode
	28,  // 14: portworx.api.PxTelemetryStatusResponse.status:type_name -> portworx.api.TelemetryStatus
	34,  // 15: portworx.api.PxTelemetryStatusResponse.connection_status:type_name -> portworx.api.TelemetryConnectionStatus
	9,   // 16: portworx.api.PxMaintenanceOpsUpdateRequest.operation:type_name -> portworx.api.Maintenance.OperationType
	10,  // 17: portworx.api.PxCallHomeUpdateRequest.operation:type_name -> portworx.api.CallHome.OperationType
	44,  // 18: portworx.api.PxAuditResponse.results:type_name -> portworx.api.AuditResult
	167, // 19: portworx.api.EmailConfig.severity:type_name -> openstorage.api.SeverityType
	46,  // 20: portworx.api.PxSetEmailConfigRequest.email_config:type_name -> portworx.api.EmailConfig
	46,  // 21: portworx.api.PxGetEmailConfigResponse.email_config:type_name -> portworx.api.EmailConfig
	167, // 22: portworx.api.SlackConfig.severity:type_name -> openstorage.api.SeverityType
	55,  // 23: portworx.api.PxSetSlackConfigRequest.slack_config:type_name -> portworx.api.SlackConfig
	55,  // 24: portworx.api.PxGetSlackConfigResponse.slack_config:type_name -> portworx.api.SlackConfig
	47,  // 25: portworx.api.PxKvdbEndpointResponse.kvdb_end_points:type_name -> portworx.api.KvdbEndPoints
	70,  // 26: portworx.api.PxCacheInfoResponse.result:type_name -> portworx.api.CacheInfo
	160, // 27: portworx.api.PxKvdbMemberResponse.kvdb_member_info:type_name -> portworx.api.PxKvdbMemberResponse.KvdbMemberInfoEntry
	75,  // 28: portworx.api.PxCacheConfigRequest.config:type_name -> portworx.api.CacheConfig
	70,  // 29: portworx.api.PxCacheConfigResponse.result:type_name -> portworx.api.CacheInfo
	11,  // 30: portworx.api.PxCacheFlushRequest.operation:type_name -> portworx.api.CacheFlush.OperationType
	0,   // 31: portworx.api.PxPoolUpdateRequest.priority:type_name -> portworx.api.PoolPriority
	168, // 32: portworx.api.PxPoolUpdateRequest.labels:type_name -> google.protobuf.StringValue
	12,  // 33: portworx.api.PxDeviceScanRequest.operation:type_name -> portworx.api.DeviceScan.OperationType
	13,  // 34: portworx.api.PxDeviceScanResponse.result:type_name -> portworx.api.DeviceScan.ResponseType
	83,  // 35: portworx.api.PxDeviceScanStatusResponse.status:type_name -> portworx.api.PxScanStatus
	1,   // 36: portworx.api.ScheduleIntervalWeekly.day:type_name -> portworx.api.Weekday
	87,  // 37: portworx.api.ScheduleInterval.daily:type_name -> portworx.api.ScheduleIntervalDaily
	88,  // 38: portworx.api.ScheduleInterval.weekly:type_name -> portworx.api.ScheduleIntervalWeekly
	89,  // 39: portworx.api.ScheduleInterval.monthly:type_name -> portworx.api.ScheduleIntervalMonthly
	90,  // 40: portworx.api.PxDeviceScanScheduleSetRequest.schedule_intervals:type_name -> portworx.api.ScheduleInterval
	90,  // 41: portworx.api.PxDeviceScanScheduleResponse.schedule_intervals:type_name -> portworx.api.ScheduleInterval
	2,   // 42: portworx.api.BootstrapEntry.state:type_name -> portworx.api.BootstrapNodeState
	3,   // 43: portworx.api.BootstrapEntry.type:type_name -> portworx.api.BootstrapNodeType
	169, // 44: portworx.api.BootstrapEntry.updated_at:type_name -> google.protobuf.Timestamp
	4,   // 45: portworx.api.BootstrapEntry.datadir:type_name -> portworx.api.DataDirType
	95,  // 46: portworx.api.PxKvdbGetBootstrapEntriesResponse.entries:type_name -> portworx.api.BootstrapEntry
	4,   // 47: portworx.api.PxKvdbGetDeviceInfoResponse.type:type_name -> portworx.api.DataDirType
	161, // 48: portworx.api.StorageInfo.resources:type_name -> portworx.api.StorageInfo.ResourcesEntry
	170, // 49: portworx.api.StorageInfo.resource_journal:type_name -> openstorage.api.StorageResource
	170, // 50: portworx.api.StorageInfo.resource_system_metadata:type_name -> openstorage.api.StorageResource
	14,  // 51: portworx.api.StorageInfo.status:type_name -> portworx.api.Storage.Status
	70,  // 52: portworx.api.StorageInfo.cache:type_name -> portworx.api.CacheInfo
	162, // 53: portworx.api.CloudResourceInfo.labels:type_name -> portworx.api.CloudResourceInfo.LabelsEntry
	104, // 54: portworx.api.InstanceGroupInfo.cloud_resource_info:type_name -> portworx.api.CloudResourceInfo
	171, // 55: portworx.api.InstanceGroupInfo.min:type_name -> google.protobuf.Int64Value
	171, // 56: portworx.api.InstanceGroupInfo.max:type_name -> google.protobuf.Int64Value
	105, // 57: portworx.api.Geography.instance_group:type_name -> portworx.api.InstanceGroupInfo
	172, // 58: portworx.api.StoragePool.pool:type_name -> openstorage.api.StoragePool
	173, // 59: portworx.api.StoragePool.cos_admin:type_name -> openstorage.api.CosType
	103, // 60: portworx.api.StoragePool.info:type_name -> portworx.api.StorageInfo
	14,  // 61: portworx.api.StoragePool.status:type_name -> portworx.api.Storage.Status
	5,   // 62: portworx.api.StorageSpec.block_driver:type_name -> portworx.api.BlockDriverType
	6,   // 63: portworx.api.StorageSpec.target_ds_type:type_name -> portworx.api.TargetDsType
	103, // 64: portworx.api.StorageSpec.info:type_name -> portworx.api.StorageInfo
	103, // 65: portworx.api.StorageSpec.md_info:type_name -> portworx.api.StorageInfo
	106, // 66: portworx.api.StorageSpec.geo:type_name -> portworx.api.Geography
	163, // 67: portworx.api.StorageSpec.labels:type_name -> portworx.api.StorageSpec.LabelsEntry
	14,  // 68: portworx.api.StorageSpec.op_status:type_name -> portworx.api.Storage.Status
	107, // 69: portworx.api.StorageSpec.data_pools:type_name -> portworx.api.StoragePool
	7,   // 70: portworx.api.StorageSpec.data_pool_type:type_name -> portworx.api.PoolType
	108, // 71: portworx.api.PxGetStorageSpecResponse.spec:type_name -> portworx.api.StorageSpec
	164, // 72: portworx.api.PxPreShutdownRequest.options:type_name -> portworx.api.PxPreShutdownRequest.OptionsEntry
	165, // 73: portworx.api.PxPreShutdownResponse.result:type_name -> portworx.api.PxPreShutdownResponse.ResultEntry
	15,  // 74: portworx.api.PxDriveRebalanceRequest.op:type_name -> portworx.api.DriveRebalance.OperationType
	16,  // 75: portworx.api.PxDriveReplaceRequest.op:type_name -> portworx.api.DriveReplace.OperationType
	9,   // 76: portworx.api.PxPoolMaintenanceRequest.operation:type_name -> portworx.api.Maintenance.OperationType
	149, // 77: portworx.api.PxLicenseStatusResponse.status:type_name -> portworx.api.LicenseStatus
	169, // 78: portworx.api.LicenseStatus.expires_on:type_name -> google.protobuf.Timestamp
	150, // 79: portworx.api.LicenseStatus.conditions:type_name -> portworx.api.LicenseCondition
	17,  // 80: portworx.api.LicenseCondition.severity:type_name -> portworx.api.LicenseCondition.Severity
	150, // 81: portworx.api.LicensedFeature.conditions:type_name -> portworx.api.LicenseCondition
	169, // 82: portworx.api.LicensedFeature.expires_on:type_name -> google.protobuf.Timestamp
	151, // 83: portworx.api.PxLicensedFeatureEnumerateResponse.features:type_name -> portworx.api.LicensedFeature
	151, // 84: portworx.api.PxLicensedFeatureInspectResponse.feature:type_name -> portworx.api.LicensedFeature
	166, // 85: portworx.api.PxStorageOptionsListResponse.storageOpts:type_name -> portworx.api.PxStorageOptionsListResponse.StorageOptsEntry
	48,  // 86: portworx.api.PxKvdbMemberResponse.KvdbMemberInfoEntry.value:type_name -> portworx.api.KvdbMemberInfo
	170, // 87: portworx.api.StorageInfo.ResourcesEntry.value:type_name -> openstorage.api.StorageResource
	21,  // 88: portworx.api.PortworxMetering.Status:input_type -> portworx.api.PxMeteringStatusRequest
	35,  // 89: portworx.api.PortworxTelemetry.Status:input_type -> portworx.api.PxTelemetryStatusRequest
	137, // 90: portworx.api.PortworxLicense.InstallByActivationID:input_type -> portworx.api.PxLicenseInstallByActivationIDRequest
	139, // 91: portworx.api.PortworxLicense.InstallByLicense:input_type -> portworx.api.PxLicenseInstallByLicenseRequest
	141, // 92: portworx.api.PortworxLicense.UninstallByActivationID:input_type -> portworx.api.PxLicenseUninstallByActivationIDRequest
	143, // 93: portworx.api.PortworxLicense.Release:input_type -> portworx.api.PxLicenseReleaseRequest
	145, // 94: portworx.api.PortworxLicense.SetServer:input_type -> portworx.api.PxLicenseSetServerRequest
	147, // 95: portworx.api.PortworxLicense.Status:input_type -> portworx.api.PxLicenseStatusRequest
	152, // 96: portworx.api.PortworxLicensedFeature.Enumerate:input_type -> portworx.api.PxLicensedFeatureEnumerateRequest
	154, // 97: portworx.api.PortworxLicensedFeature.Inspect:input_type -> portworx.api.PxLicensedFeatureInspectRequest
	156, // 98: portworx.api.PortworxLicensedFeature.Check:input_type -> portworx.api.PxLicensedFeatureCheckRequest
	158, // 99: portworx.api.PortworxStorageOptions.List:input_type -> portworx.api.PxStorageOptionsListRequest
	39,  // 100: portworx.api.PortworxService.MaintenanceOpsUpdate:input_type -> portworx.api.PxMaintenanceOpsUpdateRequest
	41,  // 101: portworx.api.PortworxService.CallHomeUpdate:input_type -> portworx.api.PxCallHomeUpdateRequest
	43,  // 102: portworx.api.PortworxService.Audit:input_type -> portworx.api.PxAuditRequest
	49,  // 103: portworx.api.PortworxService.SetEmailConfig:input_type -> portworx.api.PxSetEmailConfigRequest
	51,  // 104: portworx.api.PortworxService.GetEmailConfig:input_type -> portworx.api.PxGetEmailConfigRequest
	53,  // 105: portworx.api.PortworxService.DeleteEmailConfig:input_type -> portworx.api.PxDeleteEmailConfigRequest
	56,  // 106: portworx.api.PortworxService.SetSlackConfig:input_type -> portworx.api.PxSetSlackConfigRequest
	58,  // 107: portworx.api.PortworxService.DeleteSlackConfig:input_type -> portworx.api.PxDeleteSlackConfigRequest
	60,  // 108: portworx.api.PortworxService.GetSlackConfig:input_type -> portworx.api.PxGetSlackConfigRequest
	62,  // 109: portworx.api.PortworxService.ExitDaemon:input_type -> portworx.api.PxExitDaemonRequest
	64,  // 110: portworx.api.PortworxService.GetKvdbEndpoints:input_type -> portworx.api.PxKvdbEndpointRequest
	71,  // 111: portworx.api.PortworxService.GetKvdbMemberInfo:input_type -> portworx.api.PxKvdbMemberRequest
	96,  // 112: portworx.api.PortworxService.GetKvdbBootstrapEntries:input_type -> portworx.api.PxKvdbGetBootstrapEntriesRequest
	98,  // 113: portworx.api.PortworxService.GetKvdbDeviceInfo:input_type -> portworx.api.PxKvdbGetDeviceInfoRequest
	100, // 114: portworx.api.PortworxService.DefragmentKvdbNode:input_type -> portworx.api.PxDefragmentKvdbNodeRequest
	109, // 115: portworx.api.PortworxService.GetStorageSpec:input_type -> portworx.api.PxGetStorageSpecRequest
	79,  // 116: portworx.api.PortworxService.PoolUpdate:input_type -> portworx.api.PxPoolUpdateRequest
	133, // 117: portworx.api.PortworxService.PoolDelete:input_type -> portworx.api.PxPoolDeleteRequest
	135, // 118: portworx.api.PortworxService.PoolMaintenance:input_type -> portworx.api.PxPoolMaintenanceRequest
	123, // 119: portworx.api.PortworxService.DriveCheck:input_type -> portworx.api.PxDriveCheckRequest
	126, // 120: portworx.api.PortworxService.DriveRebalance:input_type -> portworx.api.PxDriveRebalanceRequest
	129, // 121: portworx.api.PortworxService.DriveReplace:input_type -> portworx.api.PxDriveReplaceRequest
	82,  // 122: portworx.api.PortworxService.DeviceScan:input_type -> portworx.api.PxDeviceScanRequest
	85,  // 123: portworx.api.PortworxService.DeviceScanStatus:input_type -> portworx.api.PxDeviceScanStatusRequest
	91,  // 124: portworx.api.PortworxService.GetDeviceScanSchedule:input_type -> portworx.api.PxDeviceScanScheduleGetRequest
	93,  // 125: portworx.api.PortworxService.SetDeviceScanSchedule:input_type -> portworx.api.PxDeviceScanScheduleSetRequest
	92,  // 126: portworx.api.PortworxService.ClearDeviceScanSchedule:input_type -> portworx.api.PxDeviceScanScheduleClearRequest
	111, // 127: portworx.api.PortworxService.GetNodeStats:input_type -> portworx.api.PxGetNodeStatRequest
	113, // 128: portworx.api.PortworxService.RelaxedReclaimEnumerate:input_type -> portworx.api.PxRelaxedReclaimShowRequest
	115, // 129: portworx.api.PortworxService.RelaxedReclaimDelete:input_type -> portworx.api.PxRelaxedReclaimDeleteRequest
	117, // 130: portworx.api.PortworxService.RelaxedReclaimPurge:input_type -> portworx.api.PxRelaxedReclaimPurgeRequest
	119, // 131: portworx.api.PortworxService.NRCPause:input_type -> portworx.api.PxNRCPauseRequest
	121, // 132: portworx.api.PortworxService.PreShutdown:input_type -> portworx.api.PxPreShutdownRequest
	131, // 133: portworx.api.PortworxService.SystemMetadataStatus:input_type -> portworx.api.PxSystemMetadataRequest
	66,  // 134: portworx.api.PortworxStoragePoolCache.ToggleStatus:input_type -> portworx.api.PxToggleStatusRequest
	68,  // 135: portworx.api.PortworxStoragePoolCache.GetInfo:input_type -> portworx.api.PxCacheInfoRequest
	73,  // 136: portworx.api.PortworxStoragePoolCache.Configure:input_type -> portworx.api.PxCacheConfigRequest
	77,  // 137: portworx.api.PortworxStoragePoolCache.Flush:input_type -> portworx.api.PxCacheFlushRequest
	22,  // 138: portworx.api.PortworxMetering.Status:output_type -> portworx.api.PxMeteringStatusResponse
	36,  // 139: portworx.api.PortworxTelemetry.Status:output_type -> portworx.api.PxTelemetryStatusResponse
	138, // 140: portworx.api.PortworxLicense.InstallByActivationID:output_type -> portworx.api.PxLicenseInstallByActivationIDResponse
	140, // 141: portworx.api.PortworxLicense.InstallByLicense:output_type -> portworx.api.PxLicenseInstallByLicenseResponse
	142, // 142: portworx.api.PortworxLicense.UninstallByActivationID:output_type -> portworx.api.PxLicenseUninstallByActivationIDResponse
	144, // 143: portworx.api.PortworxLicense.Release:output_type -> portworx.api.PxLicenseReleaseResponse
	146, // 144: portworx.api.PortworxLicense.SetServer:output_type -> portworx.api.PxLicenseSetServerResponse
	148, // 145: portworx.api.PortworxLicense.Status:output_type -> portworx.api.PxLicenseStatusResponse
	153, // 146: portworx.api.PortworxLicensedFeature.Enumerate:output_type -> portworx.api.PxLicensedFeatureEnumerateResponse
	155, // 147: portworx.api.PortworxLicensedFeature.Inspect:output_type -> portworx.api.PxLicensedFeatureInspectResponse
	157, // 148: portworx.api.PortworxLicensedFeature.Check:output_type -> portworx.api.PxLicensedFeatureCheckResponse
	159, // 149: portworx.api.PortworxStorageOptions.List:output_type -> portworx.api.PxStorageOptionsListResponse
	40,  // 150: portworx.api.PortworxService.MaintenanceOpsUpdate:output_type -> portworx.api.PxMaintenanceOpsUpdateResponse
	42,  // 151: portworx.api.PortworxService.CallHomeUpdate:output_type -> portworx.api.PxCallHomeUpdateResponse
	45,  // 152: portworx.api.PortworxService.Audit:output_type -> portworx.api.PxAuditResponse
	50,  // 153: portworx.api.PortworxService.SetEmailConfig:output_type -> portworx.api.PxSetEmailConfigResponse
	52,  // 154: portworx.api.PortworxService.GetEmailConfig:output_type -> portworx.api.PxGetEmailConfigResponse
	54,  // 155: portworx.api.PortworxService.DeleteEmailConfig:output_type -> portworx.api.PxDeleteEmailConfigResponse
	57,  // 156: portworx.api.PortworxService.SetSlackConfig:output_type -> portworx.api.PxSetSlackConfigResponse
	59,  // 157: portworx.api.PortworxService.DeleteSlackConfig:output_type -> portworx.api.PxDeleteSlackConfigResponse
	61,  // 158: portworx.api.PortworxService.GetSlackConfig:output_type -> portworx.api.PxGetSlackConfigResponse
	63,  // 159: portworx.api.PortworxService.ExitDaemon:output_type -> portworx.api.PxExitDaemonResponse
	65,  // 160: portworx.api.PortworxService.GetKvdbEndpoints:output_type -> portworx.api.PxKvdbEndpointResponse
	72,  // 161: portworx.api.PortworxService.GetKvdbMemberInfo:output_type -> portworx.api.PxKvdbMemberResponse
	97,  // 162: portworx.api.PortworxService.GetKvdbBootstrapEntries:output_type -> portworx.api.PxKvdbGetBootstrapEntriesResponse
	99,  // 163: portworx.api.PortworxService.GetKvdbDeviceInfo:output_type -> portworx.api.PxKvdbGetDeviceInfoResponse
	101, // 164: portworx.api.PortworxService.DefragmentKvdbNode:output_type -> portworx.api.PxDefragmentKvdbNodeResponse
	110, // 165: portworx.api.PortworxService.GetStorageSpec:output_type -> portworx.api.PxGetStorageSpecResponse
	80,  // 166: portworx.api.PortworxService.PoolUpdate:output_type -> portworx.api.PxPoolUpdateResponse
	134, // 167: portworx.api.PortworxService.PoolDelete:output_type -> portworx.api.PxPoolDeleteResponse
	136, // 168: portworx.api.PortworxService.PoolMaintenance:output_type -> portworx.api.PxPoolMaintenanceResponse
	124, // 169: portworx.api.PortworxService.DriveCheck:output_type -> portworx.api.PxDriveCheckResponse
	128, // 170: portworx.api.PortworxService.DriveRebalance:output_type -> portworx.api.PxDriveRebalanceResponse
	130, // 171: portworx.api.PortworxService.DriveReplace:output_type -> portworx.api.PxDriveReplaceResponse
	84,  // 172: portworx.api.PortworxService.DeviceScan:output_type -> portworx.api.PxDeviceScanResponse
	86,  // 173: portworx.api.PortworxService.DeviceScanStatus:output_type -> portworx.api.PxDeviceScanStatusResponse
	94,  // 174: portworx.api.PortworxService.GetDeviceScanSchedule:output_type -> portworx.api.PxDeviceScanScheduleResponse
	94,  // 175: portworx.api.PortworxService.SetDeviceScanSchedule:output_type -> portworx.api.PxDeviceScanScheduleResponse
	94,  // 176: portworx.api.PortworxService.ClearDeviceScanSchedule:output_type -> portworx.api.PxDeviceScanScheduleResponse
	112, // 177: portworx.api.PortworxService.GetNodeStats:output_type -> portworx.api.PxGetNodeStatResponse
	114, // 178: portworx.api.PortworxService.RelaxedReclaimEnumerate:output_type -> portworx.api.PxRelaxedReclaimShowResponse
	116, // 179: portworx.api.PortworxService.RelaxedReclaimDelete:output_type -> portworx.api.PxRelaxedReclaimDeleteResponse
	118, // 180: portworx.api.PortworxService.RelaxedReclaimPurge:output_type -> portworx.api.PxRelaxedReclaimPurgeResponse
	120, // 181: portworx.api.PortworxService.NRCPause:output_type -> portworx.api.PxNRCPauseResponse
	122, // 182: portworx.api.PortworxService.PreShutdown:output_type -> portworx.api.PxPreShutdownResponse
	132, // 183: portworx.api.PortworxService.SystemMetadataStatus:output_type -> portworx.api.PxSystemMetadataResponse
	67,  // 184: portworx.api.PortworxStoragePoolCache.ToggleStatus:output_type -> portworx.api.PxToggleStatusResponse
	69,  // 185: portworx.api.PortworxStoragePoolCache.GetInfo:output_type -> portworx.api.PxCacheInfoResponse
	74,  // 186: portworx.api.PortworxStoragePoolCache.Configure:output_type -> portworx.api.PxCacheConfigResponse
	78,  // 187: portworx.api.PortworxStoragePoolCache.Flush:output_type -> portworx.api.PxCacheFlushResponse
	138, // [138:188] is the sub-list for method output_type
	88,  // [88:138] is the sub-list for method input_type
	88,  // [88:88] is the sub-list for extension type_name
	88,  // [88:88] is the sub-list for extension extendee
	0,   // [0:88] is the sub-list for field type_name
}

func init() { file_px_api_api_proto_init() }
func file_px_api_api_proto_init() {
	if File_px_api_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_px_api_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PureArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PureComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PureAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxMeteringStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxMeteringStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeteringStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxTelemetryCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxTelemetryCheckDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Telemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryStatusComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryCommonStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryCertStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryServerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryConnectionStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryConnectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxTelemetryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxTelemetryStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Maintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxMaintenanceOpsUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxMaintenanceOpsUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxCallHomeUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxCallHomeUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxAuditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxAuditResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvdbEndPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvdbMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxSetEmailConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxSetEmailConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxGetEmailConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxGetEmailConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDeleteEmailConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDeleteEmailConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxSetSlackConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxSetSlackConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDeleteSlackConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDeleteSlackConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxGetSlackConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxGetSlackConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxExitDaemonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxExitDaemonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxKvdbEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxKvdbEndpointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxToggleStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxToggleStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxCacheInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxCacheInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxKvdbMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxKvdbMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxCacheConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxCacheConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheFlush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxCacheFlushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxCacheFlushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxPoolUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxPoolUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceScan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDeviceScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxScanStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDeviceScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDeviceScanStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDeviceScanStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleIntervalDaily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleIntervalWeekly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleIntervalMonthly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDeviceScanScheduleGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDeviceScanScheduleClearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDeviceScanScheduleSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDeviceScanScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxKvdbGetBootstrapEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxKvdbGetBootstrapEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxKvdbGetDeviceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxKvdbGetDeviceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDefragmentKvdbNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDefragmentKvdbNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Geography); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoragePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxGetStorageSpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxGetStorageSpecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxGetNodeStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxGetNodeStatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxRelaxedReclaimShowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxRelaxedReclaimShowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxRelaxedReclaimDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxRelaxedReclaimDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxRelaxedReclaimPurgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxRelaxedReclaimPurgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxNRCPauseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxNRCPauseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxPreShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxPreShutdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDriveCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDriveCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriveRebalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDriveRebalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriveReplace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDriveRebalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDriveReplaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxDriveReplaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxSystemMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxSystemMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxPoolDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxPoolDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxPoolMaintenanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxPoolMaintenanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicenseInstallByActivationIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicenseInstallByActivationIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicenseInstallByLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicenseInstallByLicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicenseUninstallByActivationIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicenseUninstallByActivationIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicenseReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicenseReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicenseSetServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicenseSetServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicenseStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicenseStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicensedFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicensedFeatureEnumerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicensedFeatureEnumerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicensedFeatureInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicensedFeatureInspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicensedFeatureCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxLicensedFeatureCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxStorageOptionsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_px_api_api_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PxStorageOptionsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_px_api_api_proto_msgTypes[72].OneofWrappers = []interface{}{
		(*ScheduleInterval_Daily)(nil),
		(*ScheduleInterval_Weekly)(nil),
		(*ScheduleInterval_Monthly)(nil),
	}
	file_px_api_api_proto_msgTypes[133].OneofWrappers = []interface{}{
		(*LicensedFeature_Count)(nil),
		(*LicensedFeature_CapacityTb)(nil),
		(*LicensedFeature_Enabled)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_px_api_api_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   149,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_px_api_api_proto_goTypes,
		DependencyIndexes: file_px_api_api_proto_depIdxs,
		EnumInfos:         file_px_api_api_proto_enumTypes,
		MessageInfos:      file_px_api_api_proto_msgTypes,
	}.Build()
	File_px_api_api_proto = out.File
	file_px_api_api_proto_rawDesc = nil
	file_px_api_api_proto_goTypes = nil
	file_px_api_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PortworxMeteringClient is the client API for PortworxMetering service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortworxMeteringClient interface {
	// Get health of metering agent (if enabled)
	Status(ctx context.Context, in *PxMeteringStatusRequest, opts ...grpc.CallOption) (*PxMeteringStatusResponse, error)
}

type portworxMeteringClient struct {
	cc grpc.ClientConnInterface
}

func NewPortworxMeteringClient(cc grpc.ClientConnInterface) PortworxMeteringClient {
	return &portworxMeteringClient{cc}
}

func (c *portworxMeteringClient) Status(ctx context.Context, in *PxMeteringStatusRequest, opts ...grpc.CallOption) (*PxMeteringStatusResponse, error) {
	out := new(PxMeteringStatusResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxMetering/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortworxMeteringServer is the server API for PortworxMetering service.
type PortworxMeteringServer interface {
	// Get health of metering agent (if enabled)
	Status(context.Context, *PxMeteringStatusRequest) (*PxMeteringStatusResponse, error)
}

// UnimplementedPortworxMeteringServer can be embedded to have forward compatible implementations.
type UnimplementedPortworxMeteringServer struct {
}

func (*UnimplementedPortworxMeteringServer) Status(context.Context, *PxMeteringStatusRequest) (*PxMeteringStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterPortworxMeteringServer(s *grpc.Server, srv PortworxMeteringServer) {
	s.RegisterService(&_PortworxMetering_serviceDesc, srv)
}

func _PortworxMetering_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxMeteringStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxMeteringServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxMetering/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxMeteringServer).Status(ctx, req.(*PxMeteringStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortworxMetering_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portworx.api.PortworxMetering",
	HandlerType: (*PortworxMeteringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _PortworxMetering_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "px/api/api.proto",
}

// PortworxTelemetryClient is the client API for PortworxTelemetry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortworxTelemetryClient interface {
	// Get information about the installed license.
	Status(ctx context.Context, in *PxTelemetryStatusRequest, opts ...grpc.CallOption) (*PxTelemetryStatusResponse, error)
}

type portworxTelemetryClient struct {
	cc grpc.ClientConnInterface
}

func NewPortworxTelemetryClient(cc grpc.ClientConnInterface) PortworxTelemetryClient {
	return &portworxTelemetryClient{cc}
}

func (c *portworxTelemetryClient) Status(ctx context.Context, in *PxTelemetryStatusRequest, opts ...grpc.CallOption) (*PxTelemetryStatusResponse, error) {
	out := new(PxTelemetryStatusResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxTelemetry/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortworxTelemetryServer is the server API for PortworxTelemetry service.
type PortworxTelemetryServer interface {
	// Get information about the installed license.
	Status(context.Context, *PxTelemetryStatusRequest) (*PxTelemetryStatusResponse, error)
}

// UnimplementedPortworxTelemetryServer can be embedded to have forward compatible implementations.
type UnimplementedPortworxTelemetryServer struct {
}

func (*UnimplementedPortworxTelemetryServer) Status(context.Context, *PxTelemetryStatusRequest) (*PxTelemetryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterPortworxTelemetryServer(s *grpc.Server, srv PortworxTelemetryServer) {
	s.RegisterService(&_PortworxTelemetry_serviceDesc, srv)
}

func _PortworxTelemetry_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxTelemetryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxTelemetryServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxTelemetry/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxTelemetryServer).Status(ctx, req.(*PxTelemetryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortworxTelemetry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portworx.api.PortworxTelemetry",
	HandlerType: (*PortworxTelemetryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _PortworxTelemetry_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "px/api/api.proto",
}

// PortworxLicenseClient is the client API for PortworxLicense service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortworxLicenseClient interface {
	// Install license by providing an activation ID.
	InstallByActivationID(ctx context.Context, in *PxLicenseInstallByActivationIDRequest, opts ...grpc.CallOption) (*PxLicenseInstallByActivationIDResponse, error)
	// Install by providing a license BLOB. Existing license is overwritten. This is used in air-gapped environment
	// where there is no connectivity from the Portworx nodes to the license server.
	InstallByLicense(ctx context.Context, in *PxLicenseInstallByLicenseRequest, opts ...grpc.CallOption) (*PxLicenseInstallByLicenseResponse, error)
	// Uninstall the license by its activation ID.
	UninstallByActivationID(ctx context.Context, in *PxLicenseUninstallByActivationIDRequest, opts ...grpc.CallOption) (*PxLicenseUninstallByActivationIDResponse, error)
	// Release the license from this cluster for use on another cluster.
	Release(ctx context.Context, in *PxLicenseReleaseRequest, opts ...grpc.CallOption) (*PxLicenseReleaseResponse, error)
	// Specify a license server that manages the licenses. When using a license server, install/uninstall of the license
	// is performed on the license server. Portworx cluster requests a floating license from the license server.
	SetServer(ctx context.Context, in *PxLicenseSetServerRequest, opts ...grpc.CallOption) (*PxLicenseSetServerResponse, error)
	// Get information about the installed license.
	Status(ctx context.Context, in *PxLicenseStatusRequest, opts ...grpc.CallOption) (*PxLicenseStatusResponse, error)
}

type portworxLicenseClient struct {
	cc grpc.ClientConnInterface
}

func NewPortworxLicenseClient(cc grpc.ClientConnInterface) PortworxLicenseClient {
	return &portworxLicenseClient{cc}
}

func (c *portworxLicenseClient) InstallByActivationID(ctx context.Context, in *PxLicenseInstallByActivationIDRequest, opts ...grpc.CallOption) (*PxLicenseInstallByActivationIDResponse, error) {
	out := new(PxLicenseInstallByActivationIDResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxLicense/InstallByActivationID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxLicenseClient) InstallByLicense(ctx context.Context, in *PxLicenseInstallByLicenseRequest, opts ...grpc.CallOption) (*PxLicenseInstallByLicenseResponse, error) {
	out := new(PxLicenseInstallByLicenseResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxLicense/InstallByLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxLicenseClient) UninstallByActivationID(ctx context.Context, in *PxLicenseUninstallByActivationIDRequest, opts ...grpc.CallOption) (*PxLicenseUninstallByActivationIDResponse, error) {
	out := new(PxLicenseUninstallByActivationIDResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxLicense/UninstallByActivationID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxLicenseClient) Release(ctx context.Context, in *PxLicenseReleaseRequest, opts ...grpc.CallOption) (*PxLicenseReleaseResponse, error) {
	out := new(PxLicenseReleaseResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxLicense/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxLicenseClient) SetServer(ctx context.Context, in *PxLicenseSetServerRequest, opts ...grpc.CallOption) (*PxLicenseSetServerResponse, error) {
	out := new(PxLicenseSetServerResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxLicense/SetServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxLicenseClient) Status(ctx context.Context, in *PxLicenseStatusRequest, opts ...grpc.CallOption) (*PxLicenseStatusResponse, error) {
	out := new(PxLicenseStatusResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxLicense/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortworxLicenseServer is the server API for PortworxLicense service.
type PortworxLicenseServer interface {
	// Install license by providing an activation ID.
	InstallByActivationID(context.Context, *PxLicenseInstallByActivationIDRequest) (*PxLicenseInstallByActivationIDResponse, error)
	// Install by providing a license BLOB. Existing license is overwritten. This is used in air-gapped environment
	// where there is no connectivity from the Portworx nodes to the license server.
	InstallByLicense(context.Context, *PxLicenseInstallByLicenseRequest) (*PxLicenseInstallByLicenseResponse, error)
	// Uninstall the license by its activation ID.
	UninstallByActivationID(context.Context, *PxLicenseUninstallByActivationIDRequest) (*PxLicenseUninstallByActivationIDResponse, error)
	// Release the license from this cluster for use on another cluster.
	Release(context.Context, *PxLicenseReleaseRequest) (*PxLicenseReleaseResponse, error)
	// Specify a license server that manages the licenses. When using a license server, install/uninstall of the license
	// is performed on the license server. Portworx cluster requests a floating license from the license server.
	SetServer(context.Context, *PxLicenseSetServerRequest) (*PxLicenseSetServerResponse, error)
	// Get information about the installed license.
	Status(context.Context, *PxLicenseStatusRequest) (*PxLicenseStatusResponse, error)
}

// UnimplementedPortworxLicenseServer can be embedded to have forward compatible implementations.
type UnimplementedPortworxLicenseServer struct {
}

func (*UnimplementedPortworxLicenseServer) InstallByActivationID(context.Context, *PxLicenseInstallByActivationIDRequest) (*PxLicenseInstallByActivationIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallByActivationID not implemented")
}
func (*UnimplementedPortworxLicenseServer) InstallByLicense(context.Context, *PxLicenseInstallByLicenseRequest) (*PxLicenseInstallByLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallByLicense not implemented")
}
func (*UnimplementedPortworxLicenseServer) UninstallByActivationID(context.Context, *PxLicenseUninstallByActivationIDRequest) (*PxLicenseUninstallByActivationIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallByActivationID not implemented")
}
func (*UnimplementedPortworxLicenseServer) Release(context.Context, *PxLicenseReleaseRequest) (*PxLicenseReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (*UnimplementedPortworxLicenseServer) SetServer(context.Context, *PxLicenseSetServerRequest) (*PxLicenseSetServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServer not implemented")
}
func (*UnimplementedPortworxLicenseServer) Status(context.Context, *PxLicenseStatusRequest) (*PxLicenseStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterPortworxLicenseServer(s *grpc.Server, srv PortworxLicenseServer) {
	s.RegisterService(&_PortworxLicense_serviceDesc, srv)
}

func _PortworxLicense_InstallByActivationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicenseInstallByActivationIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicenseServer).InstallByActivationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicense/InstallByActivationID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicenseServer).InstallByActivationID(ctx, req.(*PxLicenseInstallByActivationIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxLicense_InstallByLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicenseInstallByLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicenseServer).InstallByLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicense/InstallByLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicenseServer).InstallByLicense(ctx, req.(*PxLicenseInstallByLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxLicense_UninstallByActivationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicenseUninstallByActivationIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicenseServer).UninstallByActivationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicense/UninstallByActivationID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicenseServer).UninstallByActivationID(ctx, req.(*PxLicenseUninstallByActivationIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxLicense_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicenseReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicenseServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicense/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicenseServer).Release(ctx, req.(*PxLicenseReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxLicense_SetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicenseSetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicenseServer).SetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicense/SetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicenseServer).SetServer(ctx, req.(*PxLicenseSetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxLicense_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicenseStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicenseServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicense/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicenseServer).Status(ctx, req.(*PxLicenseStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortworxLicense_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portworx.api.PortworxLicense",
	HandlerType: (*PortworxLicenseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallByActivationID",
			Handler:    _PortworxLicense_InstallByActivationID_Handler,
		},
		{
			MethodName: "InstallByLicense",
			Handler:    _PortworxLicense_InstallByLicense_Handler,
		},
		{
			MethodName: "UninstallByActivationID",
			Handler:    _PortworxLicense_UninstallByActivationID_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _PortworxLicense_Release_Handler,
		},
		{
			MethodName: "SetServer",
			Handler:    _PortworxLicense_SetServer_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _PortworxLicense_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "px/api/api.proto",
}

// PortworxLicensedFeatureClient is the client API for PortworxLicensedFeature service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortworxLicensedFeatureClient interface {
	// List all licensed features.
	Enumerate(ctx context.Context, in *PxLicensedFeatureEnumerateRequest, opts ...grpc.CallOption) (*PxLicensedFeatureEnumerateResponse, error)
	// Get information about a licensed feature.
	Inspect(ctx context.Context, in *PxLicensedFeatureInspectRequest, opts ...grpc.CallOption) (*PxLicensedFeatureInspectResponse, error)
	// Check if the license for feature is valid. Unlike `Inspect`, `Check` does not fail even when the specified feature
	// does not exist.
	Check(ctx context.Context, in *PxLicensedFeatureCheckRequest, opts ...grpc.CallOption) (*PxLicensedFeatureCheckResponse, error)
}

type portworxLicensedFeatureClient struct {
	cc grpc.ClientConnInterface
}

func NewPortworxLicensedFeatureClient(cc grpc.ClientConnInterface) PortworxLicensedFeatureClient {
	return &portworxLicensedFeatureClient{cc}
}

func (c *portworxLicensedFeatureClient) Enumerate(ctx context.Context, in *PxLicensedFeatureEnumerateRequest, opts ...grpc.CallOption) (*PxLicensedFeatureEnumerateResponse, error) {
	out := new(PxLicensedFeatureEnumerateResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxLicensedFeature/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxLicensedFeatureClient) Inspect(ctx context.Context, in *PxLicensedFeatureInspectRequest, opts ...grpc.CallOption) (*PxLicensedFeatureInspectResponse, error) {
	out := new(PxLicensedFeatureInspectResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxLicensedFeature/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxLicensedFeatureClient) Check(ctx context.Context, in *PxLicensedFeatureCheckRequest, opts ...grpc.CallOption) (*PxLicensedFeatureCheckResponse, error) {
	out := new(PxLicensedFeatureCheckResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxLicensedFeature/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortworxLicensedFeatureServer is the server API for PortworxLicensedFeature service.
type PortworxLicensedFeatureServer interface {
	// List all licensed features.
	Enumerate(context.Context, *PxLicensedFeatureEnumerateRequest) (*PxLicensedFeatureEnumerateResponse, error)
	// Get information about a licensed feature.
	Inspect(context.Context, *PxLicensedFeatureInspectRequest) (*PxLicensedFeatureInspectResponse, error)
	// Check if the license for feature is valid. Unlike `Inspect`, `Check` does not fail even when the specified feature
	// does not exist.
	Check(context.Context, *PxLicensedFeatureCheckRequest) (*PxLicensedFeatureCheckResponse, error)
}

// UnimplementedPortworxLicensedFeatureServer can be embedded to have forward compatible implementations.
type UnimplementedPortworxLicensedFeatureServer struct {
}

func (*UnimplementedPortworxLicensedFeatureServer) Enumerate(context.Context, *PxLicensedFeatureEnumerateRequest) (*PxLicensedFeatureEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedPortworxLicensedFeatureServer) Inspect(context.Context, *PxLicensedFeatureInspectRequest) (*PxLicensedFeatureInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedPortworxLicensedFeatureServer) Check(context.Context, *PxLicensedFeatureCheckRequest) (*PxLicensedFeatureCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}

func RegisterPortworxLicensedFeatureServer(s *grpc.Server, srv PortworxLicensedFeatureServer) {
	s.RegisterService(&_PortworxLicensedFeature_serviceDesc, srv)
}

func _PortworxLicensedFeature_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicensedFeatureEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicensedFeatureServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicensedFeature/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicensedFeatureServer).Enumerate(ctx, req.(*PxLicensedFeatureEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxLicensedFeature_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicensedFeatureInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicensedFeatureServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicensedFeature/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicensedFeatureServer).Inspect(ctx, req.(*PxLicensedFeatureInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxLicensedFeature_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicensedFeatureCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicensedFeatureServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicensedFeature/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicensedFeatureServer).Check(ctx, req.(*PxLicensedFeatureCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortworxLicensedFeature_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portworx.api.PortworxLicensedFeature",
	HandlerType: (*PortworxLicensedFeatureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enumerate",
			Handler:    _PortworxLicensedFeature_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _PortworxLicensedFeature_Inspect_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _PortworxLicensedFeature_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "px/api/api.proto",
}

// PortworxStorageOptionsClient is the client API for PortworxStorageOptions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortworxStorageOptionsClient interface {
	// Get all storage options on cluster.
	List(ctx context.Context, in *PxStorageOptionsListRequest, opts ...grpc.CallOption) (*PxStorageOptionsListResponse, error)
}

type portworxStorageOptionsClient struct {
	cc grpc.ClientConnInterface
}

func NewPortworxStorageOptionsClient(cc grpc.ClientConnInterface) PortworxStorageOptionsClient {
	return &portworxStorageOptionsClient{cc}
}

func (c *portworxStorageOptionsClient) List(ctx context.Context, in *PxStorageOptionsListRequest, opts ...grpc.CallOption) (*PxStorageOptionsListResponse, error) {
	out := new(PxStorageOptionsListResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxStorageOptions/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortworxStorageOptionsServer is the server API for PortworxStorageOptions service.
type PortworxStorageOptionsServer interface {
	// Get all storage options on cluster.
	List(context.Context, *PxStorageOptionsListRequest) (*PxStorageOptionsListResponse, error)
}

// UnimplementedPortworxStorageOptionsServer can be embedded to have forward compatible implementations.
type UnimplementedPortworxStorageOptionsServer struct {
}

func (*UnimplementedPortworxStorageOptionsServer) List(context.Context, *PxStorageOptionsListRequest) (*PxStorageOptionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterPortworxStorageOptionsServer(s *grpc.Server, srv PortworxStorageOptionsServer) {
	s.RegisterService(&_PortworxStorageOptions_serviceDesc, srv)
}

func _PortworxStorageOptions_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxStorageOptionsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxStorageOptionsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxStorageOptions/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxStorageOptionsServer).List(ctx, req.(*PxStorageOptionsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortworxStorageOptions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portworx.api.PortworxStorageOptions",
	HandlerType: (*PortworxStorageOptionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PortworxStorageOptions_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "px/api/api.proto",
}

// PortworxServiceClient is the client API for PortworxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortworxServiceClient interface {
	//  makes the portworx node enter maintenance mode
	MaintenanceOpsUpdate(ctx context.Context, in *PxMaintenanceOpsUpdateRequest, opts ...grpc.CallOption) (*PxMaintenanceOpsUpdateResponse, error)
	// To update the callhome state.
	CallHomeUpdate(ctx context.Context, in *PxCallHomeUpdateRequest, opts ...grpc.CallOption) (*PxCallHomeUpdateResponse, error)
	// To get the audit result from portworx node.
	Audit(ctx context.Context, in *PxAuditRequest, opts ...grpc.CallOption) (*PxAuditResponse, error)
	// To set the email config for alerts
	SetEmailConfig(ctx context.Context, in *PxSetEmailConfigRequest, opts ...grpc.CallOption) (*PxSetEmailConfigResponse, error)
	// To get the email config for alerts
	GetEmailConfig(ctx context.Context, in *PxGetEmailConfigRequest, opts ...grpc.CallOption) (*PxGetEmailConfigResponse, error)
	// To delete the email config for alerts
	DeleteEmailConfig(ctx context.Context, in *PxDeleteEmailConfigRequest, opts ...grpc.CallOption) (*PxDeleteEmailConfigResponse, error)
	// To set the slack config for alerts
	SetSlackConfig(ctx context.Context, in *PxSetSlackConfigRequest, opts ...grpc.CallOption) (*PxSetSlackConfigResponse, error)
	// To delete the slack config for alerts
	DeleteSlackConfig(ctx context.Context, in *PxDeleteSlackConfigRequest, opts ...grpc.CallOption) (*PxDeleteSlackConfigResponse, error)
	// To get the slack config for alerts
	GetSlackConfig(ctx context.Context, in *PxGetSlackConfigRequest, opts ...grpc.CallOption) (*PxGetSlackConfigResponse, error)
	// To stop or exit Px Daemon.
	ExitDaemon(ctx context.Context, in *PxExitDaemonRequest, opts ...grpc.CallOption) (*PxExitDaemonResponse, error)
	// To fetch kvdb endpoints
	GetKvdbEndpoints(ctx context.Context, in *PxKvdbEndpointRequest, opts ...grpc.CallOption) (*PxKvdbEndpointResponse, error)
	// Fetching kvdb member info
	GetKvdbMemberInfo(ctx context.Context, in *PxKvdbMemberRequest, opts ...grpc.CallOption) (*PxKvdbMemberResponse, error)
	// GetKvdbBootstrapEntries enumerates the nodes which are a part of the current kvdb cluster
	GetKvdbBootstrapEntries(ctx context.Context, in *PxKvdbGetBootstrapEntriesRequest, opts ...grpc.CallOption) (*PxKvdbGetBootstrapEntriesResponse, error)
	// Fetch kvdb device for this node
	GetKvdbDeviceInfo(ctx context.Context, in *PxKvdbGetDeviceInfoRequest, opts ...grpc.CallOption) (*PxKvdbGetDeviceInfoResponse, error)
	// start defragmenting of kvdb cluster node for the given endpoint
	// to defragment multiple members in the cluster, user need to call defragment multiple times with different endpoints
	DefragmentKvdbNode(ctx context.Context, in *PxDefragmentKvdbNodeRequest, opts ...grpc.CallOption) (*PxDefragmentKvdbNodeResponse, error)
	// GetStorageSpec returns this node's storage info, including storage pools, drives, etc...
	GetStorageSpec(ctx context.Context, in *PxGetStorageSpecRequest, opts ...grpc.CallOption) (*PxGetStorageSpecResponse, error)
	// PoolUpdate updates mutable storage pool properties
	PoolUpdate(ctx context.Context, in *PxPoolUpdateRequest, opts ...grpc.CallOption) (*PxPoolUpdateResponse, error)
	// PoolDelete deletes storage pool
	PoolDelete(ctx context.Context, in *PxPoolDeleteRequest, opts ...grpc.CallOption) (*PxPoolDeleteResponse, error)
	// PoolMaintenance does transition of all pools to maintenance mode
	PoolMaintenance(ctx context.Context, in *PxPoolMaintenanceRequest, opts ...grpc.CallOption) (*PxPoolMaintenanceResponse, error)
	// DriveCheck run diagnostics on all the in-use drives
	DriveCheck(ctx context.Context, in *PxDriveCheckRequest, opts ...grpc.CallOption) (*PxDriveCheckResponse, error)
	// DriveRebalance rebalance data within a given pool
	DriveRebalance(ctx context.Context, in *PxDriveRebalanceRequest, opts ...grpc.CallOption) (*PxDriveRebalanceResponse, error)
	// DriveReplace replaces source drive with target drive
	DriveReplace(ctx context.Context, in *PxDriveReplaceRequest, opts ...grpc.CallOption) (*PxDriveReplaceResponse, error)
	DeviceScan(ctx context.Context, in *PxDeviceScanRequest, opts ...grpc.CallOption) (*PxDeviceScanResponse, error)
	DeviceScanStatus(ctx context.Context, in *PxDeviceScanStatusRequest, opts ...grpc.CallOption) (*PxDeviceScanStatusResponse, error)
	GetDeviceScanSchedule(ctx context.Context, in *PxDeviceScanScheduleGetRequest, opts ...grpc.CallOption) (*PxDeviceScanScheduleResponse, error)
	SetDeviceScanSchedule(ctx context.Context, in *PxDeviceScanScheduleSetRequest, opts ...grpc.CallOption) (*PxDeviceScanScheduleResponse, error)
	ClearDeviceScanSchedule(ctx context.Context, in *PxDeviceScanScheduleClearRequest, opts ...grpc.CallOption) (*PxDeviceScanScheduleResponse, error)
	GetNodeStats(ctx context.Context, in *PxGetNodeStatRequest, opts ...grpc.CallOption) (*PxGetNodeStatResponse, error)
	RelaxedReclaimEnumerate(ctx context.Context, in *PxRelaxedReclaimShowRequest, opts ...grpc.CallOption) (*PxRelaxedReclaimShowResponse, error)
	RelaxedReclaimDelete(ctx context.Context, in *PxRelaxedReclaimDeleteRequest, opts ...grpc.CallOption) (*PxRelaxedReclaimDeleteResponse, error)
	RelaxedReclaimPurge(ctx context.Context, in *PxRelaxedReclaimPurgeRequest, opts ...grpc.CallOption) (*PxRelaxedReclaimPurgeResponse, error)
	NRCPause(ctx context.Context, in *PxNRCPauseRequest, opts ...grpc.CallOption) (*PxNRCPauseResponse, error)
	PreShutdown(ctx context.Context, in *PxPreShutdownRequest, opts ...grpc.CallOption) (*PxPreShutdownResponse, error)
	SystemMetadataStatus(ctx context.Context, in *PxSystemMetadataRequest, opts ...grpc.CallOption) (*PxSystemMetadataResponse, error)
}

type portworxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortworxServiceClient(cc grpc.ClientConnInterface) PortworxServiceClient {
	return &portworxServiceClient{cc}
}

func (c *portworxServiceClient) MaintenanceOpsUpdate(ctx context.Context, in *PxMaintenanceOpsUpdateRequest, opts ...grpc.CallOption) (*PxMaintenanceOpsUpdateResponse, error) {
	out := new(PxMaintenanceOpsUpdateResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/MaintenanceOpsUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) CallHomeUpdate(ctx context.Context, in *PxCallHomeUpdateRequest, opts ...grpc.CallOption) (*PxCallHomeUpdateResponse, error) {
	out := new(PxCallHomeUpdateResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/CallHomeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) Audit(ctx context.Context, in *PxAuditRequest, opts ...grpc.CallOption) (*PxAuditResponse, error) {
	out := new(PxAuditResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/Audit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) SetEmailConfig(ctx context.Context, in *PxSetEmailConfigRequest, opts ...grpc.CallOption) (*PxSetEmailConfigResponse, error) {
	out := new(PxSetEmailConfigResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/SetEmailConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetEmailConfig(ctx context.Context, in *PxGetEmailConfigRequest, opts ...grpc.CallOption) (*PxGetEmailConfigResponse, error) {
	out := new(PxGetEmailConfigResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/GetEmailConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DeleteEmailConfig(ctx context.Context, in *PxDeleteEmailConfigRequest, opts ...grpc.CallOption) (*PxDeleteEmailConfigResponse, error) {
	out := new(PxDeleteEmailConfigResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/DeleteEmailConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) SetSlackConfig(ctx context.Context, in *PxSetSlackConfigRequest, opts ...grpc.CallOption) (*PxSetSlackConfigResponse, error) {
	out := new(PxSetSlackConfigResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/SetSlackConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DeleteSlackConfig(ctx context.Context, in *PxDeleteSlackConfigRequest, opts ...grpc.CallOption) (*PxDeleteSlackConfigResponse, error) {
	out := new(PxDeleteSlackConfigResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/DeleteSlackConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetSlackConfig(ctx context.Context, in *PxGetSlackConfigRequest, opts ...grpc.CallOption) (*PxGetSlackConfigResponse, error) {
	out := new(PxGetSlackConfigResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/GetSlackConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) ExitDaemon(ctx context.Context, in *PxExitDaemonRequest, opts ...grpc.CallOption) (*PxExitDaemonResponse, error) {
	out := new(PxExitDaemonResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/ExitDaemon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetKvdbEndpoints(ctx context.Context, in *PxKvdbEndpointRequest, opts ...grpc.CallOption) (*PxKvdbEndpointResponse, error) {
	out := new(PxKvdbEndpointResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/GetKvdbEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetKvdbMemberInfo(ctx context.Context, in *PxKvdbMemberRequest, opts ...grpc.CallOption) (*PxKvdbMemberResponse, error) {
	out := new(PxKvdbMemberResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/GetKvdbMemberInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetKvdbBootstrapEntries(ctx context.Context, in *PxKvdbGetBootstrapEntriesRequest, opts ...grpc.CallOption) (*PxKvdbGetBootstrapEntriesResponse, error) {
	out := new(PxKvdbGetBootstrapEntriesResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/GetKvdbBootstrapEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetKvdbDeviceInfo(ctx context.Context, in *PxKvdbGetDeviceInfoRequest, opts ...grpc.CallOption) (*PxKvdbGetDeviceInfoResponse, error) {
	out := new(PxKvdbGetDeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/GetKvdbDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DefragmentKvdbNode(ctx context.Context, in *PxDefragmentKvdbNodeRequest, opts ...grpc.CallOption) (*PxDefragmentKvdbNodeResponse, error) {
	out := new(PxDefragmentKvdbNodeResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/DefragmentKvdbNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetStorageSpec(ctx context.Context, in *PxGetStorageSpecRequest, opts ...grpc.CallOption) (*PxGetStorageSpecResponse, error) {
	out := new(PxGetStorageSpecResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/GetStorageSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) PoolUpdate(ctx context.Context, in *PxPoolUpdateRequest, opts ...grpc.CallOption) (*PxPoolUpdateResponse, error) {
	out := new(PxPoolUpdateResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/PoolUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) PoolDelete(ctx context.Context, in *PxPoolDeleteRequest, opts ...grpc.CallOption) (*PxPoolDeleteResponse, error) {
	out := new(PxPoolDeleteResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/PoolDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) PoolMaintenance(ctx context.Context, in *PxPoolMaintenanceRequest, opts ...grpc.CallOption) (*PxPoolMaintenanceResponse, error) {
	out := new(PxPoolMaintenanceResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/PoolMaintenance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DriveCheck(ctx context.Context, in *PxDriveCheckRequest, opts ...grpc.CallOption) (*PxDriveCheckResponse, error) {
	out := new(PxDriveCheckResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/DriveCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DriveRebalance(ctx context.Context, in *PxDriveRebalanceRequest, opts ...grpc.CallOption) (*PxDriveRebalanceResponse, error) {
	out := new(PxDriveRebalanceResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/DriveRebalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DriveReplace(ctx context.Context, in *PxDriveReplaceRequest, opts ...grpc.CallOption) (*PxDriveReplaceResponse, error) {
	out := new(PxDriveReplaceResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/DriveReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DeviceScan(ctx context.Context, in *PxDeviceScanRequest, opts ...grpc.CallOption) (*PxDeviceScanResponse, error) {
	out := new(PxDeviceScanResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/DeviceScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DeviceScanStatus(ctx context.Context, in *PxDeviceScanStatusRequest, opts ...grpc.CallOption) (*PxDeviceScanStatusResponse, error) {
	out := new(PxDeviceScanStatusResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/DeviceScanStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetDeviceScanSchedule(ctx context.Context, in *PxDeviceScanScheduleGetRequest, opts ...grpc.CallOption) (*PxDeviceScanScheduleResponse, error) {
	out := new(PxDeviceScanScheduleResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/GetDeviceScanSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) SetDeviceScanSchedule(ctx context.Context, in *PxDeviceScanScheduleSetRequest, opts ...grpc.CallOption) (*PxDeviceScanScheduleResponse, error) {
	out := new(PxDeviceScanScheduleResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/SetDeviceScanSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) ClearDeviceScanSchedule(ctx context.Context, in *PxDeviceScanScheduleClearRequest, opts ...grpc.CallOption) (*PxDeviceScanScheduleResponse, error) {
	out := new(PxDeviceScanScheduleResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/ClearDeviceScanSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetNodeStats(ctx context.Context, in *PxGetNodeStatRequest, opts ...grpc.CallOption) (*PxGetNodeStatResponse, error) {
	out := new(PxGetNodeStatResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/GetNodeStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) RelaxedReclaimEnumerate(ctx context.Context, in *PxRelaxedReclaimShowRequest, opts ...grpc.CallOption) (*PxRelaxedReclaimShowResponse, error) {
	out := new(PxRelaxedReclaimShowResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/RelaxedReclaimEnumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) RelaxedReclaimDelete(ctx context.Context, in *PxRelaxedReclaimDeleteRequest, opts ...grpc.CallOption) (*PxRelaxedReclaimDeleteResponse, error) {
	out := new(PxRelaxedReclaimDeleteResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/RelaxedReclaimDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) RelaxedReclaimPurge(ctx context.Context, in *PxRelaxedReclaimPurgeRequest, opts ...grpc.CallOption) (*PxRelaxedReclaimPurgeResponse, error) {
	out := new(PxRelaxedReclaimPurgeResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/RelaxedReclaimPurge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) NRCPause(ctx context.Context, in *PxNRCPauseRequest, opts ...grpc.CallOption) (*PxNRCPauseResponse, error) {
	out := new(PxNRCPauseResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/NRCPause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) PreShutdown(ctx context.Context, in *PxPreShutdownRequest, opts ...grpc.CallOption) (*PxPreShutdownResponse, error) {
	out := new(PxPreShutdownResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/PreShutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) SystemMetadataStatus(ctx context.Context, in *PxSystemMetadataRequest, opts ...grpc.CallOption) (*PxSystemMetadataResponse, error) {
	out := new(PxSystemMetadataResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxService/SystemMetadataStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortworxServiceServer is the server API for PortworxService service.
type PortworxServiceServer interface {
	//  makes the portworx node enter maintenance mode
	MaintenanceOpsUpdate(context.Context, *PxMaintenanceOpsUpdateRequest) (*PxMaintenanceOpsUpdateResponse, error)
	// To update the callhome state.
	CallHomeUpdate(context.Context, *PxCallHomeUpdateRequest) (*PxCallHomeUpdateResponse, error)
	// To get the audit result from portworx node.
	Audit(context.Context, *PxAuditRequest) (*PxAuditResponse, error)
	// To set the email config for alerts
	SetEmailConfig(context.Context, *PxSetEmailConfigRequest) (*PxSetEmailConfigResponse, error)
	// To get the email config for alerts
	GetEmailConfig(context.Context, *PxGetEmailConfigRequest) (*PxGetEmailConfigResponse, error)
	// To delete the email config for alerts
	DeleteEmailConfig(context.Context, *PxDeleteEmailConfigRequest) (*PxDeleteEmailConfigResponse, error)
	// To set the slack config for alerts
	SetSlackConfig(context.Context, *PxSetSlackConfigRequest) (*PxSetSlackConfigResponse, error)
	// To delete the slack config for alerts
	DeleteSlackConfig(context.Context, *PxDeleteSlackConfigRequest) (*PxDeleteSlackConfigResponse, error)
	// To get the slack config for alerts
	GetSlackConfig(context.Context, *PxGetSlackConfigRequest) (*PxGetSlackConfigResponse, error)
	// To stop or exit Px Daemon.
	ExitDaemon(context.Context, *PxExitDaemonRequest) (*PxExitDaemonResponse, error)
	// To fetch kvdb endpoints
	GetKvdbEndpoints(context.Context, *PxKvdbEndpointRequest) (*PxKvdbEndpointResponse, error)
	// Fetching kvdb member info
	GetKvdbMemberInfo(context.Context, *PxKvdbMemberRequest) (*PxKvdbMemberResponse, error)
	// GetKvdbBootstrapEntries enumerates the nodes which are a part of the current kvdb cluster
	GetKvdbBootstrapEntries(context.Context, *PxKvdbGetBootstrapEntriesRequest) (*PxKvdbGetBootstrapEntriesResponse, error)
	// Fetch kvdb device for this node
	GetKvdbDeviceInfo(context.Context, *PxKvdbGetDeviceInfoRequest) (*PxKvdbGetDeviceInfoResponse, error)
	// start defragmenting of kvdb cluster node for the given endpoint
	// to defragment multiple members in the cluster, user need to call defragment multiple times with different endpoints
	DefragmentKvdbNode(context.Context, *PxDefragmentKvdbNodeRequest) (*PxDefragmentKvdbNodeResponse, error)
	// GetStorageSpec returns this node's storage info, including storage pools, drives, etc...
	GetStorageSpec(context.Context, *PxGetStorageSpecRequest) (*PxGetStorageSpecResponse, error)
	// PoolUpdate updates mutable storage pool properties
	PoolUpdate(context.Context, *PxPoolUpdateRequest) (*PxPoolUpdateResponse, error)
	// PoolDelete deletes storage pool
	PoolDelete(context.Context, *PxPoolDeleteRequest) (*PxPoolDeleteResponse, error)
	// PoolMaintenance does transition of all pools to maintenance mode
	PoolMaintenance(context.Context, *PxPoolMaintenanceRequest) (*PxPoolMaintenanceResponse, error)
	// DriveCheck run diagnostics on all the in-use drives
	DriveCheck(context.Context, *PxDriveCheckRequest) (*PxDriveCheckResponse, error)
	// DriveRebalance rebalance data within a given pool
	DriveRebalance(context.Context, *PxDriveRebalanceRequest) (*PxDriveRebalanceResponse, error)
	// DriveReplace replaces source drive with target drive
	DriveReplace(context.Context, *PxDriveReplaceRequest) (*PxDriveReplaceResponse, error)
	DeviceScan(context.Context, *PxDeviceScanRequest) (*PxDeviceScanResponse, error)
	DeviceScanStatus(context.Context, *PxDeviceScanStatusRequest) (*PxDeviceScanStatusResponse, error)
	GetDeviceScanSchedule(context.Context, *PxDeviceScanScheduleGetRequest) (*PxDeviceScanScheduleResponse, error)
	SetDeviceScanSchedule(context.Context, *PxDeviceScanScheduleSetRequest) (*PxDeviceScanScheduleResponse, error)
	ClearDeviceScanSchedule(context.Context, *PxDeviceScanScheduleClearRequest) (*PxDeviceScanScheduleResponse, error)
	GetNodeStats(context.Context, *PxGetNodeStatRequest) (*PxGetNodeStatResponse, error)
	RelaxedReclaimEnumerate(context.Context, *PxRelaxedReclaimShowRequest) (*PxRelaxedReclaimShowResponse, error)
	RelaxedReclaimDelete(context.Context, *PxRelaxedReclaimDeleteRequest) (*PxRelaxedReclaimDeleteResponse, error)
	RelaxedReclaimPurge(context.Context, *PxRelaxedReclaimPurgeRequest) (*PxRelaxedReclaimPurgeResponse, error)
	NRCPause(context.Context, *PxNRCPauseRequest) (*PxNRCPauseResponse, error)
	PreShutdown(context.Context, *PxPreShutdownRequest) (*PxPreShutdownResponse, error)
	SystemMetadataStatus(context.Context, *PxSystemMetadataRequest) (*PxSystemMetadataResponse, error)
}

// UnimplementedPortworxServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPortworxServiceServer struct {
}

func (*UnimplementedPortworxServiceServer) MaintenanceOpsUpdate(context.Context, *PxMaintenanceOpsUpdateRequest) (*PxMaintenanceOpsUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaintenanceOpsUpdate not implemented")
}
func (*UnimplementedPortworxServiceServer) CallHomeUpdate(context.Context, *PxCallHomeUpdateRequest) (*PxCallHomeUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallHomeUpdate not implemented")
}
func (*UnimplementedPortworxServiceServer) Audit(context.Context, *PxAuditRequest) (*PxAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Audit not implemented")
}
func (*UnimplementedPortworxServiceServer) SetEmailConfig(context.Context, *PxSetEmailConfigRequest) (*PxSetEmailConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmailConfig not implemented")
}
func (*UnimplementedPortworxServiceServer) GetEmailConfig(context.Context, *PxGetEmailConfigRequest) (*PxGetEmailConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailConfig not implemented")
}
func (*UnimplementedPortworxServiceServer) DeleteEmailConfig(context.Context, *PxDeleteEmailConfigRequest) (*PxDeleteEmailConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailConfig not implemented")
}
func (*UnimplementedPortworxServiceServer) SetSlackConfig(context.Context, *PxSetSlackConfigRequest) (*PxSetSlackConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSlackConfig not implemented")
}
func (*UnimplementedPortworxServiceServer) DeleteSlackConfig(context.Context, *PxDeleteSlackConfigRequest) (*PxDeleteSlackConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSlackConfig not implemented")
}
func (*UnimplementedPortworxServiceServer) GetSlackConfig(context.Context, *PxGetSlackConfigRequest) (*PxGetSlackConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlackConfig not implemented")
}
func (*UnimplementedPortworxServiceServer) ExitDaemon(context.Context, *PxExitDaemonRequest) (*PxExitDaemonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitDaemon not implemented")
}
func (*UnimplementedPortworxServiceServer) GetKvdbEndpoints(context.Context, *PxKvdbEndpointRequest) (*PxKvdbEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKvdbEndpoints not implemented")
}
func (*UnimplementedPortworxServiceServer) GetKvdbMemberInfo(context.Context, *PxKvdbMemberRequest) (*PxKvdbMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKvdbMemberInfo not implemented")
}
func (*UnimplementedPortworxServiceServer) GetKvdbBootstrapEntries(context.Context, *PxKvdbGetBootstrapEntriesRequest) (*PxKvdbGetBootstrapEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKvdbBootstrapEntries not implemented")
}
func (*UnimplementedPortworxServiceServer) GetKvdbDeviceInfo(context.Context, *PxKvdbGetDeviceInfoRequest) (*PxKvdbGetDeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKvdbDeviceInfo not implemented")
}
func (*UnimplementedPortworxServiceServer) DefragmentKvdbNode(context.Context, *PxDefragmentKvdbNodeRequest) (*PxDefragmentKvdbNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefragmentKvdbNode not implemented")
}
func (*UnimplementedPortworxServiceServer) GetStorageSpec(context.Context, *PxGetStorageSpecRequest) (*PxGetStorageSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageSpec not implemented")
}
func (*UnimplementedPortworxServiceServer) PoolUpdate(context.Context, *PxPoolUpdateRequest) (*PxPoolUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolUpdate not implemented")
}
func (*UnimplementedPortworxServiceServer) PoolDelete(context.Context, *PxPoolDeleteRequest) (*PxPoolDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolDelete not implemented")
}
func (*UnimplementedPortworxServiceServer) PoolMaintenance(context.Context, *PxPoolMaintenanceRequest) (*PxPoolMaintenanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolMaintenance not implemented")
}
func (*UnimplementedPortworxServiceServer) DriveCheck(context.Context, *PxDriveCheckRequest) (*PxDriveCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriveCheck not implemented")
}
func (*UnimplementedPortworxServiceServer) DriveRebalance(context.Context, *PxDriveRebalanceRequest) (*PxDriveRebalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriveRebalance not implemented")
}
func (*UnimplementedPortworxServiceServer) DriveReplace(context.Context, *PxDriveReplaceRequest) (*PxDriveReplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriveReplace not implemented")
}
func (*UnimplementedPortworxServiceServer) DeviceScan(context.Context, *PxDeviceScanRequest) (*PxDeviceScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceScan not implemented")
}
func (*UnimplementedPortworxServiceServer) DeviceScanStatus(context.Context, *PxDeviceScanStatusRequest) (*PxDeviceScanStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceScanStatus not implemented")
}
func (*UnimplementedPortworxServiceServer) GetDeviceScanSchedule(context.Context, *PxDeviceScanScheduleGetRequest) (*PxDeviceScanScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceScanSchedule not implemented")
}
func (*UnimplementedPortworxServiceServer) SetDeviceScanSchedule(context.Context, *PxDeviceScanScheduleSetRequest) (*PxDeviceScanScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceScanSchedule not implemented")
}
func (*UnimplementedPortworxServiceServer) ClearDeviceScanSchedule(context.Context, *PxDeviceScanScheduleClearRequest) (*PxDeviceScanScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearDeviceScanSchedule not implemented")
}
func (*UnimplementedPortworxServiceServer) GetNodeStats(context.Context, *PxGetNodeStatRequest) (*PxGetNodeStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeStats not implemented")
}
func (*UnimplementedPortworxServiceServer) RelaxedReclaimEnumerate(context.Context, *PxRelaxedReclaimShowRequest) (*PxRelaxedReclaimShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelaxedReclaimEnumerate not implemented")
}
func (*UnimplementedPortworxServiceServer) RelaxedReclaimDelete(context.Context, *PxRelaxedReclaimDeleteRequest) (*PxRelaxedReclaimDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelaxedReclaimDelete not implemented")
}
func (*UnimplementedPortworxServiceServer) RelaxedReclaimPurge(context.Context, *PxRelaxedReclaimPurgeRequest) (*PxRelaxedReclaimPurgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelaxedReclaimPurge not implemented")
}
func (*UnimplementedPortworxServiceServer) NRCPause(context.Context, *PxNRCPauseRequest) (*PxNRCPauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NRCPause not implemented")
}
func (*UnimplementedPortworxServiceServer) PreShutdown(context.Context, *PxPreShutdownRequest) (*PxPreShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreShutdown not implemented")
}
func (*UnimplementedPortworxServiceServer) SystemMetadataStatus(context.Context, *PxSystemMetadataRequest) (*PxSystemMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemMetadataStatus not implemented")
}

func RegisterPortworxServiceServer(s *grpc.Server, srv PortworxServiceServer) {
	s.RegisterService(&_PortworxService_serviceDesc, srv)
}

func _PortworxService_MaintenanceOpsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxMaintenanceOpsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).MaintenanceOpsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/MaintenanceOpsUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).MaintenanceOpsUpdate(ctx, req.(*PxMaintenanceOpsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_CallHomeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxCallHomeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).CallHomeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/CallHomeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).CallHomeUpdate(ctx, req.(*PxCallHomeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_Audit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).Audit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/Audit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).Audit(ctx, req.(*PxAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_SetEmailConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxSetEmailConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).SetEmailConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/SetEmailConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).SetEmailConfig(ctx, req.(*PxSetEmailConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetEmailConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxGetEmailConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetEmailConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetEmailConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetEmailConfig(ctx, req.(*PxGetEmailConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DeleteEmailConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDeleteEmailConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DeleteEmailConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DeleteEmailConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DeleteEmailConfig(ctx, req.(*PxDeleteEmailConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_SetSlackConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxSetSlackConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).SetSlackConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/SetSlackConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).SetSlackConfig(ctx, req.(*PxSetSlackConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DeleteSlackConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDeleteSlackConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DeleteSlackConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DeleteSlackConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DeleteSlackConfig(ctx, req.(*PxDeleteSlackConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetSlackConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxGetSlackConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetSlackConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetSlackConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetSlackConfig(ctx, req.(*PxGetSlackConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_ExitDaemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxExitDaemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).ExitDaemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/ExitDaemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).ExitDaemon(ctx, req.(*PxExitDaemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetKvdbEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxKvdbEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetKvdbEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetKvdbEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetKvdbEndpoints(ctx, req.(*PxKvdbEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetKvdbMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxKvdbMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetKvdbMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetKvdbMemberInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetKvdbMemberInfo(ctx, req.(*PxKvdbMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetKvdbBootstrapEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxKvdbGetBootstrapEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetKvdbBootstrapEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetKvdbBootstrapEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetKvdbBootstrapEntries(ctx, req.(*PxKvdbGetBootstrapEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetKvdbDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxKvdbGetDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetKvdbDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetKvdbDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetKvdbDeviceInfo(ctx, req.(*PxKvdbGetDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DefragmentKvdbNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDefragmentKvdbNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DefragmentKvdbNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DefragmentKvdbNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DefragmentKvdbNode(ctx, req.(*PxDefragmentKvdbNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetStorageSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxGetStorageSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetStorageSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetStorageSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetStorageSpec(ctx, req.(*PxGetStorageSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_PoolUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxPoolUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).PoolUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/PoolUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).PoolUpdate(ctx, req.(*PxPoolUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_PoolDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxPoolDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).PoolDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/PoolDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).PoolDelete(ctx, req.(*PxPoolDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_PoolMaintenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxPoolMaintenanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).PoolMaintenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/PoolMaintenance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).PoolMaintenance(ctx, req.(*PxPoolMaintenanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DriveCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDriveCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DriveCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DriveCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DriveCheck(ctx, req.(*PxDriveCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DriveRebalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDriveRebalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DriveRebalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DriveRebalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DriveRebalance(ctx, req.(*PxDriveRebalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DriveReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDriveReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DriveReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DriveReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DriveReplace(ctx, req.(*PxDriveReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DeviceScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDeviceScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DeviceScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DeviceScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DeviceScan(ctx, req.(*PxDeviceScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DeviceScanStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDeviceScanStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DeviceScanStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DeviceScanStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DeviceScanStatus(ctx, req.(*PxDeviceScanStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetDeviceScanSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDeviceScanScheduleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetDeviceScanSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetDeviceScanSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetDeviceScanSchedule(ctx, req.(*PxDeviceScanScheduleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_SetDeviceScanSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDeviceScanScheduleSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).SetDeviceScanSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/SetDeviceScanSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).SetDeviceScanSchedule(ctx, req.(*PxDeviceScanScheduleSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_ClearDeviceScanSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDeviceScanScheduleClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).ClearDeviceScanSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/ClearDeviceScanSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).ClearDeviceScanSchedule(ctx, req.(*PxDeviceScanScheduleClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetNodeStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxGetNodeStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetNodeStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetNodeStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetNodeStats(ctx, req.(*PxGetNodeStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_RelaxedReclaimEnumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxRelaxedReclaimShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).RelaxedReclaimEnumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/RelaxedReclaimEnumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).RelaxedReclaimEnumerate(ctx, req.(*PxRelaxedReclaimShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_RelaxedReclaimDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxRelaxedReclaimDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).RelaxedReclaimDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/RelaxedReclaimDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).RelaxedReclaimDelete(ctx, req.(*PxRelaxedReclaimDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_RelaxedReclaimPurge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxRelaxedReclaimPurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).RelaxedReclaimPurge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/RelaxedReclaimPurge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).RelaxedReclaimPurge(ctx, req.(*PxRelaxedReclaimPurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_NRCPause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxNRCPauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).NRCPause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/NRCPause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).NRCPause(ctx, req.(*PxNRCPauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_PreShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxPreShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).PreShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/PreShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).PreShutdown(ctx, req.(*PxPreShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_SystemMetadataStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxSystemMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).SystemMetadataStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/SystemMetadataStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).SystemMetadataStatus(ctx, req.(*PxSystemMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortworxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portworx.api.PortworxService",
	HandlerType: (*PortworxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MaintenanceOpsUpdate",
			Handler:    _PortworxService_MaintenanceOpsUpdate_Handler,
		},
		{
			MethodName: "CallHomeUpdate",
			Handler:    _PortworxService_CallHomeUpdate_Handler,
		},
		{
			MethodName: "Audit",
			Handler:    _PortworxService_Audit_Handler,
		},
		{
			MethodName: "SetEmailConfig",
			Handler:    _PortworxService_SetEmailConfig_Handler,
		},
		{
			MethodName: "GetEmailConfig",
			Handler:    _PortworxService_GetEmailConfig_Handler,
		},
		{
			MethodName: "DeleteEmailConfig",
			Handler:    _PortworxService_DeleteEmailConfig_Handler,
		},
		{
			MethodName: "SetSlackConfig",
			Handler:    _PortworxService_SetSlackConfig_Handler,
		},
		{
			MethodName: "DeleteSlackConfig",
			Handler:    _PortworxService_DeleteSlackConfig_Handler,
		},
		{
			MethodName: "GetSlackConfig",
			Handler:    _PortworxService_GetSlackConfig_Handler,
		},
		{
			MethodName: "ExitDaemon",
			Handler:    _PortworxService_ExitDaemon_Handler,
		},
		{
			MethodName: "GetKvdbEndpoints",
			Handler:    _PortworxService_GetKvdbEndpoints_Handler,
		},
		{
			MethodName: "GetKvdbMemberInfo",
			Handler:    _PortworxService_GetKvdbMemberInfo_Handler,
		},
		{
			MethodName: "GetKvdbBootstrapEntries",
			Handler:    _PortworxService_GetKvdbBootstrapEntries_Handler,
		},
		{
			MethodName: "GetKvdbDeviceInfo",
			Handler:    _PortworxService_GetKvdbDeviceInfo_Handler,
		},
		{
			MethodName: "DefragmentKvdbNode",
			Handler:    _PortworxService_DefragmentKvdbNode_Handler,
		},
		{
			MethodName: "GetStorageSpec",
			Handler:    _PortworxService_GetStorageSpec_Handler,
		},
		{
			MethodName: "PoolUpdate",
			Handler:    _PortworxService_PoolUpdate_Handler,
		},
		{
			MethodName: "PoolDelete",
			Handler:    _PortworxService_PoolDelete_Handler,
		},
		{
			MethodName: "PoolMaintenance",
			Handler:    _PortworxService_PoolMaintenance_Handler,
		},
		{
			MethodName: "DriveCheck",
			Handler:    _PortworxService_DriveCheck_Handler,
		},
		{
			MethodName: "DriveRebalance",
			Handler:    _PortworxService_DriveRebalance_Handler,
		},
		{
			MethodName: "DriveReplace",
			Handler:    _PortworxService_DriveReplace_Handler,
		},
		{
			MethodName: "DeviceScan",
			Handler:    _PortworxService_DeviceScan_Handler,
		},
		{
			MethodName: "DeviceScanStatus",
			Handler:    _PortworxService_DeviceScanStatus_Handler,
		},
		{
			MethodName: "GetDeviceScanSchedule",
			Handler:    _PortworxService_GetDeviceScanSchedule_Handler,
		},
		{
			MethodName: "SetDeviceScanSchedule",
			Handler:    _PortworxService_SetDeviceScanSchedule_Handler,
		},
		{
			MethodName: "ClearDeviceScanSchedule",
			Handler:    _PortworxService_ClearDeviceScanSchedule_Handler,
		},
		{
			MethodName: "GetNodeStats",
			Handler:    _PortworxService_GetNodeStats_Handler,
		},
		{
			MethodName: "RelaxedReclaimEnumerate",
			Handler:    _PortworxService_RelaxedReclaimEnumerate_Handler,
		},
		{
			MethodName: "RelaxedReclaimDelete",
			Handler:    _PortworxService_RelaxedReclaimDelete_Handler,
		},
		{
			MethodName: "RelaxedReclaimPurge",
			Handler:    _PortworxService_RelaxedReclaimPurge_Handler,
		},
		{
			MethodName: "NRCPause",
			Handler:    _PortworxService_NRCPause_Handler,
		},
		{
			MethodName: "PreShutdown",
			Handler:    _PortworxService_PreShutdown_Handler,
		},
		{
			MethodName: "SystemMetadataStatus",
			Handler:    _PortworxService_SystemMetadataStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "px/api/api.proto",
}

// PortworxStoragePoolCacheClient is the client API for PortworxStoragePoolCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortworxStoragePoolCacheClient interface {
	// ToggleStatus performs status toggle for storage pool cache
	// basically it does cache attachment to or de-attachment from storage pool
	ToggleStatus(ctx context.Context, in *PxToggleStatusRequest, opts ...grpc.CallOption) (*PxToggleStatusResponse, error)
	// GetInfo returns cache info for storage pool cache
	// CacheInfo provides statistics and config params
	GetInfo(ctx context.Context, in *PxCacheInfoRequest, opts ...grpc.CallOption) (*PxCacheInfoResponse, error)
	// Configure sets parameters for storage pool cache
	Configure(ctx context.Context, in *PxCacheConfigRequest, opts ...grpc.CallOption) (*PxCacheConfigResponse, error)
	// Flush initiates cache flush through background cleaner policy on writeback caches
	Flush(ctx context.Context, in *PxCacheFlushRequest, opts ...grpc.CallOption) (*PxCacheFlushResponse, error)
}

type portworxStoragePoolCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewPortworxStoragePoolCacheClient(cc grpc.ClientConnInterface) PortworxStoragePoolCacheClient {
	return &portworxStoragePoolCacheClient{cc}
}

func (c *portworxStoragePoolCacheClient) ToggleStatus(ctx context.Context, in *PxToggleStatusRequest, opts ...grpc.CallOption) (*PxToggleStatusResponse, error) {
	out := new(PxToggleStatusResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxStoragePoolCache/ToggleStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxStoragePoolCacheClient) GetInfo(ctx context.Context, in *PxCacheInfoRequest, opts ...grpc.CallOption) (*PxCacheInfoResponse, error) {
	out := new(PxCacheInfoResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxStoragePoolCache/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxStoragePoolCacheClient) Configure(ctx context.Context, in *PxCacheConfigRequest, opts ...grpc.CallOption) (*PxCacheConfigResponse, error) {
	out := new(PxCacheConfigResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxStoragePoolCache/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxStoragePoolCacheClient) Flush(ctx context.Context, in *PxCacheFlushRequest, opts ...grpc.CallOption) (*PxCacheFlushResponse, error) {
	out := new(PxCacheFlushResponse)
	err := c.cc.Invoke(ctx, "/portworx.api.PortworxStoragePoolCache/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortworxStoragePoolCacheServer is the server API for PortworxStoragePoolCache service.
type PortworxStoragePoolCacheServer interface {
	// ToggleStatus performs status toggle for storage pool cache
	// basically it does cache attachment to or de-attachment from storage pool
	ToggleStatus(context.Context, *PxToggleStatusRequest) (*PxToggleStatusResponse, error)
	// GetInfo returns cache info for storage pool cache
	// CacheInfo provides statistics and config params
	GetInfo(context.Context, *PxCacheInfoRequest) (*PxCacheInfoResponse, error)
	// Configure sets parameters for storage pool cache
	Configure(context.Context, *PxCacheConfigRequest) (*PxCacheConfigResponse, error)
	// Flush initiates cache flush through background cleaner policy on writeback caches
	Flush(context.Context, *PxCacheFlushRequest) (*PxCacheFlushResponse, error)
}

// UnimplementedPortworxStoragePoolCacheServer can be embedded to have forward compatible implementations.
type UnimplementedPortworxStoragePoolCacheServer struct {
}

func (*UnimplementedPortworxStoragePoolCacheServer) ToggleStatus(context.Context, *PxToggleStatusRequest) (*PxToggleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleStatus not implemented")
}
func (*UnimplementedPortworxStoragePoolCacheServer) GetInfo(context.Context, *PxCacheInfoRequest) (*PxCacheInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (*UnimplementedPortworxStoragePoolCacheServer) Configure(context.Context, *PxCacheConfigRequest) (*PxCacheConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedPortworxStoragePoolCacheServer) Flush(context.Context, *PxCacheFlushRequest) (*PxCacheFlushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}

func RegisterPortworxStoragePoolCacheServer(s *grpc.Server, srv PortworxStoragePoolCacheServer) {
	s.RegisterService(&_PortworxStoragePoolCache_serviceDesc, srv)
}

func _PortworxStoragePoolCache_ToggleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxToggleStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxStoragePoolCacheServer).ToggleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxStoragePoolCache/ToggleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxStoragePoolCacheServer).ToggleStatus(ctx, req.(*PxToggleStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxStoragePoolCache_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxCacheInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxStoragePoolCacheServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxStoragePoolCache/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxStoragePoolCacheServer).GetInfo(ctx, req.(*PxCacheInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxStoragePoolCache_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxCacheConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxStoragePoolCacheServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxStoragePoolCache/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxStoragePoolCacheServer).Configure(ctx, req.(*PxCacheConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxStoragePoolCache_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxCacheFlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxStoragePoolCacheServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxStoragePoolCache/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxStoragePoolCacheServer).Flush(ctx, req.(*PxCacheFlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortworxStoragePoolCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portworx.api.PortworxStoragePoolCache",
	HandlerType: (*PortworxStoragePoolCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToggleStatus",
			Handler:    _PortworxStoragePoolCache_ToggleStatus_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _PortworxStoragePoolCache_GetInfo_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _PortworxStoragePoolCache_Configure_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _PortworxStoragePoolCache_Flush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "px/api/api.proto",
}
