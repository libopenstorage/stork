// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/libopenstorage/openstorage/api (interfaces: OpenStorageRoleServer,OpenStorageNodeServer,OpenStorageClusterServer,OpenStorageNodeClient,OpenStorageVolumeServer,OpenStorageClusterDomainsServer,OpenStorageClusterDomainsClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/libopenstorage/openstorage/api"
	grpc "google.golang.org/grpc"
)

// MockOpenStorageRoleServer is a mock of OpenStorageRoleServer interface.
type MockOpenStorageRoleServer struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageRoleServerMockRecorder
}

// MockOpenStorageRoleServerMockRecorder is the mock recorder for MockOpenStorageRoleServer.
type MockOpenStorageRoleServerMockRecorder struct {
	mock *MockOpenStorageRoleServer
}

// NewMockOpenStorageRoleServer creates a new mock instance.
func NewMockOpenStorageRoleServer(ctrl *gomock.Controller) *MockOpenStorageRoleServer {
	mock := &MockOpenStorageRoleServer{ctrl: ctrl}
	mock.recorder = &MockOpenStorageRoleServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenStorageRoleServer) EXPECT() *MockOpenStorageRoleServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOpenStorageRoleServer) Create(arg0 context.Context, arg1 *api.SdkRoleCreateRequest) (*api.SdkRoleCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkRoleCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOpenStorageRoleServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOpenStorageRoleServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockOpenStorageRoleServer) Delete(arg0 context.Context, arg1 *api.SdkRoleDeleteRequest) (*api.SdkRoleDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkRoleDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOpenStorageRoleServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOpenStorageRoleServer)(nil).Delete), arg0, arg1)
}

// Enumerate mocks base method.
func (m *MockOpenStorageRoleServer) Enumerate(arg0 context.Context, arg1 *api.SdkRoleEnumerateRequest) (*api.SdkRoleEnumerateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enumerate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkRoleEnumerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enumerate indicates an expected call of Enumerate.
func (mr *MockOpenStorageRoleServerMockRecorder) Enumerate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enumerate", reflect.TypeOf((*MockOpenStorageRoleServer)(nil).Enumerate), arg0, arg1)
}

// Inspect mocks base method.
func (m *MockOpenStorageRoleServer) Inspect(arg0 context.Context, arg1 *api.SdkRoleInspectRequest) (*api.SdkRoleInspectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkRoleInspectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockOpenStorageRoleServerMockRecorder) Inspect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockOpenStorageRoleServer)(nil).Inspect), arg0, arg1)
}

// Update mocks base method.
func (m *MockOpenStorageRoleServer) Update(arg0 context.Context, arg1 *api.SdkRoleUpdateRequest) (*api.SdkRoleUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkRoleUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOpenStorageRoleServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOpenStorageRoleServer)(nil).Update), arg0, arg1)
}

// MockOpenStorageNodeServer is a mock of OpenStorageNodeServer interface.
type MockOpenStorageNodeServer struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageNodeServerMockRecorder
}

// MockOpenStorageNodeServerMockRecorder is the mock recorder for MockOpenStorageNodeServer.
type MockOpenStorageNodeServerMockRecorder struct {
	mock *MockOpenStorageNodeServer
}

// NewMockOpenStorageNodeServer creates a new mock instance.
func NewMockOpenStorageNodeServer(ctrl *gomock.Controller) *MockOpenStorageNodeServer {
	mock := &MockOpenStorageNodeServer{ctrl: ctrl}
	mock.recorder = &MockOpenStorageNodeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenStorageNodeServer) EXPECT() *MockOpenStorageNodeServerMockRecorder {
	return m.recorder
}

// CordonAttachments mocks base method.
func (m *MockOpenStorageNodeServer) CordonAttachments(arg0 context.Context, arg1 *api.SdkNodeCordonAttachmentsRequest) (*api.SdkNodeCordonAttachmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CordonAttachments", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkNodeCordonAttachmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CordonAttachments indicates an expected call of CordonAttachments.
func (mr *MockOpenStorageNodeServerMockRecorder) CordonAttachments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CordonAttachments", reflect.TypeOf((*MockOpenStorageNodeServer)(nil).CordonAttachments), arg0, arg1)
}

// DrainAttachments mocks base method.
func (m *MockOpenStorageNodeServer) DrainAttachments(arg0 context.Context, arg1 *api.SdkNodeDrainAttachmentsRequest) (*api.SdkJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrainAttachments", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DrainAttachments indicates an expected call of DrainAttachments.
func (mr *MockOpenStorageNodeServerMockRecorder) DrainAttachments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrainAttachments", reflect.TypeOf((*MockOpenStorageNodeServer)(nil).DrainAttachments), arg0, arg1)
}

// Enumerate mocks base method.
func (m *MockOpenStorageNodeServer) Enumerate(arg0 context.Context, arg1 *api.SdkNodeEnumerateRequest) (*api.SdkNodeEnumerateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enumerate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkNodeEnumerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enumerate indicates an expected call of Enumerate.
func (mr *MockOpenStorageNodeServerMockRecorder) Enumerate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enumerate", reflect.TypeOf((*MockOpenStorageNodeServer)(nil).Enumerate), arg0, arg1)
}

// EnumerateWithFilters mocks base method.
func (m *MockOpenStorageNodeServer) EnumerateWithFilters(arg0 context.Context, arg1 *api.SdkNodeEnumerateWithFiltersRequest) (*api.SdkNodeEnumerateWithFiltersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnumerateWithFilters", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkNodeEnumerateWithFiltersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnumerateWithFilters indicates an expected call of EnumerateWithFilters.
func (mr *MockOpenStorageNodeServerMockRecorder) EnumerateWithFilters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnumerateWithFilters", reflect.TypeOf((*MockOpenStorageNodeServer)(nil).EnumerateWithFilters), arg0, arg1)
}

// Inspect mocks base method.
func (m *MockOpenStorageNodeServer) Inspect(arg0 context.Context, arg1 *api.SdkNodeInspectRequest) (*api.SdkNodeInspectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkNodeInspectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockOpenStorageNodeServerMockRecorder) Inspect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockOpenStorageNodeServer)(nil).Inspect), arg0, arg1)
}

// InspectCurrent mocks base method.
func (m *MockOpenStorageNodeServer) InspectCurrent(arg0 context.Context, arg1 *api.SdkNodeInspectCurrentRequest) (*api.SdkNodeInspectCurrentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectCurrent", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkNodeInspectCurrentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectCurrent indicates an expected call of InspectCurrent.
func (mr *MockOpenStorageNodeServerMockRecorder) InspectCurrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectCurrent", reflect.TypeOf((*MockOpenStorageNodeServer)(nil).InspectCurrent), arg0, arg1)
}

// RelaxedReclaimPurge mocks base method.
func (m *MockOpenStorageNodeServer) RelaxedReclaimPurge(arg0 context.Context, arg1 *api.SdkNodeRelaxedReclaimPurgeRequest) (*api.SdkNodeRelaxedReclaimPurgeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelaxedReclaimPurge", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkNodeRelaxedReclaimPurgeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelaxedReclaimPurge indicates an expected call of RelaxedReclaimPurge.
func (mr *MockOpenStorageNodeServerMockRecorder) RelaxedReclaimPurge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelaxedReclaimPurge", reflect.TypeOf((*MockOpenStorageNodeServer)(nil).RelaxedReclaimPurge), arg0, arg1)
}

// UncordonAttachments mocks base method.
func (m *MockOpenStorageNodeServer) UncordonAttachments(arg0 context.Context, arg1 *api.SdkNodeUncordonAttachmentsRequest) (*api.SdkNodeUncordonAttachmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UncordonAttachments", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkNodeUncordonAttachmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UncordonAttachments indicates an expected call of UncordonAttachments.
func (mr *MockOpenStorageNodeServerMockRecorder) UncordonAttachments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UncordonAttachments", reflect.TypeOf((*MockOpenStorageNodeServer)(nil).UncordonAttachments), arg0, arg1)
}

// VolumeBytesUsedByNode mocks base method.
func (m *MockOpenStorageNodeServer) VolumeBytesUsedByNode(arg0 context.Context, arg1 *api.SdkVolumeBytesUsedRequest) (*api.SdkVolumeBytesUsedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeBytesUsedByNode", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeBytesUsedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeBytesUsedByNode indicates an expected call of VolumeBytesUsedByNode.
func (mr *MockOpenStorageNodeServerMockRecorder) VolumeBytesUsedByNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeBytesUsedByNode", reflect.TypeOf((*MockOpenStorageNodeServer)(nil).VolumeBytesUsedByNode), arg0, arg1)
}

// VolumeUsageByNode mocks base method.
func (m *MockOpenStorageNodeServer) VolumeUsageByNode(arg0 context.Context, arg1 *api.SdkNodeVolumeUsageByNodeRequest) (*api.SdkNodeVolumeUsageByNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeUsageByNode", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkNodeVolumeUsageByNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeUsageByNode indicates an expected call of VolumeUsageByNode.
func (mr *MockOpenStorageNodeServerMockRecorder) VolumeUsageByNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeUsageByNode", reflect.TypeOf((*MockOpenStorageNodeServer)(nil).VolumeUsageByNode), arg0, arg1)
}

// MockOpenStorageClusterServer is a mock of OpenStorageClusterServer interface.
type MockOpenStorageClusterServer struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageClusterServerMockRecorder
}

// MockOpenStorageClusterServerMockRecorder is the mock recorder for MockOpenStorageClusterServer.
type MockOpenStorageClusterServerMockRecorder struct {
	mock *MockOpenStorageClusterServer
}

// NewMockOpenStorageClusterServer creates a new mock instance.
func NewMockOpenStorageClusterServer(ctrl *gomock.Controller) *MockOpenStorageClusterServer {
	mock := &MockOpenStorageClusterServer{ctrl: ctrl}
	mock.recorder = &MockOpenStorageClusterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenStorageClusterServer) EXPECT() *MockOpenStorageClusterServerMockRecorder {
	return m.recorder
}

// InspectCurrent mocks base method.
func (m *MockOpenStorageClusterServer) InspectCurrent(arg0 context.Context, arg1 *api.SdkClusterInspectCurrentRequest) (*api.SdkClusterInspectCurrentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectCurrent", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkClusterInspectCurrentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectCurrent indicates an expected call of InspectCurrent.
func (mr *MockOpenStorageClusterServerMockRecorder) InspectCurrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectCurrent", reflect.TypeOf((*MockOpenStorageClusterServer)(nil).InspectCurrent), arg0, arg1)
}

// MockOpenStorageNodeClient is a mock of OpenStorageNodeClient interface.
type MockOpenStorageNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageNodeClientMockRecorder
}

// MockOpenStorageNodeClientMockRecorder is the mock recorder for MockOpenStorageNodeClient.
type MockOpenStorageNodeClientMockRecorder struct {
	mock *MockOpenStorageNodeClient
}

// NewMockOpenStorageNodeClient creates a new mock instance.
func NewMockOpenStorageNodeClient(ctrl *gomock.Controller) *MockOpenStorageNodeClient {
	mock := &MockOpenStorageNodeClient{ctrl: ctrl}
	mock.recorder = &MockOpenStorageNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenStorageNodeClient) EXPECT() *MockOpenStorageNodeClientMockRecorder {
	return m.recorder
}

// CordonAttachments mocks base method.
func (m *MockOpenStorageNodeClient) CordonAttachments(arg0 context.Context, arg1 *api.SdkNodeCordonAttachmentsRequest, arg2 ...grpc.CallOption) (*api.SdkNodeCordonAttachmentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CordonAttachments", varargs...)
	ret0, _ := ret[0].(*api.SdkNodeCordonAttachmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CordonAttachments indicates an expected call of CordonAttachments.
func (mr *MockOpenStorageNodeClientMockRecorder) CordonAttachments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CordonAttachments", reflect.TypeOf((*MockOpenStorageNodeClient)(nil).CordonAttachments), varargs...)
}

// DrainAttachments mocks base method.
func (m *MockOpenStorageNodeClient) DrainAttachments(arg0 context.Context, arg1 *api.SdkNodeDrainAttachmentsRequest, arg2 ...grpc.CallOption) (*api.SdkJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DrainAttachments", varargs...)
	ret0, _ := ret[0].(*api.SdkJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DrainAttachments indicates an expected call of DrainAttachments.
func (mr *MockOpenStorageNodeClientMockRecorder) DrainAttachments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrainAttachments", reflect.TypeOf((*MockOpenStorageNodeClient)(nil).DrainAttachments), varargs...)
}

// Enumerate mocks base method.
func (m *MockOpenStorageNodeClient) Enumerate(arg0 context.Context, arg1 *api.SdkNodeEnumerateRequest, arg2 ...grpc.CallOption) (*api.SdkNodeEnumerateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Enumerate", varargs...)
	ret0, _ := ret[0].(*api.SdkNodeEnumerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enumerate indicates an expected call of Enumerate.
func (mr *MockOpenStorageNodeClientMockRecorder) Enumerate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enumerate", reflect.TypeOf((*MockOpenStorageNodeClient)(nil).Enumerate), varargs...)
}

// EnumerateWithFilters mocks base method.
func (m *MockOpenStorageNodeClient) EnumerateWithFilters(arg0 context.Context, arg1 *api.SdkNodeEnumerateWithFiltersRequest, arg2 ...grpc.CallOption) (*api.SdkNodeEnumerateWithFiltersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnumerateWithFilters", varargs...)
	ret0, _ := ret[0].(*api.SdkNodeEnumerateWithFiltersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnumerateWithFilters indicates an expected call of EnumerateWithFilters.
func (mr *MockOpenStorageNodeClientMockRecorder) EnumerateWithFilters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnumerateWithFilters", reflect.TypeOf((*MockOpenStorageNodeClient)(nil).EnumerateWithFilters), varargs...)
}

// Inspect mocks base method.
func (m *MockOpenStorageNodeClient) Inspect(arg0 context.Context, arg1 *api.SdkNodeInspectRequest, arg2 ...grpc.CallOption) (*api.SdkNodeInspectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Inspect", varargs...)
	ret0, _ := ret[0].(*api.SdkNodeInspectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockOpenStorageNodeClientMockRecorder) Inspect(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockOpenStorageNodeClient)(nil).Inspect), varargs...)
}

// InspectCurrent mocks base method.
func (m *MockOpenStorageNodeClient) InspectCurrent(arg0 context.Context, arg1 *api.SdkNodeInspectCurrentRequest, arg2 ...grpc.CallOption) (*api.SdkNodeInspectCurrentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InspectCurrent", varargs...)
	ret0, _ := ret[0].(*api.SdkNodeInspectCurrentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectCurrent indicates an expected call of InspectCurrent.
func (mr *MockOpenStorageNodeClientMockRecorder) InspectCurrent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectCurrent", reflect.TypeOf((*MockOpenStorageNodeClient)(nil).InspectCurrent), varargs...)
}

// RelaxedReclaimPurge mocks base method.
func (m *MockOpenStorageNodeClient) RelaxedReclaimPurge(arg0 context.Context, arg1 *api.SdkNodeRelaxedReclaimPurgeRequest, arg2 ...grpc.CallOption) (*api.SdkNodeRelaxedReclaimPurgeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RelaxedReclaimPurge", varargs...)
	ret0, _ := ret[0].(*api.SdkNodeRelaxedReclaimPurgeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelaxedReclaimPurge indicates an expected call of RelaxedReclaimPurge.
func (mr *MockOpenStorageNodeClientMockRecorder) RelaxedReclaimPurge(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelaxedReclaimPurge", reflect.TypeOf((*MockOpenStorageNodeClient)(nil).RelaxedReclaimPurge), varargs...)
}

// UncordonAttachments mocks base method.
func (m *MockOpenStorageNodeClient) UncordonAttachments(arg0 context.Context, arg1 *api.SdkNodeUncordonAttachmentsRequest, arg2 ...grpc.CallOption) (*api.SdkNodeUncordonAttachmentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UncordonAttachments", varargs...)
	ret0, _ := ret[0].(*api.SdkNodeUncordonAttachmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UncordonAttachments indicates an expected call of UncordonAttachments.
func (mr *MockOpenStorageNodeClientMockRecorder) UncordonAttachments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UncordonAttachments", reflect.TypeOf((*MockOpenStorageNodeClient)(nil).UncordonAttachments), varargs...)
}

// VolumeBytesUsedByNode mocks base method.
func (m *MockOpenStorageNodeClient) VolumeBytesUsedByNode(arg0 context.Context, arg1 *api.SdkVolumeBytesUsedRequest, arg2 ...grpc.CallOption) (*api.SdkVolumeBytesUsedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VolumeBytesUsedByNode", varargs...)
	ret0, _ := ret[0].(*api.SdkVolumeBytesUsedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeBytesUsedByNode indicates an expected call of VolumeBytesUsedByNode.
func (mr *MockOpenStorageNodeClientMockRecorder) VolumeBytesUsedByNode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeBytesUsedByNode", reflect.TypeOf((*MockOpenStorageNodeClient)(nil).VolumeBytesUsedByNode), varargs...)
}

// VolumeUsageByNode mocks base method.
func (m *MockOpenStorageNodeClient) VolumeUsageByNode(arg0 context.Context, arg1 *api.SdkNodeVolumeUsageByNodeRequest, arg2 ...grpc.CallOption) (*api.SdkNodeVolumeUsageByNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VolumeUsageByNode", varargs...)
	ret0, _ := ret[0].(*api.SdkNodeVolumeUsageByNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeUsageByNode indicates an expected call of VolumeUsageByNode.
func (mr *MockOpenStorageNodeClientMockRecorder) VolumeUsageByNode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeUsageByNode", reflect.TypeOf((*MockOpenStorageNodeClient)(nil).VolumeUsageByNode), varargs...)
}

// MockOpenStorageVolumeServer is a mock of OpenStorageVolumeServer interface.
type MockOpenStorageVolumeServer struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageVolumeServerMockRecorder
}

// MockOpenStorageVolumeServerMockRecorder is the mock recorder for MockOpenStorageVolumeServer.
type MockOpenStorageVolumeServerMockRecorder struct {
	mock *MockOpenStorageVolumeServer
}

// NewMockOpenStorageVolumeServer creates a new mock instance.
func NewMockOpenStorageVolumeServer(ctrl *gomock.Controller) *MockOpenStorageVolumeServer {
	mock := &MockOpenStorageVolumeServer{ctrl: ctrl}
	mock.recorder = &MockOpenStorageVolumeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenStorageVolumeServer) EXPECT() *MockOpenStorageVolumeServerMockRecorder {
	return m.recorder
}

// CapacityUsage mocks base method.
func (m *MockOpenStorageVolumeServer) CapacityUsage(arg0 context.Context, arg1 *api.SdkVolumeCapacityUsageRequest) (*api.SdkVolumeCapacityUsageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CapacityUsage", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeCapacityUsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CapacityUsage indicates an expected call of CapacityUsage.
func (mr *MockOpenStorageVolumeServerMockRecorder) CapacityUsage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CapacityUsage", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).CapacityUsage), arg0, arg1)
}

// Clone mocks base method.
func (m *MockOpenStorageVolumeServer) Clone(arg0 context.Context, arg1 *api.SdkVolumeCloneRequest) (*api.SdkVolumeCloneResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeCloneResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone.
func (mr *MockOpenStorageVolumeServerMockRecorder) Clone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).Clone), arg0, arg1)
}

// Create mocks base method.
func (m *MockOpenStorageVolumeServer) Create(arg0 context.Context, arg1 *api.SdkVolumeCreateRequest) (*api.SdkVolumeCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOpenStorageVolumeServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockOpenStorageVolumeServer) Delete(arg0 context.Context, arg1 *api.SdkVolumeDeleteRequest) (*api.SdkVolumeDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOpenStorageVolumeServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).Delete), arg0, arg1)
}

// Enumerate mocks base method.
func (m *MockOpenStorageVolumeServer) Enumerate(arg0 context.Context, arg1 *api.SdkVolumeEnumerateRequest) (*api.SdkVolumeEnumerateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enumerate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeEnumerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enumerate indicates an expected call of Enumerate.
func (mr *MockOpenStorageVolumeServerMockRecorder) Enumerate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enumerate", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).Enumerate), arg0, arg1)
}

// EnumerateWithFilters mocks base method.
func (m *MockOpenStorageVolumeServer) EnumerateWithFilters(arg0 context.Context, arg1 *api.SdkVolumeEnumerateWithFiltersRequest) (*api.SdkVolumeEnumerateWithFiltersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnumerateWithFilters", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeEnumerateWithFiltersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnumerateWithFilters indicates an expected call of EnumerateWithFilters.
func (mr *MockOpenStorageVolumeServerMockRecorder) EnumerateWithFilters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnumerateWithFilters", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).EnumerateWithFilters), arg0, arg1)
}

// Inspect mocks base method.
func (m *MockOpenStorageVolumeServer) Inspect(arg0 context.Context, arg1 *api.SdkVolumeInspectRequest) (*api.SdkVolumeInspectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeInspectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockOpenStorageVolumeServerMockRecorder) Inspect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).Inspect), arg0, arg1)
}

// InspectWithFilters mocks base method.
func (m *MockOpenStorageVolumeServer) InspectWithFilters(arg0 context.Context, arg1 *api.SdkVolumeInspectWithFiltersRequest) (*api.SdkVolumeInspectWithFiltersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectWithFilters", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeInspectWithFiltersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectWithFilters indicates an expected call of InspectWithFilters.
func (mr *MockOpenStorageVolumeServerMockRecorder) InspectWithFilters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectWithFilters", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).InspectWithFilters), arg0, arg1)
}

// SnapshotCreate mocks base method.
func (m *MockOpenStorageVolumeServer) SnapshotCreate(arg0 context.Context, arg1 *api.SdkVolumeSnapshotCreateRequest) (*api.SdkVolumeSnapshotCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotCreate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeSnapshotCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotCreate indicates an expected call of SnapshotCreate.
func (mr *MockOpenStorageVolumeServerMockRecorder) SnapshotCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotCreate", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).SnapshotCreate), arg0, arg1)
}

// SnapshotEnumerate mocks base method.
func (m *MockOpenStorageVolumeServer) SnapshotEnumerate(arg0 context.Context, arg1 *api.SdkVolumeSnapshotEnumerateRequest) (*api.SdkVolumeSnapshotEnumerateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotEnumerate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeSnapshotEnumerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotEnumerate indicates an expected call of SnapshotEnumerate.
func (mr *MockOpenStorageVolumeServerMockRecorder) SnapshotEnumerate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotEnumerate", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).SnapshotEnumerate), arg0, arg1)
}

// SnapshotEnumerateWithFilters mocks base method.
func (m *MockOpenStorageVolumeServer) SnapshotEnumerateWithFilters(arg0 context.Context, arg1 *api.SdkVolumeSnapshotEnumerateWithFiltersRequest) (*api.SdkVolumeSnapshotEnumerateWithFiltersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotEnumerateWithFilters", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeSnapshotEnumerateWithFiltersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotEnumerateWithFilters indicates an expected call of SnapshotEnumerateWithFilters.
func (mr *MockOpenStorageVolumeServerMockRecorder) SnapshotEnumerateWithFilters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotEnumerateWithFilters", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).SnapshotEnumerateWithFilters), arg0, arg1)
}

// SnapshotRestore mocks base method.
func (m *MockOpenStorageVolumeServer) SnapshotRestore(arg0 context.Context, arg1 *api.SdkVolumeSnapshotRestoreRequest) (*api.SdkVolumeSnapshotRestoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotRestore", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeSnapshotRestoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotRestore indicates an expected call of SnapshotRestore.
func (mr *MockOpenStorageVolumeServerMockRecorder) SnapshotRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotRestore", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).SnapshotRestore), arg0, arg1)
}

// SnapshotScheduleUpdate mocks base method.
func (m *MockOpenStorageVolumeServer) SnapshotScheduleUpdate(arg0 context.Context, arg1 *api.SdkVolumeSnapshotScheduleUpdateRequest) (*api.SdkVolumeSnapshotScheduleUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotScheduleUpdate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeSnapshotScheduleUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotScheduleUpdate indicates an expected call of SnapshotScheduleUpdate.
func (mr *MockOpenStorageVolumeServerMockRecorder) SnapshotScheduleUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotScheduleUpdate", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).SnapshotScheduleUpdate), arg0, arg1)
}

// Stats mocks base method.
func (m *MockOpenStorageVolumeServer) Stats(arg0 context.Context, arg1 *api.SdkVolumeStatsRequest) (*api.SdkVolumeStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockOpenStorageVolumeServerMockRecorder) Stats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).Stats), arg0, arg1)
}

// Update mocks base method.
func (m *MockOpenStorageVolumeServer) Update(arg0 context.Context, arg1 *api.SdkVolumeUpdateRequest) (*api.SdkVolumeUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOpenStorageVolumeServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).Update), arg0, arg1)
}

// VolumeCatalog mocks base method.
func (m *MockOpenStorageVolumeServer) VolumeCatalog(arg0 context.Context, arg1 *api.SdkVolumeCatalogRequest) (*api.SdkVolumeCatalogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCatalog", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkVolumeCatalogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeCatalog indicates an expected call of VolumeCatalog.
func (mr *MockOpenStorageVolumeServerMockRecorder) VolumeCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCatalog", reflect.TypeOf((*MockOpenStorageVolumeServer)(nil).VolumeCatalog), arg0, arg1)
}

// MockOpenStorageClusterDomainsServer is a mock of OpenStorageClusterDomainsServer interface.
type MockOpenStorageClusterDomainsServer struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageClusterDomainsServerMockRecorder
}

// MockOpenStorageClusterDomainsServerMockRecorder is the mock recorder for MockOpenStorageClusterDomainsServer.
type MockOpenStorageClusterDomainsServerMockRecorder struct {
	mock *MockOpenStorageClusterDomainsServer
}

// NewMockOpenStorageClusterDomainsServer creates a new mock instance.
func NewMockOpenStorageClusterDomainsServer(ctrl *gomock.Controller) *MockOpenStorageClusterDomainsServer {
	mock := &MockOpenStorageClusterDomainsServer{ctrl: ctrl}
	mock.recorder = &MockOpenStorageClusterDomainsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenStorageClusterDomainsServer) EXPECT() *MockOpenStorageClusterDomainsServerMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockOpenStorageClusterDomainsServer) Activate(arg0 context.Context, arg1 *api.SdkClusterDomainActivateRequest) (*api.SdkClusterDomainActivateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkClusterDomainActivateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Activate indicates an expected call of Activate.
func (mr *MockOpenStorageClusterDomainsServerMockRecorder) Activate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockOpenStorageClusterDomainsServer)(nil).Activate), arg0, arg1)
}

// Deactivate mocks base method.
func (m *MockOpenStorageClusterDomainsServer) Deactivate(arg0 context.Context, arg1 *api.SdkClusterDomainDeactivateRequest) (*api.SdkClusterDomainDeactivateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkClusterDomainDeactivateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockOpenStorageClusterDomainsServerMockRecorder) Deactivate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockOpenStorageClusterDomainsServer)(nil).Deactivate), arg0, arg1)
}

// Enumerate mocks base method.
func (m *MockOpenStorageClusterDomainsServer) Enumerate(arg0 context.Context, arg1 *api.SdkClusterDomainsEnumerateRequest) (*api.SdkClusterDomainsEnumerateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enumerate", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkClusterDomainsEnumerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enumerate indicates an expected call of Enumerate.
func (mr *MockOpenStorageClusterDomainsServerMockRecorder) Enumerate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enumerate", reflect.TypeOf((*MockOpenStorageClusterDomainsServer)(nil).Enumerate), arg0, arg1)
}

// Inspect mocks base method.
func (m *MockOpenStorageClusterDomainsServer) Inspect(arg0 context.Context, arg1 *api.SdkClusterDomainInspectRequest) (*api.SdkClusterDomainInspectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", arg0, arg1)
	ret0, _ := ret[0].(*api.SdkClusterDomainInspectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockOpenStorageClusterDomainsServerMockRecorder) Inspect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockOpenStorageClusterDomainsServer)(nil).Inspect), arg0, arg1)
}

// MockOpenStorageClusterDomainsClient is a mock of OpenStorageClusterDomainsClient interface.
type MockOpenStorageClusterDomainsClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenStorageClusterDomainsClientMockRecorder
}

// MockOpenStorageClusterDomainsClientMockRecorder is the mock recorder for MockOpenStorageClusterDomainsClient.
type MockOpenStorageClusterDomainsClientMockRecorder struct {
	mock *MockOpenStorageClusterDomainsClient
}

// NewMockOpenStorageClusterDomainsClient creates a new mock instance.
func NewMockOpenStorageClusterDomainsClient(ctrl *gomock.Controller) *MockOpenStorageClusterDomainsClient {
	mock := &MockOpenStorageClusterDomainsClient{ctrl: ctrl}
	mock.recorder = &MockOpenStorageClusterDomainsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenStorageClusterDomainsClient) EXPECT() *MockOpenStorageClusterDomainsClientMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockOpenStorageClusterDomainsClient) Activate(arg0 context.Context, arg1 *api.SdkClusterDomainActivateRequest, arg2 ...grpc.CallOption) (*api.SdkClusterDomainActivateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Activate", varargs...)
	ret0, _ := ret[0].(*api.SdkClusterDomainActivateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Activate indicates an expected call of Activate.
func (mr *MockOpenStorageClusterDomainsClientMockRecorder) Activate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockOpenStorageClusterDomainsClient)(nil).Activate), varargs...)
}

// Deactivate mocks base method.
func (m *MockOpenStorageClusterDomainsClient) Deactivate(arg0 context.Context, arg1 *api.SdkClusterDomainDeactivateRequest, arg2 ...grpc.CallOption) (*api.SdkClusterDomainDeactivateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deactivate", varargs...)
	ret0, _ := ret[0].(*api.SdkClusterDomainDeactivateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockOpenStorageClusterDomainsClientMockRecorder) Deactivate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockOpenStorageClusterDomainsClient)(nil).Deactivate), varargs...)
}

// Enumerate mocks base method.
func (m *MockOpenStorageClusterDomainsClient) Enumerate(arg0 context.Context, arg1 *api.SdkClusterDomainsEnumerateRequest, arg2 ...grpc.CallOption) (*api.SdkClusterDomainsEnumerateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Enumerate", varargs...)
	ret0, _ := ret[0].(*api.SdkClusterDomainsEnumerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enumerate indicates an expected call of Enumerate.
func (mr *MockOpenStorageClusterDomainsClientMockRecorder) Enumerate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enumerate", reflect.TypeOf((*MockOpenStorageClusterDomainsClient)(nil).Enumerate), varargs...)
}

// Inspect mocks base method.
func (m *MockOpenStorageClusterDomainsClient) Inspect(arg0 context.Context, arg1 *api.SdkClusterDomainInspectRequest, arg2 ...grpc.CallOption) (*api.SdkClusterDomainInspectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Inspect", varargs...)
	ret0, _ := ret[0].(*api.SdkClusterDomainInspectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockOpenStorageClusterDomainsClientMockRecorder) Inspect(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockOpenStorageClusterDomainsClient)(nil).Inspect), varargs...)
}
