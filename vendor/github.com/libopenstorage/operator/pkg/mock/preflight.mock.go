// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/libopenstorage/operator/pkg/preflight (interfaces: CheckerOps)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/libopenstorage/operator/pkg/apis/core/v1"
)

// MockCheckerOps is a mock of CheckerOps interface.
type MockCheckerOps struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerOpsMockRecorder
}

// MockCheckerOpsMockRecorder is the mock recorder for MockCheckerOps.
type MockCheckerOpsMockRecorder struct {
	mock *MockCheckerOps
}

// NewMockCheckerOps creates a new mock instance.
func NewMockCheckerOps(ctrl *gomock.Controller) *MockCheckerOps {
	mock := &MockCheckerOps{ctrl: ctrl}
	mock.recorder = &MockCheckerOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckerOps) EXPECT() *MockCheckerOpsMockRecorder {
	return m.recorder
}

// CheckCloudDrivePermission mocks base method.
func (m *MockCheckerOps) CheckCloudDrivePermission(arg0 *v1.StorageCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCloudDrivePermission", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCloudDrivePermission indicates an expected call of CheckCloudDrivePermission.
func (mr *MockCheckerOpsMockRecorder) CheckCloudDrivePermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCloudDrivePermission", reflect.TypeOf((*MockCheckerOps)(nil).CheckCloudDrivePermission), arg0)
}

// K8sDistributionName mocks base method.
func (m *MockCheckerOps) K8sDistributionName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "K8sDistributionName")
	ret0, _ := ret[0].(string)
	return ret0
}

// K8sDistributionName indicates an expected call of K8sDistributionName.
func (mr *MockCheckerOpsMockRecorder) K8sDistributionName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "K8sDistributionName", reflect.TypeOf((*MockCheckerOps)(nil).K8sDistributionName))
}

// ProviderName mocks base method.
func (m *MockCheckerOps) ProviderName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProviderName indicates an expected call of ProviderName.
func (mr *MockCheckerOpsMockRecorder) ProviderName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderName", reflect.TypeOf((*MockCheckerOps)(nil).ProviderName))
}
