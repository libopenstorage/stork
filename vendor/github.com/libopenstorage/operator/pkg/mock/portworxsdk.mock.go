// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/libopenstorage/operator/api/px (interfaces: PortworxServiceServer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/libopenstorage/operator/api/px"
)

// MockPortworxServiceServer is a mock of PortworxServiceServer interface.
type MockPortworxServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPortworxServiceServerMockRecorder
}

// MockPortworxServiceServerMockRecorder is the mock recorder for MockPortworxServiceServer.
type MockPortworxServiceServerMockRecorder struct {
	mock *MockPortworxServiceServer
}

// NewMockPortworxServiceServer creates a new mock instance.
func NewMockPortworxServiceServer(ctrl *gomock.Controller) *MockPortworxServiceServer {
	mock := &MockPortworxServiceServer{ctrl: ctrl}
	mock.recorder = &MockPortworxServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortworxServiceServer) EXPECT() *MockPortworxServiceServerMockRecorder {
	return m.recorder
}

// Audit mocks base method.
func (m *MockPortworxServiceServer) Audit(arg0 context.Context, arg1 *api.PxAuditRequest) (*api.PxAuditResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Audit", arg0, arg1)
	ret0, _ := ret[0].(*api.PxAuditResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Audit indicates an expected call of Audit.
func (mr *MockPortworxServiceServerMockRecorder) Audit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Audit", reflect.TypeOf((*MockPortworxServiceServer)(nil).Audit), arg0, arg1)
}

// CallHomeUpdate mocks base method.
func (m *MockPortworxServiceServer) CallHomeUpdate(arg0 context.Context, arg1 *api.PxCallHomeUpdateRequest) (*api.PxCallHomeUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallHomeUpdate", arg0, arg1)
	ret0, _ := ret[0].(*api.PxCallHomeUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallHomeUpdate indicates an expected call of CallHomeUpdate.
func (mr *MockPortworxServiceServerMockRecorder) CallHomeUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallHomeUpdate", reflect.TypeOf((*MockPortworxServiceServer)(nil).CallHomeUpdate), arg0, arg1)
}

// ClearDeviceScanSchedule mocks base method.
func (m *MockPortworxServiceServer) ClearDeviceScanSchedule(arg0 context.Context, arg1 *api.PxDeviceScanScheduleClearRequest) (*api.PxDeviceScanScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearDeviceScanSchedule", arg0, arg1)
	ret0, _ := ret[0].(*api.PxDeviceScanScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearDeviceScanSchedule indicates an expected call of ClearDeviceScanSchedule.
func (mr *MockPortworxServiceServerMockRecorder) ClearDeviceScanSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDeviceScanSchedule", reflect.TypeOf((*MockPortworxServiceServer)(nil).ClearDeviceScanSchedule), arg0, arg1)
}

// DefragmentKvdbNode mocks base method.
func (m *MockPortworxServiceServer) DefragmentKvdbNode(arg0 context.Context, arg1 *api.PxDefragmentKvdbNodeRequest) (*api.PxDefragmentKvdbNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefragmentKvdbNode", arg0, arg1)
	ret0, _ := ret[0].(*api.PxDefragmentKvdbNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefragmentKvdbNode indicates an expected call of DefragmentKvdbNode.
func (mr *MockPortworxServiceServerMockRecorder) DefragmentKvdbNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefragmentKvdbNode", reflect.TypeOf((*MockPortworxServiceServer)(nil).DefragmentKvdbNode), arg0, arg1)
}

// DeleteEmailConfig mocks base method.
func (m *MockPortworxServiceServer) DeleteEmailConfig(arg0 context.Context, arg1 *api.PxDeleteEmailConfigRequest) (*api.PxDeleteEmailConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailConfig", arg0, arg1)
	ret0, _ := ret[0].(*api.PxDeleteEmailConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailConfig indicates an expected call of DeleteEmailConfig.
func (mr *MockPortworxServiceServerMockRecorder) DeleteEmailConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailConfig", reflect.TypeOf((*MockPortworxServiceServer)(nil).DeleteEmailConfig), arg0, arg1)
}

// DeleteSlackConfig mocks base method.
func (m *MockPortworxServiceServer) DeleteSlackConfig(arg0 context.Context, arg1 *api.PxDeleteSlackConfigRequest) (*api.PxDeleteSlackConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlackConfig", arg0, arg1)
	ret0, _ := ret[0].(*api.PxDeleteSlackConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlackConfig indicates an expected call of DeleteSlackConfig.
func (mr *MockPortworxServiceServerMockRecorder) DeleteSlackConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlackConfig", reflect.TypeOf((*MockPortworxServiceServer)(nil).DeleteSlackConfig), arg0, arg1)
}

// DeviceScan mocks base method.
func (m *MockPortworxServiceServer) DeviceScan(arg0 context.Context, arg1 *api.PxDeviceScanRequest) (*api.PxDeviceScanResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceScan", arg0, arg1)
	ret0, _ := ret[0].(*api.PxDeviceScanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceScan indicates an expected call of DeviceScan.
func (mr *MockPortworxServiceServerMockRecorder) DeviceScan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceScan", reflect.TypeOf((*MockPortworxServiceServer)(nil).DeviceScan), arg0, arg1)
}

// DeviceScanStatus mocks base method.
func (m *MockPortworxServiceServer) DeviceScanStatus(arg0 context.Context, arg1 *api.PxDeviceScanStatusRequest) (*api.PxDeviceScanStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceScanStatus", arg0, arg1)
	ret0, _ := ret[0].(*api.PxDeviceScanStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceScanStatus indicates an expected call of DeviceScanStatus.
func (mr *MockPortworxServiceServerMockRecorder) DeviceScanStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceScanStatus", reflect.TypeOf((*MockPortworxServiceServer)(nil).DeviceScanStatus), arg0, arg1)
}

// DriveCheck mocks base method.
func (m *MockPortworxServiceServer) DriveCheck(arg0 context.Context, arg1 *api.PxDriveCheckRequest) (*api.PxDriveCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveCheck", arg0, arg1)
	ret0, _ := ret[0].(*api.PxDriveCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveCheck indicates an expected call of DriveCheck.
func (mr *MockPortworxServiceServerMockRecorder) DriveCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveCheck", reflect.TypeOf((*MockPortworxServiceServer)(nil).DriveCheck), arg0, arg1)
}

// DriveRebalance mocks base method.
func (m *MockPortworxServiceServer) DriveRebalance(arg0 context.Context, arg1 *api.PxDriveRebalanceRequest) (*api.PxDriveRebalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveRebalance", arg0, arg1)
	ret0, _ := ret[0].(*api.PxDriveRebalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveRebalance indicates an expected call of DriveRebalance.
func (mr *MockPortworxServiceServerMockRecorder) DriveRebalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveRebalance", reflect.TypeOf((*MockPortworxServiceServer)(nil).DriveRebalance), arg0, arg1)
}

// DriveReplace mocks base method.
func (m *MockPortworxServiceServer) DriveReplace(arg0 context.Context, arg1 *api.PxDriveReplaceRequest) (*api.PxDriveReplaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveReplace", arg0, arg1)
	ret0, _ := ret[0].(*api.PxDriveReplaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveReplace indicates an expected call of DriveReplace.
func (mr *MockPortworxServiceServerMockRecorder) DriveReplace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveReplace", reflect.TypeOf((*MockPortworxServiceServer)(nil).DriveReplace), arg0, arg1)
}

// ExitDaemon mocks base method.
func (m *MockPortworxServiceServer) ExitDaemon(arg0 context.Context, arg1 *api.PxExitDaemonRequest) (*api.PxExitDaemonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitDaemon", arg0, arg1)
	ret0, _ := ret[0].(*api.PxExitDaemonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExitDaemon indicates an expected call of ExitDaemon.
func (mr *MockPortworxServiceServerMockRecorder) ExitDaemon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitDaemon", reflect.TypeOf((*MockPortworxServiceServer)(nil).ExitDaemon), arg0, arg1)
}

// GetDeviceScanSchedule mocks base method.
func (m *MockPortworxServiceServer) GetDeviceScanSchedule(arg0 context.Context, arg1 *api.PxDeviceScanScheduleGetRequest) (*api.PxDeviceScanScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceScanSchedule", arg0, arg1)
	ret0, _ := ret[0].(*api.PxDeviceScanScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceScanSchedule indicates an expected call of GetDeviceScanSchedule.
func (mr *MockPortworxServiceServerMockRecorder) GetDeviceScanSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceScanSchedule", reflect.TypeOf((*MockPortworxServiceServer)(nil).GetDeviceScanSchedule), arg0, arg1)
}

// GetEmailConfig mocks base method.
func (m *MockPortworxServiceServer) GetEmailConfig(arg0 context.Context, arg1 *api.PxGetEmailConfigRequest) (*api.PxGetEmailConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailConfig", arg0, arg1)
	ret0, _ := ret[0].(*api.PxGetEmailConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailConfig indicates an expected call of GetEmailConfig.
func (mr *MockPortworxServiceServerMockRecorder) GetEmailConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailConfig", reflect.TypeOf((*MockPortworxServiceServer)(nil).GetEmailConfig), arg0, arg1)
}

// GetKvdbBootstrapEntries mocks base method.
func (m *MockPortworxServiceServer) GetKvdbBootstrapEntries(arg0 context.Context, arg1 *api.PxKvdbGetBootstrapEntriesRequest) (*api.PxKvdbGetBootstrapEntriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKvdbBootstrapEntries", arg0, arg1)
	ret0, _ := ret[0].(*api.PxKvdbGetBootstrapEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKvdbBootstrapEntries indicates an expected call of GetKvdbBootstrapEntries.
func (mr *MockPortworxServiceServerMockRecorder) GetKvdbBootstrapEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKvdbBootstrapEntries", reflect.TypeOf((*MockPortworxServiceServer)(nil).GetKvdbBootstrapEntries), arg0, arg1)
}

// GetKvdbDeviceInfo mocks base method.
func (m *MockPortworxServiceServer) GetKvdbDeviceInfo(arg0 context.Context, arg1 *api.PxKvdbGetDeviceInfoRequest) (*api.PxKvdbGetDeviceInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKvdbDeviceInfo", arg0, arg1)
	ret0, _ := ret[0].(*api.PxKvdbGetDeviceInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKvdbDeviceInfo indicates an expected call of GetKvdbDeviceInfo.
func (mr *MockPortworxServiceServerMockRecorder) GetKvdbDeviceInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKvdbDeviceInfo", reflect.TypeOf((*MockPortworxServiceServer)(nil).GetKvdbDeviceInfo), arg0, arg1)
}

// GetKvdbEndpoints mocks base method.
func (m *MockPortworxServiceServer) GetKvdbEndpoints(arg0 context.Context, arg1 *api.PxKvdbEndpointRequest) (*api.PxKvdbEndpointResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKvdbEndpoints", arg0, arg1)
	ret0, _ := ret[0].(*api.PxKvdbEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKvdbEndpoints indicates an expected call of GetKvdbEndpoints.
func (mr *MockPortworxServiceServerMockRecorder) GetKvdbEndpoints(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKvdbEndpoints", reflect.TypeOf((*MockPortworxServiceServer)(nil).GetKvdbEndpoints), arg0, arg1)
}

// GetKvdbMemberInfo mocks base method.
func (m *MockPortworxServiceServer) GetKvdbMemberInfo(arg0 context.Context, arg1 *api.PxKvdbMemberRequest) (*api.PxKvdbMemberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKvdbMemberInfo", arg0, arg1)
	ret0, _ := ret[0].(*api.PxKvdbMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKvdbMemberInfo indicates an expected call of GetKvdbMemberInfo.
func (mr *MockPortworxServiceServerMockRecorder) GetKvdbMemberInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKvdbMemberInfo", reflect.TypeOf((*MockPortworxServiceServer)(nil).GetKvdbMemberInfo), arg0, arg1)
}

// GetNodeStats mocks base method.
func (m *MockPortworxServiceServer) GetNodeStats(arg0 context.Context, arg1 *api.PxGetNodeStatRequest) (*api.PxGetNodeStatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeStats", arg0, arg1)
	ret0, _ := ret[0].(*api.PxGetNodeStatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeStats indicates an expected call of GetNodeStats.
func (mr *MockPortworxServiceServerMockRecorder) GetNodeStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeStats", reflect.TypeOf((*MockPortworxServiceServer)(nil).GetNodeStats), arg0, arg1)
}

// GetSlackConfig mocks base method.
func (m *MockPortworxServiceServer) GetSlackConfig(arg0 context.Context, arg1 *api.PxGetSlackConfigRequest) (*api.PxGetSlackConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlackConfig", arg0, arg1)
	ret0, _ := ret[0].(*api.PxGetSlackConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlackConfig indicates an expected call of GetSlackConfig.
func (mr *MockPortworxServiceServerMockRecorder) GetSlackConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlackConfig", reflect.TypeOf((*MockPortworxServiceServer)(nil).GetSlackConfig), arg0, arg1)
}

// GetStorageSpec mocks base method.
func (m *MockPortworxServiceServer) GetStorageSpec(arg0 context.Context, arg1 *api.PxGetStorageSpecRequest) (*api.PxGetStorageSpecResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageSpec", arg0, arg1)
	ret0, _ := ret[0].(*api.PxGetStorageSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageSpec indicates an expected call of GetStorageSpec.
func (mr *MockPortworxServiceServerMockRecorder) GetStorageSpec(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageSpec", reflect.TypeOf((*MockPortworxServiceServer)(nil).GetStorageSpec), arg0, arg1)
}

// MaintenanceOpsUpdate mocks base method.
func (m *MockPortworxServiceServer) MaintenanceOpsUpdate(arg0 context.Context, arg1 *api.PxMaintenanceOpsUpdateRequest) (*api.PxMaintenanceOpsUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaintenanceOpsUpdate", arg0, arg1)
	ret0, _ := ret[0].(*api.PxMaintenanceOpsUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaintenanceOpsUpdate indicates an expected call of MaintenanceOpsUpdate.
func (mr *MockPortworxServiceServerMockRecorder) MaintenanceOpsUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaintenanceOpsUpdate", reflect.TypeOf((*MockPortworxServiceServer)(nil).MaintenanceOpsUpdate), arg0, arg1)
}

// NRCPause mocks base method.
func (m *MockPortworxServiceServer) NRCPause(arg0 context.Context, arg1 *api.PxNRCPauseRequest) (*api.PxNRCPauseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NRCPause", arg0, arg1)
	ret0, _ := ret[0].(*api.PxNRCPauseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NRCPause indicates an expected call of NRCPause.
func (mr *MockPortworxServiceServerMockRecorder) NRCPause(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NRCPause", reflect.TypeOf((*MockPortworxServiceServer)(nil).NRCPause), arg0, arg1)
}

// PoolDelete mocks base method.
func (m *MockPortworxServiceServer) PoolDelete(arg0 context.Context, arg1 *api.PxPoolDeleteRequest) (*api.PxPoolDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoolDelete", arg0, arg1)
	ret0, _ := ret[0].(*api.PxPoolDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoolDelete indicates an expected call of PoolDelete.
func (mr *MockPortworxServiceServerMockRecorder) PoolDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoolDelete", reflect.TypeOf((*MockPortworxServiceServer)(nil).PoolDelete), arg0, arg1)
}

// PoolMaintenance mocks base method.
func (m *MockPortworxServiceServer) PoolMaintenance(arg0 context.Context, arg1 *api.PxPoolMaintenanceRequest) (*api.PxPoolMaintenanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoolMaintenance", arg0, arg1)
	ret0, _ := ret[0].(*api.PxPoolMaintenanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoolMaintenance indicates an expected call of PoolMaintenance.
func (mr *MockPortworxServiceServerMockRecorder) PoolMaintenance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoolMaintenance", reflect.TypeOf((*MockPortworxServiceServer)(nil).PoolMaintenance), arg0, arg1)
}

// PoolUpdate mocks base method.
func (m *MockPortworxServiceServer) PoolUpdate(arg0 context.Context, arg1 *api.PxPoolUpdateRequest) (*api.PxPoolUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoolUpdate", arg0, arg1)
	ret0, _ := ret[0].(*api.PxPoolUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoolUpdate indicates an expected call of PoolUpdate.
func (mr *MockPortworxServiceServerMockRecorder) PoolUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoolUpdate", reflect.TypeOf((*MockPortworxServiceServer)(nil).PoolUpdate), arg0, arg1)
}

// PreShutdown mocks base method.
func (m *MockPortworxServiceServer) PreShutdown(arg0 context.Context, arg1 *api.PxPreShutdownRequest) (*api.PxPreShutdownResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreShutdown", arg0, arg1)
	ret0, _ := ret[0].(*api.PxPreShutdownResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreShutdown indicates an expected call of PreShutdown.
func (mr *MockPortworxServiceServerMockRecorder) PreShutdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreShutdown", reflect.TypeOf((*MockPortworxServiceServer)(nil).PreShutdown), arg0, arg1)
}

// RelaxedReclaimDelete mocks base method.
func (m *MockPortworxServiceServer) RelaxedReclaimDelete(arg0 context.Context, arg1 *api.PxRelaxedReclaimDeleteRequest) (*api.PxRelaxedReclaimDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelaxedReclaimDelete", arg0, arg1)
	ret0, _ := ret[0].(*api.PxRelaxedReclaimDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelaxedReclaimDelete indicates an expected call of RelaxedReclaimDelete.
func (mr *MockPortworxServiceServerMockRecorder) RelaxedReclaimDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelaxedReclaimDelete", reflect.TypeOf((*MockPortworxServiceServer)(nil).RelaxedReclaimDelete), arg0, arg1)
}

// RelaxedReclaimEnumerate mocks base method.
func (m *MockPortworxServiceServer) RelaxedReclaimEnumerate(arg0 context.Context, arg1 *api.PxRelaxedReclaimShowRequest) (*api.PxRelaxedReclaimShowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelaxedReclaimEnumerate", arg0, arg1)
	ret0, _ := ret[0].(*api.PxRelaxedReclaimShowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelaxedReclaimEnumerate indicates an expected call of RelaxedReclaimEnumerate.
func (mr *MockPortworxServiceServerMockRecorder) RelaxedReclaimEnumerate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelaxedReclaimEnumerate", reflect.TypeOf((*MockPortworxServiceServer)(nil).RelaxedReclaimEnumerate), arg0, arg1)
}

// RelaxedReclaimPurge mocks base method.
func (m *MockPortworxServiceServer) RelaxedReclaimPurge(arg0 context.Context, arg1 *api.PxRelaxedReclaimPurgeRequest) (*api.PxRelaxedReclaimPurgeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelaxedReclaimPurge", arg0, arg1)
	ret0, _ := ret[0].(*api.PxRelaxedReclaimPurgeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelaxedReclaimPurge indicates an expected call of RelaxedReclaimPurge.
func (mr *MockPortworxServiceServerMockRecorder) RelaxedReclaimPurge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelaxedReclaimPurge", reflect.TypeOf((*MockPortworxServiceServer)(nil).RelaxedReclaimPurge), arg0, arg1)
}

// SetDeviceScanSchedule mocks base method.
func (m *MockPortworxServiceServer) SetDeviceScanSchedule(arg0 context.Context, arg1 *api.PxDeviceScanScheduleSetRequest) (*api.PxDeviceScanScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeviceScanSchedule", arg0, arg1)
	ret0, _ := ret[0].(*api.PxDeviceScanScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDeviceScanSchedule indicates an expected call of SetDeviceScanSchedule.
func (mr *MockPortworxServiceServerMockRecorder) SetDeviceScanSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeviceScanSchedule", reflect.TypeOf((*MockPortworxServiceServer)(nil).SetDeviceScanSchedule), arg0, arg1)
}

// SetEmailConfig mocks base method.
func (m *MockPortworxServiceServer) SetEmailConfig(arg0 context.Context, arg1 *api.PxSetEmailConfigRequest) (*api.PxSetEmailConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEmailConfig", arg0, arg1)
	ret0, _ := ret[0].(*api.PxSetEmailConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEmailConfig indicates an expected call of SetEmailConfig.
func (mr *MockPortworxServiceServerMockRecorder) SetEmailConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEmailConfig", reflect.TypeOf((*MockPortworxServiceServer)(nil).SetEmailConfig), arg0, arg1)
}

// SetSlackConfig mocks base method.
func (m *MockPortworxServiceServer) SetSlackConfig(arg0 context.Context, arg1 *api.PxSetSlackConfigRequest) (*api.PxSetSlackConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSlackConfig", arg0, arg1)
	ret0, _ := ret[0].(*api.PxSetSlackConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSlackConfig indicates an expected call of SetSlackConfig.
func (mr *MockPortworxServiceServerMockRecorder) SetSlackConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSlackConfig", reflect.TypeOf((*MockPortworxServiceServer)(nil).SetSlackConfig), arg0, arg1)
}

// SystemMetadataStatus mocks base method.
func (m *MockPortworxServiceServer) SystemMetadataStatus(arg0 context.Context, arg1 *api.PxSystemMetadataRequest) (*api.PxSystemMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemMetadataStatus", arg0, arg1)
	ret0, _ := ret[0].(*api.PxSystemMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemMetadataStatus indicates an expected call of SystemMetadataStatus.
func (mr *MockPortworxServiceServerMockRecorder) SystemMetadataStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemMetadataStatus", reflect.TypeOf((*MockPortworxServiceServer)(nil).SystemMetadataStatus), arg0, arg1)
}
