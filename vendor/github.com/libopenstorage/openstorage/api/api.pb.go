/// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// Note, the documentation provided here for can be created in
// markdown format plus the use of 'codetabs' are supported. The documentation
// will then be rendered by github.com/openstoreage/libopenstoreage.github.io and
// provided on https://libopenstorage.github.io
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: api/api.proto

package api

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_STATUS_NONE                     Status = 0
	Status_STATUS_INIT                     Status = 1
	Status_STATUS_OK                       Status = 2
	Status_STATUS_OFFLINE                  Status = 3
	Status_STATUS_ERROR                    Status = 4
	Status_STATUS_NOT_IN_QUORUM            Status = 5
	Status_STATUS_DECOMMISSION             Status = 6
	Status_STATUS_MAINTENANCE              Status = 7
	Status_STATUS_STORAGE_DOWN             Status = 8
	Status_STATUS_STORAGE_DEGRADED         Status = 9
	Status_STATUS_NEEDS_REBOOT             Status = 10
	Status_STATUS_STORAGE_REBALANCE        Status = 11
	Status_STATUS_STORAGE_DRIVE_REPLACE    Status = 12
	Status_STATUS_NOT_IN_QUORUM_NO_STORAGE Status = 13
	Status_STATUS_POOLMAINTENANCE          Status = 14
	// Add statuses before MAX and update the number for MAX
	Status_STATUS_MAX Status = 15
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:  "STATUS_NONE",
		1:  "STATUS_INIT",
		2:  "STATUS_OK",
		3:  "STATUS_OFFLINE",
		4:  "STATUS_ERROR",
		5:  "STATUS_NOT_IN_QUORUM",
		6:  "STATUS_DECOMMISSION",
		7:  "STATUS_MAINTENANCE",
		8:  "STATUS_STORAGE_DOWN",
		9:  "STATUS_STORAGE_DEGRADED",
		10: "STATUS_NEEDS_REBOOT",
		11: "STATUS_STORAGE_REBALANCE",
		12: "STATUS_STORAGE_DRIVE_REPLACE",
		13: "STATUS_NOT_IN_QUORUM_NO_STORAGE",
		14: "STATUS_POOLMAINTENANCE",
		15: "STATUS_MAX",
	}
	Status_value = map[string]int32{
		"STATUS_NONE":                     0,
		"STATUS_INIT":                     1,
		"STATUS_OK":                       2,
		"STATUS_OFFLINE":                  3,
		"STATUS_ERROR":                    4,
		"STATUS_NOT_IN_QUORUM":            5,
		"STATUS_DECOMMISSION":             6,
		"STATUS_MAINTENANCE":              7,
		"STATUS_STORAGE_DOWN":             8,
		"STATUS_STORAGE_DEGRADED":         9,
		"STATUS_NEEDS_REBOOT":             10,
		"STATUS_STORAGE_REBALANCE":        11,
		"STATUS_STORAGE_DRIVE_REPLACE":    12,
		"STATUS_NOT_IN_QUORUM_NO_STORAGE": 13,
		"STATUS_POOLMAINTENANCE":          14,
		"STATUS_MAX":                      15,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{0}
}

type DriverType int32

const (
	DriverType_DRIVER_TYPE_NONE      DriverType = 0
	DriverType_DRIVER_TYPE_FILE      DriverType = 1
	DriverType_DRIVER_TYPE_BLOCK     DriverType = 2
	DriverType_DRIVER_TYPE_OBJECT    DriverType = 3
	DriverType_DRIVER_TYPE_CLUSTERED DriverType = 4
	DriverType_DRIVER_TYPE_GRAPH     DriverType = 5
)

// Enum value maps for DriverType.
var (
	DriverType_name = map[int32]string{
		0: "DRIVER_TYPE_NONE",
		1: "DRIVER_TYPE_FILE",
		2: "DRIVER_TYPE_BLOCK",
		3: "DRIVER_TYPE_OBJECT",
		4: "DRIVER_TYPE_CLUSTERED",
		5: "DRIVER_TYPE_GRAPH",
	}
	DriverType_value = map[string]int32{
		"DRIVER_TYPE_NONE":      0,
		"DRIVER_TYPE_FILE":      1,
		"DRIVER_TYPE_BLOCK":     2,
		"DRIVER_TYPE_OBJECT":    3,
		"DRIVER_TYPE_CLUSTERED": 4,
		"DRIVER_TYPE_GRAPH":     5,
	}
)

func (x DriverType) Enum() *DriverType {
	p := new(DriverType)
	*p = x
	return p
}

func (x DriverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DriverType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[1].Descriptor()
}

func (DriverType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[1]
}

func (x DriverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DriverType.Descriptor instead.
func (DriverType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{1}
}

type FSType int32

const (
	FSType_FS_TYPE_NONE  FSType = 0
	FSType_FS_TYPE_BTRFS FSType = 1
	FSType_FS_TYPE_EXT4  FSType = 2
	FSType_FS_TYPE_FUSE  FSType = 3
	FSType_FS_TYPE_NFS   FSType = 4
	FSType_FS_TYPE_VFS   FSType = 5
	FSType_FS_TYPE_XFS   FSType = 6
	FSType_FS_TYPE_ZFS   FSType = 7
	FSType_FS_TYPE_XFSv2 FSType = 8
)

// Enum value maps for FSType.
var (
	FSType_name = map[int32]string{
		0: "FS_TYPE_NONE",
		1: "FS_TYPE_BTRFS",
		2: "FS_TYPE_EXT4",
		3: "FS_TYPE_FUSE",
		4: "FS_TYPE_NFS",
		5: "FS_TYPE_VFS",
		6: "FS_TYPE_XFS",
		7: "FS_TYPE_ZFS",
		8: "FS_TYPE_XFSv2",
	}
	FSType_value = map[string]int32{
		"FS_TYPE_NONE":  0,
		"FS_TYPE_BTRFS": 1,
		"FS_TYPE_EXT4":  2,
		"FS_TYPE_FUSE":  3,
		"FS_TYPE_NFS":   4,
		"FS_TYPE_VFS":   5,
		"FS_TYPE_XFS":   6,
		"FS_TYPE_ZFS":   7,
		"FS_TYPE_XFSv2": 8,
	}
)

func (x FSType) Enum() *FSType {
	p := new(FSType)
	*p = x
	return p
}

func (x FSType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FSType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[2].Descriptor()
}

func (FSType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[2]
}

func (x FSType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FSType.Descriptor instead.
func (FSType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{2}
}

type GraphDriverChangeType int32

const (
	GraphDriverChangeType_GRAPH_DRIVER_CHANGE_TYPE_NONE     GraphDriverChangeType = 0
	GraphDriverChangeType_GRAPH_DRIVER_CHANGE_TYPE_MODIFIED GraphDriverChangeType = 1
	GraphDriverChangeType_GRAPH_DRIVER_CHANGE_TYPE_ADDED    GraphDriverChangeType = 2
	GraphDriverChangeType_GRAPH_DRIVER_CHANGE_TYPE_DELETED  GraphDriverChangeType = 3
)

// Enum value maps for GraphDriverChangeType.
var (
	GraphDriverChangeType_name = map[int32]string{
		0: "GRAPH_DRIVER_CHANGE_TYPE_NONE",
		1: "GRAPH_DRIVER_CHANGE_TYPE_MODIFIED",
		2: "GRAPH_DRIVER_CHANGE_TYPE_ADDED",
		3: "GRAPH_DRIVER_CHANGE_TYPE_DELETED",
	}
	GraphDriverChangeType_value = map[string]int32{
		"GRAPH_DRIVER_CHANGE_TYPE_NONE":     0,
		"GRAPH_DRIVER_CHANGE_TYPE_MODIFIED": 1,
		"GRAPH_DRIVER_CHANGE_TYPE_ADDED":    2,
		"GRAPH_DRIVER_CHANGE_TYPE_DELETED":  3,
	}
)

func (x GraphDriverChangeType) Enum() *GraphDriverChangeType {
	p := new(GraphDriverChangeType)
	*p = x
	return p
}

func (x GraphDriverChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GraphDriverChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[3].Descriptor()
}

func (GraphDriverChangeType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[3]
}

func (x GraphDriverChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GraphDriverChangeType.Descriptor instead.
func (GraphDriverChangeType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{3}
}

type SeverityType int32

const (
	SeverityType_SEVERITY_TYPE_NONE    SeverityType = 0
	SeverityType_SEVERITY_TYPE_ALARM   SeverityType = 1
	SeverityType_SEVERITY_TYPE_WARNING SeverityType = 2
	SeverityType_SEVERITY_TYPE_NOTIFY  SeverityType = 3
)

// Enum value maps for SeverityType.
var (
	SeverityType_name = map[int32]string{
		0: "SEVERITY_TYPE_NONE",
		1: "SEVERITY_TYPE_ALARM",
		2: "SEVERITY_TYPE_WARNING",
		3: "SEVERITY_TYPE_NOTIFY",
	}
	SeverityType_value = map[string]int32{
		"SEVERITY_TYPE_NONE":    0,
		"SEVERITY_TYPE_ALARM":   1,
		"SEVERITY_TYPE_WARNING": 2,
		"SEVERITY_TYPE_NOTIFY":  3,
	}
)

func (x SeverityType) Enum() *SeverityType {
	p := new(SeverityType)
	*p = x
	return p
}

func (x SeverityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeverityType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[4].Descriptor()
}

func (SeverityType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[4]
}

func (x SeverityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeverityType.Descriptor instead.
func (SeverityType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{4}
}

type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_NONE    ResourceType = 0
	ResourceType_RESOURCE_TYPE_VOLUME  ResourceType = 1
	ResourceType_RESOURCE_TYPE_NODE    ResourceType = 2
	ResourceType_RESOURCE_TYPE_CLUSTER ResourceType = 3
	ResourceType_RESOURCE_TYPE_DRIVE   ResourceType = 4
	ResourceType_RESOURCE_TYPE_POOL    ResourceType = 5
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_NONE",
		1: "RESOURCE_TYPE_VOLUME",
		2: "RESOURCE_TYPE_NODE",
		3: "RESOURCE_TYPE_CLUSTER",
		4: "RESOURCE_TYPE_DRIVE",
		5: "RESOURCE_TYPE_POOL",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_NONE":    0,
		"RESOURCE_TYPE_VOLUME":  1,
		"RESOURCE_TYPE_NODE":    2,
		"RESOURCE_TYPE_CLUSTER": 3,
		"RESOURCE_TYPE_DRIVE":   4,
		"RESOURCE_TYPE_POOL":    5,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[5].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[5]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{5}
}

type AlertActionType int32

const (
	AlertActionType_ALERT_ACTION_TYPE_NONE   AlertActionType = 0
	AlertActionType_ALERT_ACTION_TYPE_DELETE AlertActionType = 1
	AlertActionType_ALERT_ACTION_TYPE_CREATE AlertActionType = 2
	AlertActionType_ALERT_ACTION_TYPE_UPDATE AlertActionType = 3
)

// Enum value maps for AlertActionType.
var (
	AlertActionType_name = map[int32]string{
		0: "ALERT_ACTION_TYPE_NONE",
		1: "ALERT_ACTION_TYPE_DELETE",
		2: "ALERT_ACTION_TYPE_CREATE",
		3: "ALERT_ACTION_TYPE_UPDATE",
	}
	AlertActionType_value = map[string]int32{
		"ALERT_ACTION_TYPE_NONE":   0,
		"ALERT_ACTION_TYPE_DELETE": 1,
		"ALERT_ACTION_TYPE_CREATE": 2,
		"ALERT_ACTION_TYPE_UPDATE": 3,
	}
)

func (x AlertActionType) Enum() *AlertActionType {
	p := new(AlertActionType)
	*p = x
	return p
}

func (x AlertActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlertActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[6].Descriptor()
}

func (AlertActionType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[6]
}

func (x AlertActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlertActionType.Descriptor instead.
func (AlertActionType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{6}
}

type VolumeActionParam int32

const (
	VolumeActionParam_VOLUME_ACTION_PARAM_NONE VolumeActionParam = 0
	// Maps to the boolean value false
	VolumeActionParam_VOLUME_ACTION_PARAM_OFF VolumeActionParam = 1
	// Maps to the boolean value true.
	VolumeActionParam_VOLUME_ACTION_PARAM_ON VolumeActionParam = 2
)

// Enum value maps for VolumeActionParam.
var (
	VolumeActionParam_name = map[int32]string{
		0: "VOLUME_ACTION_PARAM_NONE",
		1: "VOLUME_ACTION_PARAM_OFF",
		2: "VOLUME_ACTION_PARAM_ON",
	}
	VolumeActionParam_value = map[string]int32{
		"VOLUME_ACTION_PARAM_NONE": 0,
		"VOLUME_ACTION_PARAM_OFF":  1,
		"VOLUME_ACTION_PARAM_ON":   2,
	}
)

func (x VolumeActionParam) Enum() *VolumeActionParam {
	p := new(VolumeActionParam)
	*p = x
	return p
}

func (x VolumeActionParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeActionParam) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[7].Descriptor()
}

func (VolumeActionParam) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[7]
}

func (x VolumeActionParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeActionParam.Descriptor instead.
func (VolumeActionParam) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{7}
}

type CosType int32

const (
	CosType_NONE   CosType = 0
	CosType_LOW    CosType = 1
	CosType_MEDIUM CosType = 2
	CosType_HIGH   CosType = 3
)

// Enum value maps for CosType.
var (
	CosType_name = map[int32]string{
		0: "NONE",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
	}
	CosType_value = map[string]int32{
		"NONE":   0,
		"LOW":    1,
		"MEDIUM": 2,
		"HIGH":   3,
	}
)

func (x CosType) Enum() *CosType {
	p := new(CosType)
	*p = x
	return p
}

func (x CosType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CosType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[8].Descriptor()
}

func (CosType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[8]
}

func (x CosType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CosType.Descriptor instead.
func (CosType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{8}
}

type IoProfile int32

const (
	IoProfile_IO_PROFILE_SEQUENTIAL  IoProfile = 0
	IoProfile_IO_PROFILE_RANDOM      IoProfile = 1
	IoProfile_IO_PROFILE_DB          IoProfile = 2
	IoProfile_IO_PROFILE_DB_REMOTE   IoProfile = 3
	IoProfile_IO_PROFILE_CMS         IoProfile = 4
	IoProfile_IO_PROFILE_SYNC_SHARED IoProfile = 5
	IoProfile_IO_PROFILE_AUTO        IoProfile = 6
	IoProfile_IO_PROFILE_NONE        IoProfile = 7
)

// Enum value maps for IoProfile.
var (
	IoProfile_name = map[int32]string{
		0: "IO_PROFILE_SEQUENTIAL",
		1: "IO_PROFILE_RANDOM",
		2: "IO_PROFILE_DB",
		3: "IO_PROFILE_DB_REMOTE",
		4: "IO_PROFILE_CMS",
		5: "IO_PROFILE_SYNC_SHARED",
		6: "IO_PROFILE_AUTO",
		7: "IO_PROFILE_NONE",
	}
	IoProfile_value = map[string]int32{
		"IO_PROFILE_SEQUENTIAL":  0,
		"IO_PROFILE_RANDOM":      1,
		"IO_PROFILE_DB":          2,
		"IO_PROFILE_DB_REMOTE":   3,
		"IO_PROFILE_CMS":         4,
		"IO_PROFILE_SYNC_SHARED": 5,
		"IO_PROFILE_AUTO":        6,
		"IO_PROFILE_NONE":        7,
	}
)

func (x IoProfile) Enum() *IoProfile {
	p := new(IoProfile)
	*p = x
	return p
}

func (x IoProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IoProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[9].Descriptor()
}

func (IoProfile) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[9]
}

func (x IoProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IoProfile.Descriptor instead.
func (IoProfile) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{9}
}

// VolumeState represents the state of a volume.
type VolumeState int32

const (
	VolumeState_VOLUME_STATE_NONE VolumeState = 0
	// Volume is transitioning to new state
	VolumeState_VOLUME_STATE_PENDING VolumeState = 1
	// Volume is ready to be assigned to a container
	VolumeState_VOLUME_STATE_AVAILABLE VolumeState = 2
	// Volume is attached to container
	VolumeState_VOLUME_STATE_ATTACHED VolumeState = 3
	// Volume is detached but associated with a container
	VolumeState_VOLUME_STATE_DETACHED VolumeState = 4
	// Volume detach is in progress
	VolumeState_VOLUME_STATE_DETATCHING VolumeState = 5
	// Volume is in error state
	VolumeState_VOLUME_STATE_ERROR VolumeState = 6
	// Volume is deleted, it will remain in this state
	// while resources are asynchronously reclaimed
	VolumeState_VOLUME_STATE_DELETED VolumeState = 7
	// Volume is trying to be detached
	VolumeState_VOLUME_STATE_TRY_DETACHING VolumeState = 8
	// Volume is undergoing restore
	VolumeState_VOLUME_STATE_RESTORE VolumeState = 9
)

// Enum value maps for VolumeState.
var (
	VolumeState_name = map[int32]string{
		0: "VOLUME_STATE_NONE",
		1: "VOLUME_STATE_PENDING",
		2: "VOLUME_STATE_AVAILABLE",
		3: "VOLUME_STATE_ATTACHED",
		4: "VOLUME_STATE_DETACHED",
		5: "VOLUME_STATE_DETATCHING",
		6: "VOLUME_STATE_ERROR",
		7: "VOLUME_STATE_DELETED",
		8: "VOLUME_STATE_TRY_DETACHING",
		9: "VOLUME_STATE_RESTORE",
	}
	VolumeState_value = map[string]int32{
		"VOLUME_STATE_NONE":          0,
		"VOLUME_STATE_PENDING":       1,
		"VOLUME_STATE_AVAILABLE":     2,
		"VOLUME_STATE_ATTACHED":      3,
		"VOLUME_STATE_DETACHED":      4,
		"VOLUME_STATE_DETATCHING":    5,
		"VOLUME_STATE_ERROR":         6,
		"VOLUME_STATE_DELETED":       7,
		"VOLUME_STATE_TRY_DETACHING": 8,
		"VOLUME_STATE_RESTORE":       9,
	}
)

func (x VolumeState) Enum() *VolumeState {
	p := new(VolumeState)
	*p = x
	return p
}

func (x VolumeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[10].Descriptor()
}

func (VolumeState) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[10]
}

func (x VolumeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeState.Descriptor instead.
func (VolumeState) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{10}
}

// VolumeStatus represents a health status for a volume.
type VolumeStatus int32

const (
	VolumeStatus_VOLUME_STATUS_NONE VolumeStatus = 0
	// Volume is not present
	VolumeStatus_VOLUME_STATUS_NOT_PRESENT VolumeStatus = 1
	// Volume is healthy
	VolumeStatus_VOLUME_STATUS_UP VolumeStatus = 2
	// Volume is in fail mode
	VolumeStatus_VOLUME_STATUS_DOWN VolumeStatus = 3
	// Volume is up but with degraded performance
	// In a RAID group, this may indicate a problem with one or more drives
	VolumeStatus_VOLUME_STATUS_DEGRADED VolumeStatus = 4
)

// Enum value maps for VolumeStatus.
var (
	VolumeStatus_name = map[int32]string{
		0: "VOLUME_STATUS_NONE",
		1: "VOLUME_STATUS_NOT_PRESENT",
		2: "VOLUME_STATUS_UP",
		3: "VOLUME_STATUS_DOWN",
		4: "VOLUME_STATUS_DEGRADED",
	}
	VolumeStatus_value = map[string]int32{
		"VOLUME_STATUS_NONE":        0,
		"VOLUME_STATUS_NOT_PRESENT": 1,
		"VOLUME_STATUS_UP":          2,
		"VOLUME_STATUS_DOWN":        3,
		"VOLUME_STATUS_DEGRADED":    4,
	}
)

func (x VolumeStatus) Enum() *VolumeStatus {
	p := new(VolumeStatus)
	*p = x
	return p
}

func (x VolumeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[11].Descriptor()
}

func (VolumeStatus) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[11]
}

func (x VolumeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeStatus.Descriptor instead.
func (VolumeStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{11}
}

type FilesystemHealthStatus int32

const (
	// filesystem health status is unknown
	FilesystemHealthStatus_FS_HEALTH_STATUS_UNKNOWN FilesystemHealthStatus = 0
	// filesystem is a healthy
	FilesystemHealthStatus_FS_HEALTH_STATUS_HEALTHY FilesystemHealthStatus = 1
	// filesystem has errors, but can be fixed safely
	FilesystemHealthStatus_FS_HEALTH_STATUS_SAFE_TO_FIX FilesystemHealthStatus = 2
	// filesystem has errors, these cannot be fixed automatically,
	// user needs to review the reported errors and take appropriate action
	FilesystemHealthStatus_FS_HEALTH_STATUS_NEEDS_INSPECTION FilesystemHealthStatus = 3
)

// Enum value maps for FilesystemHealthStatus.
var (
	FilesystemHealthStatus_name = map[int32]string{
		0: "FS_HEALTH_STATUS_UNKNOWN",
		1: "FS_HEALTH_STATUS_HEALTHY",
		2: "FS_HEALTH_STATUS_SAFE_TO_FIX",
		3: "FS_HEALTH_STATUS_NEEDS_INSPECTION",
	}
	FilesystemHealthStatus_value = map[string]int32{
		"FS_HEALTH_STATUS_UNKNOWN":          0,
		"FS_HEALTH_STATUS_HEALTHY":          1,
		"FS_HEALTH_STATUS_SAFE_TO_FIX":      2,
		"FS_HEALTH_STATUS_NEEDS_INSPECTION": 3,
	}
)

func (x FilesystemHealthStatus) Enum() *FilesystemHealthStatus {
	p := new(FilesystemHealthStatus)
	*p = x
	return p
}

func (x FilesystemHealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilesystemHealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[12].Descriptor()
}

func (FilesystemHealthStatus) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[12]
}

func (x FilesystemHealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilesystemHealthStatus.Descriptor instead.
func (FilesystemHealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{12}
}

type StorageMedium int32

const (
	// Magnetic spinning disk.
	StorageMedium_STORAGE_MEDIUM_MAGNETIC StorageMedium = 0
	// SSD disk
	StorageMedium_STORAGE_MEDIUM_SSD StorageMedium = 1
	// NVME disk
	StorageMedium_STORAGE_MEDIUM_NVME StorageMedium = 2
)

// Enum value maps for StorageMedium.
var (
	StorageMedium_name = map[int32]string{
		0: "STORAGE_MEDIUM_MAGNETIC",
		1: "STORAGE_MEDIUM_SSD",
		2: "STORAGE_MEDIUM_NVME",
	}
	StorageMedium_value = map[string]int32{
		"STORAGE_MEDIUM_MAGNETIC": 0,
		"STORAGE_MEDIUM_SSD":      1,
		"STORAGE_MEDIUM_NVME":     2,
	}
)

func (x StorageMedium) Enum() *StorageMedium {
	p := new(StorageMedium)
	*p = x
	return p
}

func (x StorageMedium) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageMedium) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[13].Descriptor()
}

func (StorageMedium) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[13]
}

func (x StorageMedium) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageMedium.Descriptor instead.
func (StorageMedium) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{13}
}

type AttachState int32

const (
	// Attached and available externally
	AttachState_ATTACH_STATE_EXTERNAL AttachState = 0
	// Attached but only available internally
	AttachState_ATTACH_STATE_INTERNAL AttachState = 1
	// Switching from External to Internal
	AttachState_ATTACH_STATE_INTERNAL_SWITCH AttachState = 2
)

// Enum value maps for AttachState.
var (
	AttachState_name = map[int32]string{
		0: "ATTACH_STATE_EXTERNAL",
		1: "ATTACH_STATE_INTERNAL",
		2: "ATTACH_STATE_INTERNAL_SWITCH",
	}
	AttachState_value = map[string]int32{
		"ATTACH_STATE_EXTERNAL":        0,
		"ATTACH_STATE_INTERNAL":        1,
		"ATTACH_STATE_INTERNAL_SWITCH": 2,
	}
)

func (x AttachState) Enum() *AttachState {
	p := new(AttachState)
	*p = x
	return p
}

func (x AttachState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttachState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[14].Descriptor()
}

func (AttachState) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[14]
}

func (x AttachState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttachState.Descriptor instead.
func (AttachState) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{14}
}

type OperationFlags int32

const (
	OperationFlags_OP_FLAGS_UNKNOWN OperationFlags = 0
	OperationFlags_OP_FLAGS_NONE    OperationFlags = 1
	// Perform a force_detach during detach operation
	OperationFlags_OP_FLAGS_DETACH_FORCE OperationFlags = 2
)

// Enum value maps for OperationFlags.
var (
	OperationFlags_name = map[int32]string{
		0: "OP_FLAGS_UNKNOWN",
		1: "OP_FLAGS_NONE",
		2: "OP_FLAGS_DETACH_FORCE",
	}
	OperationFlags_value = map[string]int32{
		"OP_FLAGS_UNKNOWN":      0,
		"OP_FLAGS_NONE":         1,
		"OP_FLAGS_DETACH_FORCE": 2,
	}
)

func (x OperationFlags) Enum() *OperationFlags {
	p := new(OperationFlags)
	*p = x
	return p
}

func (x OperationFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[15].Descriptor()
}

func (OperationFlags) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[15]
}

func (x OperationFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationFlags.Descriptor instead.
func (OperationFlags) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{15}
}

type HardwareType int32

const (
	// When we do not know the machine type alsp the default
	HardwareType_UnknownMachine HardwareType = 0
	// when we are running on virtual machine
	HardwareType_VirtualMachine HardwareType = 1
	// when we are running on physical hardware
	HardwareType_BareMetalMachine HardwareType = 2
)

// Enum value maps for HardwareType.
var (
	HardwareType_name = map[int32]string{
		0: "UnknownMachine",
		1: "VirtualMachine",
		2: "BareMetalMachine",
	}
	HardwareType_value = map[string]int32{
		"UnknownMachine":   0,
		"VirtualMachine":   1,
		"BareMetalMachine": 2,
	}
)

func (x HardwareType) Enum() *HardwareType {
	p := new(HardwareType)
	*p = x
	return p
}

func (x HardwareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HardwareType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[16].Descriptor()
}

func (HardwareType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[16]
}

func (x HardwareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HardwareType.Descriptor instead.
func (HardwareType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{16}
}

// ExportProtocol defines how the device is exported..
type ExportProtocol int32

const (
	// Invalid uninitialized value
	ExportProtocol_INVALID ExportProtocol = 0
	// PXD the volume is exported over Portworx block interface.
	ExportProtocol_PXD ExportProtocol = 1
	// ISCSI the volume is exported over ISCSI.
	ExportProtocol_ISCSI ExportProtocol = 2
	// NFS the volume is exported over NFS.
	ExportProtocol_NFS ExportProtocol = 3
	// Custom the volume is exported over custom interface.
	ExportProtocol_CUSTOM ExportProtocol = 4
)

// Enum value maps for ExportProtocol.
var (
	ExportProtocol_name = map[int32]string{
		0: "INVALID",
		1: "PXD",
		2: "ISCSI",
		3: "NFS",
		4: "CUSTOM",
	}
	ExportProtocol_value = map[string]int32{
		"INVALID": 0,
		"PXD":     1,
		"ISCSI":   2,
		"NFS":     3,
		"CUSTOM":  4,
	}
)

func (x ExportProtocol) Enum() *ExportProtocol {
	p := new(ExportProtocol)
	*p = x
	return p
}

func (x ExportProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExportProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[17].Descriptor()
}

func (ExportProtocol) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[17]
}

func (x ExportProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportProtocol.Descriptor instead.
func (ExportProtocol) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{17}
}

// ProxyProtocol defines the protocol used for proxy.
type ProxyProtocol int32

const (
	// Invalid uninitialized value
	ProxyProtocol_PROXY_PROTOCOL_INVALID ProxyProtocol = 0
	// NFS indicates that the external data source is NFS and the volume
	// will be reflected over NFS protocol
	ProxyProtocol_PROXY_PROTOCOL_NFS ProxyProtocol = 1
	// S3 indicates that the external data source is an object store.
	ProxyProtocol_PROXY_PROTOCOL_S3 ProxyProtocol = 2
	// PXD indicates that the external data source is a Portworx block volume.
	ProxyProtocol_PROXY_PROTOCOL_PXD ProxyProtocol = 3
	// PURE_BLOCK indicates that the external data source is a pure_block volume.
	ProxyProtocol_PROXY_PROTOCOL_PURE_BLOCK ProxyProtocol = 4
	// PURE_FILE indicates that the external data source is a pure_file volume.
	ProxyProtocol_PROXY_PROTOCOL_PURE_FILE ProxyProtocol = 5
)

// Enum value maps for ProxyProtocol.
var (
	ProxyProtocol_name = map[int32]string{
		0: "PROXY_PROTOCOL_INVALID",
		1: "PROXY_PROTOCOL_NFS",
		2: "PROXY_PROTOCOL_S3",
		3: "PROXY_PROTOCOL_PXD",
		4: "PROXY_PROTOCOL_PURE_BLOCK",
		5: "PROXY_PROTOCOL_PURE_FILE",
	}
	ProxyProtocol_value = map[string]int32{
		"PROXY_PROTOCOL_INVALID":    0,
		"PROXY_PROTOCOL_NFS":        1,
		"PROXY_PROTOCOL_S3":         2,
		"PROXY_PROTOCOL_PXD":        3,
		"PROXY_PROTOCOL_PURE_BLOCK": 4,
		"PROXY_PROTOCOL_PURE_FILE":  5,
	}
)

func (x ProxyProtocol) Enum() *ProxyProtocol {
	p := new(ProxyProtocol)
	*p = x
	return p
}

func (x ProxyProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProxyProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[18].Descriptor()
}

func (ProxyProtocol) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[18]
}

func (x ProxyProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProxyProtocol.Descriptor instead.
func (ProxyProtocol) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{18}
}

// fastpath extensions
type FastpathStatus int32

const (
	// backward compatible state
	FastpathStatus_FASTPATH_UNKNOWN FastpathStatus = 0
	// fastpath activated and enabled
	FastpathStatus_FASTPATH_ACTIVE FastpathStatus = 1
	// fastpath inactive
	FastpathStatus_FASTPATH_INACTIVE FastpathStatus = 2
	// fastpath unsupported, disabled
	FastpathStatus_FASTPATH_UNSUPPORTED FastpathStatus = 3
	// fastpath operation setup in progress
	FastpathStatus_FASTPATH_PENDING FastpathStatus = 4
	// fastpath error'd, possible stuck failure
	FastpathStatus_FASTPATH_ERRORED FastpathStatus = 5
)

// Enum value maps for FastpathStatus.
var (
	FastpathStatus_name = map[int32]string{
		0: "FASTPATH_UNKNOWN",
		1: "FASTPATH_ACTIVE",
		2: "FASTPATH_INACTIVE",
		3: "FASTPATH_UNSUPPORTED",
		4: "FASTPATH_PENDING",
		5: "FASTPATH_ERRORED",
	}
	FastpathStatus_value = map[string]int32{
		"FASTPATH_UNKNOWN":     0,
		"FASTPATH_ACTIVE":      1,
		"FASTPATH_INACTIVE":    2,
		"FASTPATH_UNSUPPORTED": 3,
		"FASTPATH_PENDING":     4,
		"FASTPATH_ERRORED":     5,
	}
)

func (x FastpathStatus) Enum() *FastpathStatus {
	p := new(FastpathStatus)
	*p = x
	return p
}

func (x FastpathStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FastpathStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[19].Descriptor()
}

func (FastpathStatus) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[19]
}

func (x FastpathStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FastpathStatus.Descriptor instead.
func (FastpathStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{19}
}

type FastpathProtocol int32

const (
	FastpathProtocol_FASTPATH_PROTO_UNKNOWN    FastpathProtocol = 0
	FastpathProtocol_FASTPATH_PROTO_NVMEOF_TCP FastpathProtocol = 1
	FastpathProtocol_FASTPATH_PROTO_ISCSI      FastpathProtocol = 2
	FastpathProtocol_FASTPATH_PROTO_LOCAL      FastpathProtocol = 3
)

// Enum value maps for FastpathProtocol.
var (
	FastpathProtocol_name = map[int32]string{
		0: "FASTPATH_PROTO_UNKNOWN",
		1: "FASTPATH_PROTO_NVMEOF_TCP",
		2: "FASTPATH_PROTO_ISCSI",
		3: "FASTPATH_PROTO_LOCAL",
	}
	FastpathProtocol_value = map[string]int32{
		"FASTPATH_PROTO_UNKNOWN":    0,
		"FASTPATH_PROTO_NVMEOF_TCP": 1,
		"FASTPATH_PROTO_ISCSI":      2,
		"FASTPATH_PROTO_LOCAL":      3,
	}
)

func (x FastpathProtocol) Enum() *FastpathProtocol {
	p := new(FastpathProtocol)
	*p = x
	return p
}

func (x FastpathProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FastpathProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[20].Descriptor()
}

func (FastpathProtocol) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[20]
}

func (x FastpathProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FastpathProtocol.Descriptor instead.
func (FastpathProtocol) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{20}
}

type AnonymousBucketAccessMode int32

const (
	AnonymousBucketAccessMode_UnknownBucketAccessMode AnonymousBucketAccessMode = 0
	// Default, disallow uncredentialed access to the backend storage.
	AnonymousBucketAccessMode_Private AnonymousBucketAccessMode = 1
	// Read only, uncredentialed users can call ListBucket and GetObject.
	AnonymousBucketAccessMode_ReadOnly AnonymousBucketAccessMode = 2
	// Write only, uncredentialed users can only call PutObject.
	AnonymousBucketAccessMode_WriteOnly AnonymousBucketAccessMode = 3
	// Read/Write, uncredentialed users can read objects as well as PutObject.
	AnonymousBucketAccessMode_ReadWrite AnonymousBucketAccessMode = 4
)

// Enum value maps for AnonymousBucketAccessMode.
var (
	AnonymousBucketAccessMode_name = map[int32]string{
		0: "UnknownBucketAccessMode",
		1: "Private",
		2: "ReadOnly",
		3: "WriteOnly",
		4: "ReadWrite",
	}
	AnonymousBucketAccessMode_value = map[string]int32{
		"UnknownBucketAccessMode": 0,
		"Private":                 1,
		"ReadOnly":                2,
		"WriteOnly":               3,
		"ReadWrite":               4,
	}
)

func (x AnonymousBucketAccessMode) Enum() *AnonymousBucketAccessMode {
	p := new(AnonymousBucketAccessMode)
	*p = x
	return p
}

func (x AnonymousBucketAccessMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnonymousBucketAccessMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[21].Descriptor()
}

func (AnonymousBucketAccessMode) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[21]
}

func (x AnonymousBucketAccessMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnonymousBucketAccessMode.Descriptor instead.
func (AnonymousBucketAccessMode) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{21}
}

// Defines times of day
type SdkTimeWeekday int32

const (
	// Sunday
	SdkTimeWeekday_SdkTimeWeekdaySunday SdkTimeWeekday = 0
	// Monday
	SdkTimeWeekday_SdkTimeWeekdayMonday SdkTimeWeekday = 1
	// Tuesday
	SdkTimeWeekday_SdkTimeWeekdayTuesday SdkTimeWeekday = 2
	// Wednesday
	SdkTimeWeekday_SdkTimeWeekdayWednesday SdkTimeWeekday = 3
	// Thursday
	SdkTimeWeekday_SdkTimeWeekdayThursday SdkTimeWeekday = 4
	// Friday
	SdkTimeWeekday_SdkTimeWeekdayFriday SdkTimeWeekday = 5
	// Saturday
	SdkTimeWeekday_SdkTimeWeekdaySaturday SdkTimeWeekday = 6
)

// Enum value maps for SdkTimeWeekday.
var (
	SdkTimeWeekday_name = map[int32]string{
		0: "SdkTimeWeekdaySunday",
		1: "SdkTimeWeekdayMonday",
		2: "SdkTimeWeekdayTuesday",
		3: "SdkTimeWeekdayWednesday",
		4: "SdkTimeWeekdayThursday",
		5: "SdkTimeWeekdayFriday",
		6: "SdkTimeWeekdaySaturday",
	}
	SdkTimeWeekday_value = map[string]int32{
		"SdkTimeWeekdaySunday":    0,
		"SdkTimeWeekdayMonday":    1,
		"SdkTimeWeekdayTuesday":   2,
		"SdkTimeWeekdayWednesday": 3,
		"SdkTimeWeekdayThursday":  4,
		"SdkTimeWeekdayFriday":    5,
		"SdkTimeWeekdaySaturday":  6,
	}
)

func (x SdkTimeWeekday) Enum() *SdkTimeWeekday {
	p := new(SdkTimeWeekday)
	*p = x
	return p
}

func (x SdkTimeWeekday) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdkTimeWeekday) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[22].Descriptor()
}

func (SdkTimeWeekday) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[22]
}

func (x SdkTimeWeekday) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdkTimeWeekday.Descriptor instead.
func (SdkTimeWeekday) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{22}
}

// StorageRebalanceJobState is an enum for state of the current rebalance operation
type StorageRebalanceJobState int32

const (
	// Pending indicates job is still pending and has not started work
	StorageRebalanceJobState_PENDING StorageRebalanceJobState = 0
	// Running indicates job is actively running
	StorageRebalanceJobState_RUNNING StorageRebalanceJobState = 1
	// Done indicates job has finished processing
	StorageRebalanceJobState_DONE StorageRebalanceJobState = 2
	// Paused indicates job is paused
	StorageRebalanceJobState_PAUSED StorageRebalanceJobState = 3
	// Cancelled indicates job is cancelled
	StorageRebalanceJobState_CANCELLED StorageRebalanceJobState = 4
)

// Enum value maps for StorageRebalanceJobState.
var (
	StorageRebalanceJobState_name = map[int32]string{
		0: "PENDING",
		1: "RUNNING",
		2: "DONE",
		3: "PAUSED",
		4: "CANCELLED",
	}
	StorageRebalanceJobState_value = map[string]int32{
		"PENDING":   0,
		"RUNNING":   1,
		"DONE":      2,
		"PAUSED":    3,
		"CANCELLED": 4,
	}
)

func (x StorageRebalanceJobState) Enum() *StorageRebalanceJobState {
	p := new(StorageRebalanceJobState)
	*p = x
	return p
}

func (x StorageRebalanceJobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageRebalanceJobState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[23].Descriptor()
}

func (StorageRebalanceJobState) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[23]
}

func (x StorageRebalanceJobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageRebalanceJobState.Descriptor instead.
func (StorageRebalanceJobState) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{23}
}

// CloudBackup operations types
type SdkCloudBackupClusterType int32

const (
	// Unknown
	SdkCloudBackupClusterType_SdkCloudBackupClusterUnknown SdkCloudBackupClusterType = 0
	// Beongs to this cluster
	SdkCloudBackupClusterType_SdkCloudBackupClusterCurrent SdkCloudBackupClusterType = 1
	// not this. other cluster
	SdkCloudBackupClusterType_SdkCloudBackupClusterOther SdkCloudBackupClusterType = 2
)

// Enum value maps for SdkCloudBackupClusterType.
var (
	SdkCloudBackupClusterType_name = map[int32]string{
		0: "SdkCloudBackupClusterUnknown",
		1: "SdkCloudBackupClusterCurrent",
		2: "SdkCloudBackupClusterOther",
	}
	SdkCloudBackupClusterType_value = map[string]int32{
		"SdkCloudBackupClusterUnknown": 0,
		"SdkCloudBackupClusterCurrent": 1,
		"SdkCloudBackupClusterOther":   2,
	}
)

func (x SdkCloudBackupClusterType) Enum() *SdkCloudBackupClusterType {
	p := new(SdkCloudBackupClusterType)
	*p = x
	return p
}

func (x SdkCloudBackupClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdkCloudBackupClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[24].Descriptor()
}

func (SdkCloudBackupClusterType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[24]
}

func (x SdkCloudBackupClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdkCloudBackupClusterType.Descriptor instead.
func (SdkCloudBackupClusterType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{24}
}

// CloudBackup operations types
type SdkCloudBackupOpType int32

const (
	// Unknown
	SdkCloudBackupOpType_SdkCloudBackupOpTypeUnknown SdkCloudBackupOpType = 0
	// Backup
	SdkCloudBackupOpType_SdkCloudBackupOpTypeBackupOp SdkCloudBackupOpType = 1
	// Restore
	SdkCloudBackupOpType_SdkCloudBackupOpTypeRestoreOp SdkCloudBackupOpType = 2
)

// Enum value maps for SdkCloudBackupOpType.
var (
	SdkCloudBackupOpType_name = map[int32]string{
		0: "SdkCloudBackupOpTypeUnknown",
		1: "SdkCloudBackupOpTypeBackupOp",
		2: "SdkCloudBackupOpTypeRestoreOp",
	}
	SdkCloudBackupOpType_value = map[string]int32{
		"SdkCloudBackupOpTypeUnknown":   0,
		"SdkCloudBackupOpTypeBackupOp":  1,
		"SdkCloudBackupOpTypeRestoreOp": 2,
	}
)

func (x SdkCloudBackupOpType) Enum() *SdkCloudBackupOpType {
	p := new(SdkCloudBackupOpType)
	*p = x
	return p
}

func (x SdkCloudBackupOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdkCloudBackupOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[25].Descriptor()
}

func (SdkCloudBackupOpType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[25]
}

func (x SdkCloudBackupOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdkCloudBackupOpType.Descriptor instead.
func (SdkCloudBackupOpType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{25}
}

// CloudBackup status types
type SdkCloudBackupStatusType int32

const (
	// Unknown
	SdkCloudBackupStatusType_SdkCloudBackupStatusTypeUnknown SdkCloudBackupStatusType = 0
	// Not started
	SdkCloudBackupStatusType_SdkCloudBackupStatusTypeNotStarted SdkCloudBackupStatusType = 1
	// Done
	SdkCloudBackupStatusType_SdkCloudBackupStatusTypeDone SdkCloudBackupStatusType = 2
	// Aborted
	SdkCloudBackupStatusType_SdkCloudBackupStatusTypeAborted SdkCloudBackupStatusType = 3
	// Paused
	SdkCloudBackupStatusType_SdkCloudBackupStatusTypePaused SdkCloudBackupStatusType = 4
	// Stopped
	SdkCloudBackupStatusType_SdkCloudBackupStatusTypeStopped SdkCloudBackupStatusType = 5
	// Active
	SdkCloudBackupStatusType_SdkCloudBackupStatusTypeActive SdkCloudBackupStatusType = 6
	// Failed
	SdkCloudBackupStatusType_SdkCloudBackupStatusTypeFailed SdkCloudBackupStatusType = 7
	// Queued
	SdkCloudBackupStatusType_SdkCloudBackupStatusTypeQueued SdkCloudBackupStatusType = 8
	// Invalid, used by enumerate, includes failed,
	// stopped and aborted
	SdkCloudBackupStatusType_SdkCloudBackupStatusTypeInvalid SdkCloudBackupStatusType = 9
)

// Enum value maps for SdkCloudBackupStatusType.
var (
	SdkCloudBackupStatusType_name = map[int32]string{
		0: "SdkCloudBackupStatusTypeUnknown",
		1: "SdkCloudBackupStatusTypeNotStarted",
		2: "SdkCloudBackupStatusTypeDone",
		3: "SdkCloudBackupStatusTypeAborted",
		4: "SdkCloudBackupStatusTypePaused",
		5: "SdkCloudBackupStatusTypeStopped",
		6: "SdkCloudBackupStatusTypeActive",
		7: "SdkCloudBackupStatusTypeFailed",
		8: "SdkCloudBackupStatusTypeQueued",
		9: "SdkCloudBackupStatusTypeInvalid",
	}
	SdkCloudBackupStatusType_value = map[string]int32{
		"SdkCloudBackupStatusTypeUnknown":    0,
		"SdkCloudBackupStatusTypeNotStarted": 1,
		"SdkCloudBackupStatusTypeDone":       2,
		"SdkCloudBackupStatusTypeAborted":    3,
		"SdkCloudBackupStatusTypePaused":     4,
		"SdkCloudBackupStatusTypeStopped":    5,
		"SdkCloudBackupStatusTypeActive":     6,
		"SdkCloudBackupStatusTypeFailed":     7,
		"SdkCloudBackupStatusTypeQueued":     8,
		"SdkCloudBackupStatusTypeInvalid":    9,
	}
)

func (x SdkCloudBackupStatusType) Enum() *SdkCloudBackupStatusType {
	p := new(SdkCloudBackupStatusType)
	*p = x
	return p
}

func (x SdkCloudBackupStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdkCloudBackupStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[26].Descriptor()
}

func (SdkCloudBackupStatusType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[26]
}

func (x SdkCloudBackupStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdkCloudBackupStatusType.Descriptor instead.
func (SdkCloudBackupStatusType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{26}
}

// SdkCloudBackupRequestedState defines states to set a specified backup or restore
// to or from a cloud provider
type SdkCloudBackupRequestedState int32

const (
	// Unknown state
	SdkCloudBackupRequestedState_SdkCloudBackupRequestedStateUnknown SdkCloudBackupRequestedState = 0
	// Pause the backup or restore
	SdkCloudBackupRequestedState_SdkCloudBackupRequestedStatePause SdkCloudBackupRequestedState = 1
	// Resume the backup or restore
	SdkCloudBackupRequestedState_SdkCloudBackupRequestedStateResume SdkCloudBackupRequestedState = 2
	// Stop a backup or restore
	SdkCloudBackupRequestedState_SdkCloudBackupRequestedStateStop SdkCloudBackupRequestedState = 3
)

// Enum value maps for SdkCloudBackupRequestedState.
var (
	SdkCloudBackupRequestedState_name = map[int32]string{
		0: "SdkCloudBackupRequestedStateUnknown",
		1: "SdkCloudBackupRequestedStatePause",
		2: "SdkCloudBackupRequestedStateResume",
		3: "SdkCloudBackupRequestedStateStop",
	}
	SdkCloudBackupRequestedState_value = map[string]int32{
		"SdkCloudBackupRequestedStateUnknown": 0,
		"SdkCloudBackupRequestedStatePause":   1,
		"SdkCloudBackupRequestedStateResume":  2,
		"SdkCloudBackupRequestedStateStop":    3,
	}
)

func (x SdkCloudBackupRequestedState) Enum() *SdkCloudBackupRequestedState {
	p := new(SdkCloudBackupRequestedState)
	*p = x
	return p
}

func (x SdkCloudBackupRequestedState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdkCloudBackupRequestedState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[27].Descriptor()
}

func (SdkCloudBackupRequestedState) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[27]
}

func (x SdkCloudBackupRequestedState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdkCloudBackupRequestedState.Descriptor instead.
func (SdkCloudBackupRequestedState) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{27}
}

// Defines the types of enforcement on the given rules
type EnforcementType int32

const (
	// This specifies that the rule is required and must be strictly enforced
	EnforcementType_required EnforcementType = 0
	// This specifies that the rule is preferred and can be best effort
	EnforcementType_preferred EnforcementType = 1
)

// Enum value maps for EnforcementType.
var (
	EnforcementType_name = map[int32]string{
		0: "required",
		1: "preferred",
	}
	EnforcementType_value = map[string]int32{
		"required":  0,
		"preferred": 1,
	}
)

func (x EnforcementType) Enum() *EnforcementType {
	p := new(EnforcementType)
	*p = x
	return p
}

func (x EnforcementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnforcementType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[28].Descriptor()
}

func (EnforcementType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[28]
}

func (x EnforcementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnforcementType.Descriptor instead.
func (EnforcementType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{28}
}

type RestoreParamBoolType int32

const (
	RestoreParamBoolType_PARAM_BKUPSRC RestoreParamBoolType = 0 // Default: whateever was cloudbakup's option for the parameter
	RestoreParamBoolType_PARAM_FALSE   RestoreParamBoolType = 1
	RestoreParamBoolType_PARAM_TRUE    RestoreParamBoolType = 2
)

// Enum value maps for RestoreParamBoolType.
var (
	RestoreParamBoolType_name = map[int32]string{
		0: "PARAM_BKUPSRC",
		1: "PARAM_FALSE",
		2: "PARAM_TRUE",
	}
	RestoreParamBoolType_value = map[string]int32{
		"PARAM_BKUPSRC": 0,
		"PARAM_FALSE":   1,
		"PARAM_TRUE":    2,
	}
)

func (x RestoreParamBoolType) Enum() *RestoreParamBoolType {
	p := new(RestoreParamBoolType)
	*p = x
	return p
}

func (x RestoreParamBoolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestoreParamBoolType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[29].Descriptor()
}

func (RestoreParamBoolType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[29]
}

func (x RestoreParamBoolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestoreParamBoolType.Descriptor instead.
func (RestoreParamBoolType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{29}
}

type Xattr_Value int32

const (
	// Value is uninitialized or unknown
	Xattr_UNSPECIFIED Xattr_Value = 0
	// Enable on-demand copy-on-write on the volume
	Xattr_COW_ON_DEMAND Xattr_Value = 1
)

// Enum value maps for Xattr_Value.
var (
	Xattr_Value_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "COW_ON_DEMAND",
	}
	Xattr_Value_value = map[string]int32{
		"UNSPECIFIED":   0,
		"COW_ON_DEMAND": 1,
	}
)

func (x Xattr_Value) Enum() *Xattr_Value {
	p := new(Xattr_Value)
	*p = x
	return p
}

func (x Xattr_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Xattr_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[30].Descriptor()
}

func (Xattr_Value) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[30]
}

func (x Xattr_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Xattr_Value.Descriptor instead.
func (Xattr_Value) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{10, 0}
}

// Type of sharedv4 service. Values are governed by the different types
// of services supported by container orchestrators such as Kubernetes.
type Sharedv4ServiceSpec_ServiceType int32

const (
	// Unspecified
	Sharedv4ServiceSpec_UNSPECIFIED Sharedv4ServiceSpec_ServiceType = 0
	// Export the sharedv4 service on each Node's IP.
	// In this mode the sharedv4 volume can be accessed from outside the
	// cluster using one of the node's IPs.
	Sharedv4ServiceSpec_NODEPORT Sharedv4ServiceSpec_ServiceType = 1
	// Export the shared4 service on an internal cluster IP.
	// In this mode the sharedv4 volume will only be accessible
	// within the cluster via this service.
	Sharedv4ServiceSpec_CLUSTERIP Sharedv4ServiceSpec_ServiceType = 2
	// Expose the sharedv4 service on cloud provider's load balancer.
	// Applicable when running in cloud. In this mode the sharedv4 volume
	// can be accessed from outside the cluster.
	Sharedv4ServiceSpec_LOADBALANCER Sharedv4ServiceSpec_ServiceType = 3
)

// Enum value maps for Sharedv4ServiceSpec_ServiceType.
var (
	Sharedv4ServiceSpec_ServiceType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NODEPORT",
		2: "CLUSTERIP",
		3: "LOADBALANCER",
	}
	Sharedv4ServiceSpec_ServiceType_value = map[string]int32{
		"UNSPECIFIED":  0,
		"NODEPORT":     1,
		"CLUSTERIP":    2,
		"LOADBALANCER": 3,
	}
)

func (x Sharedv4ServiceSpec_ServiceType) Enum() *Sharedv4ServiceSpec_ServiceType {
	p := new(Sharedv4ServiceSpec_ServiceType)
	*p = x
	return p
}

func (x Sharedv4ServiceSpec_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sharedv4ServiceSpec_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[31].Descriptor()
}

func (Sharedv4ServiceSpec_ServiceType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[31]
}

func (x Sharedv4ServiceSpec_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sharedv4ServiceSpec_ServiceType.Descriptor instead.
func (Sharedv4ServiceSpec_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{18, 0}
}

type Sharedv4FailoverStrategy_Value int32

const (
	// Unspecified
	Sharedv4FailoverStrategy_UNSPECIFIED Sharedv4FailoverStrategy_Value = 0
	// Fail over to the new NFS server quickly. This is appropriate for
	// the apps with sharedv4 service volumes. It can also be used
	// for the apps with sharedv4 volumes when such apps are able
	// to restart quickly.
	Sharedv4FailoverStrategy_AGGRESSIVE Sharedv4FailoverStrategy_Value = 1
	// Give the old NFS server more time to come back up before
	// triggering the failover. This is appropriate for the apps
	// with sharedv4 volumes (non-service).
	Sharedv4FailoverStrategy_NORMAL Sharedv4FailoverStrategy_Value = 2
)

// Enum value maps for Sharedv4FailoverStrategy_Value.
var (
	Sharedv4FailoverStrategy_Value_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "AGGRESSIVE",
		2: "NORMAL",
	}
	Sharedv4FailoverStrategy_Value_value = map[string]int32{
		"UNSPECIFIED": 0,
		"AGGRESSIVE":  1,
		"NORMAL":      2,
	}
)

func (x Sharedv4FailoverStrategy_Value) Enum() *Sharedv4FailoverStrategy_Value {
	p := new(Sharedv4FailoverStrategy_Value)
	*p = x
	return p
}

func (x Sharedv4FailoverStrategy_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sharedv4FailoverStrategy_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[32].Descriptor()
}

func (Sharedv4FailoverStrategy_Value) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[32]
}

func (x Sharedv4FailoverStrategy_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sharedv4FailoverStrategy_Value.Descriptor instead.
func (Sharedv4FailoverStrategy_Value) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{19, 0}
}

type ScanPolicy_ScanTrigger int32

const (
	ScanPolicy_SCAN_TRIGGER_NONE          ScanPolicy_ScanTrigger = 0
	ScanPolicy_SCAN_TRIGGER_ON_MOUNT      ScanPolicy_ScanTrigger = 1
	ScanPolicy_SCAN_TRIGGER_ON_NEXT_MOUNT ScanPolicy_ScanTrigger = 2
)

// Enum value maps for ScanPolicy_ScanTrigger.
var (
	ScanPolicy_ScanTrigger_name = map[int32]string{
		0: "SCAN_TRIGGER_NONE",
		1: "SCAN_TRIGGER_ON_MOUNT",
		2: "SCAN_TRIGGER_ON_NEXT_MOUNT",
	}
	ScanPolicy_ScanTrigger_value = map[string]int32{
		"SCAN_TRIGGER_NONE":          0,
		"SCAN_TRIGGER_ON_MOUNT":      1,
		"SCAN_TRIGGER_ON_NEXT_MOUNT": 2,
	}
)

func (x ScanPolicy_ScanTrigger) Enum() *ScanPolicy_ScanTrigger {
	p := new(ScanPolicy_ScanTrigger)
	*p = x
	return p
}

func (x ScanPolicy_ScanTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanPolicy_ScanTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[33].Descriptor()
}

func (ScanPolicy_ScanTrigger) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[33]
}

func (x ScanPolicy_ScanTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanPolicy_ScanTrigger.Descriptor instead.
func (ScanPolicy_ScanTrigger) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{24, 0}
}

type ScanPolicy_ScanAction int32

const (
	ScanPolicy_SCAN_ACTION_NONE        ScanPolicy_ScanAction = 0
	ScanPolicy_SCAN_ACTION_SCAN_ONLY   ScanPolicy_ScanAction = 1
	ScanPolicy_SCAN_ACTION_SCAN_REPAIR ScanPolicy_ScanAction = 2
)

// Enum value maps for ScanPolicy_ScanAction.
var (
	ScanPolicy_ScanAction_name = map[int32]string{
		0: "SCAN_ACTION_NONE",
		1: "SCAN_ACTION_SCAN_ONLY",
		2: "SCAN_ACTION_SCAN_REPAIR",
	}
	ScanPolicy_ScanAction_value = map[string]int32{
		"SCAN_ACTION_NONE":        0,
		"SCAN_ACTION_SCAN_ONLY":   1,
		"SCAN_ACTION_SCAN_REPAIR": 2,
	}
)

func (x ScanPolicy_ScanAction) Enum() *ScanPolicy_ScanAction {
	p := new(ScanPolicy_ScanAction)
	*p = x
	return p
}

func (x ScanPolicy_ScanAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanPolicy_ScanAction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[34].Descriptor()
}

func (ScanPolicy_ScanAction) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[34]
}

func (x ScanPolicy_ScanAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanPolicy_ScanAction.Descriptor instead.
func (ScanPolicy_ScanAction) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{24, 1}
}

// This defines an operator for the policy comparisons
type VolumeSpecPolicy_PolicyOp int32

const (
	// Policy will make sure the value must be equal
	VolumeSpecPolicy_Equal VolumeSpecPolicy_PolicyOp = 0
	// Policy will make sure the requested value must be greater than or equal
	VolumeSpecPolicy_Minimum VolumeSpecPolicy_PolicyOp = 1
	// Policy will make sure the requested value must be less than or equal
	VolumeSpecPolicy_Maximum VolumeSpecPolicy_PolicyOp = 2
)

// Enum value maps for VolumeSpecPolicy_PolicyOp.
var (
	VolumeSpecPolicy_PolicyOp_name = map[int32]string{
		0: "Equal",
		1: "Minimum",
		2: "Maximum",
	}
	VolumeSpecPolicy_PolicyOp_value = map[string]int32{
		"Equal":   0,
		"Minimum": 1,
		"Maximum": 2,
	}
)

func (x VolumeSpecPolicy_PolicyOp) Enum() *VolumeSpecPolicy_PolicyOp {
	p := new(VolumeSpecPolicy_PolicyOp)
	*p = x
	return p
}

func (x VolumeSpecPolicy_PolicyOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeSpecPolicy_PolicyOp) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[35].Descriptor()
}

func (VolumeSpecPolicy_PolicyOp) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[35]
}

func (x VolumeSpecPolicy_PolicyOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeSpecPolicy_PolicyOp.Descriptor instead.
func (VolumeSpecPolicy_PolicyOp) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{28, 0}
}

// Access types can be set by owner to have different levels of access to
// a resource.
//
// It is up to the resource to interpret what the types mean and are
// used for.
type Ownership_AccessType int32

const (
	// Read access only and cannot affect the resource.
	Ownership_Read Ownership_AccessType = 0
	// Write access and can affect the resource.
	// This type automatically provides Read access also.
	Ownership_Write Ownership_AccessType = 1
	// Administrator access.
	// This type automatically provides Read and Write access also.
	Ownership_Admin Ownership_AccessType = 2
)

// Enum value maps for Ownership_AccessType.
var (
	Ownership_AccessType_name = map[int32]string{
		0: "Read",
		1: "Write",
		2: "Admin",
	}
	Ownership_AccessType_value = map[string]int32{
		"Read":  0,
		"Write": 1,
		"Admin": 2,
	}
)

func (x Ownership_AccessType) Enum() *Ownership_AccessType {
	p := new(Ownership_AccessType)
	*p = x
	return p
}

func (x Ownership_AccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ownership_AccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[36].Descriptor()
}

func (Ownership_AccessType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[36]
}

func (x Ownership_AccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ownership_AccessType.Descriptor instead.
func (Ownership_AccessType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{31, 0}
}

type StorageNode_SecurityStatus int32

const (
	// Security status type is unknown
	StorageNode_UNSPECIFIED StorageNode_SecurityStatus = 0
	// Node is unsecure
	StorageNode_UNSECURED StorageNode_SecurityStatus = 1
	// Node is secured with authentication and authorization
	StorageNode_SECURED StorageNode_SecurityStatus = 2
	// Node is secured, but in the process of removing security. This state allows
	// other unsecured nodes to join the cluster since the cluster is in the process
	// of removing security authentication and authorization.
	StorageNode_SECURED_ALLOW_SECURITY_REMOVAL StorageNode_SecurityStatus = 3
)

// Enum value maps for StorageNode_SecurityStatus.
var (
	StorageNode_SecurityStatus_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "UNSECURED",
		2: "SECURED",
		3: "SECURED_ALLOW_SECURITY_REMOVAL",
	}
	StorageNode_SecurityStatus_value = map[string]int32{
		"UNSPECIFIED":                    0,
		"UNSECURED":                      1,
		"SECURED":                        2,
		"SECURED_ALLOW_SECURITY_REMOVAL": 3,
	}
)

func (x StorageNode_SecurityStatus) Enum() *StorageNode_SecurityStatus {
	p := new(StorageNode_SecurityStatus)
	*p = x
	return p
}

func (x StorageNode_SecurityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageNode_SecurityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[37].Descriptor()
}

func (StorageNode_SecurityStatus) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[37]
}

func (x StorageNode_SecurityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageNode_SecurityStatus.Descriptor instead.
func (StorageNode_SecurityStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{73, 0}
}

// Type are the supported job types
type Job_Type int32

const (
	// Unspecified
	Job_UNSPECIFIED_TYPE Job_Type = 0
	// None
	Job_NONE Job_Type = 1
	// Job for draining volume attachments
	Job_DRAIN_ATTACHMENTS Job_Type = 2
	// Job for transferring cloud drives between nodes
	Job_CLOUD_DRIVE_TRANSFER Job_Type = 3
	// Job for collecting diags from the cluster nodes
	Job_COLLECT_DIAGS Job_Type = 4
)

// Enum value maps for Job_Type.
var (
	Job_Type_name = map[int32]string{
		0: "UNSPECIFIED_TYPE",
		1: "NONE",
		2: "DRAIN_ATTACHMENTS",
		3: "CLOUD_DRIVE_TRANSFER",
		4: "COLLECT_DIAGS",
	}
	Job_Type_value = map[string]int32{
		"UNSPECIFIED_TYPE":     0,
		"NONE":                 1,
		"DRAIN_ATTACHMENTS":    2,
		"CLOUD_DRIVE_TRANSFER": 3,
		"COLLECT_DIAGS":        4,
	}
)

func (x Job_Type) Enum() *Job_Type {
	p := new(Job_Type)
	*p = x
	return p
}

func (x Job_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[38].Descriptor()
}

func (Job_Type) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[38]
}

func (x Job_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_Type.Descriptor instead.
func (Job_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{192, 0}
}

// State is an enum for state of a node drain operation
type Job_State int32

const (
	// Unspecified
	Job_UNSPECIFIED_STATE Job_State = 0
	// Pending indicates job is still pending and has not started work
	Job_PENDING Job_State = 1
	// Running indicates job is actively running
	Job_RUNNING Job_State = 2
	// Done indicates job has finished processing
	Job_DONE Job_State = 3
	// Paused indicates job is paused
	Job_PAUSED Job_State = 4
	// Cancelled indicates job is cancelled
	Job_CANCELLED Job_State = 5
	// Failed indicates job has failed
	Job_FAILED Job_State = 6
)

// Enum value maps for Job_State.
var (
	Job_State_name = map[int32]string{
		0: "UNSPECIFIED_STATE",
		1: "PENDING",
		2: "RUNNING",
		3: "DONE",
		4: "PAUSED",
		5: "CANCELLED",
		6: "FAILED",
	}
	Job_State_value = map[string]int32{
		"UNSPECIFIED_STATE": 0,
		"PENDING":           1,
		"RUNNING":           2,
		"DONE":              3,
		"PAUSED":            4,
		"CANCELLED":         5,
		"FAILED":            6,
	}
)

func (x Job_State) Enum() *Job_State {
	p := new(Job_State)
	*p = x
	return p
}

func (x Job_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_State) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[39].Descriptor()
}

func (Job_State) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[39]
}

func (x Job_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_State.Descriptor instead.
func (Job_State) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{192, 1}
}

// State is an enum for state of diags collection on a given node
type DiagsCollectionStatus_State int32

const (
	// Unspecified means uninitialized or unknown state
	DiagsCollectionStatus_UNSPECIFIED DiagsCollectionStatus_State = 0
	// Pending indicates the diags collection is pending and hasn't started
	DiagsCollectionStatus_PENDING DiagsCollectionStatus_State = 1
	// Running indicates diags collection is actively running
	DiagsCollectionStatus_RUNNING DiagsCollectionStatus_State = 2
	// Done indicates diags collection has finished
	DiagsCollectionStatus_DONE DiagsCollectionStatus_State = 3
	// Failed indicates diags collection has failed
	DiagsCollectionStatus_FAILED DiagsCollectionStatus_State = 4
)

// Enum value maps for DiagsCollectionStatus_State.
var (
	DiagsCollectionStatus_State_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "PENDING",
		2: "RUNNING",
		3: "DONE",
		4: "FAILED",
	}
	DiagsCollectionStatus_State_value = map[string]int32{
		"UNSPECIFIED": 0,
		"PENDING":     1,
		"RUNNING":     2,
		"DONE":        3,
		"FAILED":      4,
	}
)

func (x DiagsCollectionStatus_State) Enum() *DiagsCollectionStatus_State {
	p := new(DiagsCollectionStatus_State)
	*p = x
	return p
}

func (x DiagsCollectionStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagsCollectionStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[40].Descriptor()
}

func (DiagsCollectionStatus_State) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[40]
}

func (x DiagsCollectionStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagsCollectionStatus_State.Descriptor instead.
func (DiagsCollectionStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{199, 0}
}

// Type is an enum that defines the type fo the trigger threshold
type StorageRebalanceTriggerThreshold_Type int32

const (
	// AbsolutePercent indicates absolute percent comparison.
	// Example, 75 % used of capacity, or 50 % provisioned of capacity.
	StorageRebalanceTriggerThreshold_ABSOLUTE_PERCENT StorageRebalanceTriggerThreshold_Type = 0
	// DeltaMeanPercent indicates mean percent comparison threshold.
	// Example, 10 % more than mean for cluster.
	StorageRebalanceTriggerThreshold_DELTA_MEAN_PERCENT StorageRebalanceTriggerThreshold_Type = 1
)

// Enum value maps for StorageRebalanceTriggerThreshold_Type.
var (
	StorageRebalanceTriggerThreshold_Type_name = map[int32]string{
		0: "ABSOLUTE_PERCENT",
		1: "DELTA_MEAN_PERCENT",
	}
	StorageRebalanceTriggerThreshold_Type_value = map[string]int32{
		"ABSOLUTE_PERCENT":   0,
		"DELTA_MEAN_PERCENT": 1,
	}
)

func (x StorageRebalanceTriggerThreshold_Type) Enum() *StorageRebalanceTriggerThreshold_Type {
	p := new(StorageRebalanceTriggerThreshold_Type)
	*p = x
	return p
}

func (x StorageRebalanceTriggerThreshold_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageRebalanceTriggerThreshold_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[41].Descriptor()
}

func (StorageRebalanceTriggerThreshold_Type) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[41]
}

func (x StorageRebalanceTriggerThreshold_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageRebalanceTriggerThreshold_Type.Descriptor instead.
func (StorageRebalanceTriggerThreshold_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{219, 0}
}

// Metric is an enum that defines the metric to use for rebalance
type StorageRebalanceTriggerThreshold_Metric int32

const (
	// ProvisionSpace indicates rebalance for provisioned space
	StorageRebalanceTriggerThreshold_PROVISION_SPACE StorageRebalanceTriggerThreshold_Metric = 0
	// UsedSpace indicates rebalance for used space
	StorageRebalanceTriggerThreshold_USED_SPACE StorageRebalanceTriggerThreshold_Metric = 1
)

// Enum value maps for StorageRebalanceTriggerThreshold_Metric.
var (
	StorageRebalanceTriggerThreshold_Metric_name = map[int32]string{
		0: "PROVISION_SPACE",
		1: "USED_SPACE",
	}
	StorageRebalanceTriggerThreshold_Metric_value = map[string]int32{
		"PROVISION_SPACE": 0,
		"USED_SPACE":      1,
	}
)

func (x StorageRebalanceTriggerThreshold_Metric) Enum() *StorageRebalanceTriggerThreshold_Metric {
	p := new(StorageRebalanceTriggerThreshold_Metric)
	*p = x
	return p
}

func (x StorageRebalanceTriggerThreshold_Metric) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageRebalanceTriggerThreshold_Metric) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[42].Descriptor()
}

func (StorageRebalanceTriggerThreshold_Metric) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[42]
}

func (x StorageRebalanceTriggerThreshold_Metric) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageRebalanceTriggerThreshold_Metric.Descriptor instead.
func (StorageRebalanceTriggerThreshold_Metric) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{219, 1}
}

// Type is an enum to indicate the type of work summary
type StorageRebalanceWorkSummary_Type int32

const (
	// summary for unbalanced pools
	StorageRebalanceWorkSummary_UnbalancedPools StorageRebalanceWorkSummary_Type = 0
	// summary for unbalanced volumes
	StorageRebalanceWorkSummary_UnbalancedVolumes StorageRebalanceWorkSummary_Type = 1
	// summary for unbalanced provisioned space
	StorageRebalanceWorkSummary_UnbalancedProvisionedSpaceBytes StorageRebalanceWorkSummary_Type = 2
	// summary for unbalanced used space
	StorageRebalanceWorkSummary_UnbalancedUsedSpaceBytes StorageRebalanceWorkSummary_Type = 3
)

// Enum value maps for StorageRebalanceWorkSummary_Type.
var (
	StorageRebalanceWorkSummary_Type_name = map[int32]string{
		0: "UnbalancedPools",
		1: "UnbalancedVolumes",
		2: "UnbalancedProvisionedSpaceBytes",
		3: "UnbalancedUsedSpaceBytes",
	}
	StorageRebalanceWorkSummary_Type_value = map[string]int32{
		"UnbalancedPools":                 0,
		"UnbalancedVolumes":               1,
		"UnbalancedProvisionedSpaceBytes": 2,
		"UnbalancedUsedSpaceBytes":        3,
	}
)

func (x StorageRebalanceWorkSummary_Type) Enum() *StorageRebalanceWorkSummary_Type {
	p := new(StorageRebalanceWorkSummary_Type)
	*p = x
	return p
}

func (x StorageRebalanceWorkSummary_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageRebalanceWorkSummary_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[43].Descriptor()
}

func (StorageRebalanceWorkSummary_Type) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[43]
}

func (x StorageRebalanceWorkSummary_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageRebalanceWorkSummary_Type.Descriptor instead.
func (StorageRebalanceWorkSummary_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{224, 0}
}

// StorageRebalanceAction describes type of rebalance action
type StorageRebalanceAudit_StorageRebalanceAction int32

const (
	// Indicates new replica was added
	StorageRebalanceAudit_ADD_REPLICA StorageRebalanceAudit_StorageRebalanceAction = 0
	// Indicates existing replica was removed
	StorageRebalanceAudit_REMOVE_REPLICA StorageRebalanceAudit_StorageRebalanceAction = 1
)

// Enum value maps for StorageRebalanceAudit_StorageRebalanceAction.
var (
	StorageRebalanceAudit_StorageRebalanceAction_name = map[int32]string{
		0: "ADD_REPLICA",
		1: "REMOVE_REPLICA",
	}
	StorageRebalanceAudit_StorageRebalanceAction_value = map[string]int32{
		"ADD_REPLICA":    0,
		"REMOVE_REPLICA": 1,
	}
)

func (x StorageRebalanceAudit_StorageRebalanceAction) Enum() *StorageRebalanceAudit_StorageRebalanceAction {
	p := new(StorageRebalanceAudit_StorageRebalanceAction)
	*p = x
	return p
}

func (x StorageRebalanceAudit_StorageRebalanceAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageRebalanceAudit_StorageRebalanceAction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[44].Descriptor()
}

func (StorageRebalanceAudit_StorageRebalanceAction) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[44]
}

func (x StorageRebalanceAudit_StorageRebalanceAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageRebalanceAudit_StorageRebalanceAction.Descriptor instead.
func (StorageRebalanceAudit_StorageRebalanceAction) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{225, 0}
}

// OperationStatus captures the various statuses of a storage pool operation
type SdkStoragePool_OperationStatus int32

const (
	// Operation pending
	SdkStoragePool_OPERATION_PENDING SdkStoragePool_OperationStatus = 0
	// Operation is in progress
	SdkStoragePool_OPERATION_IN_PROGRESS SdkStoragePool_OperationStatus = 1
	// Operation is successful
	SdkStoragePool_OPERATION_SUCCESSFUL SdkStoragePool_OperationStatus = 2
	// Operation failed
	SdkStoragePool_OPERATION_FAILED SdkStoragePool_OperationStatus = 3
)

// Enum value maps for SdkStoragePool_OperationStatus.
var (
	SdkStoragePool_OperationStatus_name = map[int32]string{
		0: "OPERATION_PENDING",
		1: "OPERATION_IN_PROGRESS",
		2: "OPERATION_SUCCESSFUL",
		3: "OPERATION_FAILED",
	}
	SdkStoragePool_OperationStatus_value = map[string]int32{
		"OPERATION_PENDING":     0,
		"OPERATION_IN_PROGRESS": 1,
		"OPERATION_SUCCESSFUL":  2,
		"OPERATION_FAILED":      3,
	}
)

func (x SdkStoragePool_OperationStatus) Enum() *SdkStoragePool_OperationStatus {
	p := new(SdkStoragePool_OperationStatus)
	*p = x
	return p
}

func (x SdkStoragePool_OperationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdkStoragePool_OperationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[45].Descriptor()
}

func (SdkStoragePool_OperationStatus) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[45]
}

func (x SdkStoragePool_OperationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdkStoragePool_OperationStatus.Descriptor instead.
func (SdkStoragePool_OperationStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{232, 0}
}

// OperationType defines the various operations that are performed on a storage pool
type SdkStoragePool_OperationType int32

const (
	// Resize operation
	SdkStoragePool_OPERATION_RESIZE SdkStoragePool_OperationType = 0
)

// Enum value maps for SdkStoragePool_OperationType.
var (
	SdkStoragePool_OperationType_name = map[int32]string{
		0: "OPERATION_RESIZE",
	}
	SdkStoragePool_OperationType_value = map[string]int32{
		"OPERATION_RESIZE": 0,
	}
)

func (x SdkStoragePool_OperationType) Enum() *SdkStoragePool_OperationType {
	p := new(SdkStoragePool_OperationType)
	*p = x
	return p
}

func (x SdkStoragePool_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdkStoragePool_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[46].Descriptor()
}

func (SdkStoragePool_OperationType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[46]
}

func (x SdkStoragePool_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdkStoragePool_OperationType.Descriptor instead.
func (SdkStoragePool_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{232, 1}
}

// Defines the operation types available to resize a storage pool
type SdkStoragePool_ResizeOperationType int32

const (
	// Automatically pick the optimum resize operation type
	SdkStoragePool_RESIZE_TYPE_AUTO SdkStoragePool_ResizeOperationType = 0
	// Add a new drive to resize the pool
	SdkStoragePool_RESIZE_TYPE_ADD_DISK SdkStoragePool_ResizeOperationType = 1
	// Resize existing drives to resize the pool
	SdkStoragePool_RESIZE_TYPE_RESIZE_DISK SdkStoragePool_ResizeOperationType = 2
)

// Enum value maps for SdkStoragePool_ResizeOperationType.
var (
	SdkStoragePool_ResizeOperationType_name = map[int32]string{
		0: "RESIZE_TYPE_AUTO",
		1: "RESIZE_TYPE_ADD_DISK",
		2: "RESIZE_TYPE_RESIZE_DISK",
	}
	SdkStoragePool_ResizeOperationType_value = map[string]int32{
		"RESIZE_TYPE_AUTO":        0,
		"RESIZE_TYPE_ADD_DISK":    1,
		"RESIZE_TYPE_RESIZE_DISK": 2,
	}
)

func (x SdkStoragePool_ResizeOperationType) Enum() *SdkStoragePool_ResizeOperationType {
	p := new(SdkStoragePool_ResizeOperationType)
	*p = x
	return p
}

func (x SdkStoragePool_ResizeOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdkStoragePool_ResizeOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[47].Descriptor()
}

func (SdkStoragePool_ResizeOperationType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[47]
}

func (x SdkStoragePool_ResizeOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdkStoragePool_ResizeOperationType.Descriptor instead.
func (SdkStoragePool_ResizeOperationType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{232, 2}
}

// FilesystemTrimStatus represents the status codes returned from
// OpenStorageFilesystemTrim service APIs()
type FilesystemTrim_FilesystemTrimStatus int32

const (
	// Filesystem Trim operation is an unknown state
	FilesystemTrim_FS_TRIM_UNKNOWN FilesystemTrim_FilesystemTrimStatus = 0
	// Filesystem Trim operation is not running for the specified volume
	FilesystemTrim_FS_TRIM_NOT_RUNNING FilesystemTrim_FilesystemTrimStatus = 1
	// Filesystem Trim operation started for the specified volume
	FilesystemTrim_FS_TRIM_STARTED FilesystemTrim_FilesystemTrimStatus = 2
	// Filesystem Trim operation is in progress for the specified volume
	FilesystemTrim_FS_TRIM_INPROGRESS FilesystemTrim_FilesystemTrimStatus = 3
	// Filesystem Trim operation was stopped by the user for the specified volume
	FilesystemTrim_FS_TRIM_STOPPED FilesystemTrim_FilesystemTrimStatus = 4
	// Filesystem Trim operation completed successfully for the specified volume
	FilesystemTrim_FS_TRIM_COMPLETED FilesystemTrim_FilesystemTrimStatus = 5
	// Filesystem Trim operation failed due to internal error for the specified
	// volume
	FilesystemTrim_FS_TRIM_FAILED FilesystemTrim_FilesystemTrimStatus = 6
)

// Enum value maps for FilesystemTrim_FilesystemTrimStatus.
var (
	FilesystemTrim_FilesystemTrimStatus_name = map[int32]string{
		0: "FS_TRIM_UNKNOWN",
		1: "FS_TRIM_NOT_RUNNING",
		2: "FS_TRIM_STARTED",
		3: "FS_TRIM_INPROGRESS",
		4: "FS_TRIM_STOPPED",
		5: "FS_TRIM_COMPLETED",
		6: "FS_TRIM_FAILED",
	}
	FilesystemTrim_FilesystemTrimStatus_value = map[string]int32{
		"FS_TRIM_UNKNOWN":     0,
		"FS_TRIM_NOT_RUNNING": 1,
		"FS_TRIM_STARTED":     2,
		"FS_TRIM_INPROGRESS":  3,
		"FS_TRIM_STOPPED":     4,
		"FS_TRIM_COMPLETED":   5,
		"FS_TRIM_FAILED":      6,
	}
)

func (x FilesystemTrim_FilesystemTrimStatus) Enum() *FilesystemTrim_FilesystemTrimStatus {
	p := new(FilesystemTrim_FilesystemTrimStatus)
	*p = x
	return p
}

func (x FilesystemTrim_FilesystemTrimStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilesystemTrim_FilesystemTrimStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[48].Descriptor()
}

func (FilesystemTrim_FilesystemTrimStatus) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[48]
}

func (x FilesystemTrim_FilesystemTrimStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilesystemTrim_FilesystemTrimStatus.Descriptor instead.
func (FilesystemTrim_FilesystemTrimStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{295, 0}
}

// FilesystemChecktatus represents the status codes returned from
// OpenStorageFilesystemCheck service APIs()
type FilesystemCheck_FilesystemCheckStatus int32

const (
	// Filesystem Check operation is an unknown state
	FilesystemCheck_FS_CHECK_UNKNOWN FilesystemCheck_FilesystemCheckStatus = 0
	// FilesystemCheck operation not running for the specified volume
	FilesystemCheck_FS_CHECK_NOT_RUNNING FilesystemCheck_FilesystemCheckStatus = 1
	// FilesystemCheck operation started for the specified volume
	FilesystemCheck_FS_CHECK_STARTED FilesystemCheck_FilesystemCheckStatus = 2
	// FilesystemCheck operation is in progress
	FilesystemCheck_FS_CHECK_INPROGRESS FilesystemCheck_FilesystemCheckStatus = 3
	// FilesystemCheck operation was stopped by the user
	FilesystemCheck_FS_CHECK_STOPPED FilesystemCheck_FilesystemCheckStatus = 4
	// FilesystemCheck operation completed successfully
	FilesystemCheck_FS_CHECK_COMPLETED FilesystemCheck_FilesystemCheckStatus = 5
	// FilesystemCheck operation failed due to internal error
	FilesystemCheck_FS_CHECK_FAILED FilesystemCheck_FilesystemCheckStatus = 6
)

// Enum value maps for FilesystemCheck_FilesystemCheckStatus.
var (
	FilesystemCheck_FilesystemCheckStatus_name = map[int32]string{
		0: "FS_CHECK_UNKNOWN",
		1: "FS_CHECK_NOT_RUNNING",
		2: "FS_CHECK_STARTED",
		3: "FS_CHECK_INPROGRESS",
		4: "FS_CHECK_STOPPED",
		5: "FS_CHECK_COMPLETED",
		6: "FS_CHECK_FAILED",
	}
	FilesystemCheck_FilesystemCheckStatus_value = map[string]int32{
		"FS_CHECK_UNKNOWN":     0,
		"FS_CHECK_NOT_RUNNING": 1,
		"FS_CHECK_STARTED":     2,
		"FS_CHECK_INPROGRESS":  3,
		"FS_CHECK_STOPPED":     4,
		"FS_CHECK_COMPLETED":   5,
		"FS_CHECK_FAILED":      6,
	}
)

func (x FilesystemCheck_FilesystemCheckStatus) Enum() *FilesystemCheck_FilesystemCheckStatus {
	p := new(FilesystemCheck_FilesystemCheckStatus)
	*p = x
	return p
}

func (x FilesystemCheck_FilesystemCheckStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilesystemCheck_FilesystemCheckStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[49].Descriptor()
}

func (FilesystemCheck_FilesystemCheckStatus) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[49]
}

func (x FilesystemCheck_FilesystemCheckStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilesystemCheck_FilesystemCheckStatus.Descriptor instead.
func (FilesystemCheck_FilesystemCheckStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{306, 0}
}

type SdkServiceCapability_OpenStorageService_Type int32

const (
	// Unknown service
	SdkServiceCapability_OpenStorageService_UNKNOWN SdkServiceCapability_OpenStorageService_Type = 0
	// Cluster management
	SdkServiceCapability_OpenStorageService_CLUSTER SdkServiceCapability_OpenStorageService_Type = 1
	// Cloud backup of volumes management
	SdkServiceCapability_OpenStorageService_CLOUD_BACKUP SdkServiceCapability_OpenStorageService_Type = 2
	// Credentials management
	SdkServiceCapability_OpenStorageService_CREDENTIALS SdkServiceCapability_OpenStorageService_Type = 3
	// Node management
	SdkServiceCapability_OpenStorageService_NODE SdkServiceCapability_OpenStorageService_Type = 4
	// Object Storage management
	SdkServiceCapability_OpenStorageService_OBJECT_STORAGE SdkServiceCapability_OpenStorageService_Type = 5
	// Schedule policy management
	SdkServiceCapability_OpenStorageService_SCHEDULE_POLICY SdkServiceCapability_OpenStorageService_Type = 6
	// Volume management
	SdkServiceCapability_OpenStorageService_VOLUME SdkServiceCapability_OpenStorageService_Type = 7
	// Alert enumeration
	SdkServiceCapability_OpenStorageService_ALERTS SdkServiceCapability_OpenStorageService_Type = 8
	// Mount/Attach Support
	SdkServiceCapability_OpenStorageService_MOUNT_ATTACH SdkServiceCapability_OpenStorageService_Type = 9
	// Role service
	SdkServiceCapability_OpenStorageService_ROLE SdkServiceCapability_OpenStorageService_Type = 10
	// Cluster Pair service
	SdkServiceCapability_OpenStorageService_CLUSTER_PAIR SdkServiceCapability_OpenStorageService_Type = 11
	// Migrate service
	SdkServiceCapability_OpenStorageService_MIGRATE SdkServiceCapability_OpenStorageService_Type = 12
	// StoragePolicy Service
	SdkServiceCapability_OpenStorageService_STORAGE_POLICY SdkServiceCapability_OpenStorageService_Type = 13
)

// Enum value maps for SdkServiceCapability_OpenStorageService_Type.
var (
	SdkServiceCapability_OpenStorageService_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "CLUSTER",
		2:  "CLOUD_BACKUP",
		3:  "CREDENTIALS",
		4:  "NODE",
		5:  "OBJECT_STORAGE",
		6:  "SCHEDULE_POLICY",
		7:  "VOLUME",
		8:  "ALERTS",
		9:  "MOUNT_ATTACH",
		10: "ROLE",
		11: "CLUSTER_PAIR",
		12: "MIGRATE",
		13: "STORAGE_POLICY",
	}
	SdkServiceCapability_OpenStorageService_Type_value = map[string]int32{
		"UNKNOWN":         0,
		"CLUSTER":         1,
		"CLOUD_BACKUP":    2,
		"CREDENTIALS":     3,
		"NODE":            4,
		"OBJECT_STORAGE":  5,
		"SCHEDULE_POLICY": 6,
		"VOLUME":          7,
		"ALERTS":          8,
		"MOUNT_ATTACH":    9,
		"ROLE":            10,
		"CLUSTER_PAIR":    11,
		"MIGRATE":         12,
		"STORAGE_POLICY":  13,
	}
)

func (x SdkServiceCapability_OpenStorageService_Type) Enum() *SdkServiceCapability_OpenStorageService_Type {
	p := new(SdkServiceCapability_OpenStorageService_Type)
	*p = x
	return p
}

func (x SdkServiceCapability_OpenStorageService_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdkServiceCapability_OpenStorageService_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[50].Descriptor()
}

func (SdkServiceCapability_OpenStorageService_Type) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[50]
}

func (x SdkServiceCapability_OpenStorageService_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdkServiceCapability_OpenStorageService_Type.Descriptor instead.
func (SdkServiceCapability_OpenStorageService_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{317, 0, 0}
}

// These values are constants that can be used by the
// client and server applications
type SdkVersion_Version int32

const (
	// Must be set in the proto file; ignore.
	SdkVersion_MUST_HAVE_ZERO_VALUE SdkVersion_Version = 0
	// SDK version major value of this specification
	SdkVersion_Major SdkVersion_Version = 0
	// SDK version minor value of this specification
	SdkVersion_Minor SdkVersion_Version = 148
	// SDK version patch value of this specification
	SdkVersion_Patch SdkVersion_Version = 0
)

// Enum value maps for SdkVersion_Version.
var (
	SdkVersion_Version_name = map[int32]string{
		0: "MUST_HAVE_ZERO_VALUE",
		// Duplicate value: 0: "Major",
		148: "Minor",
		// Duplicate value: 0: "Patch",
	}
	SdkVersion_Version_value = map[string]int32{
		"MUST_HAVE_ZERO_VALUE": 0,
		"Major":                0,
		"Minor":                148,
		"Patch":                0,
	}
)

func (x SdkVersion_Version) Enum() *SdkVersion_Version {
	p := new(SdkVersion_Version)
	*p = x
	return p
}

func (x SdkVersion_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdkVersion_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[51].Descriptor()
}

func (SdkVersion_Version) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[51]
}

func (x SdkVersion_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdkVersion_Version.Descriptor instead.
func (SdkVersion_Version) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{318, 0}
}

type CloudMigrate_OperationType int32

const (
	CloudMigrate_InvalidType CloudMigrate_OperationType = 0
	// Migrate all volumes in the cluster
	CloudMigrate_MigrateCluster CloudMigrate_OperationType = 1
	// Migrate a single volume
	CloudMigrate_MigrateVolume CloudMigrate_OperationType = 2
	// Migrate a group of volumes
	CloudMigrate_MigrateVolumeGroup CloudMigrate_OperationType = 3
)

// Enum value maps for CloudMigrate_OperationType.
var (
	CloudMigrate_OperationType_name = map[int32]string{
		0: "InvalidType",
		1: "MigrateCluster",
		2: "MigrateVolume",
		3: "MigrateVolumeGroup",
	}
	CloudMigrate_OperationType_value = map[string]int32{
		"InvalidType":        0,
		"MigrateCluster":     1,
		"MigrateVolume":      2,
		"MigrateVolumeGroup": 3,
	}
)

func (x CloudMigrate_OperationType) Enum() *CloudMigrate_OperationType {
	p := new(CloudMigrate_OperationType)
	*p = x
	return p
}

func (x CloudMigrate_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudMigrate_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[52].Descriptor()
}

func (CloudMigrate_OperationType) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[52]
}

func (x CloudMigrate_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudMigrate_OperationType.Descriptor instead.
func (CloudMigrate_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{320, 0}
}

type CloudMigrate_Stage int32

const (
	CloudMigrate_InvalidStage CloudMigrate_Stage = 0
	CloudMigrate_Backup       CloudMigrate_Stage = 1
	CloudMigrate_Restore      CloudMigrate_Stage = 2
	CloudMigrate_VolumeUpdate CloudMigrate_Stage = 3
	CloudMigrate_Done         CloudMigrate_Stage = 4
)

// Enum value maps for CloudMigrate_Stage.
var (
	CloudMigrate_Stage_name = map[int32]string{
		0: "InvalidStage",
		1: "Backup",
		2: "Restore",
		3: "VolumeUpdate",
		4: "Done",
	}
	CloudMigrate_Stage_value = map[string]int32{
		"InvalidStage": 0,
		"Backup":       1,
		"Restore":      2,
		"VolumeUpdate": 3,
		"Done":         4,
	}
)

func (x CloudMigrate_Stage) Enum() *CloudMigrate_Stage {
	p := new(CloudMigrate_Stage)
	*p = x
	return p
}

func (x CloudMigrate_Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudMigrate_Stage) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[53].Descriptor()
}

func (CloudMigrate_Stage) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[53]
}

func (x CloudMigrate_Stage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudMigrate_Stage.Descriptor instead.
func (CloudMigrate_Stage) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{320, 1}
}

type CloudMigrate_Status int32

const (
	CloudMigrate_InvalidStatus CloudMigrate_Status = 0
	CloudMigrate_Queued        CloudMigrate_Status = 1
	CloudMigrate_Initialized   CloudMigrate_Status = 2
	CloudMigrate_InProgress    CloudMigrate_Status = 3
	CloudMigrate_Failed        CloudMigrate_Status = 4
	CloudMigrate_Complete      CloudMigrate_Status = 5
	CloudMigrate_Canceled      CloudMigrate_Status = 6
)

// Enum value maps for CloudMigrate_Status.
var (
	CloudMigrate_Status_name = map[int32]string{
		0: "InvalidStatus",
		1: "Queued",
		2: "Initialized",
		3: "InProgress",
		4: "Failed",
		5: "Complete",
		6: "Canceled",
	}
	CloudMigrate_Status_value = map[string]int32{
		"InvalidStatus": 0,
		"Queued":        1,
		"Initialized":   2,
		"InProgress":    3,
		"Failed":        4,
		"Complete":      5,
		"Canceled":      6,
	}
)

func (x CloudMigrate_Status) Enum() *CloudMigrate_Status {
	p := new(CloudMigrate_Status)
	*p = x
	return p
}

func (x CloudMigrate_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudMigrate_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[54].Descriptor()
}

func (CloudMigrate_Status) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[54]
}

func (x CloudMigrate_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudMigrate_Status.Descriptor instead.
func (CloudMigrate_Status) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{320, 2}
}

type ClusterPairMode_Mode int32

const (
	// Default pairing mode
	ClusterPairMode_Default ClusterPairMode_Mode = 0
	// Paired for DisasterRecovery
	ClusterPairMode_DisasterRecovery ClusterPairMode_Mode = 1
	// Paired for one-time migration
	ClusterPairMode_OneTimeMigration ClusterPairMode_Mode = 2
)

// Enum value maps for ClusterPairMode_Mode.
var (
	ClusterPairMode_Mode_name = map[int32]string{
		0: "Default",
		1: "DisasterRecovery",
		2: "OneTimeMigration",
	}
	ClusterPairMode_Mode_value = map[string]int32{
		"Default":          0,
		"DisasterRecovery": 1,
		"OneTimeMigration": 2,
	}
)

func (x ClusterPairMode_Mode) Enum() *ClusterPairMode_Mode {
	p := new(ClusterPairMode_Mode)
	*p = x
	return p
}

func (x ClusterPairMode_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterPairMode_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[55].Descriptor()
}

func (ClusterPairMode_Mode) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[55]
}

func (x ClusterPairMode_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterPairMode_Mode.Descriptor instead.
func (ClusterPairMode_Mode) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{334, 0}
}

// This defines operator types used in a label matching rule
type LabelSelectorRequirement_Operator int32

const (
	// In means the value for 'key' should be in one of the given value(s)
	LabelSelectorRequirement_In LabelSelectorRequirement_Operator = 0
	// NotIn means the value for 'key' should NOT be in one of the given value(s)
	LabelSelectorRequirement_NotIn LabelSelectorRequirement_Operator = 1
	// Exists means the 'key' should just exist regardless of the value
	LabelSelectorRequirement_Exists LabelSelectorRequirement_Operator = 2
	// DoesNotExist means the 'key' should NOT exist
	LabelSelectorRequirement_DoesNotExist LabelSelectorRequirement_Operator = 3
	// Gt means the 'key' should be greater than the value(s)
	LabelSelectorRequirement_Gt LabelSelectorRequirement_Operator = 4
	// Lt means the 'key' should be less than the value(s)
	LabelSelectorRequirement_Lt LabelSelectorRequirement_Operator = 5
)

// Enum value maps for LabelSelectorRequirement_Operator.
var (
	LabelSelectorRequirement_Operator_name = map[int32]string{
		0: "In",
		1: "NotIn",
		2: "Exists",
		3: "DoesNotExist",
		4: "Gt",
		5: "Lt",
	}
	LabelSelectorRequirement_Operator_value = map[string]int32{
		"In":           0,
		"NotIn":        1,
		"Exists":       2,
		"DoesNotExist": 3,
		"Gt":           4,
		"Lt":           5,
	}
)

func (x LabelSelectorRequirement_Operator) Enum() *LabelSelectorRequirement_Operator {
	p := new(LabelSelectorRequirement_Operator)
	*p = x
	return p
}

func (x LabelSelectorRequirement_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelSelectorRequirement_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[56].Descriptor()
}

func (LabelSelectorRequirement_Operator) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[56]
}

func (x LabelSelectorRequirement_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelSelectorRequirement_Operator.Descriptor instead.
func (LabelSelectorRequirement_Operator) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{362, 0}
}

// StorageResource groups properties of a storage device.
type StorageResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the LUN identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Path device path for this storage resource.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Storage medium.
	Medium StorageMedium `protobuf:"varint,3,opt,name=medium,proto3,enum=openstorage.api.StorageMedium" json:"medium,omitempty"`
	// True if this device is online.
	Online bool `protobuf:"varint,4,opt,name=online,proto3" json:"online,omitempty"`
	// IOPS
	Iops uint64 `protobuf:"varint,5,opt,name=iops,proto3" json:"iops,omitempty"`
	// SeqWrite
	SeqWrite float64 `protobuf:"fixed64,6,opt,name=seq_write,json=seqWrite,proto3" json:"seq_write,omitempty"`
	// SeqRead
	SeqRead float64 `protobuf:"fixed64,7,opt,name=seq_read,json=seqRead,proto3" json:"seq_read,omitempty"`
	// RandRW
	RandRW float64 `protobuf:"fixed64,8,opt,name=randRW,proto3" json:"randRW,omitempty"`
	// Total size in bytes.
	Size uint64 `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	// Physical Bytes used.
	Used uint64 `protobuf:"varint,10,opt,name=used,proto3" json:"used,omitempty"`
	// True if this device is rotational.
	RotationSpeed string `protobuf:"bytes,11,opt,name=rotation_speed,json=rotationSpeed,proto3" json:"rotation_speed,omitempty"`
	// Timestamp of last time this device was scanned.
	LastScan *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=last_scan,json=lastScan,proto3" json:"last_scan,omitempty"`
	// True if dedicated for metadata.
	Metadata bool `protobuf:"varint,13,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// True if dedicated as cache
	Cache bool `protobuf:"varint,14,opt,name=cache,proto3" json:"cache,omitempty"`
	// True if the resource is used as thin pool metadata disk
	PoolMetadataDev bool `protobuf:"varint,15,opt,name=pool_metadata_dev,json=poolMetadataDev,proto3" json:"pool_metadata_dev,omitempty"`
}

func (x *StorageResource) Reset() {
	*x = StorageResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageResource) ProtoMessage() {}

func (x *StorageResource) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageResource.ProtoReflect.Descriptor instead.
func (*StorageResource) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{0}
}

func (x *StorageResource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StorageResource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *StorageResource) GetMedium() StorageMedium {
	if x != nil {
		return x.Medium
	}
	return StorageMedium_STORAGE_MEDIUM_MAGNETIC
}

func (x *StorageResource) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *StorageResource) GetIops() uint64 {
	if x != nil {
		return x.Iops
	}
	return 0
}

func (x *StorageResource) GetSeqWrite() float64 {
	if x != nil {
		return x.SeqWrite
	}
	return 0
}

func (x *StorageResource) GetSeqRead() float64 {
	if x != nil {
		return x.SeqRead
	}
	return 0
}

func (x *StorageResource) GetRandRW() float64 {
	if x != nil {
		return x.RandRW
	}
	return 0
}

func (x *StorageResource) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *StorageResource) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *StorageResource) GetRotationSpeed() string {
	if x != nil {
		return x.RotationSpeed
	}
	return ""
}

func (x *StorageResource) GetLastScan() *timestamppb.Timestamp {
	if x != nil {
		return x.LastScan
	}
	return nil
}

func (x *StorageResource) GetMetadata() bool {
	if x != nil {
		return x.Metadata
	}
	return false
}

func (x *StorageResource) GetCache() bool {
	if x != nil {
		return x.Cache
	}
	return false
}

func (x *StorageResource) GetPoolMetadataDev() bool {
	if x != nil {
		return x.PoolMetadataDev
	}
	return false
}

// StoragePool groups different storage devices based on their CosType
type StoragePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated! Use `uuid` instead. ID pool ID
	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Cos reflects the capabilities of this drive pool
	Cos CosType `protobuf:"varint,2,opt,name=Cos,proto3,enum=openstorage.api.CosType" json:"Cos,omitempty"`
	// Medium underlying storage type
	Medium StorageMedium `protobuf:"varint,3,opt,name=Medium,proto3,enum=openstorage.api.StorageMedium" json:"Medium,omitempty"`
	// RaidLevel storage raid level
	RaidLevel string `protobuf:"bytes,4,opt,name=RaidLevel,proto3" json:"RaidLevel,omitempty"`
	// TotalSize of the pool
	TotalSize uint64 `protobuf:"varint,7,opt,name=TotalSize,proto3" json:"TotalSize,omitempty"`
	// Used size of the pool
	Used uint64 `protobuf:"varint,8,opt,name=Used,proto3" json:"Used,omitempty"`
	// Labels is a list of user defined name-value pairs
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// UUID is the unique identifier for a storage pool
	Uuid string `protobuf:"bytes,10,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// LastOperation is the most recent operation being performed on a storage pool
	LastOperation *StoragePoolOperation `protobuf:"bytes,11,opt,name=last_operation,json=lastOperation,proto3" json:"last_operation,omitempty"`
}

func (x *StoragePool) Reset() {
	*x = StoragePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoragePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePool) ProtoMessage() {}

func (x *StoragePool) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePool.ProtoReflect.Descriptor instead.
func (*StoragePool) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{1}
}

func (x *StoragePool) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *StoragePool) GetCos() CosType {
	if x != nil {
		return x.Cos
	}
	return CosType_NONE
}

func (x *StoragePool) GetMedium() StorageMedium {
	if x != nil {
		return x.Medium
	}
	return StorageMedium_STORAGE_MEDIUM_MAGNETIC
}

func (x *StoragePool) GetRaidLevel() string {
	if x != nil {
		return x.RaidLevel
	}
	return ""
}

func (x *StoragePool) GetTotalSize() uint64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *StoragePool) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *StoragePool) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *StoragePool) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *StoragePool) GetLastOperation() *StoragePoolOperation {
	if x != nil {
		return x.LastOperation
	}
	return nil
}

// SchedulerTopology defines the topology information of the storage node
// in scheduler context
type SchedulerTopology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key-value pairs defining the topology of the node
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SchedulerTopology) Reset() {
	*x = SchedulerTopology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerTopology) ProtoMessage() {}

func (x *SchedulerTopology) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerTopology.ProtoReflect.Descriptor instead.
func (*SchedulerTopology) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{2}
}

func (x *SchedulerTopology) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// StoragePoolOperation defines an operation being performed on a storage pool
type StoragePoolOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is the type of the operation
	Type SdkStoragePool_OperationType `protobuf:"varint,1,opt,name=type,proto3,enum=openstorage.api.SdkStoragePool_OperationType" json:"type,omitempty"`
	// Msg is a user friendly message for the operation
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// Params for the parameters for the operation
	Params map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Status is the status of the operation
	Status SdkStoragePool_OperationStatus `protobuf:"varint,4,opt,name=status,proto3,enum=openstorage.api.SdkStoragePool_OperationStatus" json:"status,omitempty"`
}

func (x *StoragePoolOperation) Reset() {
	*x = StoragePoolOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoragePoolOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePoolOperation) ProtoMessage() {}

func (x *StoragePoolOperation) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePoolOperation.ProtoReflect.Descriptor instead.
func (*StoragePoolOperation) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{3}
}

func (x *StoragePoolOperation) GetType() SdkStoragePool_OperationType {
	if x != nil {
		return x.Type
	}
	return SdkStoragePool_OPERATION_RESIZE
}

func (x *StoragePoolOperation) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *StoragePoolOperation) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *StoragePoolOperation) GetStatus() SdkStoragePool_OperationStatus {
	if x != nil {
		return x.Status
	}
	return SdkStoragePool_OPERATION_PENDING
}

// TopologyRequirement defines the topology requirement for a volume
type TopologyRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key-value pairs defining the required topology for a volume
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TopologyRequirement) Reset() {
	*x = TopologyRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyRequirement) ProtoMessage() {}

func (x *TopologyRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyRequirement.ProtoReflect.Descriptor instead.
func (*TopologyRequirement) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{4}
}

func (x *TopologyRequirement) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// VolumeLocator is a structure that is attached to a volume
// and is used to carry opaque metadata.
type VolumeLocator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User friendly identifier
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A set of name-value pairs that acts as search filters
	VolumeLabels map[string]string `protobuf:"bytes,2,rep,name=volume_labels,json=volumeLabels,proto3" json:"volume_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Filter with ownership
	Ownership *Ownership `protobuf:"bytes,3,opt,name=ownership,proto3" json:"ownership,omitempty"`
	// Filter by group
	Group *Group `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	// Volume Ids to match
	VolumeIds []string `protobuf:"bytes,5,rep,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
}

func (x *VolumeLocator) Reset() {
	*x = VolumeLocator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeLocator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeLocator) ProtoMessage() {}

func (x *VolumeLocator) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeLocator.ProtoReflect.Descriptor instead.
func (*VolumeLocator) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{5}
}

func (x *VolumeLocator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeLocator) GetVolumeLabels() map[string]string {
	if x != nil {
		return x.VolumeLabels
	}
	return nil
}

func (x *VolumeLocator) GetOwnership() *Ownership {
	if x != nil {
		return x.Ownership
	}
	return nil
}

func (x *VolumeLocator) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *VolumeLocator) GetVolumeIds() []string {
	if x != nil {
		return x.VolumeIds
	}
	return nil
}

// Options used for volume inspection
type VolumeInspectOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deep inspection is used to collect more information about
	// the volume. Setting this value may delay the request.
	Deep bool `protobuf:"varint,1,opt,name=deep,proto3" json:"deep,omitempty"`
}

func (x *VolumeInspectOptions) Reset() {
	*x = VolumeInspectOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeInspectOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeInspectOptions) ProtoMessage() {}

func (x *VolumeInspectOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeInspectOptions.ProtoReflect.Descriptor instead.
func (*VolumeInspectOptions) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{6}
}

func (x *VolumeInspectOptions) GetDeep() bool {
	if x != nil {
		return x.Deep
	}
	return false
}

// Source is a structure that can be given to a volume
// to seed the volume with data.
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A volume id, if specified will create a clone of the parent.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Seed will seed the volume from the specified URI
	// Any additional config for the source comes from the labels in the spec
	Seed string `protobuf:"bytes,2,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{7}
}

func (x *Source) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *Source) GetSeed() string {
	if x != nil {
		return x.Seed
	}
	return ""
}

// Group represents VolumeGroup / namespace
// All volumes in the same group share this object.
type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id common identifier across volumes that have the same group.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{8}
}

func (x *Group) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// IoStrategy defines how I/O should be performed to backing storage media.
type IoStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AsyncIO enables kaio.
	AsyncIo bool `protobuf:"varint,1,opt,name=async_io,json=asyncIo,proto3" json:"async_io,omitempty"`
	// EarlyAck enables acks for async I/O at the source.
	EarlyAck bool `protobuf:"varint,2,opt,name=early_ack,json=earlyAck,proto3" json:"early_ack,omitempty"`
	// Enable direct I/O on the backing datastore
	DirectIo bool `protobuf:"varint,3,opt,name=direct_io,json=directIo,proto3" json:"direct_io,omitempty"`
}

func (x *IoStrategy) Reset() {
	*x = IoStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IoStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IoStrategy) ProtoMessage() {}

func (x *IoStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IoStrategy.ProtoReflect.Descriptor instead.
func (*IoStrategy) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{9}
}

func (x *IoStrategy) GetAsyncIo() bool {
	if x != nil {
		return x.AsyncIo
	}
	return false
}

func (x *IoStrategy) GetEarlyAck() bool {
	if x != nil {
		return x.EarlyAck
	}
	return false
}

func (x *IoStrategy) GetDirectIo() bool {
	if x != nil {
		return x.DirectIo
	}
	return false
}

// Xattr defines implementation specific volume attribute
type Xattr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Xattr) Reset() {
	*x = Xattr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Xattr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Xattr) ProtoMessage() {}

func (x *Xattr) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Xattr.ProtoReflect.Descriptor instead.
func (*Xattr) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{10}
}

// ExportSpec defines how the volume is exported..
type ExportSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ExportProtocol defines how the volume is exported.
	ExportProtocol ExportProtocol `protobuf:"varint,1,opt,name=export_protocol,json=exportProtocol,proto3,enum=openstorage.api.ExportProtocol" json:"export_protocol,omitempty"`
	// ExportOptions options exporting the volume.
	ExportOptions string `protobuf:"bytes,2,opt,name=export_options,json=exportOptions,proto3" json:"export_options,omitempty"`
}

func (x *ExportSpec) Reset() {
	*x = ExportSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportSpec) ProtoMessage() {}

func (x *ExportSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportSpec.ProtoReflect.Descriptor instead.
func (*ExportSpec) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{11}
}

func (x *ExportSpec) GetExportProtocol() ExportProtocol {
	if x != nil {
		return x.ExportProtocol
	}
	return ExportProtocol_INVALID
}

func (x *ExportSpec) GetExportOptions() string {
	if x != nil {
		return x.ExportOptions
	}
	return ""
}

// NFSProxySpec is the spec for proxying an NFS share.
type NFSProxySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ExportPath is the NFS export path on the NFS server
	ExportPath string `protobuf:"bytes,1,opt,name=export_path,json=exportPath,proto3" json:"export_path,omitempty"`
	// SubPath is the sub-directory from an NFS share that should be reflected.
	SubPath string `protobuf:"bytes,2,opt,name=sub_path,json=subPath,proto3" json:"sub_path,omitempty"`
}

func (x *NFSProxySpec) Reset() {
	*x = NFSProxySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFSProxySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFSProxySpec) ProtoMessage() {}

func (x *NFSProxySpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFSProxySpec.ProtoReflect.Descriptor instead.
func (*NFSProxySpec) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{12}
}

func (x *NFSProxySpec) GetExportPath() string {
	if x != nil {
		return x.ExportPath
	}
	return ""
}

func (x *NFSProxySpec) GetSubPath() string {
	if x != nil {
		return x.SubPath
	}
	return ""
}

// S3ProxySpec is the spec for proxying an external object store.
type S3ProxySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BucketName is the name of the bucket from the object store
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
}

func (x *S3ProxySpec) Reset() {
	*x = S3ProxySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3ProxySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ProxySpec) ProtoMessage() {}

func (x *S3ProxySpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ProxySpec.ProtoReflect.Descriptor instead.
func (*S3ProxySpec) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{13}
}

func (x *S3ProxySpec) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

// PXDProxySpec is the spec for proxying a Portworx volume
type PXDProxySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the remote portworx volume
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PXDProxySpec) Reset() {
	*x = PXDProxySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PXDProxySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXDProxySpec) ProtoMessage() {}

func (x *PXDProxySpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXDProxySpec.ProtoReflect.Descriptor instead.
func (*PXDProxySpec) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{14}
}

func (x *PXDProxySpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// PureBlockSpec is the spec for proxying a volume on pure_block backends
type PureBlockSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNum   string `protobuf:"bytes,1,opt,name=serial_num,json=serialNum,proto3" json:"serial_num,omitempty"`
	FullVolName string `protobuf:"bytes,2,opt,name=full_vol_name,json=fullVolName,proto3" json:"full_vol_name,omitempty"`
}

func (x *PureBlockSpec) Reset() {
	*x = PureBlockSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PureBlockSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PureBlockSpec) ProtoMessage() {}

func (x *PureBlockSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PureBlockSpec.ProtoReflect.Descriptor instead.
func (*PureBlockSpec) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{15}
}

func (x *PureBlockSpec) GetSerialNum() string {
	if x != nil {
		return x.SerialNum
	}
	return ""
}

func (x *PureBlockSpec) GetFullVolName() string {
	if x != nil {
		return x.FullVolName
	}
	return ""
}

// PureFileSpec is the spec for proxying a volume on pure_file backends
type PureFileSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportRules string `protobuf:"bytes,1,opt,name=export_rules,json=exportRules,proto3" json:"export_rules,omitempty"`
	FullVolName string `protobuf:"bytes,2,opt,name=full_vol_name,json=fullVolName,proto3" json:"full_vol_name,omitempty"`
}

func (x *PureFileSpec) Reset() {
	*x = PureFileSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PureFileSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PureFileSpec) ProtoMessage() {}

func (x *PureFileSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PureFileSpec.ProtoReflect.Descriptor instead.
func (*PureFileSpec) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{16}
}

func (x *PureFileSpec) GetExportRules() string {
	if x != nil {
		return x.ExportRules
	}
	return ""
}

func (x *PureFileSpec) GetFullVolName() string {
	if x != nil {
		return x.FullVolName
	}
	return ""
}

// ProxySpec defines how this volume will reflect an external data source.
type ProxySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProxyProtocol defines the protocol used for proxy.
	ProxyProtocol ProxyProtocol `protobuf:"varint,1,opt,name=proxy_protocol,json=proxyProtocol,proto3,enum=openstorage.api.ProxyProtocol" json:"proxy_protocol,omitempty"`
	// Endpoint is the external endpoint which can be used for accessing the
	// external data source.
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// NFSProxySpec is the spec for proxying an NFS share
	NfsSpec *NFSProxySpec `protobuf:"bytes,3,opt,name=nfs_spec,json=nfsSpec,proto3" json:"nfs_spec,omitempty"`
	// S3ProxySpec is the spec for proxying an external object store
	S3Spec *S3ProxySpec `protobuf:"bytes,4,opt,name=s3_spec,json=s3Spec,proto3" json:"s3_spec,omitempty"`
	// PXDProxySpec is the spec for proxying a Portworx volume
	PxdSpec *PXDProxySpec `protobuf:"bytes,5,opt,name=pxd_spec,json=pxdSpec,proto3" json:"pxd_spec,omitempty"`
	// PureFileSpec is the spec for proxying a volume on pure_file backends
	PureBlockSpec *PureBlockSpec `protobuf:"bytes,6,opt,name=pure_block_spec,json=pureBlockSpec,proto3" json:"pure_block_spec,omitempty"`
	// PureFileSpec is the spec for proxying a volume on pure_file backends
	PureFileSpec *PureFileSpec `protobuf:"bytes,7,opt,name=pure_file_spec,json=pureFileSpec,proto3" json:"pure_file_spec,omitempty"`
}

func (x *ProxySpec) Reset() {
	*x = ProxySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxySpec) ProtoMessage() {}

func (x *ProxySpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxySpec.ProtoReflect.Descriptor instead.
func (*ProxySpec) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{17}
}

func (x *ProxySpec) GetProxyProtocol() ProxyProtocol {
	if x != nil {
		return x.ProxyProtocol
	}
	return ProxyProtocol_PROXY_PROTOCOL_INVALID
}

func (x *ProxySpec) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *ProxySpec) GetNfsSpec() *NFSProxySpec {
	if x != nil {
		return x.NfsSpec
	}
	return nil
}

func (x *ProxySpec) GetS3Spec() *S3ProxySpec {
	if x != nil {
		return x.S3Spec
	}
	return nil
}

func (x *ProxySpec) GetPxdSpec() *PXDProxySpec {
	if x != nil {
		return x.PxdSpec
	}
	return nil
}

func (x *ProxySpec) GetPureBlockSpec() *PureBlockSpec {
	if x != nil {
		return x.PureBlockSpec
	}
	return nil
}

func (x *ProxySpec) GetPureFileSpec() *PureFileSpec {
	if x != nil {
		return x.PureFileSpec
	}
	return nil
}

// Sharedv4ServiceSpec when set, creates a service endpoint for accessing
// a sharedv4 volume.
type Sharedv4ServiceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service. If not provided the name of the volume will be
	// used for setting up a service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Indicates what kind of service would be created for this volume.
	Type Sharedv4ServiceSpec_ServiceType `protobuf:"varint,2,opt,name=type,proto3,enum=openstorage.api.Sharedv4ServiceSpec_ServiceType" json:"type,omitempty"`
	// Indicates whether the service needs to be accessed outside of the cluster
	ExternalAccess bool `protobuf:"varint,3,opt,name=external_access,json=externalAccess,proto3" json:"external_access,omitempty"`
}

func (x *Sharedv4ServiceSpec) Reset() {
	*x = Sharedv4ServiceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sharedv4ServiceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sharedv4ServiceSpec) ProtoMessage() {}

func (x *Sharedv4ServiceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sharedv4ServiceSpec.ProtoReflect.Descriptor instead.
func (*Sharedv4ServiceSpec) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{18}
}

func (x *Sharedv4ServiceSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sharedv4ServiceSpec) GetType() Sharedv4ServiceSpec_ServiceType {
	if x != nil {
		return x.Type
	}
	return Sharedv4ServiceSpec_UNSPECIFIED
}

func (x *Sharedv4ServiceSpec) GetExternalAccess() bool {
	if x != nil {
		return x.ExternalAccess
	}
	return false
}

// Sharedv4FailoverStrategy specifies how long to wait before failing over to a new server.
type Sharedv4FailoverStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Sharedv4FailoverStrategy) Reset() {
	*x = Sharedv4FailoverStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sharedv4FailoverStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sharedv4FailoverStrategy) ProtoMessage() {}

func (x *Sharedv4FailoverStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sharedv4FailoverStrategy.ProtoReflect.Descriptor instead.
func (*Sharedv4FailoverStrategy) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{19}
}

// Sharedv4Spec specifies common properties of sharedv4 and sharedv4 service volumes
type Sharedv4Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates how aggressively to fail over to a new server.
	FailoverStrategy Sharedv4FailoverStrategy_Value `protobuf:"varint,1,opt,name=failover_strategy,json=failoverStrategy,proto3,enum=openstorage.api.Sharedv4FailoverStrategy_Value" json:"failover_strategy,omitempty"`
}

func (x *Sharedv4Spec) Reset() {
	*x = Sharedv4Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sharedv4Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sharedv4Spec) ProtoMessage() {}

func (x *Sharedv4Spec) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sharedv4Spec.ProtoReflect.Descriptor instead.
func (*Sharedv4Spec) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{20}
}

func (x *Sharedv4Spec) GetFailoverStrategy() Sharedv4FailoverStrategy_Value {
	if x != nil {
		return x.FailoverStrategy
	}
	return Sharedv4FailoverStrategy_UNSPECIFIED
}

// MountOptions defines the mount options with which a volume is mounted.
type MountOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Options are opaque key value pairs that are passed as mount options when
	// a volume is mounted.
	// If an empty value is provided only the key will be passed as an option
	// If both key and value are provided then 'key=value' will be passed as an
	// option
	Options map[string]string `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MountOptions) Reset() {
	*x = MountOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountOptions) ProtoMessage() {}

func (x *MountOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountOptions.ProtoReflect.Descriptor instead.
func (*MountOptions) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{21}
}

func (x *MountOptions) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type FastpathReplState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevId    uint64           `protobuf:"varint,1,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	NodeId   uint32           `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Protocol FastpathProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=openstorage.api.FastpathProtocol" json:"protocol,omitempty"`
	Acl      bool             `protobuf:"varint,4,opt,name=acl,proto3" json:"acl,omitempty"`
	// target info
	ExportedDevice string `protobuf:"bytes,5,opt,name=exported_device,json=exportedDevice,proto3" json:"exported_device,omitempty"`
	Block          bool   `protobuf:"varint,6,opt,name=block,proto3" json:"block,omitempty"`
	Target         string `protobuf:"bytes,7,opt,name=target,proto3" json:"target,omitempty"`
	Exported       bool   `protobuf:"varint,8,opt,name=exported,proto3" json:"exported,omitempty"`
	// initiator info
	Imported bool   `protobuf:"varint,9,opt,name=imported,proto3" json:"imported,omitempty"`
	Devpath  string `protobuf:"bytes,10,opt,name=devpath,proto3" json:"devpath,omitempty"`
	// node_uuid added to enhance UI reporting
	NodeUuid string `protobuf:"bytes,11,opt,name=node_uuid,json=nodeUuid,proto3" json:"node_uuid,omitempty"`
}

func (x *FastpathReplState) Reset() {
	*x = FastpathReplState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastpathReplState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastpathReplState) ProtoMessage() {}

func (x *FastpathReplState) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastpathReplState.ProtoReflect.Descriptor instead.
func (*FastpathReplState) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{22}
}

func (x *FastpathReplState) GetDevId() uint64 {
	if x != nil {
		return x.DevId
	}
	return 0
}

func (x *FastpathReplState) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *FastpathReplState) GetProtocol() FastpathProtocol {
	if x != nil {
		return x.Protocol
	}
	return FastpathProtocol_FASTPATH_PROTO_UNKNOWN
}

func (x *FastpathReplState) GetAcl() bool {
	if x != nil {
		return x.Acl
	}
	return false
}

func (x *FastpathReplState) GetExportedDevice() string {
	if x != nil {
		return x.ExportedDevice
	}
	return ""
}

func (x *FastpathReplState) GetBlock() bool {
	if x != nil {
		return x.Block
	}
	return false
}

func (x *FastpathReplState) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *FastpathReplState) GetExported() bool {
	if x != nil {
		return x.Exported
	}
	return false
}

func (x *FastpathReplState) GetImported() bool {
	if x != nil {
		return x.Imported
	}
	return false
}

func (x *FastpathReplState) GetDevpath() string {
	if x != nil {
		return x.Devpath
	}
	return ""
}

func (x *FastpathReplState) GetNodeUuid() string {
	if x != nil {
		return x.NodeUuid
	}
	return ""
}

// FastpathConfig part of volume
type FastpathConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fastpath setup on this node
	SetupOn int32 `protobuf:"varint,1,opt,name=setup_on,json=setupOn,proto3" json:"setup_on,omitempty"`
	// Fastpath temporary promotion during attach
	Promote bool `protobuf:"varint,2,opt,name=promote,proto3" json:"promote,omitempty"`
	// Fastpath consolidated current status across replicas
	Status FastpathStatus `protobuf:"varint,3,opt,name=status,proto3,enum=openstorage.api.FastpathStatus" json:"status,omitempty"`
	// Fastpath replica state for each replica in replica set
	Replicas []*FastpathReplState `protobuf:"bytes,4,rep,name=replicas,proto3" json:"replicas,omitempty"`
	// Dirty flag on volume - was attached in userspace
	Dirty bool `protobuf:"varint,5,opt,name=dirty,proto3" json:"dirty,omitempty"`
	// fastpath coordinator node uuid to enhance reporting
	CoordUuid string `protobuf:"bytes,6,opt,name=coord_uuid,json=coordUuid,proto3" json:"coord_uuid,omitempty"`
}

func (x *FastpathConfig) Reset() {
	*x = FastpathConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastpathConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastpathConfig) ProtoMessage() {}

func (x *FastpathConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastpathConfig.ProtoReflect.Descriptor instead.
func (*FastpathConfig) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{23}
}

func (x *FastpathConfig) GetSetupOn() int32 {
	if x != nil {
		return x.SetupOn
	}
	return 0
}

func (x *FastpathConfig) GetPromote() bool {
	if x != nil {
		return x.Promote
	}
	return false
}

func (x *FastpathConfig) GetStatus() FastpathStatus {
	if x != nil {
		return x.Status
	}
	return FastpathStatus_FASTPATH_UNKNOWN
}

func (x *FastpathConfig) GetReplicas() []*FastpathReplState {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *FastpathConfig) GetDirty() bool {
	if x != nil {
		return x.Dirty
	}
	return false
}

func (x *FastpathConfig) GetCoordUuid() string {
	if x != nil {
		return x.CoordUuid
	}
	return ""
}

// ScanPolicy defines when a filesystem check is triggered and what action to take
// User can specify *one* of the following valid policies
// 1. trigger=SCAN_TRIGGER_ON_MOUNT, action=SCAN_ACTION_SCAN_ONLY
// 2. trigger=SCAN_TRIGGER_ON_MOUNT, action=SCAN_ACTION_SCAN_REPAIR
// 3. trigger=SCAN_TRIGGER_ON_NEXT_MOUNT, action=SCAN_ACTION_SCAN_ONLY
// 4. trigger=SCAN_TRIGGER_ON_NEXT_MOUNT, action=SCAN_ACTION_SCAN_REPAIR
// 5. trigger=SCAN_TRIGGER_NONE, action=SCAN_ACTION_NONE
// Note: When trigger == SCAN_TRIGGER_ON_NEXT_MOUNT, the associated action is
// performed once on the next mount and the scanpolicy gets reset to
// `trigger=SCAN_TRIGGER_NONE, action=SCAN_ACTION_NONE`, irrespective of the
// output of the action.
type ScanPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trigger ScanPolicy_ScanTrigger `protobuf:"varint,1,opt,name=trigger,proto3,enum=openstorage.api.ScanPolicy_ScanTrigger" json:"trigger,omitempty"`
	Action  ScanPolicy_ScanAction  `protobuf:"varint,2,opt,name=action,proto3,enum=openstorage.api.ScanPolicy_ScanAction" json:"action,omitempty"`
}

func (x *ScanPolicy) Reset() {
	*x = ScanPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanPolicy) ProtoMessage() {}

func (x *ScanPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanPolicy.ProtoReflect.Descriptor instead.
func (*ScanPolicy) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{24}
}

func (x *ScanPolicy) GetTrigger() ScanPolicy_ScanTrigger {
	if x != nil {
		return x.Trigger
	}
	return ScanPolicy_SCAN_TRIGGER_NONE
}

func (x *ScanPolicy) GetAction() ScanPolicy_ScanAction {
	if x != nil {
		return x.Action
	}
	return ScanPolicy_SCAN_ACTION_NONE
}

// IoThrottle defines IO throttle limits for a volume
// read_iops : maximum read iops this volume is allowed
// write_iops : maximum write iops this volume is allowed
// read_bw_mbytes  : maximum read bandwidth this volume is allowed in MegaBytes
// write_bw_mbytes : maximum write bandwidth this volume is allowed in MegaBytes
type IoThrottle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadIops      uint32 `protobuf:"varint,1,opt,name=read_iops,json=readIops,proto3" json:"read_iops,omitempty"`
	WriteIops     uint32 `protobuf:"varint,2,opt,name=write_iops,json=writeIops,proto3" json:"write_iops,omitempty"`
	ReadBwMbytes  uint32 `protobuf:"varint,3,opt,name=read_bw_mbytes,json=readBwMbytes,proto3" json:"read_bw_mbytes,omitempty"`
	WriteBwMbytes uint32 `protobuf:"varint,4,opt,name=write_bw_mbytes,json=writeBwMbytes,proto3" json:"write_bw_mbytes,omitempty"`
}

func (x *IoThrottle) Reset() {
	*x = IoThrottle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IoThrottle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IoThrottle) ProtoMessage() {}

func (x *IoThrottle) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IoThrottle.ProtoReflect.Descriptor instead.
func (*IoThrottle) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{25}
}

func (x *IoThrottle) GetReadIops() uint32 {
	if x != nil {
		return x.ReadIops
	}
	return 0
}

func (x *IoThrottle) GetWriteIops() uint32 {
	if x != nil {
		return x.WriteIops
	}
	return 0
}

func (x *IoThrottle) GetReadBwMbytes() uint32 {
	if x != nil {
		return x.ReadBwMbytes
	}
	return 0
}

func (x *IoThrottle) GetWriteBwMbytes() uint32 {
	if x != nil {
		return x.WriteBwMbytes
	}
	return 0
}

// VolumeSpec has the properties needed to create a volume.
type VolumeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ephemeral storage
	Ephemeral bool `protobuf:"varint,1,opt,name=ephemeral,proto3" json:"ephemeral,omitempty"`
	// Size specifies the thin provisioned volume size in bytes
	Size uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// Format specifies the filesystem for this volume.
	Format FSType `protobuf:"varint,3,opt,name=format,proto3,enum=openstorage.api.FSType" json:"format,omitempty"`
	// BlockSize for the filesystem.
	BlockSize int64 `protobuf:"varint,4,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	// HaLevel specifies the number of copies of data.
	HaLevel int64 `protobuf:"varint,5,opt,name=ha_level,json=haLevel,proto3" json:"ha_level,omitempty"`
	// Cos specifies the relative class of service.
	Cos CosType `protobuf:"varint,6,opt,name=cos,proto3,enum=openstorage.api.CosType" json:"cos,omitempty"`
	// IoProfile provides a hint about application using this volume.
	IoProfile IoProfile `protobuf:"varint,7,opt,name=io_profile,json=ioProfile,proto3,enum=openstorage.api.IoProfile" json:"io_profile,omitempty"`
	// Dedupe specifies if the volume data is to be de-duplicated.
	Dedupe bool `protobuf:"varint,8,opt,name=dedupe,proto3" json:"dedupe,omitempty"`
	// SnapshotInterval in minutes, set to 0 to disable snapshots
	SnapshotInterval uint32 `protobuf:"varint,9,opt,name=snapshot_interval,json=snapshotInterval,proto3" json:"snapshot_interval,omitempty"`
	// (deprecated, do not use) VolumeLabels configuration labels
	VolumeLabels map[string]string `protobuf:"bytes,10,rep,name=volume_labels,json=volumeLabels,proto3" json:"volume_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Shared is true if this volume can be concurrently accessed by multiple users.
	Shared bool `protobuf:"varint,11,opt,name=shared,proto3" json:"shared,omitempty"`
	// ReplicaSet is the desired set of nodes for the volume data.
	ReplicaSet *ReplicaSet `protobuf:"bytes,12,opt,name=replica_set,json=replicaSet,proto3" json:"replica_set,omitempty"`
	// Aggregation level Specifies the number of parts the volume can be aggregated from.
	AggregationLevel uint32 `protobuf:"varint,13,opt,name=aggregation_level,json=aggregationLevel,proto3" json:"aggregation_level,omitempty"`
	// Encrypted is true if this volume will be cryptographically secured.
	Encrypted bool `protobuf:"varint,14,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	// Passphrase for an encrypted volume
	Passphrase string `protobuf:"bytes,15,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	// SnapshotSchedule a well known string that specifies when snapshots should be taken.
	SnapshotSchedule string `protobuf:"bytes,16,opt,name=snapshot_schedule,json=snapshotSchedule,proto3" json:"snapshot_schedule,omitempty"`
	// Scale allows autocreation of volumes.
	Scale uint32 `protobuf:"varint,17,opt,name=scale,proto3" json:"scale,omitempty"`
	// Sticky volumes cannot be deleted until the flag is removed.
	Sticky bool `protobuf:"varint,18,opt,name=sticky,proto3" json:"sticky,omitempty"`
	// Group identifies a consistency group
	Group *Group `protobuf:"bytes,21,opt,name=group,proto3" json:"group,omitempty"`
	// GroupEnforced is true if consistency group creation is enforced.
	GroupEnforced bool `protobuf:"varint,22,opt,name=group_enforced,json=groupEnforced,proto3" json:"group_enforced,omitempty"`
	// Compressed is true if this volume is to be compressed.
	Compressed bool `protobuf:"varint,23,opt,name=compressed,proto3" json:"compressed,omitempty"`
	// Cascaded is true if this volume can be populated on any node from an external source.
	Cascaded bool `protobuf:"varint,24,opt,name=cascaded,proto3" json:"cascaded,omitempty"`
	// Journal is true if data for the volume goes into the journal.
	Journal bool `protobuf:"varint,25,opt,name=journal,proto3" json:"journal,omitempty"`
	// Sharedv4 is true if this volume can be accessed via sharedv4.
	Sharedv4 bool `protobuf:"varint,26,opt,name=sharedv4,proto3" json:"sharedv4,omitempty"`
	// QueueDepth defines the desired block device queue depth
	QueueDepth uint32 `protobuf:"varint,27,opt,name=queue_depth,json=queueDepth,proto3" json:"queue_depth,omitempty"`
	// Use to force a file system type which is not recommended.
	// The driver may still refuse to use the file system type.
	ForceUnsupportedFsType bool `protobuf:"varint,28,opt,name=force_unsupported_fs_type,json=forceUnsupportedFsType,proto3" json:"force_unsupported_fs_type,omitempty"`
	// Nodiscard specifies if the volume will be mounted with discard support disabled.
	// i.e. FS will not release allocated blocks back to the backing storage pool.
	Nodiscard bool `protobuf:"varint,29,opt,name=nodiscard,proto3" json:"nodiscard,omitempty"`
	// IoStrategy preferred strategy for I/O.
	IoStrategy *IoStrategy `protobuf:"bytes,30,opt,name=io_strategy,json=ioStrategy,proto3" json:"io_strategy,omitempty"`
	// PlacementStrategy specifies a spec to indicate where to place the volume.
	PlacementStrategy *VolumePlacementStrategy `protobuf:"bytes,31,opt,name=placement_strategy,json=placementStrategy,proto3" json:"placement_strategy,omitempty"`
	// StoragePolicy if applied/specified while creating volume
	StoragePolicy string `protobuf:"bytes,32,opt,name=storage_policy,json=storagePolicy,proto3" json:"storage_policy,omitempty"`
	// Ownership
	Ownership *Ownership `protobuf:"bytes,33,opt,name=ownership,proto3" json:"ownership,omitempty"`
	// ExportSpec defines how the volume should be exported.
	ExportSpec *ExportSpec `protobuf:"bytes,34,opt,name=export_spec,json=exportSpec,proto3" json:"export_spec,omitempty"`
	// fastpath extensions
	FpPreference bool `protobuf:"varint,35,opt,name=fp_preference,json=fpPreference,proto3" json:"fp_preference,omitempty"`
	// Xattr specifies implementation specific volume attributes
	Xattr Xattr_Value `protobuf:"varint,36,opt,name=xattr,proto3,enum=openstorage.api.Xattr_Value" json:"xattr,omitempty"`
	// ScanPolicy specifies the filesystem check policy
	ScanPolicy *ScanPolicy `protobuf:"bytes,37,opt,name=scan_policy,json=scanPolicy,proto3" json:"scan_policy,omitempty"`
	// MountOptions defines the options that will be used while mounting this volume
	MountOptions *MountOptions `protobuf:"bytes,38,opt,name=mount_options,json=mountOptions,proto3" json:"mount_options,omitempty"`
	// Sharedv4MountOptions defines the options that will be used while mounting a sharedv4 volume
	// from a node where the volume replica does not exist
	Sharedv4MountOptions *MountOptions `protobuf:"bytes,39,opt,name=sharedv4_mount_options,json=sharedv4MountOptions,proto3" json:"sharedv4_mount_options,omitempty"`
	// Proxy_write if true, per volume proxy write replication enabled
	ProxyWrite bool `protobuf:"varint,40,opt,name=proxy_write,json=proxyWrite,proto3" json:"proxy_write,omitempty"`
	// ProxySpec indicates that this volume is used for proxying an external data source
	ProxySpec *ProxySpec `protobuf:"bytes,41,opt,name=proxy_spec,json=proxySpec,proto3" json:"proxy_spec,omitempty"`
	// Sharedv4ServiceSpec specifies a spec for configuring a service for a sharedv4 volume
	Sharedv4ServiceSpec *Sharedv4ServiceSpec `protobuf:"bytes,42,opt,name=sharedv4_service_spec,json=sharedv4ServiceSpec,proto3" json:"sharedv4_service_spec,omitempty"`
	// Sharedv4Spec specifies common properties of sharedv4 and sharedv4 service volumes
	Sharedv4Spec *Sharedv4Spec `protobuf:"bytes,43,opt,name=sharedv4_spec,json=sharedv4Spec,proto3" json:"sharedv4_spec,omitempty"`
	// Autofstrim indicates that fstrim would be run on this volume automatically, without user intervention
	AutoFstrim bool `protobuf:"varint,44,opt,name=auto_fstrim,json=autoFstrim,proto3" json:"auto_fstrim,omitempty"`
	// IoThrottle specifies maximum io(iops/bandwidth) this volume is restricted to
	IoThrottle *IoThrottle `protobuf:"bytes,45,opt,name=io_throttle,json=ioThrottle,proto3" json:"io_throttle,omitempty"`
	// NumberOfChunks indicates how many chunks must be created, 0 and 1 both mean 1
	NumberOfChunks uint32 `protobuf:"varint,46,opt,name=number_of_chunks,json=numberOfChunks,proto3" json:"number_of_chunks,omitempty"`
	// Enable readahead for the volume
	Readahead bool `protobuf:"varint,47,opt,name=readahead,proto3" json:"readahead,omitempty"`
	// TopologyRequirement topology requirement for this volume
	TopologyRequirement *TopologyRequirement `protobuf:"bytes,48,opt,name=topology_requirement,json=topologyRequirement,proto3" json:"topology_requirement,omitempty"`
	// winshare is true if this volume can be accessed from windows pods.
	Winshare bool `protobuf:"varint,49,opt,name=winshare,proto3" json:"winshare,omitempty"`
}

func (x *VolumeSpec) Reset() {
	*x = VolumeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSpec) ProtoMessage() {}

func (x *VolumeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSpec.ProtoReflect.Descriptor instead.
func (*VolumeSpec) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{26}
}

func (x *VolumeSpec) GetEphemeral() bool {
	if x != nil {
		return x.Ephemeral
	}
	return false
}

func (x *VolumeSpec) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VolumeSpec) GetFormat() FSType {
	if x != nil {
		return x.Format
	}
	return FSType_FS_TYPE_NONE
}

func (x *VolumeSpec) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *VolumeSpec) GetHaLevel() int64 {
	if x != nil {
		return x.HaLevel
	}
	return 0
}

func (x *VolumeSpec) GetCos() CosType {
	if x != nil {
		return x.Cos
	}
	return CosType_NONE
}

func (x *VolumeSpec) GetIoProfile() IoProfile {
	if x != nil {
		return x.IoProfile
	}
	return IoProfile_IO_PROFILE_SEQUENTIAL
}

func (x *VolumeSpec) GetDedupe() bool {
	if x != nil {
		return x.Dedupe
	}
	return false
}

func (x *VolumeSpec) GetSnapshotInterval() uint32 {
	if x != nil {
		return x.SnapshotInterval
	}
	return 0
}

func (x *VolumeSpec) GetVolumeLabels() map[string]string {
	if x != nil {
		return x.VolumeLabels
	}
	return nil
}

func (x *VolumeSpec) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

func (x *VolumeSpec) GetReplicaSet() *ReplicaSet {
	if x != nil {
		return x.ReplicaSet
	}
	return nil
}

func (x *VolumeSpec) GetAggregationLevel() uint32 {
	if x != nil {
		return x.AggregationLevel
	}
	return 0
}

func (x *VolumeSpec) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

func (x *VolumeSpec) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

func (x *VolumeSpec) GetSnapshotSchedule() string {
	if x != nil {
		return x.SnapshotSchedule
	}
	return ""
}

func (x *VolumeSpec) GetScale() uint32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *VolumeSpec) GetSticky() bool {
	if x != nil {
		return x.Sticky
	}
	return false
}

func (x *VolumeSpec) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *VolumeSpec) GetGroupEnforced() bool {
	if x != nil {
		return x.GroupEnforced
	}
	return false
}

func (x *VolumeSpec) GetCompressed() bool {
	if x != nil {
		return x.Compressed
	}
	return false
}

func (x *VolumeSpec) GetCascaded() bool {
	if x != nil {
		return x.Cascaded
	}
	return false
}

func (x *VolumeSpec) GetJournal() bool {
	if x != nil {
		return x.Journal
	}
	return false
}

func (x *VolumeSpec) GetSharedv4() bool {
	if x != nil {
		return x.Sharedv4
	}
	return false
}

func (x *VolumeSpec) GetQueueDepth() uint32 {
	if x != nil {
		return x.QueueDepth
	}
	return 0
}

func (x *VolumeSpec) GetForceUnsupportedFsType() bool {
	if x != nil {
		return x.ForceUnsupportedFsType
	}
	return false
}

func (x *VolumeSpec) GetNodiscard() bool {
	if x != nil {
		return x.Nodiscard
	}
	return false
}

func (x *VolumeSpec) GetIoStrategy() *IoStrategy {
	if x != nil {
		return x.IoStrategy
	}
	return nil
}

func (x *VolumeSpec) GetPlacementStrategy() *VolumePlacementStrategy {
	if x != nil {
		return x.PlacementStrategy
	}
	return nil
}

func (x *VolumeSpec) GetStoragePolicy() string {
	if x != nil {
		return x.StoragePolicy
	}
	return ""
}

func (x *VolumeSpec) GetOwnership() *Ownership {
	if x != nil {
		return x.Ownership
	}
	return nil
}

func (x *VolumeSpec) GetExportSpec() *ExportSpec {
	if x != nil {
		return x.ExportSpec
	}
	return nil
}

func (x *VolumeSpec) GetFpPreference() bool {
	if x != nil {
		return x.FpPreference
	}
	return false
}

func (x *VolumeSpec) GetXattr() Xattr_Value {
	if x != nil {
		return x.Xattr
	}
	return Xattr_UNSPECIFIED
}

func (x *VolumeSpec) GetScanPolicy() *ScanPolicy {
	if x != nil {
		return x.ScanPolicy
	}
	return nil
}

func (x *VolumeSpec) GetMountOptions() *MountOptions {
	if x != nil {
		return x.MountOptions
	}
	return nil
}

func (x *VolumeSpec) GetSharedv4MountOptions() *MountOptions {
	if x != nil {
		return x.Sharedv4MountOptions
	}
	return nil
}

func (x *VolumeSpec) GetProxyWrite() bool {
	if x != nil {
		return x.ProxyWrite
	}
	return false
}

func (x *VolumeSpec) GetProxySpec() *ProxySpec {
	if x != nil {
		return x.ProxySpec
	}
	return nil
}

func (x *VolumeSpec) GetSharedv4ServiceSpec() *Sharedv4ServiceSpec {
	if x != nil {
		return x.Sharedv4ServiceSpec
	}
	return nil
}

func (x *VolumeSpec) GetSharedv4Spec() *Sharedv4Spec {
	if x != nil {
		return x.Sharedv4Spec
	}
	return nil
}

func (x *VolumeSpec) GetAutoFstrim() bool {
	if x != nil {
		return x.AutoFstrim
	}
	return false
}

func (x *VolumeSpec) GetIoThrottle() *IoThrottle {
	if x != nil {
		return x.IoThrottle
	}
	return nil
}

func (x *VolumeSpec) GetNumberOfChunks() uint32 {
	if x != nil {
		return x.NumberOfChunks
	}
	return 0
}

func (x *VolumeSpec) GetReadahead() bool {
	if x != nil {
		return x.Readahead
	}
	return false
}

func (x *VolumeSpec) GetTopologyRequirement() *TopologyRequirement {
	if x != nil {
		return x.TopologyRequirement
	}
	return nil
}

func (x *VolumeSpec) GetWinshare() bool {
	if x != nil {
		return x.Winshare
	}
	return false
}

// VolumeSpecUpdate provides a method to set any of the VolumeSpec of an existing volume
type VolumeSpecUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size specifies the thin provisioned volume size in bytes
	//
	// Types that are assignable to SizeOpt:
	//	*VolumeSpecUpdate_Size
	SizeOpt isVolumeSpecUpdate_SizeOpt `protobuf_oneof:"size_opt"`
	// HaLevel specifies the number of copies of data.
	//
	// Types that are assignable to HaLevelOpt:
	//	*VolumeSpecUpdate_HaLevel
	HaLevelOpt isVolumeSpecUpdate_HaLevelOpt `protobuf_oneof:"ha_level_opt"`
	// Cos specifies the relative class of service.
	//
	// Types that are assignable to CosOpt:
	//	*VolumeSpecUpdate_Cos
	CosOpt isVolumeSpecUpdate_CosOpt `protobuf_oneof:"cos_opt"`
	// IoProfile provides a hint about application using this volume.
	//
	// Types that are assignable to IoProfileOpt:
	//	*VolumeSpecUpdate_IoProfile
	IoProfileOpt isVolumeSpecUpdate_IoProfileOpt `protobuf_oneof:"io_profile_opt"`
	// Dedupe specifies if the volume data is to be de-duplicated.
	//
	// Types that are assignable to DedupeOpt:
	//	*VolumeSpecUpdate_Dedupe
	DedupeOpt isVolumeSpecUpdate_DedupeOpt `protobuf_oneof:"dedupe_opt"`
	// SnapshotInterval in minutes, set to 0 to disable snapshots
	//
	// Types that are assignable to SnapshotIntervalOpt:
	//	*VolumeSpecUpdate_SnapshotInterval
	SnapshotIntervalOpt isVolumeSpecUpdate_SnapshotIntervalOpt `protobuf_oneof:"snapshot_interval_opt"`
	// Shared is true if this volume can be remotely accessed.
	//
	// Types that are assignable to SharedOpt:
	//	*VolumeSpecUpdate_Shared
	SharedOpt isVolumeSpecUpdate_SharedOpt `protobuf_oneof:"shared_opt"`
	// ReplicaSet is the desired set of nodes for the volume data.
	ReplicaSet *ReplicaSet `protobuf:"bytes,12,opt,name=replica_set,json=replicaSet,proto3" json:"replica_set,omitempty"`
	// Passphrase for an encrypted volume
	//
	// Types that are assignable to PassphraseOpt:
	//	*VolumeSpecUpdate_Passphrase
	PassphraseOpt isVolumeSpecUpdate_PassphraseOpt `protobuf_oneof:"passphrase_opt"`
	// SnapshotSchedule a well known string that specifies when snapshots should be taken.
	//
	// Types that are assignable to SnapshotScheduleOpt:
	//	*VolumeSpecUpdate_SnapshotSchedule
	SnapshotScheduleOpt isVolumeSpecUpdate_SnapshotScheduleOpt `protobuf_oneof:"snapshot_schedule_opt"`
	// Scale allows autocreation of volumes.
	//
	// Types that are assignable to ScaleOpt:
	//	*VolumeSpecUpdate_Scale
	ScaleOpt isVolumeSpecUpdate_ScaleOpt `protobuf_oneof:"scale_opt"`
	// Sticky volumes cannot be deleted until the flag is removed.
	//
	// Types that are assignable to StickyOpt:
	//	*VolumeSpecUpdate_Sticky
	StickyOpt isVolumeSpecUpdate_StickyOpt `protobuf_oneof:"sticky_opt"`
	// Group identifies a consistency group
	//
	// Types that are assignable to GroupOpt:
	//	*VolumeSpecUpdate_Group
	GroupOpt isVolumeSpecUpdate_GroupOpt `protobuf_oneof:"group_opt"`
	// Journal is true if data for the volume goes into the journal.
	//
	// Types that are assignable to JournalOpt:
	//	*VolumeSpecUpdate_Journal
	JournalOpt isVolumeSpecUpdate_JournalOpt `protobuf_oneof:"journal_opt"`
	// Sharedv4 is true if this volume can be accessed via sharedv4.
	//
	// Types that are assignable to Sharedv4Opt:
	//	*VolumeSpecUpdate_Sharedv4
	Sharedv4Opt isVolumeSpecUpdate_Sharedv4Opt `protobuf_oneof:"sharedv4_opt"`
	// QueueDepth defines the desired block device queue depth
	//
	// Types that are assignable to QueueDepthOpt:
	//	*VolumeSpecUpdate_QueueDepth
	QueueDepthOpt isVolumeSpecUpdate_QueueDepthOpt `protobuf_oneof:"queue_depth_opt"`
	// Ownership volume information to update. If the value of `owner` in the
	// `ownership` message is an empty string then the value of `owner` in
	// the `VolumeSpec.Ownership.owner` will not be updated.
	Ownership *Ownership `protobuf:"bytes,26,opt,name=ownership,proto3" json:"ownership,omitempty"`
	// Nodiscard specifies if the volume will be mounted with discard support disabled.
	// i.e. FS will not release allocated blocks back to the backing storage pool.
	//
	// Types that are assignable to NodiscardOpt:
	//	*VolumeSpecUpdate_Nodiscard
	NodiscardOpt isVolumeSpecUpdate_NodiscardOpt `protobuf_oneof:"nodiscard_opt"`
	// IoStrategy preferred strategy for I/O.
	IoStrategy *IoStrategy `protobuf:"bytes,28,opt,name=io_strategy,json=ioStrategy,proto3" json:"io_strategy,omitempty"`
	// ExportSpec volume export spec
	//
	// Types that are assignable to ExportSpecOpt:
	//	*VolumeSpecUpdate_ExportSpec
	ExportSpecOpt isVolumeSpecUpdate_ExportSpecOpt `protobuf_oneof:"export_spec_opt"`
	// fastpath preference
	//
	// Types that are assignable to FastpathOpt:
	//	*VolumeSpecUpdate_Fastpath
	FastpathOpt isVolumeSpecUpdate_FastpathOpt `protobuf_oneof:"fastpath_opt"`
	// Xattr specifies implementation specific volume attributes
	//
	// Types that are assignable to XattrOpt:
	//	*VolumeSpecUpdate_Xattr
	XattrOpt isVolumeSpecUpdate_XattrOpt `protobuf_oneof:"xattr_opt"`
	// scan_policy_opt defines the filesystem check policy for the volume
	//
	// Types that are assignable to ScanPolicyOpt:
	//	*VolumeSpecUpdate_ScanPolicy
	ScanPolicyOpt isVolumeSpecUpdate_ScanPolicyOpt `protobuf_oneof:"scan_policy_opt"`
	// mount_opt provides the mount time options for a volume
	//
	// Types that are assignable to MountOpt:
	//	*VolumeSpecUpdate_MountOptSpec
	MountOpt isVolumeSpecUpdate_MountOpt `protobuf_oneof:"mount_opt"`
	// sharedv4_mount_opt provides the client side mount time options for a sharedv4 volume
	//
	// Types that are assignable to Sharedv4MountOpt:
	//	*VolumeSpecUpdate_Sharedv4MountOptSpec
	Sharedv4MountOpt isVolumeSpecUpdate_Sharedv4MountOpt `protobuf_oneof:"sharedv4_mount_opt"`
	// Proxy_write is true if proxy write replication is enabled for the volume
	//
	// Types that are assignable to ProxyWriteOpt:
	//	*VolumeSpecUpdate_ProxyWrite
	ProxyWriteOpt isVolumeSpecUpdate_ProxyWriteOpt `protobuf_oneof:"proxy_write_opt"`
	// proxy_spec_opt provides the spec for a proxy volume
	//
	// Types that are assignable to ProxySpecOpt:
	//	*VolumeSpecUpdate_ProxySpec
	ProxySpecOpt isVolumeSpecUpdate_ProxySpecOpt `protobuf_oneof:"proxy_spec_opt"`
	// sharedv4_service_spec_opt provides the spec for sharedv4 volume service
	//
	// Types that are assignable to Sharedv4ServiceSpecOpt:
	//	*VolumeSpecUpdate_Sharedv4ServiceSpec
	Sharedv4ServiceSpecOpt isVolumeSpecUpdate_Sharedv4ServiceSpecOpt `protobuf_oneof:"sharedv4_service_spec_opt"`
	// Sharedv4Spec specifies common properties of sharedv4 and sharedv4 service volumes
	//
	// Types that are assignable to Sharedv4SpecOpt:
	//	*VolumeSpecUpdate_Sharedv4Spec
	Sharedv4SpecOpt isVolumeSpecUpdate_Sharedv4SpecOpt `protobuf_oneof:"sharedv4_spec_opt"`
	// Autofstrim is set to true, to enable automatic fstrim on this volume
	//
	// Types that are assignable to AutoFstrimOpt:
	//	*VolumeSpecUpdate_AutoFstrim
	AutoFstrimOpt isVolumeSpecUpdate_AutoFstrimOpt `protobuf_oneof:"auto_fstrim_opt"`
	// io_throttle_opt defines the io throttle limits for the volume
	//
	// Types that are assignable to IoThrottleOpt:
	//	*VolumeSpecUpdate_IoThrottle
	IoThrottleOpt isVolumeSpecUpdate_IoThrottleOpt `protobuf_oneof:"io_throttle_opt"`
	// Enable readahead for the volume
	//
	// Types that are assignable to ReadaheadOpt:
	//	*VolumeSpecUpdate_Readahead
	ReadaheadOpt isVolumeSpecUpdate_ReadaheadOpt `protobuf_oneof:"readahead_opt"`
	// winshare is true if this volume can be accessed from windows pods.
	//
	// Types that are assignable to WinshareOpt:
	//	*VolumeSpecUpdate_Winshare
	WinshareOpt isVolumeSpecUpdate_WinshareOpt `protobuf_oneof:"winshare_opt"`
}

func (x *VolumeSpecUpdate) Reset() {
	*x = VolumeSpecUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeSpecUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSpecUpdate) ProtoMessage() {}

func (x *VolumeSpecUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSpecUpdate.ProtoReflect.Descriptor instead.
func (*VolumeSpecUpdate) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{27}
}

func (m *VolumeSpecUpdate) GetSizeOpt() isVolumeSpecUpdate_SizeOpt {
	if m != nil {
		return m.SizeOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetSize() uint64 {
	if x, ok := x.GetSizeOpt().(*VolumeSpecUpdate_Size); ok {
		return x.Size
	}
	return 0
}

func (m *VolumeSpecUpdate) GetHaLevelOpt() isVolumeSpecUpdate_HaLevelOpt {
	if m != nil {
		return m.HaLevelOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetHaLevel() int64 {
	if x, ok := x.GetHaLevelOpt().(*VolumeSpecUpdate_HaLevel); ok {
		return x.HaLevel
	}
	return 0
}

func (m *VolumeSpecUpdate) GetCosOpt() isVolumeSpecUpdate_CosOpt {
	if m != nil {
		return m.CosOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetCos() CosType {
	if x, ok := x.GetCosOpt().(*VolumeSpecUpdate_Cos); ok {
		return x.Cos
	}
	return CosType_NONE
}

func (m *VolumeSpecUpdate) GetIoProfileOpt() isVolumeSpecUpdate_IoProfileOpt {
	if m != nil {
		return m.IoProfileOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetIoProfile() IoProfile {
	if x, ok := x.GetIoProfileOpt().(*VolumeSpecUpdate_IoProfile); ok {
		return x.IoProfile
	}
	return IoProfile_IO_PROFILE_SEQUENTIAL
}

func (m *VolumeSpecUpdate) GetDedupeOpt() isVolumeSpecUpdate_DedupeOpt {
	if m != nil {
		return m.DedupeOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetDedupe() bool {
	if x, ok := x.GetDedupeOpt().(*VolumeSpecUpdate_Dedupe); ok {
		return x.Dedupe
	}
	return false
}

func (m *VolumeSpecUpdate) GetSnapshotIntervalOpt() isVolumeSpecUpdate_SnapshotIntervalOpt {
	if m != nil {
		return m.SnapshotIntervalOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetSnapshotInterval() uint32 {
	if x, ok := x.GetSnapshotIntervalOpt().(*VolumeSpecUpdate_SnapshotInterval); ok {
		return x.SnapshotInterval
	}
	return 0
}

func (m *VolumeSpecUpdate) GetSharedOpt() isVolumeSpecUpdate_SharedOpt {
	if m != nil {
		return m.SharedOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetShared() bool {
	if x, ok := x.GetSharedOpt().(*VolumeSpecUpdate_Shared); ok {
		return x.Shared
	}
	return false
}

func (x *VolumeSpecUpdate) GetReplicaSet() *ReplicaSet {
	if x != nil {
		return x.ReplicaSet
	}
	return nil
}

func (m *VolumeSpecUpdate) GetPassphraseOpt() isVolumeSpecUpdate_PassphraseOpt {
	if m != nil {
		return m.PassphraseOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetPassphrase() string {
	if x, ok := x.GetPassphraseOpt().(*VolumeSpecUpdate_Passphrase); ok {
		return x.Passphrase
	}
	return ""
}

func (m *VolumeSpecUpdate) GetSnapshotScheduleOpt() isVolumeSpecUpdate_SnapshotScheduleOpt {
	if m != nil {
		return m.SnapshotScheduleOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetSnapshotSchedule() string {
	if x, ok := x.GetSnapshotScheduleOpt().(*VolumeSpecUpdate_SnapshotSchedule); ok {
		return x.SnapshotSchedule
	}
	return ""
}

func (m *VolumeSpecUpdate) GetScaleOpt() isVolumeSpecUpdate_ScaleOpt {
	if m != nil {
		return m.ScaleOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetScale() uint32 {
	if x, ok := x.GetScaleOpt().(*VolumeSpecUpdate_Scale); ok {
		return x.Scale
	}
	return 0
}

func (m *VolumeSpecUpdate) GetStickyOpt() isVolumeSpecUpdate_StickyOpt {
	if m != nil {
		return m.StickyOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetSticky() bool {
	if x, ok := x.GetStickyOpt().(*VolumeSpecUpdate_Sticky); ok {
		return x.Sticky
	}
	return false
}

func (m *VolumeSpecUpdate) GetGroupOpt() isVolumeSpecUpdate_GroupOpt {
	if m != nil {
		return m.GroupOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetGroup() *Group {
	if x, ok := x.GetGroupOpt().(*VolumeSpecUpdate_Group); ok {
		return x.Group
	}
	return nil
}

func (m *VolumeSpecUpdate) GetJournalOpt() isVolumeSpecUpdate_JournalOpt {
	if m != nil {
		return m.JournalOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetJournal() bool {
	if x, ok := x.GetJournalOpt().(*VolumeSpecUpdate_Journal); ok {
		return x.Journal
	}
	return false
}

func (m *VolumeSpecUpdate) GetSharedv4Opt() isVolumeSpecUpdate_Sharedv4Opt {
	if m != nil {
		return m.Sharedv4Opt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetSharedv4() bool {
	if x, ok := x.GetSharedv4Opt().(*VolumeSpecUpdate_Sharedv4); ok {
		return x.Sharedv4
	}
	return false
}

func (m *VolumeSpecUpdate) GetQueueDepthOpt() isVolumeSpecUpdate_QueueDepthOpt {
	if m != nil {
		return m.QueueDepthOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetQueueDepth() uint32 {
	if x, ok := x.GetQueueDepthOpt().(*VolumeSpecUpdate_QueueDepth); ok {
		return x.QueueDepth
	}
	return 0
}

func (x *VolumeSpecUpdate) GetOwnership() *Ownership {
	if x != nil {
		return x.Ownership
	}
	return nil
}

func (m *VolumeSpecUpdate) GetNodiscardOpt() isVolumeSpecUpdate_NodiscardOpt {
	if m != nil {
		return m.NodiscardOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetNodiscard() bool {
	if x, ok := x.GetNodiscardOpt().(*VolumeSpecUpdate_Nodiscard); ok {
		return x.Nodiscard
	}
	return false
}

func (x *VolumeSpecUpdate) GetIoStrategy() *IoStrategy {
	if x != nil {
		return x.IoStrategy
	}
	return nil
}

func (m *VolumeSpecUpdate) GetExportSpecOpt() isVolumeSpecUpdate_ExportSpecOpt {
	if m != nil {
		return m.ExportSpecOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetExportSpec() *ExportSpec {
	if x, ok := x.GetExportSpecOpt().(*VolumeSpecUpdate_ExportSpec); ok {
		return x.ExportSpec
	}
	return nil
}

func (m *VolumeSpecUpdate) GetFastpathOpt() isVolumeSpecUpdate_FastpathOpt {
	if m != nil {
		return m.FastpathOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetFastpath() bool {
	if x, ok := x.GetFastpathOpt().(*VolumeSpecUpdate_Fastpath); ok {
		return x.Fastpath
	}
	return false
}

func (m *VolumeSpecUpdate) GetXattrOpt() isVolumeSpecUpdate_XattrOpt {
	if m != nil {
		return m.XattrOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetXattr() Xattr_Value {
	if x, ok := x.GetXattrOpt().(*VolumeSpecUpdate_Xattr); ok {
		return x.Xattr
	}
	return Xattr_UNSPECIFIED
}

func (m *VolumeSpecUpdate) GetScanPolicyOpt() isVolumeSpecUpdate_ScanPolicyOpt {
	if m != nil {
		return m.ScanPolicyOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetScanPolicy() *ScanPolicy {
	if x, ok := x.GetScanPolicyOpt().(*VolumeSpecUpdate_ScanPolicy); ok {
		return x.ScanPolicy
	}
	return nil
}

func (m *VolumeSpecUpdate) GetMountOpt() isVolumeSpecUpdate_MountOpt {
	if m != nil {
		return m.MountOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetMountOptSpec() *MountOptions {
	if x, ok := x.GetMountOpt().(*VolumeSpecUpdate_MountOptSpec); ok {
		return x.MountOptSpec
	}
	return nil
}

func (m *VolumeSpecUpdate) GetSharedv4MountOpt() isVolumeSpecUpdate_Sharedv4MountOpt {
	if m != nil {
		return m.Sharedv4MountOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetSharedv4MountOptSpec() *MountOptions {
	if x, ok := x.GetSharedv4MountOpt().(*VolumeSpecUpdate_Sharedv4MountOptSpec); ok {
		return x.Sharedv4MountOptSpec
	}
	return nil
}

func (m *VolumeSpecUpdate) GetProxyWriteOpt() isVolumeSpecUpdate_ProxyWriteOpt {
	if m != nil {
		return m.ProxyWriteOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetProxyWrite() bool {
	if x, ok := x.GetProxyWriteOpt().(*VolumeSpecUpdate_ProxyWrite); ok {
		return x.ProxyWrite
	}
	return false
}

func (m *VolumeSpecUpdate) GetProxySpecOpt() isVolumeSpecUpdate_ProxySpecOpt {
	if m != nil {
		return m.ProxySpecOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetProxySpec() *ProxySpec {
	if x, ok := x.GetProxySpecOpt().(*VolumeSpecUpdate_ProxySpec); ok {
		return x.ProxySpec
	}
	return nil
}

func (m *VolumeSpecUpdate) GetSharedv4ServiceSpecOpt() isVolumeSpecUpdate_Sharedv4ServiceSpecOpt {
	if m != nil {
		return m.Sharedv4ServiceSpecOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetSharedv4ServiceSpec() *Sharedv4ServiceSpec {
	if x, ok := x.GetSharedv4ServiceSpecOpt().(*VolumeSpecUpdate_Sharedv4ServiceSpec); ok {
		return x.Sharedv4ServiceSpec
	}
	return nil
}

func (m *VolumeSpecUpdate) GetSharedv4SpecOpt() isVolumeSpecUpdate_Sharedv4SpecOpt {
	if m != nil {
		return m.Sharedv4SpecOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetSharedv4Spec() *Sharedv4Spec {
	if x, ok := x.GetSharedv4SpecOpt().(*VolumeSpecUpdate_Sharedv4Spec); ok {
		return x.Sharedv4Spec
	}
	return nil
}

func (m *VolumeSpecUpdate) GetAutoFstrimOpt() isVolumeSpecUpdate_AutoFstrimOpt {
	if m != nil {
		return m.AutoFstrimOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetAutoFstrim() bool {
	if x, ok := x.GetAutoFstrimOpt().(*VolumeSpecUpdate_AutoFstrim); ok {
		return x.AutoFstrim
	}
	return false
}

func (m *VolumeSpecUpdate) GetIoThrottleOpt() isVolumeSpecUpdate_IoThrottleOpt {
	if m != nil {
		return m.IoThrottleOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetIoThrottle() *IoThrottle {
	if x, ok := x.GetIoThrottleOpt().(*VolumeSpecUpdate_IoThrottle); ok {
		return x.IoThrottle
	}
	return nil
}

func (m *VolumeSpecUpdate) GetReadaheadOpt() isVolumeSpecUpdate_ReadaheadOpt {
	if m != nil {
		return m.ReadaheadOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetReadahead() bool {
	if x, ok := x.GetReadaheadOpt().(*VolumeSpecUpdate_Readahead); ok {
		return x.Readahead
	}
	return false
}

func (m *VolumeSpecUpdate) GetWinshareOpt() isVolumeSpecUpdate_WinshareOpt {
	if m != nil {
		return m.WinshareOpt
	}
	return nil
}

func (x *VolumeSpecUpdate) GetWinshare() bool {
	if x, ok := x.GetWinshareOpt().(*VolumeSpecUpdate_Winshare); ok {
		return x.Winshare
	}
	return false
}

type isVolumeSpecUpdate_SizeOpt interface {
	isVolumeSpecUpdate_SizeOpt()
}

type VolumeSpecUpdate_Size struct {
	Size uint64 `protobuf:"varint,2,opt,name=size,proto3,oneof"`
}

func (*VolumeSpecUpdate_Size) isVolumeSpecUpdate_SizeOpt() {}

type isVolumeSpecUpdate_HaLevelOpt interface {
	isVolumeSpecUpdate_HaLevelOpt()
}

type VolumeSpecUpdate_HaLevel struct {
	HaLevel int64 `protobuf:"varint,5,opt,name=ha_level,json=haLevel,proto3,oneof"`
}

func (*VolumeSpecUpdate_HaLevel) isVolumeSpecUpdate_HaLevelOpt() {}

type isVolumeSpecUpdate_CosOpt interface {
	isVolumeSpecUpdate_CosOpt()
}

type VolumeSpecUpdate_Cos struct {
	Cos CosType `protobuf:"varint,6,opt,name=cos,proto3,enum=openstorage.api.CosType,oneof"`
}

func (*VolumeSpecUpdate_Cos) isVolumeSpecUpdate_CosOpt() {}

type isVolumeSpecUpdate_IoProfileOpt interface {
	isVolumeSpecUpdate_IoProfileOpt()
}

type VolumeSpecUpdate_IoProfile struct {
	IoProfile IoProfile `protobuf:"varint,7,opt,name=io_profile,json=ioProfile,proto3,enum=openstorage.api.IoProfile,oneof"`
}

func (*VolumeSpecUpdate_IoProfile) isVolumeSpecUpdate_IoProfileOpt() {}

type isVolumeSpecUpdate_DedupeOpt interface {
	isVolumeSpecUpdate_DedupeOpt()
}

type VolumeSpecUpdate_Dedupe struct {
	Dedupe bool `protobuf:"varint,8,opt,name=dedupe,proto3,oneof"`
}

func (*VolumeSpecUpdate_Dedupe) isVolumeSpecUpdate_DedupeOpt() {}

type isVolumeSpecUpdate_SnapshotIntervalOpt interface {
	isVolumeSpecUpdate_SnapshotIntervalOpt()
}

type VolumeSpecUpdate_SnapshotInterval struct {
	SnapshotInterval uint32 `protobuf:"varint,9,opt,name=snapshot_interval,json=snapshotInterval,proto3,oneof"`
}

func (*VolumeSpecUpdate_SnapshotInterval) isVolumeSpecUpdate_SnapshotIntervalOpt() {}

type isVolumeSpecUpdate_SharedOpt interface {
	isVolumeSpecUpdate_SharedOpt()
}

type VolumeSpecUpdate_Shared struct {
	Shared bool `protobuf:"varint,11,opt,name=shared,proto3,oneof"`
}

func (*VolumeSpecUpdate_Shared) isVolumeSpecUpdate_SharedOpt() {}

type isVolumeSpecUpdate_PassphraseOpt interface {
	isVolumeSpecUpdate_PassphraseOpt()
}

type VolumeSpecUpdate_Passphrase struct {
	Passphrase string `protobuf:"bytes,15,opt,name=passphrase,proto3,oneof"`
}

func (*VolumeSpecUpdate_Passphrase) isVolumeSpecUpdate_PassphraseOpt() {}

type isVolumeSpecUpdate_SnapshotScheduleOpt interface {
	isVolumeSpecUpdate_SnapshotScheduleOpt()
}

type VolumeSpecUpdate_SnapshotSchedule struct {
	SnapshotSchedule string `protobuf:"bytes,16,opt,name=snapshot_schedule,json=snapshotSchedule,proto3,oneof"`
}

func (*VolumeSpecUpdate_SnapshotSchedule) isVolumeSpecUpdate_SnapshotScheduleOpt() {}

type isVolumeSpecUpdate_ScaleOpt interface {
	isVolumeSpecUpdate_ScaleOpt()
}

type VolumeSpecUpdate_Scale struct {
	Scale uint32 `protobuf:"varint,17,opt,name=scale,proto3,oneof"`
}

func (*VolumeSpecUpdate_Scale) isVolumeSpecUpdate_ScaleOpt() {}

type isVolumeSpecUpdate_StickyOpt interface {
	isVolumeSpecUpdate_StickyOpt()
}

type VolumeSpecUpdate_Sticky struct {
	Sticky bool `protobuf:"varint,18,opt,name=sticky,proto3,oneof"`
}

func (*VolumeSpecUpdate_Sticky) isVolumeSpecUpdate_StickyOpt() {}

type isVolumeSpecUpdate_GroupOpt interface {
	isVolumeSpecUpdate_GroupOpt()
}

type VolumeSpecUpdate_Group struct {
	Group *Group `protobuf:"bytes,19,opt,name=group,proto3,oneof"`
}

func (*VolumeSpecUpdate_Group) isVolumeSpecUpdate_GroupOpt() {}

type isVolumeSpecUpdate_JournalOpt interface {
	isVolumeSpecUpdate_JournalOpt()
}

type VolumeSpecUpdate_Journal struct {
	Journal bool `protobuf:"varint,23,opt,name=journal,proto3,oneof"`
}

func (*VolumeSpecUpdate_Journal) isVolumeSpecUpdate_JournalOpt() {}

type isVolumeSpecUpdate_Sharedv4Opt interface {
	isVolumeSpecUpdate_Sharedv4Opt()
}

type VolumeSpecUpdate_Sharedv4 struct {
	Sharedv4 bool `protobuf:"varint,24,opt,name=sharedv4,proto3,oneof"`
}

func (*VolumeSpecUpdate_Sharedv4) isVolumeSpecUpdate_Sharedv4Opt() {}

type isVolumeSpecUpdate_QueueDepthOpt interface {
	isVolumeSpecUpdate_QueueDepthOpt()
}

type VolumeSpecUpdate_QueueDepth struct {
	QueueDepth uint32 `protobuf:"varint,25,opt,name=queue_depth,json=queueDepth,proto3,oneof"`
}

func (*VolumeSpecUpdate_QueueDepth) isVolumeSpecUpdate_QueueDepthOpt() {}

type isVolumeSpecUpdate_NodiscardOpt interface {
	isVolumeSpecUpdate_NodiscardOpt()
}

type VolumeSpecUpdate_Nodiscard struct {
	Nodiscard bool `protobuf:"varint,27,opt,name=nodiscard,proto3,oneof"`
}

func (*VolumeSpecUpdate_Nodiscard) isVolumeSpecUpdate_NodiscardOpt() {}

type isVolumeSpecUpdate_ExportSpecOpt interface {
	isVolumeSpecUpdate_ExportSpecOpt()
}

type VolumeSpecUpdate_ExportSpec struct {
	ExportSpec *ExportSpec `protobuf:"bytes,29,opt,name=export_spec,json=exportSpec,proto3,oneof"`
}

func (*VolumeSpecUpdate_ExportSpec) isVolumeSpecUpdate_ExportSpecOpt() {}

type isVolumeSpecUpdate_FastpathOpt interface {
	isVolumeSpecUpdate_FastpathOpt()
}

type VolumeSpecUpdate_Fastpath struct {
	Fastpath bool `protobuf:"varint,30,opt,name=fastpath,proto3,oneof"`
}

func (*VolumeSpecUpdate_Fastpath) isVolumeSpecUpdate_FastpathOpt() {}

type isVolumeSpecUpdate_XattrOpt interface {
	isVolumeSpecUpdate_XattrOpt()
}

type VolumeSpecUpdate_Xattr struct {
	Xattr Xattr_Value `protobuf:"varint,31,opt,name=xattr,proto3,enum=openstorage.api.Xattr_Value,oneof"`
}

func (*VolumeSpecUpdate_Xattr) isVolumeSpecUpdate_XattrOpt() {}

type isVolumeSpecUpdate_ScanPolicyOpt interface {
	isVolumeSpecUpdate_ScanPolicyOpt()
}

type VolumeSpecUpdate_ScanPolicy struct {
	ScanPolicy *ScanPolicy `protobuf:"bytes,32,opt,name=scan_policy,json=scanPolicy,proto3,oneof"`
}

func (*VolumeSpecUpdate_ScanPolicy) isVolumeSpecUpdate_ScanPolicyOpt() {}

type isVolumeSpecUpdate_MountOpt interface {
	isVolumeSpecUpdate_MountOpt()
}

type VolumeSpecUpdate_MountOptSpec struct {
	MountOptSpec *MountOptions `protobuf:"bytes,33,opt,name=mount_opt_spec,json=mountOptSpec,proto3,oneof"`
}

func (*VolumeSpecUpdate_MountOptSpec) isVolumeSpecUpdate_MountOpt() {}

type isVolumeSpecUpdate_Sharedv4MountOpt interface {
	isVolumeSpecUpdate_Sharedv4MountOpt()
}

type VolumeSpecUpdate_Sharedv4MountOptSpec struct {
	Sharedv4MountOptSpec *MountOptions `protobuf:"bytes,34,opt,name=sharedv4_mount_opt_spec,json=sharedv4MountOptSpec,proto3,oneof"`
}

func (*VolumeSpecUpdate_Sharedv4MountOptSpec) isVolumeSpecUpdate_Sharedv4MountOpt() {}

type isVolumeSpecUpdate_ProxyWriteOpt interface {
	isVolumeSpecUpdate_ProxyWriteOpt()
}

type VolumeSpecUpdate_ProxyWrite struct {
	ProxyWrite bool `protobuf:"varint,35,opt,name=proxy_write,json=proxyWrite,proto3,oneof"`
}

func (*VolumeSpecUpdate_ProxyWrite) isVolumeSpecUpdate_ProxyWriteOpt() {}

type isVolumeSpecUpdate_ProxySpecOpt interface {
	isVolumeSpecUpdate_ProxySpecOpt()
}

type VolumeSpecUpdate_ProxySpec struct {
	ProxySpec *ProxySpec `protobuf:"bytes,36,opt,name=proxy_spec,json=proxySpec,proto3,oneof"`
}

func (*VolumeSpecUpdate_ProxySpec) isVolumeSpecUpdate_ProxySpecOpt() {}

type isVolumeSpecUpdate_Sharedv4ServiceSpecOpt interface {
	isVolumeSpecUpdate_Sharedv4ServiceSpecOpt()
}

type VolumeSpecUpdate_Sharedv4ServiceSpec struct {
	Sharedv4ServiceSpec *Sharedv4ServiceSpec `protobuf:"bytes,37,opt,name=sharedv4_service_spec,json=sharedv4ServiceSpec,proto3,oneof"`
}

func (*VolumeSpecUpdate_Sharedv4ServiceSpec) isVolumeSpecUpdate_Sharedv4ServiceSpecOpt() {}

type isVolumeSpecUpdate_Sharedv4SpecOpt interface {
	isVolumeSpecUpdate_Sharedv4SpecOpt()
}

type VolumeSpecUpdate_Sharedv4Spec struct {
	Sharedv4Spec *Sharedv4Spec `protobuf:"bytes,38,opt,name=sharedv4_spec,json=sharedv4Spec,proto3,oneof"`
}

func (*VolumeSpecUpdate_Sharedv4Spec) isVolumeSpecUpdate_Sharedv4SpecOpt() {}

type isVolumeSpecUpdate_AutoFstrimOpt interface {
	isVolumeSpecUpdate_AutoFstrimOpt()
}

type VolumeSpecUpdate_AutoFstrim struct {
	AutoFstrim bool `protobuf:"varint,39,opt,name=auto_fstrim,json=autoFstrim,proto3,oneof"`
}

func (*VolumeSpecUpdate_AutoFstrim) isVolumeSpecUpdate_AutoFstrimOpt() {}

type isVolumeSpecUpdate_IoThrottleOpt interface {
	isVolumeSpecUpdate_IoThrottleOpt()
}

type VolumeSpecUpdate_IoThrottle struct {
	IoThrottle *IoThrottle `protobuf:"bytes,40,opt,name=io_throttle,json=ioThrottle,proto3,oneof"`
}

func (*VolumeSpecUpdate_IoThrottle) isVolumeSpecUpdate_IoThrottleOpt() {}

type isVolumeSpecUpdate_ReadaheadOpt interface {
	isVolumeSpecUpdate_ReadaheadOpt()
}

type VolumeSpecUpdate_Readahead struct {
	Readahead bool `protobuf:"varint,41,opt,name=readahead,proto3,oneof"`
}

func (*VolumeSpecUpdate_Readahead) isVolumeSpecUpdate_ReadaheadOpt() {}

type isVolumeSpecUpdate_WinshareOpt interface {
	isVolumeSpecUpdate_WinshareOpt()
}

type VolumeSpecUpdate_Winshare struct {
	Winshare bool `protobuf:"varint,42,opt,name=winshare,proto3,oneof"`
}

func (*VolumeSpecUpdate_Winshare) isVolumeSpecUpdate_WinshareOpt() {}

// VolumeSpecPolicy provides a method to set volume storage policy
type VolumeSpecPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size specifies the thin provisioned volume size in bytes.
	// Use `size_operator` to show if this value is the min, max, or set.
	//
	// Types that are assignable to SizeOpt:
	//	*VolumeSpecPolicy_Size
	SizeOpt isVolumeSpecPolicy_SizeOpt `protobuf_oneof:"size_opt"`
	// HaLevel specifies the number of copies of data.
	// Use `ha_level_operator` to show if this value is the min, max, or set.
	//
	// Types that are assignable to HaLevelOpt:
	//	*VolumeSpecPolicy_HaLevel
	HaLevelOpt isVolumeSpecPolicy_HaLevelOpt `protobuf_oneof:"ha_level_opt"`
	// Cos specifies the relative class of service.
	//
	// Types that are assignable to CosOpt:
	//	*VolumeSpecPolicy_Cos
	CosOpt isVolumeSpecPolicy_CosOpt `protobuf_oneof:"cos_opt"`
	// IoProfile provides a hint about application using this volume.
	//
	// Types that are assignable to IoProfileOpt:
	//	*VolumeSpecPolicy_IoProfile
	IoProfileOpt isVolumeSpecPolicy_IoProfileOpt `protobuf_oneof:"io_profile_opt"`
	// Dedupe specifies if the volume data is to be de-duplicated.
	//
	// Types that are assignable to DedupeOpt:
	//	*VolumeSpecPolicy_Dedupe
	DedupeOpt isVolumeSpecPolicy_DedupeOpt `protobuf_oneof:"dedupe_opt"`
	// SnapshotInterval in minutes, set to 0 to disable snapshots
	//
	// Types that are assignable to SnapshotIntervalOpt:
	//	*VolumeSpecPolicy_SnapshotInterval
	SnapshotIntervalOpt isVolumeSpecPolicy_SnapshotIntervalOpt `protobuf_oneof:"snapshot_interval_opt"`
	// VolumeLabels configuration labels
	VolumeLabels map[string]string `protobuf:"bytes,7,rep,name=volume_labels,json=volumeLabels,proto3" json:"volume_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Shared is true if this volume can be remotely accessed.
	//
	// Types that are assignable to SharedOpt:
	//	*VolumeSpecPolicy_Shared
	SharedOpt isVolumeSpecPolicy_SharedOpt `protobuf_oneof:"shared_opt"`
	// ReplicaSet is the desired set of nodes for the volume data.
	ReplicaSet *ReplicaSet `protobuf:"bytes,9,opt,name=replica_set,json=replicaSet,proto3" json:"replica_set,omitempty"`
	// Passphrase for an encrypted volume
	//
	// Types that are assignable to PassphraseOpt:
	//	*VolumeSpecPolicy_Passphrase
	PassphraseOpt isVolumeSpecPolicy_PassphraseOpt `protobuf_oneof:"passphrase_opt"`
	// SnapshotSchedule a well known string that specifies when snapshots should be taken.
	//
	// Types that are assignable to SnapshotScheduleOpt:
	//	*VolumeSpecPolicy_SnapshotSchedule
	SnapshotScheduleOpt isVolumeSpecPolicy_SnapshotScheduleOpt `protobuf_oneof:"snapshot_schedule_opt"`
	// Scale allows autocreation of volumes.
	//
	// Types that are assignable to ScaleOpt:
	//	*VolumeSpecPolicy_Scale
	ScaleOpt isVolumeSpecPolicy_ScaleOpt `protobuf_oneof:"scale_opt"`
	// Sticky volumes cannot be deleted until the flag is removed.
	//
	// Types that are assignable to StickyOpt:
	//	*VolumeSpecPolicy_Sticky
	StickyOpt isVolumeSpecPolicy_StickyOpt `protobuf_oneof:"sticky_opt"`
	// Group identifies a consistency group
	//
	// Types that are assignable to GroupOpt:
	//	*VolumeSpecPolicy_Group
	GroupOpt isVolumeSpecPolicy_GroupOpt `protobuf_oneof:"group_opt"`
	// Journal is true if data for the volume goes into the journal.
	//
	// Types that are assignable to JournalOpt:
	//	*VolumeSpecPolicy_Journal
	JournalOpt isVolumeSpecPolicy_JournalOpt `protobuf_oneof:"journal_opt"`
	// Sharedv4 is true if this volume can be accessed via sharedv4.
	//
	// Types that are assignable to Sharedv4Opt:
	//	*VolumeSpecPolicy_Sharedv4
	Sharedv4Opt isVolumeSpecPolicy_Sharedv4Opt `protobuf_oneof:"sharedv4_opt"`
	// QueueDepth defines the desired block device queue depth
	//
	// Types that are assignable to QueueDepthOpt:
	//	*VolumeSpecPolicy_QueueDepth
	QueueDepthOpt isVolumeSpecPolicy_QueueDepthOpt `protobuf_oneof:"queue_depth_opt"`
	// Encrypted is true if this volume will be cryptographically secured.
	//
	// Types that are assignable to EncryptedOpt:
	//	*VolumeSpecPolicy_Encrypted
	EncryptedOpt isVolumeSpecPolicy_EncryptedOpt `protobuf_oneof:"encrypted_opt"`
	// Aggregation level Specifies the number of parts the volume can be aggregated from.
	//
	// Types that are assignable to AggregationLevelOpt:
	//	*VolumeSpecPolicy_AggregationLevel
	AggregationLevelOpt isVolumeSpecPolicy_AggregationLevelOpt `protobuf_oneof:"aggregation_level_opt"`
	// Operator to check size
	SizeOperator VolumeSpecPolicy_PolicyOp `protobuf:"varint,50,opt,name=size_operator,json=sizeOperator,proto3,enum=openstorage.api.VolumeSpecPolicy_PolicyOp" json:"size_operator,omitempty"`
	// Operator to check ha_level
	HaLevelOperator VolumeSpecPolicy_PolicyOp `protobuf:"varint,51,opt,name=ha_level_operator,json=haLevelOperator,proto3,enum=openstorage.api.VolumeSpecPolicy_PolicyOp" json:"ha_level_operator,omitempty"`
	// Operator to check scale
	ScaleOperator VolumeSpecPolicy_PolicyOp `protobuf:"varint,52,opt,name=scale_operator,json=scaleOperator,proto3,enum=openstorage.api.VolumeSpecPolicy_PolicyOp" json:"scale_operator,omitempty"`
	// Operator to check snapshot_interval
	SnapshotIntervalOperator VolumeSpecPolicy_PolicyOp `protobuf:"varint,53,opt,name=snapshot_interval_operator,json=snapshotIntervalOperator,proto3,enum=openstorage.api.VolumeSpecPolicy_PolicyOp" json:"snapshot_interval_operator,omitempty"`
	// Nodiscard specifies if the volume will be mounted with discard support disabled.
	// i.e. FS will not release allocated blocks back to the backing storage pool.
	//
	// Types that are assignable to NodiscardOpt:
	//	*VolumeSpecPolicy_Nodiscard
	NodiscardOpt isVolumeSpecPolicy_NodiscardOpt `protobuf_oneof:"nodiscard_opt"`
	// IoStrategy preferred strategy for I/O.
	IoStrategy *IoStrategy `protobuf:"bytes,55,opt,name=io_strategy,json=ioStrategy,proto3" json:"io_strategy,omitempty"`
	// ExportSpec preferred volume export options.
	//
	// Types that are assignable to ExportSpecOpt:
	//	*VolumeSpecPolicy_ExportSpec
	ExportSpecOpt isVolumeSpecPolicy_ExportSpecOpt `protobuf_oneof:"export_spec_opt"`
	// scan_policy_opt defines the filesystem check policy for the volume
	//
	// Types that are assignable to ScanPolicyOpt:
	//	*VolumeSpecPolicy_ScanPolicy
	ScanPolicyOpt isVolumeSpecPolicy_ScanPolicyOpt `protobuf_oneof:"scan_policy_opt"`
	// mount_opt provides the mount time options for a volume
	//
	// Types that are assignable to MountOpt:
	//	*VolumeSpecPolicy_MountOptSpec
	MountOpt isVolumeSpecPolicy_MountOpt `protobuf_oneof:"mount_opt"`
	// sharedv4_mount_opt provides the client side mount time options for a sharedv4 volume
	//
	// Types that are assignable to Sharedv4MountOpt:
	//	*VolumeSpecPolicy_Sharedv4MountOptSpec
	Sharedv4MountOpt isVolumeSpecPolicy_Sharedv4MountOpt `protobuf_oneof:"sharedv4_mount_opt"`
	// Proxy_write is true if proxy write replication is enabled for the volume
	//
	// Types that are assignable to ProxyWriteOpt:
	//	*VolumeSpecPolicy_ProxyWrite
	ProxyWriteOpt isVolumeSpecPolicy_ProxyWriteOpt `protobuf_oneof:"proxy_write_opt"`
	// proxy_spec_opt provides the spec for a proxy volume.
	//
	// Types that are assignable to ProxySpecOpt:
	//	*VolumeSpecPolicy_ProxySpec
	ProxySpecOpt isVolumeSpecPolicy_ProxySpecOpt `protobuf_oneof:"proxy_spec_opt"`
	// fastpath preference
	//
	// Types that are assignable to FastpathOpt:
	//	*VolumeSpecPolicy_Fastpath
	FastpathOpt isVolumeSpecPolicy_FastpathOpt `protobuf_oneof:"fastpath_opt"`
	// sharedv4_service_spec_opt provides the spec for sharedv4 volume service
	//
	// Types that are assignable to Sharedv4ServiceSpecOpt:
	//	*VolumeSpecPolicy_Sharedv4ServiceSpec
	Sharedv4ServiceSpecOpt isVolumeSpecPolicy_Sharedv4ServiceSpecOpt `protobuf_oneof:"sharedv4_service_spec_opt"`
	// Sharedv4Spec specifies common properties of sharedv4 and sharedv4 service volumes
	//
	// Types that are assignable to Sharedv4SpecOpt:
	//	*VolumeSpecPolicy_Sharedv4Spec
	Sharedv4SpecOpt isVolumeSpecPolicy_Sharedv4SpecOpt `protobuf_oneof:"sharedv4_spec_opt"`
	// Autofstrim is set to true, to enable automatic fstrim on this volume
	//
	// Types that are assignable to AutoFstrimOpt:
	//	*VolumeSpecPolicy_AutoFstrim
	AutoFstrimOpt isVolumeSpecPolicy_AutoFstrimOpt `protobuf_oneof:"auto_fstrim_opt"`
	// io_throttle_opt defines the io throttle limits for the volume
	//
	// Types that are assignable to IoThrottleOpt:
	//	*VolumeSpecPolicy_IoThrottle
	IoThrottleOpt isVolumeSpecPolicy_IoThrottleOpt `protobuf_oneof:"io_throttle_opt"`
	// Enable readahead for the volume
	//
	// Types that are assignable to ReadaheadOpt:
	//	*VolumeSpecPolicy_Readahead
	ReadaheadOpt isVolumeSpecPolicy_ReadaheadOpt `protobuf_oneof:"readahead_opt"`
	// winshare is true if this volume can be accessed from windows.
	//
	// Types that are assignable to WinshareOpt:
	//	*VolumeSpecPolicy_Winshare
	WinshareOpt isVolumeSpecPolicy_WinshareOpt `protobuf_oneof:"winshare_opt"`
}

func (x *VolumeSpecPolicy) Reset() {
	*x = VolumeSpecPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeSpecPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSpecPolicy) ProtoMessage() {}

func (x *VolumeSpecPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSpecPolicy.ProtoReflect.Descriptor instead.
func (*VolumeSpecPolicy) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{28}
}

func (m *VolumeSpecPolicy) GetSizeOpt() isVolumeSpecPolicy_SizeOpt {
	if m != nil {
		return m.SizeOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetSize() uint64 {
	if x, ok := x.GetSizeOpt().(*VolumeSpecPolicy_Size); ok {
		return x.Size
	}
	return 0
}

func (m *VolumeSpecPolicy) GetHaLevelOpt() isVolumeSpecPolicy_HaLevelOpt {
	if m != nil {
		return m.HaLevelOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetHaLevel() int64 {
	if x, ok := x.GetHaLevelOpt().(*VolumeSpecPolicy_HaLevel); ok {
		return x.HaLevel
	}
	return 0
}

func (m *VolumeSpecPolicy) GetCosOpt() isVolumeSpecPolicy_CosOpt {
	if m != nil {
		return m.CosOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetCos() CosType {
	if x, ok := x.GetCosOpt().(*VolumeSpecPolicy_Cos); ok {
		return x.Cos
	}
	return CosType_NONE
}

func (m *VolumeSpecPolicy) GetIoProfileOpt() isVolumeSpecPolicy_IoProfileOpt {
	if m != nil {
		return m.IoProfileOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetIoProfile() IoProfile {
	if x, ok := x.GetIoProfileOpt().(*VolumeSpecPolicy_IoProfile); ok {
		return x.IoProfile
	}
	return IoProfile_IO_PROFILE_SEQUENTIAL
}

func (m *VolumeSpecPolicy) GetDedupeOpt() isVolumeSpecPolicy_DedupeOpt {
	if m != nil {
		return m.DedupeOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetDedupe() bool {
	if x, ok := x.GetDedupeOpt().(*VolumeSpecPolicy_Dedupe); ok {
		return x.Dedupe
	}
	return false
}

func (m *VolumeSpecPolicy) GetSnapshotIntervalOpt() isVolumeSpecPolicy_SnapshotIntervalOpt {
	if m != nil {
		return m.SnapshotIntervalOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetSnapshotInterval() uint32 {
	if x, ok := x.GetSnapshotIntervalOpt().(*VolumeSpecPolicy_SnapshotInterval); ok {
		return x.SnapshotInterval
	}
	return 0
}

func (x *VolumeSpecPolicy) GetVolumeLabels() map[string]string {
	if x != nil {
		return x.VolumeLabels
	}
	return nil
}

func (m *VolumeSpecPolicy) GetSharedOpt() isVolumeSpecPolicy_SharedOpt {
	if m != nil {
		return m.SharedOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetShared() bool {
	if x, ok := x.GetSharedOpt().(*VolumeSpecPolicy_Shared); ok {
		return x.Shared
	}
	return false
}

func (x *VolumeSpecPolicy) GetReplicaSet() *ReplicaSet {
	if x != nil {
		return x.ReplicaSet
	}
	return nil
}

func (m *VolumeSpecPolicy) GetPassphraseOpt() isVolumeSpecPolicy_PassphraseOpt {
	if m != nil {
		return m.PassphraseOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetPassphrase() string {
	if x, ok := x.GetPassphraseOpt().(*VolumeSpecPolicy_Passphrase); ok {
		return x.Passphrase
	}
	return ""
}

func (m *VolumeSpecPolicy) GetSnapshotScheduleOpt() isVolumeSpecPolicy_SnapshotScheduleOpt {
	if m != nil {
		return m.SnapshotScheduleOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetSnapshotSchedule() string {
	if x, ok := x.GetSnapshotScheduleOpt().(*VolumeSpecPolicy_SnapshotSchedule); ok {
		return x.SnapshotSchedule
	}
	return ""
}

func (m *VolumeSpecPolicy) GetScaleOpt() isVolumeSpecPolicy_ScaleOpt {
	if m != nil {
		return m.ScaleOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetScale() uint32 {
	if x, ok := x.GetScaleOpt().(*VolumeSpecPolicy_Scale); ok {
		return x.Scale
	}
	return 0
}

func (m *VolumeSpecPolicy) GetStickyOpt() isVolumeSpecPolicy_StickyOpt {
	if m != nil {
		return m.StickyOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetSticky() bool {
	if x, ok := x.GetStickyOpt().(*VolumeSpecPolicy_Sticky); ok {
		return x.Sticky
	}
	return false
}

func (m *VolumeSpecPolicy) GetGroupOpt() isVolumeSpecPolicy_GroupOpt {
	if m != nil {
		return m.GroupOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetGroup() *Group {
	if x, ok := x.GetGroupOpt().(*VolumeSpecPolicy_Group); ok {
		return x.Group
	}
	return nil
}

func (m *VolumeSpecPolicy) GetJournalOpt() isVolumeSpecPolicy_JournalOpt {
	if m != nil {
		return m.JournalOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetJournal() bool {
	if x, ok := x.GetJournalOpt().(*VolumeSpecPolicy_Journal); ok {
		return x.Journal
	}
	return false
}

func (m *VolumeSpecPolicy) GetSharedv4Opt() isVolumeSpecPolicy_Sharedv4Opt {
	if m != nil {
		return m.Sharedv4Opt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetSharedv4() bool {
	if x, ok := x.GetSharedv4Opt().(*VolumeSpecPolicy_Sharedv4); ok {
		return x.Sharedv4
	}
	return false
}

func (m *VolumeSpecPolicy) GetQueueDepthOpt() isVolumeSpecPolicy_QueueDepthOpt {
	if m != nil {
		return m.QueueDepthOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetQueueDepth() uint32 {
	if x, ok := x.GetQueueDepthOpt().(*VolumeSpecPolicy_QueueDepth); ok {
		return x.QueueDepth
	}
	return 0
}

func (m *VolumeSpecPolicy) GetEncryptedOpt() isVolumeSpecPolicy_EncryptedOpt {
	if m != nil {
		return m.EncryptedOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetEncrypted() bool {
	if x, ok := x.GetEncryptedOpt().(*VolumeSpecPolicy_Encrypted); ok {
		return x.Encrypted
	}
	return false
}

func (m *VolumeSpecPolicy) GetAggregationLevelOpt() isVolumeSpecPolicy_AggregationLevelOpt {
	if m != nil {
		return m.AggregationLevelOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetAggregationLevel() uint32 {
	if x, ok := x.GetAggregationLevelOpt().(*VolumeSpecPolicy_AggregationLevel); ok {
		return x.AggregationLevel
	}
	return 0
}

func (x *VolumeSpecPolicy) GetSizeOperator() VolumeSpecPolicy_PolicyOp {
	if x != nil {
		return x.SizeOperator
	}
	return VolumeSpecPolicy_Equal
}

func (x *VolumeSpecPolicy) GetHaLevelOperator() VolumeSpecPolicy_PolicyOp {
	if x != nil {
		return x.HaLevelOperator
	}
	return VolumeSpecPolicy_Equal
}

func (x *VolumeSpecPolicy) GetScaleOperator() VolumeSpecPolicy_PolicyOp {
	if x != nil {
		return x.ScaleOperator
	}
	return VolumeSpecPolicy_Equal
}

func (x *VolumeSpecPolicy) GetSnapshotIntervalOperator() VolumeSpecPolicy_PolicyOp {
	if x != nil {
		return x.SnapshotIntervalOperator
	}
	return VolumeSpecPolicy_Equal
}

func (m *VolumeSpecPolicy) GetNodiscardOpt() isVolumeSpecPolicy_NodiscardOpt {
	if m != nil {
		return m.NodiscardOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetNodiscard() bool {
	if x, ok := x.GetNodiscardOpt().(*VolumeSpecPolicy_Nodiscard); ok {
		return x.Nodiscard
	}
	return false
}

func (x *VolumeSpecPolicy) GetIoStrategy() *IoStrategy {
	if x != nil {
		return x.IoStrategy
	}
	return nil
}

func (m *VolumeSpecPolicy) GetExportSpecOpt() isVolumeSpecPolicy_ExportSpecOpt {
	if m != nil {
		return m.ExportSpecOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetExportSpec() *ExportSpec {
	if x, ok := x.GetExportSpecOpt().(*VolumeSpecPolicy_ExportSpec); ok {
		return x.ExportSpec
	}
	return nil
}

func (m *VolumeSpecPolicy) GetScanPolicyOpt() isVolumeSpecPolicy_ScanPolicyOpt {
	if m != nil {
		return m.ScanPolicyOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetScanPolicy() *ScanPolicy {
	if x, ok := x.GetScanPolicyOpt().(*VolumeSpecPolicy_ScanPolicy); ok {
		return x.ScanPolicy
	}
	return nil
}

func (m *VolumeSpecPolicy) GetMountOpt() isVolumeSpecPolicy_MountOpt {
	if m != nil {
		return m.MountOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetMountOptSpec() *MountOptions {
	if x, ok := x.GetMountOpt().(*VolumeSpecPolicy_MountOptSpec); ok {
		return x.MountOptSpec
	}
	return nil
}

func (m *VolumeSpecPolicy) GetSharedv4MountOpt() isVolumeSpecPolicy_Sharedv4MountOpt {
	if m != nil {
		return m.Sharedv4MountOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetSharedv4MountOptSpec() *MountOptions {
	if x, ok := x.GetSharedv4MountOpt().(*VolumeSpecPolicy_Sharedv4MountOptSpec); ok {
		return x.Sharedv4MountOptSpec
	}
	return nil
}

func (m *VolumeSpecPolicy) GetProxyWriteOpt() isVolumeSpecPolicy_ProxyWriteOpt {
	if m != nil {
		return m.ProxyWriteOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetProxyWrite() bool {
	if x, ok := x.GetProxyWriteOpt().(*VolumeSpecPolicy_ProxyWrite); ok {
		return x.ProxyWrite
	}
	return false
}

func (m *VolumeSpecPolicy) GetProxySpecOpt() isVolumeSpecPolicy_ProxySpecOpt {
	if m != nil {
		return m.ProxySpecOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetProxySpec() *ProxySpec {
	if x, ok := x.GetProxySpecOpt().(*VolumeSpecPolicy_ProxySpec); ok {
		return x.ProxySpec
	}
	return nil
}

func (m *VolumeSpecPolicy) GetFastpathOpt() isVolumeSpecPolicy_FastpathOpt {
	if m != nil {
		return m.FastpathOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetFastpath() bool {
	if x, ok := x.GetFastpathOpt().(*VolumeSpecPolicy_Fastpath); ok {
		return x.Fastpath
	}
	return false
}

func (m *VolumeSpecPolicy) GetSharedv4ServiceSpecOpt() isVolumeSpecPolicy_Sharedv4ServiceSpecOpt {
	if m != nil {
		return m.Sharedv4ServiceSpecOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetSharedv4ServiceSpec() *Sharedv4ServiceSpec {
	if x, ok := x.GetSharedv4ServiceSpecOpt().(*VolumeSpecPolicy_Sharedv4ServiceSpec); ok {
		return x.Sharedv4ServiceSpec
	}
	return nil
}

func (m *VolumeSpecPolicy) GetSharedv4SpecOpt() isVolumeSpecPolicy_Sharedv4SpecOpt {
	if m != nil {
		return m.Sharedv4SpecOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetSharedv4Spec() *Sharedv4Spec {
	if x, ok := x.GetSharedv4SpecOpt().(*VolumeSpecPolicy_Sharedv4Spec); ok {
		return x.Sharedv4Spec
	}
	return nil
}

func (m *VolumeSpecPolicy) GetAutoFstrimOpt() isVolumeSpecPolicy_AutoFstrimOpt {
	if m != nil {
		return m.AutoFstrimOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetAutoFstrim() bool {
	if x, ok := x.GetAutoFstrimOpt().(*VolumeSpecPolicy_AutoFstrim); ok {
		return x.AutoFstrim
	}
	return false
}

func (m *VolumeSpecPolicy) GetIoThrottleOpt() isVolumeSpecPolicy_IoThrottleOpt {
	if m != nil {
		return m.IoThrottleOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetIoThrottle() *IoThrottle {
	if x, ok := x.GetIoThrottleOpt().(*VolumeSpecPolicy_IoThrottle); ok {
		return x.IoThrottle
	}
	return nil
}

func (m *VolumeSpecPolicy) GetReadaheadOpt() isVolumeSpecPolicy_ReadaheadOpt {
	if m != nil {
		return m.ReadaheadOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetReadahead() bool {
	if x, ok := x.GetReadaheadOpt().(*VolumeSpecPolicy_Readahead); ok {
		return x.Readahead
	}
	return false
}

func (m *VolumeSpecPolicy) GetWinshareOpt() isVolumeSpecPolicy_WinshareOpt {
	if m != nil {
		return m.WinshareOpt
	}
	return nil
}

func (x *VolumeSpecPolicy) GetWinshare() bool {
	if x, ok := x.GetWinshareOpt().(*VolumeSpecPolicy_Winshare); ok {
		return x.Winshare
	}
	return false
}

type isVolumeSpecPolicy_SizeOpt interface {
	isVolumeSpecPolicy_SizeOpt()
}

type VolumeSpecPolicy_Size struct {
	Size uint64 `protobuf:"varint,1,opt,name=size,proto3,oneof"`
}

func (*VolumeSpecPolicy_Size) isVolumeSpecPolicy_SizeOpt() {}

type isVolumeSpecPolicy_HaLevelOpt interface {
	isVolumeSpecPolicy_HaLevelOpt()
}

type VolumeSpecPolicy_HaLevel struct {
	HaLevel int64 `protobuf:"varint,2,opt,name=ha_level,json=haLevel,proto3,oneof"`
}

func (*VolumeSpecPolicy_HaLevel) isVolumeSpecPolicy_HaLevelOpt() {}

type isVolumeSpecPolicy_CosOpt interface {
	isVolumeSpecPolicy_CosOpt()
}

type VolumeSpecPolicy_Cos struct {
	Cos CosType `protobuf:"varint,3,opt,name=cos,proto3,enum=openstorage.api.CosType,oneof"`
}

func (*VolumeSpecPolicy_Cos) isVolumeSpecPolicy_CosOpt() {}

type isVolumeSpecPolicy_IoProfileOpt interface {
	isVolumeSpecPolicy_IoProfileOpt()
}

type VolumeSpecPolicy_IoProfile struct {
	IoProfile IoProfile `protobuf:"varint,4,opt,name=io_profile,json=ioProfile,proto3,enum=openstorage.api.IoProfile,oneof"`
}

func (*VolumeSpecPolicy_IoProfile) isVolumeSpecPolicy_IoProfileOpt() {}

type isVolumeSpecPolicy_DedupeOpt interface {
	isVolumeSpecPolicy_DedupeOpt()
}

type VolumeSpecPolicy_Dedupe struct {
	Dedupe bool `protobuf:"varint,5,opt,name=dedupe,proto3,oneof"`
}

func (*VolumeSpecPolicy_Dedupe) isVolumeSpecPolicy_DedupeOpt() {}

type isVolumeSpecPolicy_SnapshotIntervalOpt interface {
	isVolumeSpecPolicy_SnapshotIntervalOpt()
}

type VolumeSpecPolicy_SnapshotInterval struct {
	SnapshotInterval uint32 `protobuf:"varint,6,opt,name=snapshot_interval,json=snapshotInterval,proto3,oneof"`
}

func (*VolumeSpecPolicy_SnapshotInterval) isVolumeSpecPolicy_SnapshotIntervalOpt() {}

type isVolumeSpecPolicy_SharedOpt interface {
	isVolumeSpecPolicy_SharedOpt()
}

type VolumeSpecPolicy_Shared struct {
	Shared bool `protobuf:"varint,8,opt,name=shared,proto3,oneof"`
}

func (*VolumeSpecPolicy_Shared) isVolumeSpecPolicy_SharedOpt() {}

type isVolumeSpecPolicy_PassphraseOpt interface {
	isVolumeSpecPolicy_PassphraseOpt()
}

type VolumeSpecPolicy_Passphrase struct {
	Passphrase string `protobuf:"bytes,10,opt,name=passphrase,proto3,oneof"`
}

func (*VolumeSpecPolicy_Passphrase) isVolumeSpecPolicy_PassphraseOpt() {}

type isVolumeSpecPolicy_SnapshotScheduleOpt interface {
	isVolumeSpecPolicy_SnapshotScheduleOpt()
}

type VolumeSpecPolicy_SnapshotSchedule struct {
	SnapshotSchedule string `protobuf:"bytes,11,opt,name=snapshot_schedule,json=snapshotSchedule,proto3,oneof"`
}

func (*VolumeSpecPolicy_SnapshotSchedule) isVolumeSpecPolicy_SnapshotScheduleOpt() {}

type isVolumeSpecPolicy_ScaleOpt interface {
	isVolumeSpecPolicy_ScaleOpt()
}

type VolumeSpecPolicy_Scale struct {
	Scale uint32 `protobuf:"varint,12,opt,name=scale,proto3,oneof"`
}

func (*VolumeSpecPolicy_Scale) isVolumeSpecPolicy_ScaleOpt() {}

type isVolumeSpecPolicy_StickyOpt interface {
	isVolumeSpecPolicy_StickyOpt()
}

type VolumeSpecPolicy_Sticky struct {
	Sticky bool `protobuf:"varint,13,opt,name=sticky,proto3,oneof"`
}

func (*VolumeSpecPolicy_Sticky) isVolumeSpecPolicy_StickyOpt() {}

type isVolumeSpecPolicy_GroupOpt interface {
	isVolumeSpecPolicy_GroupOpt()
}

type VolumeSpecPolicy_Group struct {
	Group *Group `protobuf:"bytes,14,opt,name=group,proto3,oneof"`
}

func (*VolumeSpecPolicy_Group) isVolumeSpecPolicy_GroupOpt() {}

type isVolumeSpecPolicy_JournalOpt interface {
	isVolumeSpecPolicy_JournalOpt()
}

type VolumeSpecPolicy_Journal struct {
	Journal bool `protobuf:"varint,15,opt,name=journal,proto3,oneof"`
}

func (*VolumeSpecPolicy_Journal) isVolumeSpecPolicy_JournalOpt() {}

type isVolumeSpecPolicy_Sharedv4Opt interface {
	isVolumeSpecPolicy_Sharedv4Opt()
}

type VolumeSpecPolicy_Sharedv4 struct {
	Sharedv4 bool `protobuf:"varint,16,opt,name=sharedv4,proto3,oneof"`
}

func (*VolumeSpecPolicy_Sharedv4) isVolumeSpecPolicy_Sharedv4Opt() {}

type isVolumeSpecPolicy_QueueDepthOpt interface {
	isVolumeSpecPolicy_QueueDepthOpt()
}

type VolumeSpecPolicy_QueueDepth struct {
	QueueDepth uint32 `protobuf:"varint,17,opt,name=queue_depth,json=queueDepth,proto3,oneof"`
}

func (*VolumeSpecPolicy_QueueDepth) isVolumeSpecPolicy_QueueDepthOpt() {}

type isVolumeSpecPolicy_EncryptedOpt interface {
	isVolumeSpecPolicy_EncryptedOpt()
}

type VolumeSpecPolicy_Encrypted struct {
	Encrypted bool `protobuf:"varint,18,opt,name=encrypted,proto3,oneof"`
}

func (*VolumeSpecPolicy_Encrypted) isVolumeSpecPolicy_EncryptedOpt() {}

type isVolumeSpecPolicy_AggregationLevelOpt interface {
	isVolumeSpecPolicy_AggregationLevelOpt()
}

type VolumeSpecPolicy_AggregationLevel struct {
	AggregationLevel uint32 `protobuf:"varint,19,opt,name=aggregation_level,json=aggregationLevel,proto3,oneof"`
}

func (*VolumeSpecPolicy_AggregationLevel) isVolumeSpecPolicy_AggregationLevelOpt() {}

type isVolumeSpecPolicy_NodiscardOpt interface {
	isVolumeSpecPolicy_NodiscardOpt()
}

type VolumeSpecPolicy_Nodiscard struct {
	Nodiscard bool `protobuf:"varint,54,opt,name=nodiscard,proto3,oneof"`
}

func (*VolumeSpecPolicy_Nodiscard) isVolumeSpecPolicy_NodiscardOpt() {}

type isVolumeSpecPolicy_ExportSpecOpt interface {
	isVolumeSpecPolicy_ExportSpecOpt()
}

type VolumeSpecPolicy_ExportSpec struct {
	ExportSpec *ExportSpec `protobuf:"bytes,56,opt,name=export_spec,json=exportSpec,proto3,oneof"`
}

func (*VolumeSpecPolicy_ExportSpec) isVolumeSpecPolicy_ExportSpecOpt() {}

type isVolumeSpecPolicy_ScanPolicyOpt interface {
	isVolumeSpecPolicy_ScanPolicyOpt()
}

type VolumeSpecPolicy_ScanPolicy struct {
	ScanPolicy *ScanPolicy `protobuf:"bytes,57,opt,name=scan_policy,json=scanPolicy,proto3,oneof"`
}

func (*VolumeSpecPolicy_ScanPolicy) isVolumeSpecPolicy_ScanPolicyOpt() {}

type isVolumeSpecPolicy_MountOpt interface {
	isVolumeSpecPolicy_MountOpt()
}

type VolumeSpecPolicy_MountOptSpec struct {
	MountOptSpec *MountOptions `protobuf:"bytes,58,opt,name=mount_opt_spec,json=mountOptSpec,proto3,oneof"`
}

func (*VolumeSpecPolicy_MountOptSpec) isVolumeSpecPolicy_MountOpt() {}

type isVolumeSpecPolicy_Sharedv4MountOpt interface {
	isVolumeSpecPolicy_Sharedv4MountOpt()
}

type VolumeSpecPolicy_Sharedv4MountOptSpec struct {
	Sharedv4MountOptSpec *MountOptions `protobuf:"bytes,59,opt,name=sharedv4_mount_opt_spec,json=sharedv4MountOptSpec,proto3,oneof"`
}

func (*VolumeSpecPolicy_Sharedv4MountOptSpec) isVolumeSpecPolicy_Sharedv4MountOpt() {}

type isVolumeSpecPolicy_ProxyWriteOpt interface {
	isVolumeSpecPolicy_ProxyWriteOpt()
}

type VolumeSpecPolicy_ProxyWrite struct {
	ProxyWrite bool `protobuf:"varint,60,opt,name=proxy_write,json=proxyWrite,proto3,oneof"`
}

func (*VolumeSpecPolicy_ProxyWrite) isVolumeSpecPolicy_ProxyWriteOpt() {}

type isVolumeSpecPolicy_ProxySpecOpt interface {
	isVolumeSpecPolicy_ProxySpecOpt()
}

type VolumeSpecPolicy_ProxySpec struct {
	ProxySpec *ProxySpec `protobuf:"bytes,61,opt,name=proxy_spec,json=proxySpec,proto3,oneof"`
}

func (*VolumeSpecPolicy_ProxySpec) isVolumeSpecPolicy_ProxySpecOpt() {}

type isVolumeSpecPolicy_FastpathOpt interface {
	isVolumeSpecPolicy_FastpathOpt()
}

type VolumeSpecPolicy_Fastpath struct {
	Fastpath bool `protobuf:"varint,62,opt,name=fastpath,proto3,oneof"`
}

func (*VolumeSpecPolicy_Fastpath) isVolumeSpecPolicy_FastpathOpt() {}

type isVolumeSpecPolicy_Sharedv4ServiceSpecOpt interface {
	isVolumeSpecPolicy_Sharedv4ServiceSpecOpt()
}

type VolumeSpecPolicy_Sharedv4ServiceSpec struct {
	Sharedv4ServiceSpec *Sharedv4ServiceSpec `protobuf:"bytes,63,opt,name=sharedv4_service_spec,json=sharedv4ServiceSpec,proto3,oneof"`
}

func (*VolumeSpecPolicy_Sharedv4ServiceSpec) isVolumeSpecPolicy_Sharedv4ServiceSpecOpt() {}

type isVolumeSpecPolicy_Sharedv4SpecOpt interface {
	isVolumeSpecPolicy_Sharedv4SpecOpt()
}

type VolumeSpecPolicy_Sharedv4Spec struct {
	Sharedv4Spec *Sharedv4Spec `protobuf:"bytes,64,opt,name=sharedv4_spec,json=sharedv4Spec,proto3,oneof"`
}

func (*VolumeSpecPolicy_Sharedv4Spec) isVolumeSpecPolicy_Sharedv4SpecOpt() {}

type isVolumeSpecPolicy_AutoFstrimOpt interface {
	isVolumeSpecPolicy_AutoFstrimOpt()
}

type VolumeSpecPolicy_AutoFstrim struct {
	AutoFstrim bool `protobuf:"varint,65,opt,name=auto_fstrim,json=autoFstrim,proto3,oneof"`
}

func (*VolumeSpecPolicy_AutoFstrim) isVolumeSpecPolicy_AutoFstrimOpt() {}

type isVolumeSpecPolicy_IoThrottleOpt interface {
	isVolumeSpecPolicy_IoThrottleOpt()
}

type VolumeSpecPolicy_IoThrottle struct {
	IoThrottle *IoThrottle `protobuf:"bytes,66,opt,name=io_throttle,json=ioThrottle,proto3,oneof"`
}

func (*VolumeSpecPolicy_IoThrottle) isVolumeSpecPolicy_IoThrottleOpt() {}

type isVolumeSpecPolicy_ReadaheadOpt interface {
	isVolumeSpecPolicy_ReadaheadOpt()
}

type VolumeSpecPolicy_Readahead struct {
	Readahead bool `protobuf:"varint,67,opt,name=readahead,proto3,oneof"`
}

func (*VolumeSpecPolicy_Readahead) isVolumeSpecPolicy_ReadaheadOpt() {}

type isVolumeSpecPolicy_WinshareOpt interface {
	isVolumeSpecPolicy_WinshareOpt()
}

type VolumeSpecPolicy_Winshare struct {
	Winshare bool `protobuf:"varint,68,opt,name=winshare,proto3,oneof"`
}

func (*VolumeSpecPolicy_Winshare) isVolumeSpecPolicy_WinshareOpt() {}

// ReplicaSet set of machine IDs (nodes) to which part of this volume is erasure
// coded - for clustered storage arrays
type ReplicaSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []string `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// Unique IDs of the storage pools for this replica set
	PoolUuids []string `protobuf:"bytes,2,rep,name=pool_uuids,json=poolUuids,proto3" json:"pool_uuids,omitempty"`
	// ID is the unique ID of this replica set
	Id uint32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReplicaSet) Reset() {
	*x = ReplicaSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaSet) ProtoMessage() {}

func (x *ReplicaSet) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaSet.ProtoReflect.Descriptor instead.
func (*ReplicaSet) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{29}
}

func (x *ReplicaSet) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ReplicaSet) GetPoolUuids() []string {
	if x != nil {
		return x.PoolUuids
	}
	return nil
}

func (x *ReplicaSet) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// RuntimeStateMap is a list of name value mapping of driver specific runtime
// information.
type RuntimeStateMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeState map[string]string `protobuf:"bytes,1,rep,name=runtime_state,json=runtimeState,proto3" json:"runtime_state,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RuntimeStateMap) Reset() {
	*x = RuntimeStateMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeStateMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeStateMap) ProtoMessage() {}

func (x *RuntimeStateMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeStateMap.ProtoReflect.Descriptor instead.
func (*RuntimeStateMap) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{30}
}

func (x *RuntimeStateMap) GetRuntimeState() map[string]string {
	if x != nil {
		return x.RuntimeState
	}
	return nil
}

// Ownership information for resource.
// Administrators are users who belong to the group `*`, meaning, every group.
type Ownership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username of owner.
	//
	// The storage system uses the username taken from the security authorization
	// token and is saved on this field. Only users with system administration
	// can edit this value.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// Permissions to share resource which can be set by the owner.
	//
	// NOTE: To create an "admin" user which has access to any resource set the group value
	// in the token of the user to `*`.
	Acls *Ownership_AccessControl `protobuf:"bytes,2,opt,name=acls,proto3" json:"acls,omitempty"`
}

func (x *Ownership) Reset() {
	*x = Ownership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ownership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ownership) ProtoMessage() {}

func (x *Ownership) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ownership.ProtoReflect.Descriptor instead.
func (*Ownership) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{31}
}

func (x *Ownership) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Ownership) GetAcls() *Ownership_AccessControl {
	if x != nil {
		return x.Acls
	}
	return nil
}

// Volume represents an abstract storage volume.
type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Self referential volume ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Source specified seed data for the volume.
	Source *Source `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// Group volumes in the same group have the same group id.
	Group *Group `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	// Readonly is true if this volume is to be mounted with readonly access.
	Readonly bool `protobuf:"varint,4,opt,name=readonly,proto3" json:"readonly,omitempty"`
	// User specified locator
	Locator *VolumeLocator `protobuf:"bytes,5,opt,name=locator,proto3" json:"locator,omitempty"`
	// Volume creation time
	Ctime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// User specified VolumeSpec
	Spec *VolumeSpec `protobuf:"bytes,7,opt,name=spec,proto3" json:"spec,omitempty"`
	// Usage is bytes consumed by this volume.
	Usage uint64 `protobuf:"varint,8,opt,name=usage,proto3" json:"usage,omitempty"`
	// LastScan is the time when an integrity check was run.
	LastScan *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last_scan,json=lastScan,proto3" json:"last_scan,omitempty"`
	// Format specifies the filesytem for this volume.
	Format FSType `protobuf:"varint,10,opt,name=format,proto3,enum=openstorage.api.FSType" json:"format,omitempty"`
	// VolumeStatus is the availability status of this volume.
	Status VolumeStatus `protobuf:"varint,11,opt,name=status,proto3,enum=openstorage.api.VolumeStatus" json:"status,omitempty"`
	// VolumeState is the current runtime state of this volume.
	State VolumeState `protobuf:"varint,12,opt,name=state,proto3,enum=openstorage.api.VolumeState" json:"state,omitempty"`
	// AttachedOn is the node instance identifier for clustered systems.
	AttachedOn string `protobuf:"bytes,13,opt,name=attached_on,json=attachedOn,proto3" json:"attached_on,omitempty"`
	// AttachState shows whether the device is attached for internal or external use.
	AttachedState AttachState `protobuf:"varint,14,opt,name=attached_state,json=attachedState,proto3,enum=openstorage.api.AttachState" json:"attached_state,omitempty"`
	// DevicePath is the device exported by block device implementations.
	DevicePath string `protobuf:"bytes,15,opt,name=device_path,json=devicePath,proto3" json:"device_path,omitempty"`
	// SecureDevicePath is the device path for an encrypted volume.
	SecureDevicePath string `protobuf:"bytes,16,opt,name=secure_device_path,json=secureDevicePath,proto3" json:"secure_device_path,omitempty"`
	// AttachPath is the mounted path in the host namespace.
	AttachPath []string `protobuf:"bytes,17,rep,name=attach_path,json=attachPath,proto3" json:"attach_path,omitempty"`
	// AttachInfo is a list of name value mappings that provides attach information.
	AttachInfo map[string]string `protobuf:"bytes,18,rep,name=attach_info,json=attachInfo,proto3" json:"attach_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ReplicatSets storage for this volumefor clustered storage arrays.
	ReplicaSets []*ReplicaSet `protobuf:"bytes,19,rep,name=replica_sets,json=replicaSets,proto3" json:"replica_sets,omitempty"`
	// RuntimeState is a lst of name value mapping of driver specific runtime
	// information.
	RuntimeState []*RuntimeStateMap `protobuf:"bytes,20,rep,name=runtime_state,json=runtimeState,proto3" json:"runtime_state,omitempty"`
	// Error is the Last recorded error.
	Error string `protobuf:"bytes,21,opt,name=error,proto3" json:"error,omitempty"`
	// VolumeConsumers are entities that consume this volume
	VolumeConsumers []*VolumeConsumer `protobuf:"bytes,22,rep,name=volume_consumers,json=volumeConsumers,proto3" json:"volume_consumers,omitempty"`
	// FsResizeRequired if an FS resize is required on the volume.
	FsResizeRequired bool `protobuf:"varint,23,opt,name=fs_resize_required,json=fsResizeRequired,proto3" json:"fs_resize_required,omitempty"`
	// AttachTime time this device was last attached externally.
	AttachTime *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=attach_time,json=attachTime,proto3" json:"attach_time,omitempty"`
	// DetachTime time this device was detached.
	DetachTime *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=detach_time,json=detachTime,proto3" json:"detach_time,omitempty"`
	// Fastpath extensions
	FpConfig *FastpathConfig `protobuf:"bytes,26,opt,name=fpConfig,proto3" json:"fpConfig,omitempty"`
	// LastScanFix is the time when an integrity check fixed errors in filesystem
	LastScanFix *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=last_scan_fix,json=lastScanFix,proto3" json:"last_scan_fix,omitempty"`
	// LastScanStatus is the time when an integrity check fixed errors in filesystem
	LastScanStatus FilesystemHealthStatus `protobuf:"varint,28,opt,name=last_scan_status,json=lastScanStatus,proto3,enum=openstorage.api.FilesystemHealthStatus" json:"last_scan_status,omitempty"`
	// MountOptions are the runtime mount options that will be used while mounting this volume
	MountOptions *MountOptions `protobuf:"bytes,29,opt,name=mount_options,json=mountOptions,proto3" json:"mount_options,omitempty"`
	// Sharedv4MountOptions are the runtime mount options that will be used while mounting a sharedv4 volume
	// from a node where the volume replica does not exist
	Sharedv4MountOptions *MountOptions `protobuf:"bytes,30,opt,name=sharedv4_mount_options,json=sharedv4MountOptions,proto3" json:"sharedv4_mount_options,omitempty"`
	// DerivedIoProfile the IO profile determined from the pattern
	DerivedIoProfile IoProfile `protobuf:"varint,31,opt,name=derived_io_profile,json=derivedIoProfile,proto3,enum=openstorage.api.IoProfile" json:"derived_io_profile,omitempty"`
	// InTrashcan if the volume is in trashcan
	InTrashcan bool `protobuf:"varint,32,opt,name=in_trashcan,json=inTrashcan,proto3" json:"in_trashcan,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{32}
}

func (x *Volume) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Volume) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Volume) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Volume) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *Volume) GetLocator() *VolumeLocator {
	if x != nil {
		return x.Locator
	}
	return nil
}

func (x *Volume) GetCtime() *timestamppb.Timestamp {
	if x != nil {
		return x.Ctime
	}
	return nil
}

func (x *Volume) GetSpec() *VolumeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Volume) GetUsage() uint64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

func (x *Volume) GetLastScan() *timestamppb.Timestamp {
	if x != nil {
		return x.LastScan
	}
	return nil
}

func (x *Volume) GetFormat() FSType {
	if x != nil {
		return x.Format
	}
	return FSType_FS_TYPE_NONE
}

func (x *Volume) GetStatus() VolumeStatus {
	if x != nil {
		return x.Status
	}
	return VolumeStatus_VOLUME_STATUS_NONE
}

func (x *Volume) GetState() VolumeState {
	if x != nil {
		return x.State
	}
	return VolumeState_VOLUME_STATE_NONE
}

func (x *Volume) GetAttachedOn() string {
	if x != nil {
		return x.AttachedOn
	}
	return ""
}

func (x *Volume) GetAttachedState() AttachState {
	if x != nil {
		return x.AttachedState
	}
	return AttachState_ATTACH_STATE_EXTERNAL
}

func (x *Volume) GetDevicePath() string {
	if x != nil {
		return x.DevicePath
	}
	return ""
}

func (x *Volume) GetSecureDevicePath() string {
	if x != nil {
		return x.SecureDevicePath
	}
	return ""
}

func (x *Volume) GetAttachPath() []string {
	if x != nil {
		return x.AttachPath
	}
	return nil
}

func (x *Volume) GetAttachInfo() map[string]string {
	if x != nil {
		return x.AttachInfo
	}
	return nil
}

func (x *Volume) GetReplicaSets() []*ReplicaSet {
	if x != nil {
		return x.ReplicaSets
	}
	return nil
}

func (x *Volume) GetRuntimeState() []*RuntimeStateMap {
	if x != nil {
		return x.RuntimeState
	}
	return nil
}

func (x *Volume) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Volume) GetVolumeConsumers() []*VolumeConsumer {
	if x != nil {
		return x.VolumeConsumers
	}
	return nil
}

func (x *Volume) GetFsResizeRequired() bool {
	if x != nil {
		return x.FsResizeRequired
	}
	return false
}

func (x *Volume) GetAttachTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AttachTime
	}
	return nil
}

func (x *Volume) GetDetachTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DetachTime
	}
	return nil
}

func (x *Volume) GetFpConfig() *FastpathConfig {
	if x != nil {
		return x.FpConfig
	}
	return nil
}

func (x *Volume) GetLastScanFix() *timestamppb.Timestamp {
	if x != nil {
		return x.LastScanFix
	}
	return nil
}

func (x *Volume) GetLastScanStatus() FilesystemHealthStatus {
	if x != nil {
		return x.LastScanStatus
	}
	return FilesystemHealthStatus_FS_HEALTH_STATUS_UNKNOWN
}

func (x *Volume) GetMountOptions() *MountOptions {
	if x != nil {
		return x.MountOptions
	}
	return nil
}

func (x *Volume) GetSharedv4MountOptions() *MountOptions {
	if x != nil {
		return x.Sharedv4MountOptions
	}
	return nil
}

func (x *Volume) GetDerivedIoProfile() IoProfile {
	if x != nil {
		return x.DerivedIoProfile
	}
	return IoProfile_IO_PROFILE_SEQUENTIAL
}

func (x *Volume) GetInTrashcan() bool {
	if x != nil {
		return x.InTrashcan
	}
	return false
}

// Stats is a structure that represents last collected stats for a volume
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reads completed successfully
	Reads uint64 `protobuf:"varint,1,opt,name=reads,proto3" json:"reads,omitempty"`
	// Time spent in reads in ms
	ReadMs uint64 `protobuf:"varint,2,opt,name=read_ms,json=readMs,proto3" json:"read_ms,omitempty"`
	// Number of bytes read
	ReadBytes uint64 `protobuf:"varint,3,opt,name=read_bytes,json=readBytes,proto3" json:"read_bytes,omitempty"`
	// Writes completed successfully
	Writes uint64 `protobuf:"varint,4,opt,name=writes,proto3" json:"writes,omitempty"`
	// Time spent in writes in ms
	WriteMs uint64 `protobuf:"varint,5,opt,name=write_ms,json=writeMs,proto3" json:"write_ms,omitempty"`
	// Number of bytes written
	WriteBytes uint64 `protobuf:"varint,6,opt,name=write_bytes,json=writeBytes,proto3" json:"write_bytes,omitempty"`
	// IOs curently in progress
	IoProgress uint64 `protobuf:"varint,7,opt,name=io_progress,json=ioProgress,proto3" json:"io_progress,omitempty"`
	// Time spent doing IOs ms
	IoMs uint64 `protobuf:"varint,8,opt,name=io_ms,json=ioMs,proto3" json:"io_ms,omitempty"`
	// BytesUsed
	BytesUsed uint64 `protobuf:"varint,9,opt,name=bytes_used,json=bytesUsed,proto3" json:"bytes_used,omitempty"`
	// Interval in ms during which stats were collected
	IntervalMs uint64 `protobuf:"varint,10,opt,name=interval_ms,json=intervalMs,proto3" json:"interval_ms,omitempty"`
	// Discards completed successfully
	Discards uint64 `protobuf:"varint,11,opt,name=discards,proto3" json:"discards,omitempty"`
	// Time spent in discards in ms
	DiscardMs uint64 `protobuf:"varint,12,opt,name=discard_ms,json=discardMs,proto3" json:"discard_ms,omitempty"`
	// Number of bytes discarded
	DiscardBytes uint64 `protobuf:"varint,13,opt,name=discard_bytes,json=discardBytes,proto3" json:"discard_bytes,omitempty"`
	// Unique Blocks
	UniqueBlocks uint64 `protobuf:"varint,14,opt,name=unique_blocks,json=uniqueBlocks,proto3" json:"unique_blocks,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{33}
}

func (x *Stats) GetReads() uint64 {
	if x != nil {
		return x.Reads
	}
	return 0
}

func (x *Stats) GetReadMs() uint64 {
	if x != nil {
		return x.ReadMs
	}
	return 0
}

func (x *Stats) GetReadBytes() uint64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *Stats) GetWrites() uint64 {
	if x != nil {
		return x.Writes
	}
	return 0
}

func (x *Stats) GetWriteMs() uint64 {
	if x != nil {
		return x.WriteMs
	}
	return 0
}

func (x *Stats) GetWriteBytes() uint64 {
	if x != nil {
		return x.WriteBytes
	}
	return 0
}

func (x *Stats) GetIoProgress() uint64 {
	if x != nil {
		return x.IoProgress
	}
	return 0
}

func (x *Stats) GetIoMs() uint64 {
	if x != nil {
		return x.IoMs
	}
	return 0
}

func (x *Stats) GetBytesUsed() uint64 {
	if x != nil {
		return x.BytesUsed
	}
	return 0
}

func (x *Stats) GetIntervalMs() uint64 {
	if x != nil {
		return x.IntervalMs
	}
	return 0
}

func (x *Stats) GetDiscards() uint64 {
	if x != nil {
		return x.Discards
	}
	return 0
}

func (x *Stats) GetDiscardMs() uint64 {
	if x != nil {
		return x.DiscardMs
	}
	return 0
}

func (x *Stats) GetDiscardBytes() uint64 {
	if x != nil {
		return x.DiscardBytes
	}
	return 0
}

func (x *Stats) GetUniqueBlocks() uint64 {
	if x != nil {
		return x.UniqueBlocks
	}
	return 0
}

// Provides details on exclusive and shared storage used by
// snapshot/volume specifically for copy-on-write(COW) snapshots. Deletion
// of snapshots and overwrite of volume will affect the exclusive storage
// used by the other dependent snaps and parent volume.
type CapacityUsageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Storage consumed exclusively by this single snapshot. Deletion of this
	// snapshot may increase the free storage available by this amount.
	ExclusiveBytes int64 `protobuf:"varint,1,opt,name=exclusive_bytes,json=exclusiveBytes,proto3" json:"exclusive_bytes,omitempty"`
	// Storage consumed by this snapshot that is shared with parent and children
	SharedBytes int64 `protobuf:"varint,2,opt,name=shared_bytes,json=sharedBytes,proto3" json:"shared_bytes,omitempty"`
	// TotalBytes used by this volume
	TotalBytes int64 `protobuf:"varint,3,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
}

func (x *CapacityUsageInfo) Reset() {
	*x = CapacityUsageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapacityUsageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacityUsageInfo) ProtoMessage() {}

func (x *CapacityUsageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacityUsageInfo.ProtoReflect.Descriptor instead.
func (*CapacityUsageInfo) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{34}
}

func (x *CapacityUsageInfo) GetExclusiveBytes() int64 {
	if x != nil {
		return x.ExclusiveBytes
	}
	return 0
}

func (x *CapacityUsageInfo) GetSharedBytes() int64 {
	if x != nil {
		return x.SharedBytes
	}
	return 0
}

func (x *CapacityUsageInfo) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

// Provides volume's exclusive bytes and its total usage. This cannot be
// retrieved individually and is obtained as part node's usage for a given
// node.
type VolumeUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id for the volume/snapshot
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// name of the volume/snapshot
	VolumeName string `protobuf:"bytes,2,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	// uuid of the pool that this volume belongs to
	PoolUuid string `protobuf:"bytes,3,opt,name=pool_uuid,json=poolUuid,proto3" json:"pool_uuid,omitempty"`
	// size in bytes exclusively used by the volume/snapshot
	ExclusiveBytes uint64 `protobuf:"varint,4,opt,name=exclusive_bytes,json=exclusiveBytes,proto3" json:"exclusive_bytes,omitempty"`
	//  size in bytes by the volume/snapshot
	TotalBytes uint64 `protobuf:"varint,5,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	// set to true if this volume is snapshot created by cloudbackups
	LocalCloudSnapshot bool `protobuf:"varint,6,opt,name=local_cloud_snapshot,json=localCloudSnapshot,proto3" json:"local_cloud_snapshot,omitempty"`
}

func (x *VolumeUsage) Reset() {
	*x = VolumeUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeUsage) ProtoMessage() {}

func (x *VolumeUsage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeUsage.ProtoReflect.Descriptor instead.
func (*VolumeUsage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{35}
}

func (x *VolumeUsage) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *VolumeUsage) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *VolumeUsage) GetPoolUuid() string {
	if x != nil {
		return x.PoolUuid
	}
	return ""
}

func (x *VolumeUsage) GetExclusiveBytes() uint64 {
	if x != nil {
		return x.ExclusiveBytes
	}
	return 0
}

func (x *VolumeUsage) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *VolumeUsage) GetLocalCloudSnapshot() bool {
	if x != nil {
		return x.LocalCloudSnapshot
	}
	return false
}

// Provides capacity usage of a node in terms of volumes. Returns VolumeUsage for
// all the volume/snapshot(s) in the node.
type VolumeUsageByNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VolumeUsage returns list of VolumeUsage for given node
	VolumeUsage []*VolumeUsage `protobuf:"bytes,1,rep,name=volume_usage,json=volumeUsage,proto3" json:"volume_usage,omitempty"`
}

func (x *VolumeUsageByNode) Reset() {
	*x = VolumeUsageByNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeUsageByNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeUsageByNode) ProtoMessage() {}

func (x *VolumeUsageByNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeUsageByNode.ProtoReflect.Descriptor instead.
func (*VolumeUsageByNode) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{36}
}

func (x *VolumeUsageByNode) GetVolumeUsage() []*VolumeUsage {
	if x != nil {
		return x.VolumeUsage
	}
	return nil
}

// FstrimVolUsageInfo
type FstrimVolumeUsageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Volume name
	VolumeName string `protobuf:"bytes,1,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	// Volume size
	VolumeSize uint64 `protobuf:"varint,2,opt,name=volume_size,json=volumeSize,proto3" json:"volume_size,omitempty"`
	// Disk usage in bytes
	DuUsage uint64 `protobuf:"varint,3,opt,name=du_usage,json=duUsage,proto3" json:"du_usage,omitempty"`
	// Disk usage seen in Portworx in bytes
	PxUsage uint64 `protobuf:"varint,4,opt,name=px_usage,json=pxUsage,proto3" json:"px_usage,omitempty"`
	// If auto fstrim is performed to the volume, if not, why
	PerformAutoFstrim string `protobuf:"bytes,5,opt,name=perform_auto_fstrim,json=performAutoFstrim,proto3" json:"perform_auto_fstrim,omitempty"`
}

func (x *FstrimVolumeUsageInfo) Reset() {
	*x = FstrimVolumeUsageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FstrimVolumeUsageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FstrimVolumeUsageInfo) ProtoMessage() {}

func (x *FstrimVolumeUsageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FstrimVolumeUsageInfo.ProtoReflect.Descriptor instead.
func (*FstrimVolumeUsageInfo) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{37}
}

func (x *FstrimVolumeUsageInfo) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *FstrimVolumeUsageInfo) GetVolumeSize() uint64 {
	if x != nil {
		return x.VolumeSize
	}
	return 0
}

func (x *FstrimVolumeUsageInfo) GetDuUsage() uint64 {
	if x != nil {
		return x.DuUsage
	}
	return 0
}

func (x *FstrimVolumeUsageInfo) GetPxUsage() uint64 {
	if x != nil {
		return x.PxUsage
	}
	return 0
}

func (x *FstrimVolumeUsageInfo) GetPerformAutoFstrim() string {
	if x != nil {
		return x.PerformAutoFstrim
	}
	return ""
}

// Purges the RelaxedReclaim queue
type RelaxedReclaimPurge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// num_purged returns number of volumes purged
	NumPurged uint64 `protobuf:"varint,1,opt,name=num_purged,json=numPurged,proto3" json:"num_purged,omitempty"`
}

func (x *RelaxedReclaimPurge) Reset() {
	*x = RelaxedReclaimPurge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelaxedReclaimPurge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelaxedReclaimPurge) ProtoMessage() {}

func (x *RelaxedReclaimPurge) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelaxedReclaimPurge.ProtoReflect.Descriptor instead.
func (*RelaxedReclaimPurge) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{38}
}

func (x *RelaxedReclaimPurge) GetNumPurged() uint64 {
	if x != nil {
		return x.NumPurged
	}
	return 0
}

// A SdkStoragePolicy represents minimum set of volume specs to be
// follow while creating volumes.
// If storage policy is set default in OpenStoragePolicy service, VolumeSpecPolicy will be
// used before creating volume to validate volume specs or ensure minimum volume creation
// rules followed
type SdkStoragePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of storage policy.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// VolumeSpecs to apply while creating volume.
	Policy *VolumeSpecPolicy `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	// Force if set to true volume specs will be overwritten, otherwise
	// volume creation will fail if the volume specifications are not inline with storage policy
	Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	// If set a volume can be updated without storage Policy
	// restriction, otherwise volume update will be followed as per storage policy
	// specification
	AllowUpdate bool `protobuf:"varint,4,opt,name=allow_update,json=allowUpdate,proto3" json:"allow_update,omitempty"`
	// Owner info of storage policy
	Ownership *Ownership `protobuf:"bytes,5,opt,name=ownership,proto3" json:"ownership,omitempty"`
}

func (x *SdkStoragePolicy) Reset() {
	*x = SdkStoragePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkStoragePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkStoragePolicy) ProtoMessage() {}

func (x *SdkStoragePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkStoragePolicy.ProtoReflect.Descriptor instead.
func (*SdkStoragePolicy) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{39}
}

func (x *SdkStoragePolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SdkStoragePolicy) GetPolicy() *VolumeSpecPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *SdkStoragePolicy) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *SdkStoragePolicy) GetAllowUpdate() bool {
	if x != nil {
		return x.AllowUpdate
	}
	return false
}

func (x *SdkStoragePolicy) GetOwnership() *Ownership {
	if x != nil {
		return x.Ownership
	}
	return nil
}

// Alert is a structure that represents an alert object
type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id for Alert
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Severity of the Alert
	Severity SeverityType `protobuf:"varint,2,opt,name=severity,proto3,enum=openstorage.api.SeverityType" json:"severity,omitempty"`
	// AlertType user defined alert type
	AlertType int64 `protobuf:"varint,3,opt,name=alert_type,json=alertType,proto3" json:"alert_type,omitempty"`
	// Message describing the Alert
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	//Timestamp when Alert occurred
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// ResourceId where Alert occurred
	ResourceId string `protobuf:"bytes,6,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Resource where Alert occurred
	Resource ResourceType `protobuf:"varint,7,opt,name=resource,proto3,enum=openstorage.api.ResourceType" json:"resource,omitempty"`
	// Cleared Flag
	Cleared bool `protobuf:"varint,8,opt,name=cleared,proto3" json:"cleared,omitempty"`
	// Time-to-live in seconds for this Alert
	Ttl uint64 `protobuf:"varint,9,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// UniqueTag helps identify a unique alert for a given resouce
	UniqueTag string `protobuf:"bytes,10,opt,name=unique_tag,json=uniqueTag,proto3" json:"unique_tag,omitempty"`
	// Count of such alerts raised so far.
	Count int64 `protobuf:"varint,11,opt,name=count,proto3" json:"count,omitempty"`
	// Timestamp when such alert was raised the very first time.
	FirstSeen *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{40}
}

func (x *Alert) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Alert) GetSeverity() SeverityType {
	if x != nil {
		return x.Severity
	}
	return SeverityType_SEVERITY_TYPE_NONE
}

func (x *Alert) GetAlertType() int64 {
	if x != nil {
		return x.AlertType
	}
	return 0
}

func (x *Alert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Alert) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Alert) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *Alert) GetResource() ResourceType {
	if x != nil {
		return x.Resource
	}
	return ResourceType_RESOURCE_TYPE_NONE
}

func (x *Alert) GetCleared() bool {
	if x != nil {
		return x.Cleared
	}
	return false
}

func (x *Alert) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *Alert) GetUniqueTag() string {
	if x != nil {
		return x.UniqueTag
	}
	return ""
}

func (x *Alert) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Alert) GetFirstSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSeen
	}
	return nil
}

// SdkAlertsTimeSpan to store time window information.
type SdkAlertsTimeSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Start timestamp when Alert occurred
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	//End timestamp when Alert occurred
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *SdkAlertsTimeSpan) Reset() {
	*x = SdkAlertsTimeSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAlertsTimeSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAlertsTimeSpan) ProtoMessage() {}

func (x *SdkAlertsTimeSpan) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAlertsTimeSpan.ProtoReflect.Descriptor instead.
func (*SdkAlertsTimeSpan) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{41}
}

func (x *SdkAlertsTimeSpan) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SdkAlertsTimeSpan) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// SdkAlertsCountSpan to store count range information.
type SdkAlertsCountSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Min count of such alerts raised so far.
	MinCount int64 `protobuf:"varint,1,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty"`
	// Max count of such alerts raised so far.
	MaxCount int64 `protobuf:"varint,2,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
}

func (x *SdkAlertsCountSpan) Reset() {
	*x = SdkAlertsCountSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAlertsCountSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAlertsCountSpan) ProtoMessage() {}

func (x *SdkAlertsCountSpan) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAlertsCountSpan.ProtoReflect.Descriptor instead.
func (*SdkAlertsCountSpan) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{42}
}

func (x *SdkAlertsCountSpan) GetMinCount() int64 {
	if x != nil {
		return x.MinCount
	}
	return 0
}

func (x *SdkAlertsCountSpan) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

// SdkAlertsOption contains options for filtering alerts.
type SdkAlertsOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Opt:
	//	*SdkAlertsOption_MinSeverityType
	//	*SdkAlertsOption_IsCleared
	//	*SdkAlertsOption_TimeSpan
	//	*SdkAlertsOption_CountSpan
	Opt isSdkAlertsOption_Opt `protobuf_oneof:"opt"`
}

func (x *SdkAlertsOption) Reset() {
	*x = SdkAlertsOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAlertsOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAlertsOption) ProtoMessage() {}

func (x *SdkAlertsOption) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAlertsOption.ProtoReflect.Descriptor instead.
func (*SdkAlertsOption) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{43}
}

func (m *SdkAlertsOption) GetOpt() isSdkAlertsOption_Opt {
	if m != nil {
		return m.Opt
	}
	return nil
}

func (x *SdkAlertsOption) GetMinSeverityType() SeverityType {
	if x, ok := x.GetOpt().(*SdkAlertsOption_MinSeverityType); ok {
		return x.MinSeverityType
	}
	return SeverityType_SEVERITY_TYPE_NONE
}

func (x *SdkAlertsOption) GetIsCleared() bool {
	if x, ok := x.GetOpt().(*SdkAlertsOption_IsCleared); ok {
		return x.IsCleared
	}
	return false
}

func (x *SdkAlertsOption) GetTimeSpan() *SdkAlertsTimeSpan {
	if x, ok := x.GetOpt().(*SdkAlertsOption_TimeSpan); ok {
		return x.TimeSpan
	}
	return nil
}

func (x *SdkAlertsOption) GetCountSpan() *SdkAlertsCountSpan {
	if x, ok := x.GetOpt().(*SdkAlertsOption_CountSpan); ok {
		return x.CountSpan
	}
	return nil
}

type isSdkAlertsOption_Opt interface {
	isSdkAlertsOption_Opt()
}

type SdkAlertsOption_MinSeverityType struct {
	// Query using minimum severity type.
	MinSeverityType SeverityType `protobuf:"varint,1,opt,name=min_severity_type,json=minSeverityType,proto3,enum=openstorage.api.SeverityType,oneof"`
}

type SdkAlertsOption_IsCleared struct {
	// Query using cleared flag.
	IsCleared bool `protobuf:"varint,2,opt,name=is_cleared,json=isCleared,proto3,oneof"`
}

type SdkAlertsOption_TimeSpan struct {
	// Query using a time span during which alert was last seen.
	TimeSpan *SdkAlertsTimeSpan `protobuf:"bytes,3,opt,name=time_span,json=timeSpan,proto3,oneof"`
}

type SdkAlertsOption_CountSpan struct {
	// Query using a count span in which alert count exists.
	CountSpan *SdkAlertsCountSpan `protobuf:"bytes,4,opt,name=count_span,json=countSpan,proto3,oneof"`
}

func (*SdkAlertsOption_MinSeverityType) isSdkAlertsOption_Opt() {}

func (*SdkAlertsOption_IsCleared) isSdkAlertsOption_Opt() {}

func (*SdkAlertsOption_TimeSpan) isSdkAlertsOption_Opt() {}

func (*SdkAlertsOption_CountSpan) isSdkAlertsOption_Opt() {}

// SdkAlertsResourceTypeQuery queries for alerts using only resource id.
type SdkAlertsResourceTypeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource type used to build query.
	ResourceType ResourceType `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=openstorage.api.ResourceType" json:"resource_type,omitempty"`
}

func (x *SdkAlertsResourceTypeQuery) Reset() {
	*x = SdkAlertsResourceTypeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAlertsResourceTypeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAlertsResourceTypeQuery) ProtoMessage() {}

func (x *SdkAlertsResourceTypeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAlertsResourceTypeQuery.ProtoReflect.Descriptor instead.
func (*SdkAlertsResourceTypeQuery) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{44}
}

func (x *SdkAlertsResourceTypeQuery) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_RESOURCE_TYPE_NONE
}

// SdkAlertsAlertTypeQuery queries for alerts using alert type
// and it requires that resource type be provided as well.
type SdkAlertsAlertTypeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource type used to build query.
	ResourceType ResourceType `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=openstorage.api.ResourceType" json:"resource_type,omitempty"`
	// Alert type used to build query.
	AlertType int64 `protobuf:"varint,2,opt,name=alert_type,json=alertType,proto3" json:"alert_type,omitempty"`
}

func (x *SdkAlertsAlertTypeQuery) Reset() {
	*x = SdkAlertsAlertTypeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAlertsAlertTypeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAlertsAlertTypeQuery) ProtoMessage() {}

func (x *SdkAlertsAlertTypeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAlertsAlertTypeQuery.ProtoReflect.Descriptor instead.
func (*SdkAlertsAlertTypeQuery) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{45}
}

func (x *SdkAlertsAlertTypeQuery) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_RESOURCE_TYPE_NONE
}

func (x *SdkAlertsAlertTypeQuery) GetAlertType() int64 {
	if x != nil {
		return x.AlertType
	}
	return 0
}

// SdkAlertsResourceIdQuery queries for alerts using resource id
// and it requires that both alert type and resource type be provided
// as well.
type SdkAlertsResourceIdQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource type used to build query.
	ResourceType ResourceType `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=openstorage.api.ResourceType" json:"resource_type,omitempty"`
	// Alert type used to build query.
	AlertType int64 `protobuf:"varint,2,opt,name=alert_type,json=alertType,proto3" json:"alert_type,omitempty"`
	// Resource ID used to build query.
	ResourceId string `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *SdkAlertsResourceIdQuery) Reset() {
	*x = SdkAlertsResourceIdQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAlertsResourceIdQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAlertsResourceIdQuery) ProtoMessage() {}

func (x *SdkAlertsResourceIdQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAlertsResourceIdQuery.ProtoReflect.Descriptor instead.
func (*SdkAlertsResourceIdQuery) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{46}
}

func (x *SdkAlertsResourceIdQuery) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_RESOURCE_TYPE_NONE
}

func (x *SdkAlertsResourceIdQuery) GetAlertType() int64 {
	if x != nil {
		return x.AlertType
	}
	return 0
}

func (x *SdkAlertsResourceIdQuery) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// SdkAlertsQuery is one of the query types and a list of options.
// Each query object is one of the three query types and a list of
// options.
type SdkAlertsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of the query types can be used to build SdkAlertsQuery.
	//
	// Types that are assignable to Query:
	//	*SdkAlertsQuery_ResourceTypeQuery
	//	*SdkAlertsQuery_AlertTypeQuery
	//	*SdkAlertsQuery_ResourceIdQuery
	Query isSdkAlertsQuery_Query `protobuf_oneof:"query"`
	// Opts is a list of options associated with one of the queries.
	Opts []*SdkAlertsOption `protobuf:"bytes,4,rep,name=opts,proto3" json:"opts,omitempty"`
}

func (x *SdkAlertsQuery) Reset() {
	*x = SdkAlertsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAlertsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAlertsQuery) ProtoMessage() {}

func (x *SdkAlertsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAlertsQuery.ProtoReflect.Descriptor instead.
func (*SdkAlertsQuery) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{47}
}

func (m *SdkAlertsQuery) GetQuery() isSdkAlertsQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *SdkAlertsQuery) GetResourceTypeQuery() *SdkAlertsResourceTypeQuery {
	if x, ok := x.GetQuery().(*SdkAlertsQuery_ResourceTypeQuery); ok {
		return x.ResourceTypeQuery
	}
	return nil
}

func (x *SdkAlertsQuery) GetAlertTypeQuery() *SdkAlertsAlertTypeQuery {
	if x, ok := x.GetQuery().(*SdkAlertsQuery_AlertTypeQuery); ok {
		return x.AlertTypeQuery
	}
	return nil
}

func (x *SdkAlertsQuery) GetResourceIdQuery() *SdkAlertsResourceIdQuery {
	if x, ok := x.GetQuery().(*SdkAlertsQuery_ResourceIdQuery); ok {
		return x.ResourceIdQuery
	}
	return nil
}

func (x *SdkAlertsQuery) GetOpts() []*SdkAlertsOption {
	if x != nil {
		return x.Opts
	}
	return nil
}

type isSdkAlertsQuery_Query interface {
	isSdkAlertsQuery_Query()
}

type SdkAlertsQuery_ResourceTypeQuery struct {
	// Query only using resource type.
	ResourceTypeQuery *SdkAlertsResourceTypeQuery `protobuf:"bytes,1,opt,name=resource_type_query,json=resourceTypeQuery,proto3,oneof"`
}

type SdkAlertsQuery_AlertTypeQuery struct {
	// Query using alert type and resource type.
	AlertTypeQuery *SdkAlertsAlertTypeQuery `protobuf:"bytes,2,opt,name=alert_type_query,json=alertTypeQuery,proto3,oneof"`
}

type SdkAlertsQuery_ResourceIdQuery struct {
	// Query using resource id, alert type and resource type.
	ResourceIdQuery *SdkAlertsResourceIdQuery `protobuf:"bytes,3,opt,name=resource_id_query,json=resourceIdQuery,proto3,oneof"`
}

func (*SdkAlertsQuery_ResourceTypeQuery) isSdkAlertsQuery_Query() {}

func (*SdkAlertsQuery_AlertTypeQuery) isSdkAlertsQuery_Query() {}

func (*SdkAlertsQuery_ResourceIdQuery) isSdkAlertsQuery_Query() {}

// SdkAlertsEnumerateRequest is a request message to enumerate alerts.
type SdkAlertsEnumerateWithFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// It is a list of queries to find matching alerts.
	// Output of each of these queries is added to a global pool
	// and returned as output of an RPC call.
	// In that sense alerts are fetched if they match any of the
	// queries.
	Queries []*SdkAlertsQuery `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *SdkAlertsEnumerateWithFiltersRequest) Reset() {
	*x = SdkAlertsEnumerateWithFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAlertsEnumerateWithFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAlertsEnumerateWithFiltersRequest) ProtoMessage() {}

func (x *SdkAlertsEnumerateWithFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAlertsEnumerateWithFiltersRequest.ProtoReflect.Descriptor instead.
func (*SdkAlertsEnumerateWithFiltersRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{48}
}

func (x *SdkAlertsEnumerateWithFiltersRequest) GetQueries() []*SdkAlertsQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

// SdkAlertsEnumerateResponse is a list of alerts.
type SdkAlertsEnumerateWithFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Response contains a list of alerts.
	Alerts []*Alert `protobuf:"bytes,1,rep,name=alerts,proto3" json:"alerts,omitempty"`
}

func (x *SdkAlertsEnumerateWithFiltersResponse) Reset() {
	*x = SdkAlertsEnumerateWithFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAlertsEnumerateWithFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAlertsEnumerateWithFiltersResponse) ProtoMessage() {}

func (x *SdkAlertsEnumerateWithFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAlertsEnumerateWithFiltersResponse.ProtoReflect.Descriptor instead.
func (*SdkAlertsEnumerateWithFiltersResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{49}
}

func (x *SdkAlertsEnumerateWithFiltersResponse) GetAlerts() []*Alert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

// SdkAlertsDeleteRequest is a request message to delete alerts.
type SdkAlertsDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// It takes a list of queries to find matching alerts.
	// Matching alerts are deleted.
	Queries []*SdkAlertsQuery `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *SdkAlertsDeleteRequest) Reset() {
	*x = SdkAlertsDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAlertsDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAlertsDeleteRequest) ProtoMessage() {}

func (x *SdkAlertsDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAlertsDeleteRequest.ProtoReflect.Descriptor instead.
func (*SdkAlertsDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{50}
}

func (x *SdkAlertsDeleteRequest) GetQueries() []*SdkAlertsQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

// SdkAlertsDeleteResponse is empty.
type SdkAlertsDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkAlertsDeleteResponse) Reset() {
	*x = SdkAlertsDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAlertsDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAlertsDeleteResponse) ProtoMessage() {}

func (x *SdkAlertsDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAlertsDeleteResponse.ProtoReflect.Descriptor instead.
func (*SdkAlertsDeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{51}
}

// Alerts is an array of Alert objects
type Alerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alert []*Alert `protobuf:"bytes,1,rep,name=alert,proto3" json:"alert,omitempty"`
}

func (x *Alerts) Reset() {
	*x = Alerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alerts) ProtoMessage() {}

func (x *Alerts) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alerts.ProtoReflect.Descriptor instead.
func (*Alerts) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{52}
}

func (x *Alerts) GetAlert() []*Alert {
	if x != nil {
		return x.Alert
	}
	return nil
}

// ObjectstoreInfo is a structure that has current objectstore info
type ObjectstoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of objectstore
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// VolumeID of volume used by object store
	VolumeId string `protobuf:"bytes,2,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Enable/Disable created objectstore
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Status of objectstore running/failed
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// Action being taken on this objectstore
	Action int64 `protobuf:"varint,5,opt,name=action,proto3" json:"action,omitempty"`
	// AccessKey for login into objectstore
	AccessKey string `protobuf:"bytes,6,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	// SecretKey for login into objectstore
	SecretKey string `protobuf:"bytes,7,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// Endpoints for accessing objectstore
	Endpoints []string `protobuf:"bytes,8,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// CurrentEndpoint on which objectstore server is accessible
	CurrentEndpoint string `protobuf:"bytes,9,opt,name=current_endpoint,json=currentEndpoint,proto3" json:"current_endpoint,omitempty"`
	// AccessPort is objectstore server port
	AccessPort int64 `protobuf:"varint,10,opt,name=access_port,json=accessPort,proto3" json:"access_port,omitempty"`
	// Region for this objectstore
	Region string `protobuf:"bytes,11,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *ObjectstoreInfo) Reset() {
	*x = ObjectstoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectstoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectstoreInfo) ProtoMessage() {}

func (x *ObjectstoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectstoreInfo.ProtoReflect.Descriptor instead.
func (*ObjectstoreInfo) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{53}
}

func (x *ObjectstoreInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ObjectstoreInfo) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *ObjectstoreInfo) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ObjectstoreInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ObjectstoreInfo) GetAction() int64 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *ObjectstoreInfo) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *ObjectstoreInfo) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *ObjectstoreInfo) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *ObjectstoreInfo) GetCurrentEndpoint() string {
	if x != nil {
		return x.CurrentEndpoint
	}
	return ""
}

func (x *ObjectstoreInfo) GetAccessPort() int64 {
	if x != nil {
		return x.AccessPort
	}
	return 0
}

func (x *ObjectstoreInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// VolumeCreateRequest is a structure that has the locator, source and spec
// to create a volume
type VolumeCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User specified volume name and labels
	Locator *VolumeLocator `protobuf:"bytes,1,opt,name=locator,proto3" json:"locator,omitempty"`
	// Source to create volume
	Source *Source `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// The storage spec for the volume
	Spec *VolumeSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *VolumeCreateRequest) Reset() {
	*x = VolumeCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCreateRequest) ProtoMessage() {}

func (x *VolumeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCreateRequest.ProtoReflect.Descriptor instead.
func (*VolumeCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{54}
}

func (x *VolumeCreateRequest) GetLocator() *VolumeLocator {
	if x != nil {
		return x.Locator
	}
	return nil
}

func (x *VolumeCreateRequest) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *VolumeCreateRequest) GetSpec() *VolumeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// VolumeResponse is a structure that wraps an error.
type VolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error message
	//
	// in: body
	// Required: true
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *VolumeResponse) Reset() {
	*x = VolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeResponse) ProtoMessage() {}

func (x *VolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeResponse.ProtoReflect.Descriptor instead.
func (*VolumeResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{55}
}

func (x *VolumeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// VolumeCreateResponse
type VolumeCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created volume
	//
	// in: body
	// Required: true
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Volume Response
	//
	// in: body
	// Required: true
	VolumeResponse *VolumeResponse `protobuf:"bytes,2,opt,name=volume_response,json=volumeResponse,proto3" json:"volume_response,omitempty"`
}

func (x *VolumeCreateResponse) Reset() {
	*x = VolumeCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCreateResponse) ProtoMessage() {}

func (x *VolumeCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCreateResponse.ProtoReflect.Descriptor instead.
func (*VolumeCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{56}
}

func (x *VolumeCreateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VolumeCreateResponse) GetVolumeResponse() *VolumeResponse {
	if x != nil {
		return x.VolumeResponse
	}
	return nil
}

// VolumeStateAction specifies desired actions.
type VolumeStateAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Attach or Detach volume
	Attach VolumeActionParam `protobuf:"varint,1,opt,name=attach,proto3,enum=openstorage.api.VolumeActionParam" json:"attach,omitempty"`
	// Mount or unmount volume
	Mount VolumeActionParam `protobuf:"varint,2,opt,name=mount,proto3,enum=openstorage.api.VolumeActionParam" json:"mount,omitempty"`
	// MountPath Path where the device is mounted
	MountPath string `protobuf:"bytes,3,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	// DevicePath Path returned in attach
	DevicePath string `protobuf:"bytes,4,opt,name=device_path,json=devicePath,proto3" json:"device_path,omitempty"`
}

func (x *VolumeStateAction) Reset() {
	*x = VolumeStateAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeStateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeStateAction) ProtoMessage() {}

func (x *VolumeStateAction) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeStateAction.ProtoReflect.Descriptor instead.
func (*VolumeStateAction) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{57}
}

func (x *VolumeStateAction) GetAttach() VolumeActionParam {
	if x != nil {
		return x.Attach
	}
	return VolumeActionParam_VOLUME_ACTION_PARAM_NONE
}

func (x *VolumeStateAction) GetMount() VolumeActionParam {
	if x != nil {
		return x.Mount
	}
	return VolumeActionParam_VOLUME_ACTION_PARAM_NONE
}

func (x *VolumeStateAction) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *VolumeStateAction) GetDevicePath() string {
	if x != nil {
		return x.DevicePath
	}
	return ""
}

// VolumeSet specifies a request to update a volume.
type VolumeSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User specified volume name and labels
	Locator *VolumeLocator `protobuf:"bytes,1,opt,name=locator,proto3" json:"locator,omitempty"`
	// The storage spec for the volume
	Spec *VolumeSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// State modification on this volume.
	Action *VolumeStateAction `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	// additional options
	// required for the Set operation.
	Options map[string]string `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VolumeSetRequest) Reset() {
	*x = VolumeSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSetRequest) ProtoMessage() {}

func (x *VolumeSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSetRequest.ProtoReflect.Descriptor instead.
func (*VolumeSetRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{58}
}

func (x *VolumeSetRequest) GetLocator() *VolumeLocator {
	if x != nil {
		return x.Locator
	}
	return nil
}

func (x *VolumeSetRequest) GetSpec() *VolumeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *VolumeSetRequest) GetAction() *VolumeStateAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *VolumeSetRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

// VolumeSetResponse
type VolumeSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Volume
	Volume *Volume `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	//VolumeResponse
	VolumeResponse *VolumeResponse `protobuf:"bytes,2,opt,name=volume_response,json=volumeResponse,proto3" json:"volume_response,omitempty"`
}

func (x *VolumeSetResponse) Reset() {
	*x = VolumeSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSetResponse) ProtoMessage() {}

func (x *VolumeSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSetResponse.ProtoReflect.Descriptor instead.
func (*VolumeSetResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{59}
}

func (x *VolumeSetResponse) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *VolumeSetResponse) GetVolumeResponse() *VolumeResponse {
	if x != nil {
		return x.VolumeResponse
	}
	return nil
}

// SnapCreateRequest specifies a request to create a snapshot of given volume.
type SnapCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// volume id
	Id       string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Locator  *VolumeLocator `protobuf:"bytes,2,opt,name=locator,proto3" json:"locator,omitempty"`
	Readonly bool           `protobuf:"varint,3,opt,name=readonly,proto3" json:"readonly,omitempty"`
	// NoRetry indicates not to retry snapshot creation in the background.
	NoRetry bool `protobuf:"varint,4,opt,name=no_retry,json=noRetry,proto3" json:"no_retry,omitempty"`
}

func (x *SnapCreateRequest) Reset() {
	*x = SnapCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapCreateRequest) ProtoMessage() {}

func (x *SnapCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapCreateRequest.ProtoReflect.Descriptor instead.
func (*SnapCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{60}
}

func (x *SnapCreateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SnapCreateRequest) GetLocator() *VolumeLocator {
	if x != nil {
		return x.Locator
	}
	return nil
}

func (x *SnapCreateRequest) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *SnapCreateRequest) GetNoRetry() bool {
	if x != nil {
		return x.NoRetry
	}
	return false
}

// SnapCreateRequest specifies a response that get's returned when creating a snapshot.
type SnapCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VolumeCreateResponse
	//
	// in: body
	// Required: true
	VolumeCreateResponse *VolumeCreateResponse `protobuf:"bytes,1,opt,name=volume_create_response,json=volumeCreateResponse,proto3" json:"volume_create_response,omitempty"`
}

func (x *SnapCreateResponse) Reset() {
	*x = SnapCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapCreateResponse) ProtoMessage() {}

func (x *SnapCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapCreateResponse.ProtoReflect.Descriptor instead.
func (*SnapCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{61}
}

func (x *SnapCreateResponse) GetVolumeCreateResponse() *VolumeCreateResponse {
	if x != nil {
		return x.VolumeCreateResponse
	}
	return nil
}

// VolumeInfo
type VolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId string      `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	Path     string      `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Storage  *VolumeSpec `protobuf:"bytes,3,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *VolumeInfo) Reset() {
	*x = VolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeInfo) ProtoMessage() {}

func (x *VolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeInfo.ProtoReflect.Descriptor instead.
func (*VolumeInfo) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{62}
}

func (x *VolumeInfo) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *VolumeInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *VolumeInfo) GetStorage() *VolumeSpec {
	if x != nil {
		return x.Storage
	}
	return nil
}

// VolumeConsumer identifies a consumer for a Volume. An example of a VolumeConsumer
// would be a Pod in Kubernetes who has mounted the PersistentVolumeClaim for the
// Volume
type VolumeConsumer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of the volume consumer
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace is the namespace of the volume consumer
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Type is the type of the consumer. E.g a Kubernetes pod
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// NodeID is the identifier of the node on which the consumer is running. This
	// identifier would be from the perspective of the container runtime or
	// orchestrator under which the volume consumer resides. For example, NodeID
	//  can be name of a minion in Kubernetes.
	NodeId string `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// OwnerName is the name of the entity who owns this volume consumer
	OwnerName string `protobuf:"bytes,5,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	// OwnerType is the type of the entity who owns this volume consumer. The type would
	// be from the perspective of the container runtime or the orchestrator under which
	// the volume consumer resides. For e.g OwnerType can be a Deployment in Kubernetes.
	OwnerType string `protobuf:"bytes,6,opt,name=owner_type,json=ownerType,proto3" json:"owner_type,omitempty"`
}

func (x *VolumeConsumer) Reset() {
	*x = VolumeConsumer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeConsumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeConsumer) ProtoMessage() {}

func (x *VolumeConsumer) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeConsumer.ProtoReflect.Descriptor instead.
func (*VolumeConsumer) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{63}
}

func (x *VolumeConsumer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeConsumer) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VolumeConsumer) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VolumeConsumer) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *VolumeConsumer) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *VolumeConsumer) GetOwnerType() string {
	if x != nil {
		return x.OwnerType
	}
	return ""
}

// VolumeServiceRequest provides details on what volume service command to
// perform in background on the volume
type VolumeServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User specified volume service command
	SrvCmd string `protobuf:"bytes,1,opt,name=srv_cmd,json=srvCmd,proto3" json:"srv_cmd,omitempty"`
	// User specified volume service command's params
	SrvCmdParams map[string]string `protobuf:"bytes,2,rep,name=srv_cmd_params,json=srvCmdParams,proto3" json:"srv_cmd_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VolumeServiceRequest) Reset() {
	*x = VolumeServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeServiceRequest) ProtoMessage() {}

func (x *VolumeServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeServiceRequest.ProtoReflect.Descriptor instead.
func (*VolumeServiceRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{64}
}

func (x *VolumeServiceRequest) GetSrvCmd() string {
	if x != nil {
		return x.SrvCmd
	}
	return ""
}

func (x *VolumeServiceRequest) GetSrvCmdParams() map[string]string {
	if x != nil {
		return x.SrvCmdParams
	}
	return nil
}

type VolumeServiceInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Status information exposed a map
	Status map[string]string `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VolumeServiceInstanceResponse) Reset() {
	*x = VolumeServiceInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeServiceInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeServiceInstanceResponse) ProtoMessage() {}

func (x *VolumeServiceInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeServiceInstanceResponse.ProtoReflect.Descriptor instead.
func (*VolumeServiceInstanceResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{65}
}

func (x *VolumeServiceInstanceResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *VolumeServiceInstanceResponse) GetStatus() map[string]string {
	if x != nil {
		return x.Status
	}
	return nil
}

// VolumeServiceResponse specifies the response to a Volume Service command
// performed on a volumen
type VolumeServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of VolumeServiceInstanceResponse returned as part of this response
	// structure
	VolSrvRspObjCnt int32                            `protobuf:"varint,1,opt,name=vol_srv_rsp_obj_cnt,json=volSrvRspObjCnt,proto3" json:"vol_srv_rsp_obj_cnt,omitempty"`
	VolSrvRsp       []*VolumeServiceInstanceResponse `protobuf:"bytes,2,rep,name=vol_srv_rsp,json=volSrvRsp,proto3" json:"vol_srv_rsp,omitempty"`
}

func (x *VolumeServiceResponse) Reset() {
	*x = VolumeServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeServiceResponse) ProtoMessage() {}

func (x *VolumeServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeServiceResponse.ProtoReflect.Descriptor instead.
func (*VolumeServiceResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{66}
}

func (x *VolumeServiceResponse) GetVolSrvRspObjCnt() int32 {
	if x != nil {
		return x.VolSrvRspObjCnt
	}
	return 0
}

func (x *VolumeServiceResponse) GetVolSrvRsp() []*VolumeServiceInstanceResponse {
	if x != nil {
		return x.VolSrvRsp
	}
	return nil
}

// GraphDriverChanges represent a list of changes between the filesystem layers
// specified by the ID and Parent.  // Parent may be an empty string, in which
// case there is no parent.
// Where the Path is the filesystem path within the layered filesystem
type GraphDriverChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string                `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Kind GraphDriverChangeType `protobuf:"varint,2,opt,name=kind,proto3,enum=openstorage.api.GraphDriverChangeType" json:"kind,omitempty"`
}

func (x *GraphDriverChanges) Reset() {
	*x = GraphDriverChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphDriverChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphDriverChanges) ProtoMessage() {}

func (x *GraphDriverChanges) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphDriverChanges.ProtoReflect.Descriptor instead.
func (*GraphDriverChanges) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{67}
}

func (x *GraphDriverChanges) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GraphDriverChanges) GetKind() GraphDriverChangeType {
	if x != nil {
		return x.Kind
	}
	return GraphDriverChangeType_GRAPH_DRIVER_CHANGE_TYPE_NONE
}

// ClusterResponse specifies a response that gets returned when requesting the cluster
type ClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code
	//
	// in: body
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ClusterResponse) Reset() {
	*x = ClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResponse) ProtoMessage() {}

func (x *ClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResponse.ProtoReflect.Descriptor instead.
func (*ClusterResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{68}
}

func (x *ClusterResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Active Request
type ActiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqestKV map[int64]string `protobuf:"bytes,1,rep,name=ReqestKV,proto3" json:"ReqestKV,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ActiveRequest) Reset() {
	*x = ActiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveRequest) ProtoMessage() {}

func (x *ActiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveRequest.ProtoReflect.Descriptor instead.
func (*ActiveRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{69}
}

func (x *ActiveRequest) GetReqestKV() map[int64]string {
	if x != nil {
		return x.ReqestKV
	}
	return nil
}

// Active Requests
type ActiveRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestCount  int64            `protobuf:"varint,1,opt,name=RequestCount,proto3" json:"RequestCount,omitempty"`
	ActiveRequest []*ActiveRequest `protobuf:"bytes,2,rep,name=ActiveRequest,proto3" json:"ActiveRequest,omitempty"`
}

func (x *ActiveRequests) Reset() {
	*x = ActiveRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveRequests) ProtoMessage() {}

func (x *ActiveRequests) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveRequests.ProtoReflect.Descriptor instead.
func (*ActiveRequests) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{70}
}

func (x *ActiveRequests) GetRequestCount() int64 {
	if x != nil {
		return x.RequestCount
	}
	return 0
}

func (x *ActiveRequests) GetActiveRequest() []*ActiveRequest {
	if x != nil {
		return x.ActiveRequest
	}
	return nil
}

// GroupSnapCreateRequest specifies a request to create a snapshot of given group.
type GroupSnapCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Labels          map[string]string `protobuf:"bytes,2,rep,name=Labels,proto3" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VolumeIds       []string          `protobuf:"bytes,3,rep,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
	DeleteOnFailure bool              `protobuf:"varint,4,opt,name=delete_on_failure,json=deleteOnFailure,proto3" json:"delete_on_failure,omitempty"`
}

func (x *GroupSnapCreateRequest) Reset() {
	*x = GroupSnapCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupSnapCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSnapCreateRequest) ProtoMessage() {}

func (x *GroupSnapCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSnapCreateRequest.ProtoReflect.Descriptor instead.
func (*GroupSnapCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{71}
}

func (x *GroupSnapCreateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GroupSnapCreateRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GroupSnapCreateRequest) GetVolumeIds() []string {
	if x != nil {
		return x.VolumeIds
	}
	return nil
}

func (x *GroupSnapCreateRequest) GetDeleteOnFailure() bool {
	if x != nil {
		return x.DeleteOnFailure
	}
	return false
}

// GroupSnapCreateRequest specifies a response that get's returned when creating a group snapshot.
type GroupSnapCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Created snapshots
	//
	// in: body
	// Required: true
	Snapshots map[string]*SnapCreateResponse `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Error message
	//
	// in: body
	// Required: true
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GroupSnapCreateResponse) Reset() {
	*x = GroupSnapCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupSnapCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSnapCreateResponse) ProtoMessage() {}

func (x *GroupSnapCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSnapCreateResponse.ProtoReflect.Descriptor instead.
func (*GroupSnapCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{72}
}

func (x *GroupSnapCreateResponse) GetSnapshots() map[string]*SnapCreateResponse {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *GroupSnapCreateResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// StorageNode describes the state of the node
type StorageNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the node
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Cpu usage of the node
	Cpu float64 `protobuf:"fixed64,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Total memory of the node
	MemTotal uint64 `protobuf:"varint,3,opt,name=mem_total,json=memTotal,proto3" json:"mem_total,omitempty"`
	// Used memory of the node
	MemUsed uint64 `protobuf:"varint,4,opt,name=mem_used,json=memUsed,proto3" json:"mem_used,omitempty"`
	// Free memory of the node
	MemFree uint64 `protobuf:"varint,5,opt,name=mem_free,json=memFree,proto3" json:"mem_free,omitempty"`
	// Average load (percentage)
	AvgLoad int64 `protobuf:"varint,6,opt,name=avg_load,json=avgLoad,proto3" json:"avg_load,omitempty"`
	// Node status
	Status Status `protobuf:"varint,7,opt,name=status,proto3,enum=openstorage.api.Status" json:"status,omitempty"`
	// List of disks on the node
	Disks map[string]*StorageResource `protobuf:"bytes,9,rep,name=disks,proto3" json:"disks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of storage pools this node supports
	Pools []*StoragePool `protobuf:"bytes,10,rep,name=pools,proto3" json:"pools,omitempty"`
	// Management IP
	MgmtIp string `protobuf:"bytes,11,opt,name=mgmt_ip,json=mgmtIp,proto3" json:"mgmt_ip,omitempty"`
	// Data IP
	DataIp string `protobuf:"bytes,12,opt,name=data_ip,json=dataIp,proto3" json:"data_ip,omitempty"`
	// Hostname of the node
	Hostname string `protobuf:"bytes,15,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// User defined labels for the node
	NodeLabels map[string]string `protobuf:"bytes,16,rep,name=node_labels,json=nodeLabels,proto3" json:"node_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// SchedulerNodeName is name of the node in scheduler context. It can be
	// empty if unable to get the name from the scheduler.
	SchedulerNodeName string `protobuf:"bytes,17,opt,name=scheduler_node_name,json=schedulerNodeName,proto3" json:"scheduler_node_name,omitempty"`
	// HardwareType is the type of the hardware the node has
	HWType HardwareType `protobuf:"varint,18,opt,name=HWType,proto3,enum=openstorage.api.HardwareType" json:"HWType,omitempty"`
	// Determine if the node is secured
	SecurityStatus StorageNode_SecurityStatus `protobuf:"varint,19,opt,name=security_status,json=securityStatus,proto3,enum=openstorage.api.StorageNode_SecurityStatus" json:"security_status,omitempty"`
	// Topology information of the node in scheduler context
	SchedulerTopology *SchedulerTopology `protobuf:"bytes,20,opt,name=scheduler_topology,json=schedulerTopology,proto3" json:"scheduler_topology,omitempty"`
}

func (x *StorageNode) Reset() {
	*x = StorageNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageNode) ProtoMessage() {}

func (x *StorageNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageNode.ProtoReflect.Descriptor instead.
func (*StorageNode) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{73}
}

func (x *StorageNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StorageNode) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *StorageNode) GetMemTotal() uint64 {
	if x != nil {
		return x.MemTotal
	}
	return 0
}

func (x *StorageNode) GetMemUsed() uint64 {
	if x != nil {
		return x.MemUsed
	}
	return 0
}

func (x *StorageNode) GetMemFree() uint64 {
	if x != nil {
		return x.MemFree
	}
	return 0
}

func (x *StorageNode) GetAvgLoad() int64 {
	if x != nil {
		return x.AvgLoad
	}
	return 0
}

func (x *StorageNode) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_NONE
}

func (x *StorageNode) GetDisks() map[string]*StorageResource {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *StorageNode) GetPools() []*StoragePool {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *StorageNode) GetMgmtIp() string {
	if x != nil {
		return x.MgmtIp
	}
	return ""
}

func (x *StorageNode) GetDataIp() string {
	if x != nil {
		return x.DataIp
	}
	return ""
}

func (x *StorageNode) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *StorageNode) GetNodeLabels() map[string]string {
	if x != nil {
		return x.NodeLabels
	}
	return nil
}

func (x *StorageNode) GetSchedulerNodeName() string {
	if x != nil {
		return x.SchedulerNodeName
	}
	return ""
}

func (x *StorageNode) GetHWType() HardwareType {
	if x != nil {
		return x.HWType
	}
	return HardwareType_UnknownMachine
}

func (x *StorageNode) GetSecurityStatus() StorageNode_SecurityStatus {
	if x != nil {
		return x.SecurityStatus
	}
	return StorageNode_UNSPECIFIED
}

func (x *StorageNode) GetSchedulerTopology() *SchedulerTopology {
	if x != nil {
		return x.SchedulerTopology
	}
	return nil
}

// StorageCluster represents the state and information about the cluster
type StorageCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the cluster
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=openstorage.api.Status" json:"status,omitempty"`
	// Id of the cluster
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the cluster
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StorageCluster) Reset() {
	*x = StorageCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageCluster) ProtoMessage() {}

func (x *StorageCluster) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageCluster.ProtoReflect.Descriptor instead.
func (*StorageCluster) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{74}
}

func (x *StorageCluster) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_NONE
}

func (x *StorageCluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StorageCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Defines a request to create a bucket.
type BucketCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name of the bucket. This will be used for idempotency.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Region in which bucket will be created.
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// Endpoint to use when creating the bucket
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	//Anonymous access policy for the bucket.
	AnonymousBucketAccessMode AnonymousBucketAccessMode `protobuf:"varint,4,opt,name=anonymousBucketAccessMode,proto3,enum=openstorage.api.AnonymousBucketAccessMode" json:"anonymousBucketAccessMode,omitempty"`
}

func (x *BucketCreateRequest) Reset() {
	*x = BucketCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketCreateRequest) ProtoMessage() {}

func (x *BucketCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketCreateRequest.ProtoReflect.Descriptor instead.
func (*BucketCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{75}
}

func (x *BucketCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BucketCreateRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *BucketCreateRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *BucketCreateRequest) GetAnonymousBucketAccessMode() AnonymousBucketAccessMode {
	if x != nil {
		return x.AnonymousBucketAccessMode
	}
	return AnonymousBucketAccessMode_UnknownBucketAccessMode
}

// Defines a response to the creation of a bucket
type BucketCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of new bucket
	BucketId string `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
}

func (x *BucketCreateResponse) Reset() {
	*x = BucketCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketCreateResponse) ProtoMessage() {}

func (x *BucketCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketCreateResponse.ProtoReflect.Descriptor instead.
func (*BucketCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{76}
}

func (x *BucketCreateResponse) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

// Defines the request to delete a bucket
type BucketDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of bucket to delete
	BucketId string `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// Region in which bucket will be created.
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// Endpoint to use when deleting the bucket
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Flag to allow non empty bucket deletion.
	ClearBucket bool `protobuf:"varint,4,opt,name=clear_bucket,json=clearBucket,proto3" json:"clear_bucket,omitempty"`
}

func (x *BucketDeleteRequest) Reset() {
	*x = BucketDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketDeleteRequest) ProtoMessage() {}

func (x *BucketDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketDeleteRequest.ProtoReflect.Descriptor instead.
func (*BucketDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{77}
}

func (x *BucketDeleteRequest) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *BucketDeleteRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *BucketDeleteRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *BucketDeleteRequest) GetClearBucket() bool {
	if x != nil {
		return x.ClearBucket
	}
	return false
}

// Empty response
type BucketDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BucketDeleteResponse) Reset() {
	*x = BucketDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketDeleteResponse) ProtoMessage() {}

func (x *BucketDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketDeleteResponse.ProtoReflect.Descriptor instead.
func (*BucketDeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{78}
}

// Defines a request to grant access to the bucket
type BucketGrantAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the bucket
	BucketId string `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// Name of the account to which access to be provided
	AccountName string `protobuf:"bytes,2,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// Access policy to be applied for the account
	AccessPolicy string `protobuf:"bytes,3,opt,name=access_policy,json=accessPolicy,proto3" json:"access_policy,omitempty"`
}

func (x *BucketGrantAccessRequest) Reset() {
	*x = BucketGrantAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketGrantAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketGrantAccessRequest) ProtoMessage() {}

func (x *BucketGrantAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketGrantAccessRequest.ProtoReflect.Descriptor instead.
func (*BucketGrantAccessRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{79}
}

func (x *BucketGrantAccessRequest) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *BucketGrantAccessRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *BucketGrantAccessRequest) GetAccessPolicy() string {
	if x != nil {
		return x.AccessPolicy
	}
	return ""
}

// Defines a response to the creation of a bucket
type BucketGrantAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the account_id that is being provided access. This will
	// This will be required later to revoke access.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Credentials supplied for accessing the bucket ex: aws access key id and secret, etc.
	Credentials *BucketAccessCredentials `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *BucketGrantAccessResponse) Reset() {
	*x = BucketGrantAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketGrantAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketGrantAccessResponse) ProtoMessage() {}

func (x *BucketGrantAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketGrantAccessResponse.ProtoReflect.Descriptor instead.
func (*BucketGrantAccessResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{80}
}

func (x *BucketGrantAccessResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *BucketGrantAccessResponse) GetCredentials() *BucketAccessCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

// Defines the request to revoke access to the bucket
type BucketRevokeAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of bucket to delete
	BucketId string `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// AccountId that is having its access revoked.
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *BucketRevokeAccessRequest) Reset() {
	*x = BucketRevokeAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketRevokeAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketRevokeAccessRequest) ProtoMessage() {}

func (x *BucketRevokeAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketRevokeAccessRequest.ProtoReflect.Descriptor instead.
func (*BucketRevokeAccessRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{81}
}

func (x *BucketRevokeAccessRequest) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *BucketRevokeAccessRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Empty response
type BucketRevokeAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BucketRevokeAccessResponse) Reset() {
	*x = BucketRevokeAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketRevokeAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketRevokeAccessResponse) ProtoMessage() {}

func (x *BucketRevokeAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketRevokeAccessResponse.ProtoReflect.Descriptor instead.
func (*BucketRevokeAccessResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{82}
}

// Defines the bucket access credential object
type BucketAccessCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Access key id
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// Secret access key
	SecretAccessKey string `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
}

func (x *BucketAccessCredentials) Reset() {
	*x = BucketAccessCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketAccessCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketAccessCredentials) ProtoMessage() {}

func (x *BucketAccessCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketAccessCredentials.ProtoReflect.Descriptor instead.
func (*BucketAccessCredentials) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{83}
}

func (x *BucketAccessCredentials) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *BucketAccessCredentials) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

// Define a request to create storage policy
type SdkOpenStoragePolicyCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// storage policy to create
	StoragePolicy *SdkStoragePolicy `protobuf:"bytes,1,opt,name=storage_policy,json=storagePolicy,proto3" json:"storage_policy,omitempty"`
}

func (x *SdkOpenStoragePolicyCreateRequest) Reset() {
	*x = SdkOpenStoragePolicyCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicyCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicyCreateRequest) ProtoMessage() {}

func (x *SdkOpenStoragePolicyCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicyCreateRequest.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicyCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{84}
}

func (x *SdkOpenStoragePolicyCreateRequest) GetStoragePolicy() *SdkStoragePolicy {
	if x != nil {
		return x.StoragePolicy
	}
	return nil
}

// Empty response
type SdkOpenStoragePolicyCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkOpenStoragePolicyCreateResponse) Reset() {
	*x = SdkOpenStoragePolicyCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicyCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicyCreateResponse) ProtoMessage() {}

func (x *SdkOpenStoragePolicyCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicyCreateResponse.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicyCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{85}
}

// Empty request
type SdkOpenStoragePolicyEnumerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkOpenStoragePolicyEnumerateRequest) Reset() {
	*x = SdkOpenStoragePolicyEnumerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicyEnumerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicyEnumerateRequest) ProtoMessage() {}

func (x *SdkOpenStoragePolicyEnumerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicyEnumerateRequest.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicyEnumerateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{86}
}

// Define a storage policy enumerate response
type SdkOpenStoragePolicyEnumerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of storage policies
	StoragePolicies []*SdkStoragePolicy `protobuf:"bytes,1,rep,name=storage_policies,json=storagePolicies,proto3" json:"storage_policies,omitempty"`
}

func (x *SdkOpenStoragePolicyEnumerateResponse) Reset() {
	*x = SdkOpenStoragePolicyEnumerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicyEnumerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicyEnumerateResponse) ProtoMessage() {}

func (x *SdkOpenStoragePolicyEnumerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicyEnumerateResponse.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicyEnumerateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{87}
}

func (x *SdkOpenStoragePolicyEnumerateResponse) GetStoragePolicies() []*SdkStoragePolicy {
	if x != nil {
		return x.StoragePolicies
	}
	return nil
}

// Define a request to inspect storage policy
type SdkOpenStoragePolicyInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of storage policy to retrive
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SdkOpenStoragePolicyInspectRequest) Reset() {
	*x = SdkOpenStoragePolicyInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicyInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicyInspectRequest) ProtoMessage() {}

func (x *SdkOpenStoragePolicyInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicyInspectRequest.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicyInspectRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{88}
}

func (x *SdkOpenStoragePolicyInspectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Define a storage policy inspect response
type SdkOpenStoragePolicyInspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// storage policy information requested by name
	StoragePolicy *SdkStoragePolicy `protobuf:"bytes,1,opt,name=storage_policy,json=storagePolicy,proto3" json:"storage_policy,omitempty"`
}

func (x *SdkOpenStoragePolicyInspectResponse) Reset() {
	*x = SdkOpenStoragePolicyInspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicyInspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicyInspectResponse) ProtoMessage() {}

func (x *SdkOpenStoragePolicyInspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicyInspectResponse.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicyInspectResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{89}
}

func (x *SdkOpenStoragePolicyInspectResponse) GetStoragePolicy() *SdkStoragePolicy {
	if x != nil {
		return x.StoragePolicy
	}
	return nil
}

// Define a request to delete storage policy
type SdkOpenStoragePolicyDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of storage policy to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SdkOpenStoragePolicyDeleteRequest) Reset() {
	*x = SdkOpenStoragePolicyDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicyDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicyDeleteRequest) ProtoMessage() {}

func (x *SdkOpenStoragePolicyDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicyDeleteRequest.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicyDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{90}
}

func (x *SdkOpenStoragePolicyDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Empty Response
type SdkOpenStoragePolicyDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkOpenStoragePolicyDeleteResponse) Reset() {
	*x = SdkOpenStoragePolicyDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicyDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicyDeleteResponse) ProtoMessage() {}

func (x *SdkOpenStoragePolicyDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicyDeleteResponse.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicyDeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{91}
}

// Define a request to update storage policy
type SdkOpenStoragePolicyUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// storage policy to update
	StoragePolicy *SdkStoragePolicy `protobuf:"bytes,1,opt,name=storage_policy,json=storagePolicy,proto3" json:"storage_policy,omitempty"`
}

func (x *SdkOpenStoragePolicyUpdateRequest) Reset() {
	*x = SdkOpenStoragePolicyUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicyUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicyUpdateRequest) ProtoMessage() {}

func (x *SdkOpenStoragePolicyUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicyUpdateRequest.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicyUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{92}
}

func (x *SdkOpenStoragePolicyUpdateRequest) GetStoragePolicy() *SdkStoragePolicy {
	if x != nil {
		return x.StoragePolicy
	}
	return nil
}

// Empty Response
type SdkOpenStoragePolicyUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkOpenStoragePolicyUpdateResponse) Reset() {
	*x = SdkOpenStoragePolicyUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicyUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicyUpdateResponse) ProtoMessage() {}

func (x *SdkOpenStoragePolicyUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicyUpdateResponse.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicyUpdateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{93}
}

// Define a request to set default storage policy
type SdkOpenStoragePolicySetDefaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of policy to set as default storage policy
	// for volume creation
	// This policy will be used to validate/update volume configuration
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SdkOpenStoragePolicySetDefaultRequest) Reset() {
	*x = SdkOpenStoragePolicySetDefaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicySetDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicySetDefaultRequest) ProtoMessage() {}

func (x *SdkOpenStoragePolicySetDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicySetDefaultRequest.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicySetDefaultRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{94}
}

func (x *SdkOpenStoragePolicySetDefaultRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Empty Response
type SdkOpenStoragePolicySetDefaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkOpenStoragePolicySetDefaultResponse) Reset() {
	*x = SdkOpenStoragePolicySetDefaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicySetDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicySetDefaultResponse) ProtoMessage() {}

func (x *SdkOpenStoragePolicySetDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicySetDefaultResponse.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicySetDefaultResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{95}
}

// Empty Request
type SdkOpenStoragePolicyReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkOpenStoragePolicyReleaseRequest) Reset() {
	*x = SdkOpenStoragePolicyReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicyReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicyReleaseRequest) ProtoMessage() {}

func (x *SdkOpenStoragePolicyReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicyReleaseRequest.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicyReleaseRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{96}
}

// Empty Response
type SdkOpenStoragePolicyReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkOpenStoragePolicyReleaseResponse) Reset() {
	*x = SdkOpenStoragePolicyReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicyReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicyReleaseResponse) ProtoMessage() {}

func (x *SdkOpenStoragePolicyReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicyReleaseResponse.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicyReleaseResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{97}
}

// Empty Request
type SdkOpenStoragePolicyDefaultInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkOpenStoragePolicyDefaultInspectRequest) Reset() {
	*x = SdkOpenStoragePolicyDefaultInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicyDefaultInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicyDefaultInspectRequest) ProtoMessage() {}

func (x *SdkOpenStoragePolicyDefaultInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicyDefaultInspectRequest.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicyDefaultInspectRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{98}
}

// Define default storage policy response
type SdkOpenStoragePolicyDefaultInspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// storage policy information which is set as default
	StoragePolicy *SdkStoragePolicy `protobuf:"bytes,1,opt,name=storage_policy,json=storagePolicy,proto3" json:"storage_policy,omitempty"`
}

func (x *SdkOpenStoragePolicyDefaultInspectResponse) Reset() {
	*x = SdkOpenStoragePolicyDefaultInspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkOpenStoragePolicyDefaultInspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkOpenStoragePolicyDefaultInspectResponse) ProtoMessage() {}

func (x *SdkOpenStoragePolicyDefaultInspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkOpenStoragePolicyDefaultInspectResponse.ProtoReflect.Descriptor instead.
func (*SdkOpenStoragePolicyDefaultInspectResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{99}
}

func (x *SdkOpenStoragePolicyDefaultInspectResponse) GetStoragePolicy() *SdkStoragePolicy {
	if x != nil {
		return x.StoragePolicy
	}
	return nil
}

// Define a schedule policy request
type SdkSchedulePolicyCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schedule Policy
	SchedulePolicy *SdkSchedulePolicy `protobuf:"bytes,1,opt,name=schedule_policy,json=schedulePolicy,proto3" json:"schedule_policy,omitempty"`
}

func (x *SdkSchedulePolicyCreateRequest) Reset() {
	*x = SdkSchedulePolicyCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyCreateRequest) ProtoMessage() {}

func (x *SdkSchedulePolicyCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyCreateRequest.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{100}
}

func (x *SdkSchedulePolicyCreateRequest) GetSchedulePolicy() *SdkSchedulePolicy {
	if x != nil {
		return x.SchedulePolicy
	}
	return nil
}

// Empty response
type SdkSchedulePolicyCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkSchedulePolicyCreateResponse) Reset() {
	*x = SdkSchedulePolicyCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyCreateResponse) ProtoMessage() {}

func (x *SdkSchedulePolicyCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyCreateResponse.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{101}
}

// Define a request to update a schedule policy
type SdkSchedulePolicyUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schedule Policy
	SchedulePolicy *SdkSchedulePolicy `protobuf:"bytes,1,opt,name=schedule_policy,json=schedulePolicy,proto3" json:"schedule_policy,omitempty"`
}

func (x *SdkSchedulePolicyUpdateRequest) Reset() {
	*x = SdkSchedulePolicyUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyUpdateRequest) ProtoMessage() {}

func (x *SdkSchedulePolicyUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyUpdateRequest.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{102}
}

func (x *SdkSchedulePolicyUpdateRequest) GetSchedulePolicy() *SdkSchedulePolicy {
	if x != nil {
		return x.SchedulePolicy
	}
	return nil
}

// Empty response
type SdkSchedulePolicyUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkSchedulePolicyUpdateResponse) Reset() {
	*x = SdkSchedulePolicyUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyUpdateResponse) ProtoMessage() {}

func (x *SdkSchedulePolicyUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyUpdateResponse.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyUpdateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{103}
}

// Empty request
type SdkSchedulePolicyEnumerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkSchedulePolicyEnumerateRequest) Reset() {
	*x = SdkSchedulePolicyEnumerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyEnumerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyEnumerateRequest) ProtoMessage() {}

func (x *SdkSchedulePolicyEnumerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyEnumerateRequest.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyEnumerateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{104}
}

// Defines a schedule policy enumerate response
type SdkSchedulePolicyEnumerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of Schedule Policy
	Policies []*SdkSchedulePolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *SdkSchedulePolicyEnumerateResponse) Reset() {
	*x = SdkSchedulePolicyEnumerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyEnumerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyEnumerateResponse) ProtoMessage() {}

func (x *SdkSchedulePolicyEnumerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyEnumerateResponse.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyEnumerateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{105}
}

func (x *SdkSchedulePolicyEnumerateResponse) GetPolicies() []*SdkSchedulePolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// Define a schedule policy inspection request
type SdkSchedulePolicyInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the schedule Policy
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SdkSchedulePolicyInspectRequest) Reset() {
	*x = SdkSchedulePolicyInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyInspectRequest) ProtoMessage() {}

func (x *SdkSchedulePolicyInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyInspectRequest.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyInspectRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{106}
}

func (x *SdkSchedulePolicyInspectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Defines a schedule policy inspection response
type SdkSchedulePolicyInspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of Schedule Policy
	Policy *SdkSchedulePolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *SdkSchedulePolicyInspectResponse) Reset() {
	*x = SdkSchedulePolicyInspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyInspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyInspectResponse) ProtoMessage() {}

func (x *SdkSchedulePolicyInspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyInspectResponse.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyInspectResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{107}
}

func (x *SdkSchedulePolicyInspectResponse) GetPolicy() *SdkSchedulePolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

// Define schedule policy deletion request
type SdkSchedulePolicyDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the schedule policy
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SdkSchedulePolicyDeleteRequest) Reset() {
	*x = SdkSchedulePolicyDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyDeleteRequest) ProtoMessage() {}

func (x *SdkSchedulePolicyDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyDeleteRequest.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{108}
}

func (x *SdkSchedulePolicyDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Empty response
type SdkSchedulePolicyDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkSchedulePolicyDeleteResponse) Reset() {
	*x = SdkSchedulePolicyDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyDeleteResponse) ProtoMessage() {}

func (x *SdkSchedulePolicyDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyDeleteResponse.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyDeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{109}
}

// Defines a daily schedule
type SdkSchedulePolicyIntervalDaily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Range: 0-23
	Hour int32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	// Range: 0-59
	Minute int32 `protobuf:"varint,2,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *SdkSchedulePolicyIntervalDaily) Reset() {
	*x = SdkSchedulePolicyIntervalDaily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyIntervalDaily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyIntervalDaily) ProtoMessage() {}

func (x *SdkSchedulePolicyIntervalDaily) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyIntervalDaily.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyIntervalDaily) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{110}
}

func (x *SdkSchedulePolicyIntervalDaily) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *SdkSchedulePolicyIntervalDaily) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

// Defines a weekly schedule
type SdkSchedulePolicyIntervalWeekly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day SdkTimeWeekday `protobuf:"varint,1,opt,name=day,proto3,enum=openstorage.api.SdkTimeWeekday" json:"day,omitempty"`
	// Range: 0-23
	Hour int32 `protobuf:"varint,2,opt,name=hour,proto3" json:"hour,omitempty"`
	// Range: 0-59
	Minute int32 `protobuf:"varint,3,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *SdkSchedulePolicyIntervalWeekly) Reset() {
	*x = SdkSchedulePolicyIntervalWeekly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyIntervalWeekly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyIntervalWeekly) ProtoMessage() {}

func (x *SdkSchedulePolicyIntervalWeekly) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyIntervalWeekly.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyIntervalWeekly) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{111}
}

func (x *SdkSchedulePolicyIntervalWeekly) GetDay() SdkTimeWeekday {
	if x != nil {
		return x.Day
	}
	return SdkTimeWeekday_SdkTimeWeekdaySunday
}

func (x *SdkSchedulePolicyIntervalWeekly) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *SdkSchedulePolicyIntervalWeekly) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

// Defines a monthly schedule
type SdkSchedulePolicyIntervalMonthly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Range: 1-28
	Day int32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	// Range: 0-59
	Hour int32 `protobuf:"varint,2,opt,name=hour,proto3" json:"hour,omitempty"`
	// Range: 0-59
	Minute int32 `protobuf:"varint,3,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *SdkSchedulePolicyIntervalMonthly) Reset() {
	*x = SdkSchedulePolicyIntervalMonthly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyIntervalMonthly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyIntervalMonthly) ProtoMessage() {}

func (x *SdkSchedulePolicyIntervalMonthly) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyIntervalMonthly.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyIntervalMonthly) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{112}
}

func (x *SdkSchedulePolicyIntervalMonthly) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *SdkSchedulePolicyIntervalMonthly) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *SdkSchedulePolicyIntervalMonthly) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

// Defines a periodic schedule
type SdkSchedulePolicyIntervalPeriodic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the number of seconds between intervals
	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
}

func (x *SdkSchedulePolicyIntervalPeriodic) Reset() {
	*x = SdkSchedulePolicyIntervalPeriodic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyIntervalPeriodic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyIntervalPeriodic) ProtoMessage() {}

func (x *SdkSchedulePolicyIntervalPeriodic) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyIntervalPeriodic.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyIntervalPeriodic) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{113}
}

func (x *SdkSchedulePolicyIntervalPeriodic) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

// Defines a schedule policy interval
type SdkSchedulePolicyInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of instances to retain
	Retain int64 `protobuf:"varint,1,opt,name=retain,proto3" json:"retain,omitempty"`
	// Start oneof at field number 200 to allow for expansion
	//
	// Types that are assignable to PeriodType:
	//	*SdkSchedulePolicyInterval_Daily
	//	*SdkSchedulePolicyInterval_Weekly
	//	*SdkSchedulePolicyInterval_Monthly
	//	*SdkSchedulePolicyInterval_Periodic
	PeriodType isSdkSchedulePolicyInterval_PeriodType `protobuf_oneof:"period_type"`
}

func (x *SdkSchedulePolicyInterval) Reset() {
	*x = SdkSchedulePolicyInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicyInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicyInterval) ProtoMessage() {}

func (x *SdkSchedulePolicyInterval) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicyInterval.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicyInterval) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{114}
}

func (x *SdkSchedulePolicyInterval) GetRetain() int64 {
	if x != nil {
		return x.Retain
	}
	return 0
}

func (m *SdkSchedulePolicyInterval) GetPeriodType() isSdkSchedulePolicyInterval_PeriodType {
	if m != nil {
		return m.PeriodType
	}
	return nil
}

func (x *SdkSchedulePolicyInterval) GetDaily() *SdkSchedulePolicyIntervalDaily {
	if x, ok := x.GetPeriodType().(*SdkSchedulePolicyInterval_Daily); ok {
		return x.Daily
	}
	return nil
}

func (x *SdkSchedulePolicyInterval) GetWeekly() *SdkSchedulePolicyIntervalWeekly {
	if x, ok := x.GetPeriodType().(*SdkSchedulePolicyInterval_Weekly); ok {
		return x.Weekly
	}
	return nil
}

func (x *SdkSchedulePolicyInterval) GetMonthly() *SdkSchedulePolicyIntervalMonthly {
	if x, ok := x.GetPeriodType().(*SdkSchedulePolicyInterval_Monthly); ok {
		return x.Monthly
	}
	return nil
}

func (x *SdkSchedulePolicyInterval) GetPeriodic() *SdkSchedulePolicyIntervalPeriodic {
	if x, ok := x.GetPeriodType().(*SdkSchedulePolicyInterval_Periodic); ok {
		return x.Periodic
	}
	return nil
}

type isSdkSchedulePolicyInterval_PeriodType interface {
	isSdkSchedulePolicyInterval_PeriodType()
}

type SdkSchedulePolicyInterval_Daily struct {
	// Daily policy
	Daily *SdkSchedulePolicyIntervalDaily `protobuf:"bytes,200,opt,name=daily,proto3,oneof"`
}

type SdkSchedulePolicyInterval_Weekly struct {
	// Weekly policy
	Weekly *SdkSchedulePolicyIntervalWeekly `protobuf:"bytes,201,opt,name=weekly,proto3,oneof"`
}

type SdkSchedulePolicyInterval_Monthly struct {
	// Monthly policy
	Monthly *SdkSchedulePolicyIntervalMonthly `protobuf:"bytes,202,opt,name=monthly,proto3,oneof"`
}

type SdkSchedulePolicyInterval_Periodic struct {
	// Periodic policy
	Periodic *SdkSchedulePolicyIntervalPeriodic `protobuf:"bytes,203,opt,name=periodic,proto3,oneof"`
}

func (*SdkSchedulePolicyInterval_Daily) isSdkSchedulePolicyInterval_PeriodType() {}

func (*SdkSchedulePolicyInterval_Weekly) isSdkSchedulePolicyInterval_PeriodType() {}

func (*SdkSchedulePolicyInterval_Monthly) isSdkSchedulePolicyInterval_PeriodType() {}

func (*SdkSchedulePolicyInterval_Periodic) isSdkSchedulePolicyInterval_PeriodType() {}

// Defines a schedule policy
type SdkSchedulePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the schedule policy
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Schedule policies
	Schedules []*SdkSchedulePolicyInterval `protobuf:"bytes,2,rep,name=schedules,proto3" json:"schedules,omitempty"`
}

func (x *SdkSchedulePolicy) Reset() {
	*x = SdkSchedulePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkSchedulePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkSchedulePolicy) ProtoMessage() {}

func (x *SdkSchedulePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkSchedulePolicy.ProtoReflect.Descriptor instead.
func (*SdkSchedulePolicy) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{115}
}

func (x *SdkSchedulePolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SdkSchedulePolicy) GetSchedules() []*SdkSchedulePolicyInterval {
	if x != nil {
		return x.Schedules
	}
	return nil
}

// Defines a request to create credentials
type SdkCredentialCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the credential
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// (optional) Name of bucket
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// (optional) Key used to encrypt the data
	EncryptionKey string `protobuf:"bytes,3,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
	// Ownership of the credential. Collaborators and groups may be
	// added here with their appropriate ACLS.
	Ownership *Ownership `protobuf:"bytes,4,opt,name=ownership,proto3" json:"ownership,omitempty"`
	// use_proxy indicates if a proxy must be used
	UseProxy bool `protobuf:"varint,5,opt,name=use_proxy,json=useProxy,proto3" json:"use_proxy,omitempty"`
	// iamPolicy indicates if IAM creds must be used for access
	IamPolicy bool `protobuf:"varint,6,opt,name=iam_policy,json=iamPolicy,proto3" json:"iam_policy,omitempty"`
	// s3StorageClass for object puts, empty indicates default STANDARD
	S3StorageClass string `protobuf:"bytes,7,opt,name=s3_storage_class,json=s3StorageClass,proto3" json:"s3_storage_class,omitempty"`
	// Start at field number 200 to allow for expansion
	//
	// Types that are assignable to CredentialType:
	//	*SdkCredentialCreateRequest_AwsCredential
	//	*SdkCredentialCreateRequest_AzureCredential
	//	*SdkCredentialCreateRequest_GoogleCredential
	CredentialType isSdkCredentialCreateRequest_CredentialType `protobuf_oneof:"credential_type"`
}

func (x *SdkCredentialCreateRequest) Reset() {
	*x = SdkCredentialCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCredentialCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCredentialCreateRequest) ProtoMessage() {}

func (x *SdkCredentialCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCredentialCreateRequest.ProtoReflect.Descriptor instead.
func (*SdkCredentialCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{116}
}

func (x *SdkCredentialCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SdkCredentialCreateRequest) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *SdkCredentialCreateRequest) GetEncryptionKey() string {
	if x != nil {
		return x.EncryptionKey
	}
	return ""
}

func (x *SdkCredentialCreateRequest) GetOwnership() *Ownership {
	if x != nil {
		return x.Ownership
	}
	return nil
}

func (x *SdkCredentialCreateRequest) GetUseProxy() bool {
	if x != nil {
		return x.UseProxy
	}
	return false
}

func (x *SdkCredentialCreateRequest) GetIamPolicy() bool {
	if x != nil {
		return x.IamPolicy
	}
	return false
}

func (x *SdkCredentialCreateRequest) GetS3StorageClass() string {
	if x != nil {
		return x.S3StorageClass
	}
	return ""
}

func (m *SdkCredentialCreateRequest) GetCredentialType() isSdkCredentialCreateRequest_CredentialType {
	if m != nil {
		return m.CredentialType
	}
	return nil
}

func (x *SdkCredentialCreateRequest) GetAwsCredential() *SdkAwsCredentialRequest {
	if x, ok := x.GetCredentialType().(*SdkCredentialCreateRequest_AwsCredential); ok {
		return x.AwsCredential
	}
	return nil
}

func (x *SdkCredentialCreateRequest) GetAzureCredential() *SdkAzureCredentialRequest {
	if x, ok := x.GetCredentialType().(*SdkCredentialCreateRequest_AzureCredential); ok {
		return x.AzureCredential
	}
	return nil
}

func (x *SdkCredentialCreateRequest) GetGoogleCredential() *SdkGoogleCredentialRequest {
	if x, ok := x.GetCredentialType().(*SdkCredentialCreateRequest_GoogleCredential); ok {
		return x.GoogleCredential
	}
	return nil
}

type isSdkCredentialCreateRequest_CredentialType interface {
	isSdkCredentialCreateRequest_CredentialType()
}

type SdkCredentialCreateRequest_AwsCredential struct {
	// Credentials for AWS/S3
	AwsCredential *SdkAwsCredentialRequest `protobuf:"bytes,200,opt,name=aws_credential,json=awsCredential,proto3,oneof"`
}

type SdkCredentialCreateRequest_AzureCredential struct {
	// Credentials for Azure
	AzureCredential *SdkAzureCredentialRequest `protobuf:"bytes,201,opt,name=azure_credential,json=azureCredential,proto3,oneof"`
}

type SdkCredentialCreateRequest_GoogleCredential struct {
	// Credentials for Google
	GoogleCredential *SdkGoogleCredentialRequest `protobuf:"bytes,202,opt,name=google_credential,json=googleCredential,proto3,oneof"`
}

func (*SdkCredentialCreateRequest_AwsCredential) isSdkCredentialCreateRequest_CredentialType() {}

func (*SdkCredentialCreateRequest_AzureCredential) isSdkCredentialCreateRequest_CredentialType() {}

func (*SdkCredentialCreateRequest_GoogleCredential) isSdkCredentialCreateRequest_CredentialType() {}

// Defines a response from creating a credential
type SdkCredentialCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the credentials
	CredentialId string `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (x *SdkCredentialCreateResponse) Reset() {
	*x = SdkCredentialCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCredentialCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCredentialCreateResponse) ProtoMessage() {}

func (x *SdkCredentialCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCredentialCreateResponse.ProtoReflect.Descriptor instead.
func (*SdkCredentialCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{117}
}

func (x *SdkCredentialCreateResponse) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

// Defines request for credential update
type SdkCredentialUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialId string                      `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	UpdateReq    *SdkCredentialCreateRequest `protobuf:"bytes,2,opt,name=update_req,json=updateReq,proto3" json:"update_req,omitempty"`
}

func (x *SdkCredentialUpdateRequest) Reset() {
	*x = SdkCredentialUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCredentialUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCredentialUpdateRequest) ProtoMessage() {}

func (x *SdkCredentialUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCredentialUpdateRequest.ProtoReflect.Descriptor instead.
func (*SdkCredentialUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{118}
}

func (x *SdkCredentialUpdateRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *SdkCredentialUpdateRequest) GetUpdateReq() *SdkCredentialCreateRequest {
	if x != nil {
		return x.UpdateReq
	}
	return nil
}

// Defines response for credential update
type SdkCredentialUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkCredentialUpdateResponse) Reset() {
	*x = SdkCredentialUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCredentialUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCredentialUpdateResponse) ProtoMessage() {}

func (x *SdkCredentialUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCredentialUpdateResponse.ProtoReflect.Descriptor instead.
func (*SdkCredentialUpdateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{119}
}

// Defines credentials for Aws/S3 endpoints
type SdkAwsCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Access key
	AccessKey string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	// Secret key
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// Endpoint
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Region
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// (optional) Disable SSL connection
	DisableSsl bool `protobuf:"varint,5,opt,name=disable_ssl,json=disableSsl,proto3" json:"disable_ssl,omitempty"`
	// (optional) Disable path-style access
	DisablePathStyle bool `protobuf:"varint,6,opt,name=disable_path_style,json=disablePathStyle,proto3" json:"disable_path_style,omitempty"`
}

func (x *SdkAwsCredentialRequest) Reset() {
	*x = SdkAwsCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAwsCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAwsCredentialRequest) ProtoMessage() {}

func (x *SdkAwsCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAwsCredentialRequest.ProtoReflect.Descriptor instead.
func (*SdkAwsCredentialRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{120}
}

func (x *SdkAwsCredentialRequest) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *SdkAwsCredentialRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *SdkAwsCredentialRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *SdkAwsCredentialRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SdkAwsCredentialRequest) GetDisableSsl() bool {
	if x != nil {
		return x.DisableSsl
	}
	return false
}

func (x *SdkAwsCredentialRequest) GetDisablePathStyle() bool {
	if x != nil {
		return x.DisablePathStyle
	}
	return false
}

// Defines credentials for Azure
type SdkAzureCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account name
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// Account key
	AccountKey string `protobuf:"bytes,2,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
}

func (x *SdkAzureCredentialRequest) Reset() {
	*x = SdkAzureCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAzureCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAzureCredentialRequest) ProtoMessage() {}

func (x *SdkAzureCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAzureCredentialRequest.ProtoReflect.Descriptor instead.
func (*SdkAzureCredentialRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{121}
}

func (x *SdkAzureCredentialRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *SdkAzureCredentialRequest) GetAccountKey() string {
	if x != nil {
		return x.AccountKey
	}
	return ""
}

// Defines credentials for Google
type SdkGoogleCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Project ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// JSON Key
	JsonKey string `protobuf:"bytes,2,opt,name=json_key,json=jsonKey,proto3" json:"json_key,omitempty"`
}

func (x *SdkGoogleCredentialRequest) Reset() {
	*x = SdkGoogleCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkGoogleCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkGoogleCredentialRequest) ProtoMessage() {}

func (x *SdkGoogleCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkGoogleCredentialRequest.ProtoReflect.Descriptor instead.
func (*SdkGoogleCredentialRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{122}
}

func (x *SdkGoogleCredentialRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *SdkGoogleCredentialRequest) GetJsonKey() string {
	if x != nil {
		return x.JsonKey
	}
	return ""
}

// Defines the response for AWS/S3 credentials
type SdkAwsCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Access key
	AccessKey string `protobuf:"bytes,2,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	// Endpoint
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Region
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// (optional) Disable SSL connection
	DisableSsl bool `protobuf:"varint,5,opt,name=disable_ssl,json=disableSsl,proto3" json:"disable_ssl,omitempty"`
	// (optional) Disable path-style access
	DisablePathStyle bool `protobuf:"varint,6,opt,name=disable_path_style,json=disablePathStyle,proto3" json:"disable_path_style,omitempty"`
	// (optional) Storage class for s3 puts
	S3StorageClass string `protobuf:"bytes,7,opt,name=s3_storage_class,json=s3StorageClass,proto3" json:"s3_storage_class,omitempty"`
}

func (x *SdkAwsCredentialResponse) Reset() {
	*x = SdkAwsCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAwsCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAwsCredentialResponse) ProtoMessage() {}

func (x *SdkAwsCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAwsCredentialResponse.ProtoReflect.Descriptor instead.
func (*SdkAwsCredentialResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{123}
}

func (x *SdkAwsCredentialResponse) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *SdkAwsCredentialResponse) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *SdkAwsCredentialResponse) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SdkAwsCredentialResponse) GetDisableSsl() bool {
	if x != nil {
		return x.DisableSsl
	}
	return false
}

func (x *SdkAwsCredentialResponse) GetDisablePathStyle() bool {
	if x != nil {
		return x.DisablePathStyle
	}
	return false
}

func (x *SdkAwsCredentialResponse) GetS3StorageClass() string {
	if x != nil {
		return x.S3StorageClass
	}
	return ""
}

// Defines the response for Azure credentials
type SdkAzureCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account name
	AccountName string `protobuf:"bytes,2,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
}

func (x *SdkAzureCredentialResponse) Reset() {
	*x = SdkAzureCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAzureCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAzureCredentialResponse) ProtoMessage() {}

func (x *SdkAzureCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAzureCredentialResponse.ProtoReflect.Descriptor instead.
func (*SdkAzureCredentialResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{124}
}

func (x *SdkAzureCredentialResponse) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

// Defines the response for Google credentials
type SdkGoogleCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Project ID
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *SdkGoogleCredentialResponse) Reset() {
	*x = SdkGoogleCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkGoogleCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkGoogleCredentialResponse) ProtoMessage() {}

func (x *SdkGoogleCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkGoogleCredentialResponse.ProtoReflect.Descriptor instead.
func (*SdkGoogleCredentialResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{125}
}

func (x *SdkGoogleCredentialResponse) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// Empty request
type SdkCredentialEnumerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkCredentialEnumerateRequest) Reset() {
	*x = SdkCredentialEnumerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCredentialEnumerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCredentialEnumerateRequest) ProtoMessage() {}

func (x *SdkCredentialEnumerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCredentialEnumerateRequest.ProtoReflect.Descriptor instead.
func (*SdkCredentialEnumerateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{126}
}

// Defines response for a enumeration of credentials
type SdkCredentialEnumerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of credentials
	CredentialIds []string `protobuf:"bytes,1,rep,name=credential_ids,json=credentialIds,proto3" json:"credential_ids,omitempty"`
}

func (x *SdkCredentialEnumerateResponse) Reset() {
	*x = SdkCredentialEnumerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCredentialEnumerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCredentialEnumerateResponse) ProtoMessage() {}

func (x *SdkCredentialEnumerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCredentialEnumerateResponse.ProtoReflect.Descriptor instead.
func (*SdkCredentialEnumerateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{127}
}

func (x *SdkCredentialEnumerateResponse) GetCredentialIds() []string {
	if x != nil {
		return x.CredentialIds
	}
	return nil
}

// Defines the request to inspection for credentials
type SdkCredentialInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the credential
	CredentialId string `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (x *SdkCredentialInspectRequest) Reset() {
	*x = SdkCredentialInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCredentialInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCredentialInspectRequest) ProtoMessage() {}

func (x *SdkCredentialInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCredentialInspectRequest.ProtoReflect.Descriptor instead.
func (*SdkCredentialInspectRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{128}
}

func (x *SdkCredentialInspectRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

// Defines the response to an inspection of a credential.
// This response uses OneOf proto style. Depending on your programming language
// you will need to check if the value of credential_type is one of the ones below.
type SdkCredentialInspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Credential id
	CredentialId string `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// Name of the credential
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// (optional) Name of bucket
	Bucket string `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Ownership of the credential
	Ownership *Ownership `protobuf:"bytes,4,opt,name=ownership,proto3" json:"ownership,omitempty"`
	// proxy flag for the credential
	UseProxy bool `protobuf:"varint,5,opt,name=use_proxy,json=useProxy,proto3" json:"use_proxy,omitempty"`
	// iamPolicy indicates if IAM creds must be used for access
	IamPolicy bool `protobuf:"varint,6,opt,name=iam_policy,json=iamPolicy,proto3" json:"iam_policy,omitempty"`
	// Start at field number 200 for expansion support
	//
	// Types that are assignable to CredentialType:
	//	*SdkCredentialInspectResponse_AwsCredential
	//	*SdkCredentialInspectResponse_AzureCredential
	//	*SdkCredentialInspectResponse_GoogleCredential
	CredentialType isSdkCredentialInspectResponse_CredentialType `protobuf_oneof:"credential_type"`
}

func (x *SdkCredentialInspectResponse) Reset() {
	*x = SdkCredentialInspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCredentialInspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCredentialInspectResponse) ProtoMessage() {}

func (x *SdkCredentialInspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCredentialInspectResponse.ProtoReflect.Descriptor instead.
func (*SdkCredentialInspectResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{129}
}

func (x *SdkCredentialInspectResponse) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *SdkCredentialInspectResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SdkCredentialInspectResponse) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *SdkCredentialInspectResponse) GetOwnership() *Ownership {
	if x != nil {
		return x.Ownership
	}
	return nil
}

func (x *SdkCredentialInspectResponse) GetUseProxy() bool {
	if x != nil {
		return x.UseProxy
	}
	return false
}

func (x *SdkCredentialInspectResponse) GetIamPolicy() bool {
	if x != nil {
		return x.IamPolicy
	}
	return false
}

func (m *SdkCredentialInspectResponse) GetCredentialType() isSdkCredentialInspectResponse_CredentialType {
	if m != nil {
		return m.CredentialType
	}
	return nil
}

func (x *SdkCredentialInspectResponse) GetAwsCredential() *SdkAwsCredentialResponse {
	if x, ok := x.GetCredentialType().(*SdkCredentialInspectResponse_AwsCredential); ok {
		return x.AwsCredential
	}
	return nil
}

func (x *SdkCredentialInspectResponse) GetAzureCredential() *SdkAzureCredentialResponse {
	if x, ok := x.GetCredentialType().(*SdkCredentialInspectResponse_AzureCredential); ok {
		return x.AzureCredential
	}
	return nil
}

func (x *SdkCredentialInspectResponse) GetGoogleCredential() *SdkGoogleCredentialResponse {
	if x, ok := x.GetCredentialType().(*SdkCredentialInspectResponse_GoogleCredential); ok {
		return x.GoogleCredential
	}
	return nil
}

type isSdkCredentialInspectResponse_CredentialType interface {
	isSdkCredentialInspectResponse_CredentialType()
}

type SdkCredentialInspectResponse_AwsCredential struct {
	// Aws credentials
	AwsCredential *SdkAwsCredentialResponse `protobuf:"bytes,200,opt,name=aws_credential,json=awsCredential,proto3,oneof"`
}

type SdkCredentialInspectResponse_AzureCredential struct {
	// Azure credentials
	AzureCredential *SdkAzureCredentialResponse `protobuf:"bytes,201,opt,name=azure_credential,json=azureCredential,proto3,oneof"`
}

type SdkCredentialInspectResponse_GoogleCredential struct {
	// Google credentials
	GoogleCredential *SdkGoogleCredentialResponse `protobuf:"bytes,202,opt,name=google_credential,json=googleCredential,proto3,oneof"`
}

func (*SdkCredentialInspectResponse_AwsCredential) isSdkCredentialInspectResponse_CredentialType() {}

func (*SdkCredentialInspectResponse_AzureCredential) isSdkCredentialInspectResponse_CredentialType() {
}

func (*SdkCredentialInspectResponse_GoogleCredential) isSdkCredentialInspectResponse_CredentialType() {
}

// Defines the request to delete credentials
type SdkCredentialDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id for credentials
	CredentialId string `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (x *SdkCredentialDeleteRequest) Reset() {
	*x = SdkCredentialDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCredentialDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCredentialDeleteRequest) ProtoMessage() {}

func (x *SdkCredentialDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCredentialDeleteRequest.ProtoReflect.Descriptor instead.
func (*SdkCredentialDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{130}
}

func (x *SdkCredentialDeleteRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

// Empty response
type SdkCredentialDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkCredentialDeleteResponse) Reset() {
	*x = SdkCredentialDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCredentialDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCredentialDeleteResponse) ProtoMessage() {}

func (x *SdkCredentialDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCredentialDeleteResponse.ProtoReflect.Descriptor instead.
func (*SdkCredentialDeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{131}
}

// Defines a request to validate credentials
type SdkCredentialValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the credentials
	CredentialId string `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (x *SdkCredentialValidateRequest) Reset() {
	*x = SdkCredentialValidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCredentialValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCredentialValidateRequest) ProtoMessage() {}

func (x *SdkCredentialValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCredentialValidateRequest.ProtoReflect.Descriptor instead.
func (*SdkCredentialValidateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{132}
}

func (x *SdkCredentialValidateRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

// Empty response
type SdkCredentialValidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkCredentialValidateResponse) Reset() {
	*x = SdkCredentialValidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCredentialValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCredentialValidateResponse) ProtoMessage() {}

func (x *SdkCredentialValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCredentialValidateResponse.ProtoReflect.Descriptor instead.
func (*SdkCredentialValidateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{133}
}

// Defines a request to remove any references to credentials
type SdkCredentialDeleteReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the credentials
	CredentialId string `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (x *SdkCredentialDeleteReferencesRequest) Reset() {
	*x = SdkCredentialDeleteReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCredentialDeleteReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCredentialDeleteReferencesRequest) ProtoMessage() {}

func (x *SdkCredentialDeleteReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCredentialDeleteReferencesRequest.ProtoReflect.Descriptor instead.
func (*SdkCredentialDeleteReferencesRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{134}
}

func (x *SdkCredentialDeleteReferencesRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

// Empty response
type SdkCredentialDeleteReferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkCredentialDeleteReferencesResponse) Reset() {
	*x = SdkCredentialDeleteReferencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCredentialDeleteReferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCredentialDeleteReferencesResponse) ProtoMessage() {}

func (x *SdkCredentialDeleteReferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCredentialDeleteReferencesResponse.ProtoReflect.Descriptor instead.
func (*SdkCredentialDeleteReferencesResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{135}
}

// Options to attach device
type SdkVolumeAttachOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the name of the secret stored in a secret store
	// In case of Hashicorp's Vault, it will be the key from the key-value pair stored in its kv backend.
	// In case of Kubernetes secret, it is the name of the secret object itself
	SecretName string `protobuf:"bytes,1,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	// In case of Kubernetes, this will be the key stored in the Kubernetes secret
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// It indicates the additional context which could be used to retrieve the secret.
	// In case of Kubernetes, this is the namespace in which the secret is created.
	SecretContext string `protobuf:"bytes,3,opt,name=secret_context,json=secretContext,proto3" json:"secret_context,omitempty"`
	// Indicates whether fastpath needs to be enabled during attach
	Fastpath string `protobuf:"bytes,4,opt,name=fastpath,proto3" json:"fastpath,omitempty"`
}

func (x *SdkVolumeAttachOptions) Reset() {
	*x = SdkVolumeAttachOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeAttachOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeAttachOptions) ProtoMessage() {}

func (x *SdkVolumeAttachOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeAttachOptions.ProtoReflect.Descriptor instead.
func (*SdkVolumeAttachOptions) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{136}
}

func (x *SdkVolumeAttachOptions) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *SdkVolumeAttachOptions) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *SdkVolumeAttachOptions) GetSecretContext() string {
	if x != nil {
		return x.SecretContext
	}
	return ""
}

func (x *SdkVolumeAttachOptions) GetFastpath() string {
	if x != nil {
		return x.Fastpath
	}
	return ""
}

// Defines a request to mount a volume to the node receiving this request
type SdkVolumeMountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the volume
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Mount path for mounting the volume.
	MountPath string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	// Options to attach device
	Options *SdkVolumeAttachOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	// The following options are private to the driver plugin running the
	// OpenStorage SDK. Contact your driver developer for any special
	// values that need to be provided here.
	DriverOptions map[string]string `protobuf:"bytes,4,rep,name=driver_options,json=driverOptions,proto3" json:"driver_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SdkVolumeMountRequest) Reset() {
	*x = SdkVolumeMountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeMountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeMountRequest) ProtoMessage() {}

func (x *SdkVolumeMountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeMountRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeMountRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{137}
}

func (x *SdkVolumeMountRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkVolumeMountRequest) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *SdkVolumeMountRequest) GetOptions() *SdkVolumeAttachOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SdkVolumeMountRequest) GetDriverOptions() map[string]string {
	if x != nil {
		return x.DriverOptions
	}
	return nil
}

// Empty response
type SdkVolumeMountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkVolumeMountResponse) Reset() {
	*x = SdkVolumeMountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeMountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeMountResponse) ProtoMessage() {}

func (x *SdkVolumeMountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeMountResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeMountResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{138}
}

// Options to unmount device
type SdkVolumeUnmountOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delete the mount path on the node after unmounting
	DeleteMountPath bool `protobuf:"varint,1,opt,name=delete_mount_path,json=deleteMountPath,proto3" json:"delete_mount_path,omitempty"`
	// Do not wait for a delay before deleting path.
	// Normally a storage driver may delay before deleting the mount path,
	// which may be necessary to reduce the risk of race conditions. This
	// choice will remove that delay. This value is only usable when
	// `delete_mount_path` is set.
	NoDelayBeforeDeletingMountPath bool `protobuf:"varint,2,opt,name=no_delay_before_deleting_mount_path,json=noDelayBeforeDeletingMountPath,proto3" json:"no_delay_before_deleting_mount_path,omitempty"`
}

func (x *SdkVolumeUnmountOptions) Reset() {
	*x = SdkVolumeUnmountOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeUnmountOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeUnmountOptions) ProtoMessage() {}

func (x *SdkVolumeUnmountOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeUnmountOptions.ProtoReflect.Descriptor instead.
func (*SdkVolumeUnmountOptions) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{139}
}

func (x *SdkVolumeUnmountOptions) GetDeleteMountPath() bool {
	if x != nil {
		return x.DeleteMountPath
	}
	return false
}

func (x *SdkVolumeUnmountOptions) GetNoDelayBeforeDeletingMountPath() bool {
	if x != nil {
		return x.NoDelayBeforeDeletingMountPath
	}
	return false
}

// Defines a request to unmount a volume on the node receiving this request
type SdkVolumeUnmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of volume
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// MountPath for device
	MountPath string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	// Options to unmount device
	Options *SdkVolumeUnmountOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	// The following options are private to the driver plugin running the
	// OpenStorage SDK. Contact your driver developer for any special
	// values that need to be provided here.
	DriverOptions map[string]string `protobuf:"bytes,4,rep,name=driver_options,json=driverOptions,proto3" json:"driver_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SdkVolumeUnmountRequest) Reset() {
	*x = SdkVolumeUnmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeUnmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeUnmountRequest) ProtoMessage() {}

func (x *SdkVolumeUnmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeUnmountRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeUnmountRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{140}
}

func (x *SdkVolumeUnmountRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkVolumeUnmountRequest) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *SdkVolumeUnmountRequest) GetOptions() *SdkVolumeUnmountOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SdkVolumeUnmountRequest) GetDriverOptions() map[string]string {
	if x != nil {
		return x.DriverOptions
	}
	return nil
}

// Empty response
type SdkVolumeUnmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkVolumeUnmountResponse) Reset() {
	*x = SdkVolumeUnmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeUnmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeUnmountResponse) ProtoMessage() {}

func (x *SdkVolumeUnmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeUnmountResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeUnmountResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{141}
}

// Defines a request to attach a volume to the node receiving this request
type SdkVolumeAttachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of volume
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Options to attach device
	Options *SdkVolumeAttachOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	// The following options are private to the driver plugin running the
	// OpenStorage SDK. Contact your driver developer for any special
	// values that need to be provided here.
	DriverOptions map[string]string `protobuf:"bytes,3,rep,name=driver_options,json=driverOptions,proto3" json:"driver_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SdkVolumeAttachRequest) Reset() {
	*x = SdkVolumeAttachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeAttachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeAttachRequest) ProtoMessage() {}

func (x *SdkVolumeAttachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeAttachRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeAttachRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{142}
}

func (x *SdkVolumeAttachRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkVolumeAttachRequest) GetOptions() *SdkVolumeAttachOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SdkVolumeAttachRequest) GetDriverOptions() map[string]string {
	if x != nil {
		return x.DriverOptions
	}
	return nil
}

// Defines a response from the node which received the request to attach
type SdkVolumeAttachResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device path where device is exported
	DevicePath string `protobuf:"bytes,1,opt,name=device_path,json=devicePath,proto3" json:"device_path,omitempty"`
}

func (x *SdkVolumeAttachResponse) Reset() {
	*x = SdkVolumeAttachResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeAttachResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeAttachResponse) ProtoMessage() {}

func (x *SdkVolumeAttachResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeAttachResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeAttachResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{143}
}

func (x *SdkVolumeAttachResponse) GetDevicePath() string {
	if x != nil {
		return x.DevicePath
	}
	return ""
}

type SdkVolumeDetachOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Forcefully detach device from the kernel
	Force bool `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"`
	// Unmount the volume before detaching
	UnmountBeforeDetach bool `protobuf:"varint,2,opt,name=unmount_before_detach,json=unmountBeforeDetach,proto3" json:"unmount_before_detach,omitempty"`
	//  redirect the request to the attached node
	Redirect bool `protobuf:"varint,3,opt,name=redirect,proto3" json:"redirect,omitempty"`
}

func (x *SdkVolumeDetachOptions) Reset() {
	*x = SdkVolumeDetachOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeDetachOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeDetachOptions) ProtoMessage() {}

func (x *SdkVolumeDetachOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeDetachOptions.ProtoReflect.Descriptor instead.
func (*SdkVolumeDetachOptions) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{144}
}

func (x *SdkVolumeDetachOptions) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *SdkVolumeDetachOptions) GetUnmountBeforeDetach() bool {
	if x != nil {
		return x.UnmountBeforeDetach
	}
	return false
}

func (x *SdkVolumeDetachOptions) GetRedirect() bool {
	if x != nil {
		return x.Redirect
	}
	return false
}

// Defines a request to detach a volume
type SdkVolumeDetachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the volume
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Options to detach device
	Options *SdkVolumeDetachOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	// The following options are private to the driver plugin running the
	// OpenStorage SDK. Contact your driver developer for any special
	// values that need to be provided here.
	DriverOptions map[string]string `protobuf:"bytes,3,rep,name=driver_options,json=driverOptions,proto3" json:"driver_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SdkVolumeDetachRequest) Reset() {
	*x = SdkVolumeDetachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeDetachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeDetachRequest) ProtoMessage() {}

func (x *SdkVolumeDetachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeDetachRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeDetachRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{145}
}

func (x *SdkVolumeDetachRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkVolumeDetachRequest) GetOptions() *SdkVolumeDetachOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SdkVolumeDetachRequest) GetDriverOptions() map[string]string {
	if x != nil {
		return x.DriverOptions
	}
	return nil
}

// Empty response
type SdkVolumeDetachResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkVolumeDetachResponse) Reset() {
	*x = SdkVolumeDetachResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeDetachResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeDetachResponse) ProtoMessage() {}

func (x *SdkVolumeDetachResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeDetachResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeDetachResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{146}
}

// Defines a request to create a volume. Use OpenStorageVolume.Update()
// to update any labels on the volume.
type SdkVolumeCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name of the volume. This will be used for idempotency.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Volume specification
	Spec *VolumeSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Labels to apply to the volume
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SdkVolumeCreateRequest) Reset() {
	*x = SdkVolumeCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeCreateRequest) ProtoMessage() {}

func (x *SdkVolumeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeCreateRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{147}
}

func (x *SdkVolumeCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SdkVolumeCreateRequest) GetSpec() *VolumeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *SdkVolumeCreateRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Defines a response to the creation of a volume
type SdkVolumeCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of new volume
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *SdkVolumeCreateResponse) Reset() {
	*x = SdkVolumeCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeCreateResponse) ProtoMessage() {}

func (x *SdkVolumeCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeCreateResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{148}
}

func (x *SdkVolumeCreateResponse) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

// Defines a request to clone a volume or create a volume from a snapshot
type SdkVolumeCloneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name of the volume. This will be used for idempotency.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Parent volume id or snapshot id will create a new volume as a clone of the parent.
	ParentId string `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (x *SdkVolumeCloneRequest) Reset() {
	*x = SdkVolumeCloneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeCloneRequest) ProtoMessage() {}

func (x *SdkVolumeCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeCloneRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeCloneRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{149}
}

func (x *SdkVolumeCloneRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SdkVolumeCloneRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

// Defines the response when creating a clone from a volume or a snapshot
type SdkVolumeCloneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of new volume
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *SdkVolumeCloneResponse) Reset() {
	*x = SdkVolumeCloneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeCloneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeCloneResponse) ProtoMessage() {}

func (x *SdkVolumeCloneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeCloneResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeCloneResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{150}
}

func (x *SdkVolumeCloneResponse) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

// Defines the request to delete a volume
type SdkVolumeDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of volume to delete
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *SdkVolumeDeleteRequest) Reset() {
	*x = SdkVolumeDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeDeleteRequest) ProtoMessage() {}

func (x *SdkVolumeDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeDeleteRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{151}
}

func (x *SdkVolumeDeleteRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

// Empty response
type SdkVolumeDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkVolumeDeleteResponse) Reset() {
	*x = SdkVolumeDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeDeleteResponse) ProtoMessage() {}

func (x *SdkVolumeDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeDeleteResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeDeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{152}
}

// Defines the request to inspect a volume
type SdkVolumeInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of volume to inspect
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Options during inspection
	Options *VolumeInspectOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *SdkVolumeInspectRequest) Reset() {
	*x = SdkVolumeInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeInspectRequest) ProtoMessage() {}

func (x *SdkVolumeInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeInspectRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeInspectRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{153}
}

func (x *SdkVolumeInspectRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkVolumeInspectRequest) GetOptions() *VolumeInspectOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Defines the response when inspecting a volume
type SdkVolumeInspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about the volume
	Volume *Volume `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	// Name of volume
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Volume labels
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SdkVolumeInspectResponse) Reset() {
	*x = SdkVolumeInspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeInspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeInspectResponse) ProtoMessage() {}

func (x *SdkVolumeInspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeInspectResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeInspectResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{154}
}

func (x *SdkVolumeInspectResponse) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *SdkVolumeInspectResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SdkVolumeInspectResponse) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Defines the request to inspect volumes using a filter
type SdkVolumeInspectWithFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional) Name to search
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// (optional) Labels to search
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (optional) Ownership to match
	Ownership *Ownership `protobuf:"bytes,4,opt,name=ownership,proto3" json:"ownership,omitempty"`
	// (optional) Group to match
	Group *Group `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	// Options during inspection
	Options *VolumeInspectOptions `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *SdkVolumeInspectWithFiltersRequest) Reset() {
	*x = SdkVolumeInspectWithFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeInspectWithFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeInspectWithFiltersRequest) ProtoMessage() {}

func (x *SdkVolumeInspectWithFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeInspectWithFiltersRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeInspectWithFiltersRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{155}
}

func (x *SdkVolumeInspectWithFiltersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SdkVolumeInspectWithFiltersRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SdkVolumeInspectWithFiltersRequest) GetOwnership() *Ownership {
	if x != nil {
		return x.Ownership
	}
	return nil
}

func (x *SdkVolumeInspectWithFiltersRequest) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *SdkVolumeInspectWithFiltersRequest) GetOptions() *VolumeInspectOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Defines the response when inspecting volumes using a filter
type SdkVolumeInspectWithFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of `SdkVolumeInspectResponse` objects describing the volumes
	Volumes []*SdkVolumeInspectResponse `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *SdkVolumeInspectWithFiltersResponse) Reset() {
	*x = SdkVolumeInspectWithFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeInspectWithFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeInspectWithFiltersResponse) ProtoMessage() {}

func (x *SdkVolumeInspectWithFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeInspectWithFiltersResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeInspectWithFiltersResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{156}
}

func (x *SdkVolumeInspectWithFiltersResponse) GetVolumes() []*SdkVolumeInspectResponse {
	if x != nil {
		return x.Volumes
	}
	return nil
}

// This request is used to adjust or set new values in the volume
type SdkVolumeUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the volume to update
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Change label values. Some of these values may not be able to be changed.
	// New labels will be added to the current volume labels. To delete a label, set the
	// value of the label to an empty string.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// VolumeSpecUpdate provides a method to request that certain values
	// in the VolumeSpec are changed. This is necessary as a separate variable
	// because values like int and bool in the VolumeSpec cannot be determined
	// if they are being requested to change in gRPC proto3. Some of these
	// values may not be able to be changed.
	//
	// Here are a few examples of actions that can be accomplished using the VolumeSpec:
	//
	// * To resize the volume: Set a new value in spec.size_opt.size.
	// * To change number of replicas: Adjust spec.ha_level_opt.ha_level.
	// * To change the I/O Profile: Adjust spec.io_profile_opt.io_profile.
	Spec *VolumeSpecUpdate `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *SdkVolumeUpdateRequest) Reset() {
	*x = SdkVolumeUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeUpdateRequest) ProtoMessage() {}

func (x *SdkVolumeUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeUpdateRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{157}
}

func (x *SdkVolumeUpdateRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkVolumeUpdateRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SdkVolumeUpdateRequest) GetSpec() *VolumeSpecUpdate {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Empty response
type SdkVolumeUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkVolumeUpdateResponse) Reset() {
	*x = SdkVolumeUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeUpdateResponse) ProtoMessage() {}

func (x *SdkVolumeUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeUpdateResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeUpdateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{158}
}

// Defines a request to retrieve volume statistics
type SdkVolumeStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the volume to get statistics
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// When set to false the stats are in /proc/diskstats style stats.
	// When set to true the stats are stats for a specific duration.
	NotCumulative bool `protobuf:"varint,2,opt,name=not_cumulative,json=notCumulative,proto3" json:"not_cumulative,omitempty"`
}

func (x *SdkVolumeStatsRequest) Reset() {
	*x = SdkVolumeStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeStatsRequest) ProtoMessage() {}

func (x *SdkVolumeStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeStatsRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeStatsRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{159}
}

func (x *SdkVolumeStatsRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkVolumeStatsRequest) GetNotCumulative() bool {
	if x != nil {
		return x.NotCumulative
	}
	return false
}

// Defines a response containing drive statistics
type SdkVolumeStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Statistics for a single volume
	Stats *Stats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *SdkVolumeStatsResponse) Reset() {
	*x = SdkVolumeStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeStatsResponse) ProtoMessage() {}

func (x *SdkVolumeStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeStatsResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeStatsResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{160}
}

func (x *SdkVolumeStatsResponse) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Defines request to retrieve volume/snapshot capacity usage details
type SdkVolumeCapacityUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the snapshot/volume to get capacity usage details
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *SdkVolumeCapacityUsageRequest) Reset() {
	*x = SdkVolumeCapacityUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeCapacityUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeCapacityUsageRequest) ProtoMessage() {}

func (x *SdkVolumeCapacityUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeCapacityUsageRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeCapacityUsageRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{161}
}

func (x *SdkVolumeCapacityUsageRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

// Defines response containing volume/snapshot capacity usage details
type SdkVolumeCapacityUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CapacityUsage details
	CapacityUsageInfo *CapacityUsageInfo `protobuf:"bytes,1,opt,name=capacity_usage_info,json=capacityUsageInfo,proto3" json:"capacity_usage_info,omitempty"`
}

func (x *SdkVolumeCapacityUsageResponse) Reset() {
	*x = SdkVolumeCapacityUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeCapacityUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeCapacityUsageResponse) ProtoMessage() {}

func (x *SdkVolumeCapacityUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeCapacityUsageResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeCapacityUsageResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{162}
}

func (x *SdkVolumeCapacityUsageResponse) GetCapacityUsageInfo() *CapacityUsageInfo {
	if x != nil {
		return x.CapacityUsageInfo
	}
	return nil
}

// Defines a request to list volumes
type SdkVolumeEnumerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkVolumeEnumerateRequest) Reset() {
	*x = SdkVolumeEnumerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeEnumerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeEnumerateRequest) ProtoMessage() {}

func (x *SdkVolumeEnumerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeEnumerateRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeEnumerateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{163}
}

// Defines the response when listing volumes
type SdkVolumeEnumerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of volumes matching label
	VolumeIds []string `protobuf:"bytes,1,rep,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
}

func (x *SdkVolumeEnumerateResponse) Reset() {
	*x = SdkVolumeEnumerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeEnumerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeEnumerateResponse) ProtoMessage() {}

func (x *SdkVolumeEnumerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeEnumerateResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeEnumerateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{164}
}

func (x *SdkVolumeEnumerateResponse) GetVolumeIds() []string {
	if x != nil {
		return x.VolumeIds
	}
	return nil
}

// Defines a request to list volumes
type SdkVolumeEnumerateWithFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional) Name to search
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// (optional) Labels to search
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (optional) Ownership to match
	Ownership *Ownership `protobuf:"bytes,4,opt,name=ownership,proto3" json:"ownership,omitempty"`
	// (optional) Group to match
	Group *Group `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *SdkVolumeEnumerateWithFiltersRequest) Reset() {
	*x = SdkVolumeEnumerateWithFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeEnumerateWithFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeEnumerateWithFiltersRequest) ProtoMessage() {}

func (x *SdkVolumeEnumerateWithFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeEnumerateWithFiltersRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeEnumerateWithFiltersRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{165}
}

func (x *SdkVolumeEnumerateWithFiltersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SdkVolumeEnumerateWithFiltersRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SdkVolumeEnumerateWithFiltersRequest) GetOwnership() *Ownership {
	if x != nil {
		return x.Ownership
	}
	return nil
}

func (x *SdkVolumeEnumerateWithFiltersRequest) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

// Defines the response when listing volumes
type SdkVolumeEnumerateWithFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of volumes matching label
	VolumeIds []string `protobuf:"bytes,1,rep,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
}

func (x *SdkVolumeEnumerateWithFiltersResponse) Reset() {
	*x = SdkVolumeEnumerateWithFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeEnumerateWithFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeEnumerateWithFiltersResponse) ProtoMessage() {}

func (x *SdkVolumeEnumerateWithFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeEnumerateWithFiltersResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeEnumerateWithFiltersResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{166}
}

func (x *SdkVolumeEnumerateWithFiltersResponse) GetVolumeIds() []string {
	if x != nil {
		return x.VolumeIds
	}
	return nil
}

// Defines the request when creating a snapshot from a volume.
type SdkVolumeSnapshotCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of volume to take the snapshot from
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Name of the snapshot.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Labels to apply to snapshot
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SdkVolumeSnapshotCreateRequest) Reset() {
	*x = SdkVolumeSnapshotCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeSnapshotCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeSnapshotCreateRequest) ProtoMessage() {}

func (x *SdkVolumeSnapshotCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeSnapshotCreateRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeSnapshotCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{167}
}

func (x *SdkVolumeSnapshotCreateRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkVolumeSnapshotCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SdkVolumeSnapshotCreateRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Defines a response after creating a snapshot of a volume
type SdkVolumeSnapshotCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of immutable snapshot
	SnapshotId string `protobuf:"bytes,1,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
}

func (x *SdkVolumeSnapshotCreateResponse) Reset() {
	*x = SdkVolumeSnapshotCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeSnapshotCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeSnapshotCreateResponse) ProtoMessage() {}

func (x *SdkVolumeSnapshotCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeSnapshotCreateResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeSnapshotCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{168}
}

func (x *SdkVolumeSnapshotCreateResponse) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

// Defines a request to restore a volume to a snapshot
type SdkVolumeSnapshotRestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of volume
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Snapshot id to apply to `volume_id`
	SnapshotId string `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
}

func (x *SdkVolumeSnapshotRestoreRequest) Reset() {
	*x = SdkVolumeSnapshotRestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeSnapshotRestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeSnapshotRestoreRequest) ProtoMessage() {}

func (x *SdkVolumeSnapshotRestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeSnapshotRestoreRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeSnapshotRestoreRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{169}
}

func (x *SdkVolumeSnapshotRestoreRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkVolumeSnapshotRestoreRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

// Empty response
type SdkVolumeSnapshotRestoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkVolumeSnapshotRestoreResponse) Reset() {
	*x = SdkVolumeSnapshotRestoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeSnapshotRestoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeSnapshotRestoreResponse) ProtoMessage() {}

func (x *SdkVolumeSnapshotRestoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeSnapshotRestoreResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeSnapshotRestoreResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{170}
}

// Defines a request to list the snaphots
type SdkVolumeSnapshotEnumerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Get the snapshots for this volume id
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *SdkVolumeSnapshotEnumerateRequest) Reset() {
	*x = SdkVolumeSnapshotEnumerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeSnapshotEnumerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeSnapshotEnumerateRequest) ProtoMessage() {}

func (x *SdkVolumeSnapshotEnumerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeSnapshotEnumerateRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeSnapshotEnumerateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{171}
}

func (x *SdkVolumeSnapshotEnumerateRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

// Defines a response when listing snapshots
type SdkVolumeSnapshotEnumerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of immutable snapshots
	VolumeSnapshotIds []string `protobuf:"bytes,1,rep,name=volume_snapshot_ids,json=volumeSnapshotIds,proto3" json:"volume_snapshot_ids,omitempty"`
}

func (x *SdkVolumeSnapshotEnumerateResponse) Reset() {
	*x = SdkVolumeSnapshotEnumerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeSnapshotEnumerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeSnapshotEnumerateResponse) ProtoMessage() {}

func (x *SdkVolumeSnapshotEnumerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeSnapshotEnumerateResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeSnapshotEnumerateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{172}
}

func (x *SdkVolumeSnapshotEnumerateResponse) GetVolumeSnapshotIds() []string {
	if x != nil {
		return x.VolumeSnapshotIds
	}
	return nil
}

// Defines a request to list the snaphots
type SdkVolumeSnapshotEnumerateWithFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional) Get the snapshots for this volume id
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// (optional) Get snapshots that match these labels
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SdkVolumeSnapshotEnumerateWithFiltersRequest) Reset() {
	*x = SdkVolumeSnapshotEnumerateWithFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeSnapshotEnumerateWithFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeSnapshotEnumerateWithFiltersRequest) ProtoMessage() {}

func (x *SdkVolumeSnapshotEnumerateWithFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeSnapshotEnumerateWithFiltersRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeSnapshotEnumerateWithFiltersRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{173}
}

func (x *SdkVolumeSnapshotEnumerateWithFiltersRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkVolumeSnapshotEnumerateWithFiltersRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Defines a response when listing snapshots
type SdkVolumeSnapshotEnumerateWithFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of immutable snapshots
	VolumeSnapshotIds []string `protobuf:"bytes,1,rep,name=volume_snapshot_ids,json=volumeSnapshotIds,proto3" json:"volume_snapshot_ids,omitempty"`
}

func (x *SdkVolumeSnapshotEnumerateWithFiltersResponse) Reset() {
	*x = SdkVolumeSnapshotEnumerateWithFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeSnapshotEnumerateWithFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeSnapshotEnumerateWithFiltersResponse) ProtoMessage() {}

func (x *SdkVolumeSnapshotEnumerateWithFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeSnapshotEnumerateWithFiltersResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeSnapshotEnumerateWithFiltersResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{174}
}

func (x *SdkVolumeSnapshotEnumerateWithFiltersResponse) GetVolumeSnapshotIds() []string {
	if x != nil {
		return x.VolumeSnapshotIds
	}
	return nil
}

// Defines a request to update the snapshot schedule of a volume
type SdkVolumeSnapshotScheduleUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of volume
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Names of schedule policies
	SnapshotScheduleNames []string `protobuf:"bytes,2,rep,name=snapshot_schedule_names,json=snapshotScheduleNames,proto3" json:"snapshot_schedule_names,omitempty"`
}

func (x *SdkVolumeSnapshotScheduleUpdateRequest) Reset() {
	*x = SdkVolumeSnapshotScheduleUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeSnapshotScheduleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeSnapshotScheduleUpdateRequest) ProtoMessage() {}

func (x *SdkVolumeSnapshotScheduleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeSnapshotScheduleUpdateRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeSnapshotScheduleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{175}
}

func (x *SdkVolumeSnapshotScheduleUpdateRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkVolumeSnapshotScheduleUpdateRequest) GetSnapshotScheduleNames() []string {
	if x != nil {
		return x.SnapshotScheduleNames
	}
	return nil
}

// Empty response
type SdkVolumeSnapshotScheduleUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkVolumeSnapshotScheduleUpdateResponse) Reset() {
	*x = SdkVolumeSnapshotScheduleUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeSnapshotScheduleUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeSnapshotScheduleUpdateResponse) ProtoMessage() {}

func (x *SdkVolumeSnapshotScheduleUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeSnapshotScheduleUpdateResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeSnapshotScheduleUpdateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{176}
}

// Defines request to retrieve all volumes/snapshots capacity usage details
// for a given node
type SdkNodeVolumeUsageByNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the node to get snapshot/volumes capacity usage details
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *SdkNodeVolumeUsageByNodeRequest) Reset() {
	*x = SdkNodeVolumeUsageByNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeVolumeUsageByNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeVolumeUsageByNodeRequest) ProtoMessage() {}

func (x *SdkNodeVolumeUsageByNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeVolumeUsageByNodeRequest.ProtoReflect.Descriptor instead.
func (*SdkNodeVolumeUsageByNodeRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{177}
}

func (x *SdkNodeVolumeUsageByNodeRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

// Defines response containing Node's volumes/snapshot capacity usage details
type SdkNodeVolumeUsageByNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VolumeUsageByNode details
	VolumeUsageInfo *VolumeUsageByNode `protobuf:"bytes,1,opt,name=volume_usage_info,json=volumeUsageInfo,proto3" json:"volume_usage_info,omitempty"`
}

func (x *SdkNodeVolumeUsageByNodeResponse) Reset() {
	*x = SdkNodeVolumeUsageByNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeVolumeUsageByNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeVolumeUsageByNodeResponse) ProtoMessage() {}

func (x *SdkNodeVolumeUsageByNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeVolumeUsageByNodeResponse.ProtoReflect.Descriptor instead.
func (*SdkNodeVolumeUsageByNodeResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{178}
}

func (x *SdkNodeVolumeUsageByNodeResponse) GetVolumeUsageInfo() *VolumeUsageByNode {
	if x != nil {
		return x.VolumeUsageInfo
	}
	return nil
}

// Defines request to trigger RelaxedReclaim purge
// for a given node
type SdkNodeRelaxedReclaimPurgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the node to trigger the purge
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *SdkNodeRelaxedReclaimPurgeRequest) Reset() {
	*x = SdkNodeRelaxedReclaimPurgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeRelaxedReclaimPurgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeRelaxedReclaimPurgeRequest) ProtoMessage() {}

func (x *SdkNodeRelaxedReclaimPurgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeRelaxedReclaimPurgeRequest.ProtoReflect.Descriptor instead.
func (*SdkNodeRelaxedReclaimPurgeRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{179}
}

func (x *SdkNodeRelaxedReclaimPurgeRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

// Defines response containing status of the trigger
type SdkNodeRelaxedReclaimPurgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status returns true on successful purge
	Status *RelaxedReclaimPurge `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SdkNodeRelaxedReclaimPurgeResponse) Reset() {
	*x = SdkNodeRelaxedReclaimPurgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeRelaxedReclaimPurgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeRelaxedReclaimPurgeResponse) ProtoMessage() {}

func (x *SdkNodeRelaxedReclaimPurgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeRelaxedReclaimPurgeResponse.ProtoReflect.Descriptor instead.
func (*SdkNodeRelaxedReclaimPurgeResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{180}
}

func (x *SdkNodeRelaxedReclaimPurgeResponse) GetStatus() *RelaxedReclaimPurge {
	if x != nil {
		return x.Status
	}
	return nil
}

// Empty request
type SdkClusterDomainsEnumerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkClusterDomainsEnumerateRequest) Reset() {
	*x = SdkClusterDomainsEnumerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterDomainsEnumerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterDomainsEnumerateRequest) ProtoMessage() {}

func (x *SdkClusterDomainsEnumerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterDomainsEnumerateRequest.ProtoReflect.Descriptor instead.
func (*SdkClusterDomainsEnumerateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{181}
}

// Defines a response when enumerating cluster domains
type SdkClusterDomainsEnumerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of names of all the cluster domains in a cluster
	ClusterDomainNames []string `protobuf:"bytes,1,rep,name=cluster_domain_names,json=clusterDomainNames,proto3" json:"cluster_domain_names,omitempty"`
}

func (x *SdkClusterDomainsEnumerateResponse) Reset() {
	*x = SdkClusterDomainsEnumerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterDomainsEnumerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterDomainsEnumerateResponse) ProtoMessage() {}

func (x *SdkClusterDomainsEnumerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterDomainsEnumerateResponse.ProtoReflect.Descriptor instead.
func (*SdkClusterDomainsEnumerateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{182}
}

func (x *SdkClusterDomainsEnumerateResponse) GetClusterDomainNames() []string {
	if x != nil {
		return x.ClusterDomainNames
	}
	return nil
}

// Defines a request to inspect a cluster domain
type SdkClusterDomainInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the cluster domain to inspect
	ClusterDomainName string `protobuf:"bytes,1,opt,name=cluster_domain_name,json=clusterDomainName,proto3" json:"cluster_domain_name,omitempty"`
}

func (x *SdkClusterDomainInspectRequest) Reset() {
	*x = SdkClusterDomainInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterDomainInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterDomainInspectRequest) ProtoMessage() {}

func (x *SdkClusterDomainInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterDomainInspectRequest.ProtoReflect.Descriptor instead.
func (*SdkClusterDomainInspectRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{183}
}

func (x *SdkClusterDomainInspectRequest) GetClusterDomainName() string {
	if x != nil {
		return x.ClusterDomainName
	}
	return ""
}

// Defines a response to inspecting a cluster domain
type SdkClusterDomainInspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the cluster domain
	ClusterDomainName string `protobuf:"bytes,1,opt,name=cluster_domain_name,json=clusterDomainName,proto3" json:"cluster_domain_name,omitempty"`
	// IsActive indicates whether this cluster domain is active
	IsActive bool `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *SdkClusterDomainInspectResponse) Reset() {
	*x = SdkClusterDomainInspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterDomainInspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterDomainInspectResponse) ProtoMessage() {}

func (x *SdkClusterDomainInspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterDomainInspectResponse.ProtoReflect.Descriptor instead.
func (*SdkClusterDomainInspectResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{184}
}

func (x *SdkClusterDomainInspectResponse) GetClusterDomainName() string {
	if x != nil {
		return x.ClusterDomainName
	}
	return ""
}

func (x *SdkClusterDomainInspectResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

// Defines a request to activate a cluster domain
type SdkClusterDomainActivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the cluster domain to activate
	ClusterDomainName string `protobuf:"bytes,1,opt,name=cluster_domain_name,json=clusterDomainName,proto3" json:"cluster_domain_name,omitempty"`
}

func (x *SdkClusterDomainActivateRequest) Reset() {
	*x = SdkClusterDomainActivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterDomainActivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterDomainActivateRequest) ProtoMessage() {}

func (x *SdkClusterDomainActivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterDomainActivateRequest.ProtoReflect.Descriptor instead.
func (*SdkClusterDomainActivateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{185}
}

func (x *SdkClusterDomainActivateRequest) GetClusterDomainName() string {
	if x != nil {
		return x.ClusterDomainName
	}
	return ""
}

// Empty response
type SdkClusterDomainActivateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkClusterDomainActivateResponse) Reset() {
	*x = SdkClusterDomainActivateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterDomainActivateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterDomainActivateResponse) ProtoMessage() {}

func (x *SdkClusterDomainActivateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterDomainActivateResponse.ProtoReflect.Descriptor instead.
func (*SdkClusterDomainActivateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{186}
}

// Defines a request to deactivate a cluster domain
type SdkClusterDomainDeactivateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the cluster domain to deactivate
	ClusterDomainName string `protobuf:"bytes,1,opt,name=cluster_domain_name,json=clusterDomainName,proto3" json:"cluster_domain_name,omitempty"`
}

func (x *SdkClusterDomainDeactivateRequest) Reset() {
	*x = SdkClusterDomainDeactivateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterDomainDeactivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterDomainDeactivateRequest) ProtoMessage() {}

func (x *SdkClusterDomainDeactivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterDomainDeactivateRequest.ProtoReflect.Descriptor instead.
func (*SdkClusterDomainDeactivateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{187}
}

func (x *SdkClusterDomainDeactivateRequest) GetClusterDomainName() string {
	if x != nil {
		return x.ClusterDomainName
	}
	return ""
}

// Empty response
type SdkClusterDomainDeactivateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkClusterDomainDeactivateResponse) Reset() {
	*x = SdkClusterDomainDeactivateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterDomainDeactivateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterDomainDeactivateResponse) ProtoMessage() {}

func (x *SdkClusterDomainDeactivateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterDomainDeactivateResponse.ProtoReflect.Descriptor instead.
func (*SdkClusterDomainDeactivateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{188}
}

// Empty request
type SdkClusterInspectCurrentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkClusterInspectCurrentRequest) Reset() {
	*x = SdkClusterInspectCurrentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterInspectCurrentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterInspectCurrentRequest) ProtoMessage() {}

func (x *SdkClusterInspectCurrentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterInspectCurrentRequest.ProtoReflect.Descriptor instead.
func (*SdkClusterInspectCurrentRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{189}
}

// Defines a response when inspecting the current cluster
type SdkClusterInspectCurrentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster information
	Cluster *StorageCluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *SdkClusterInspectCurrentResponse) Reset() {
	*x = SdkClusterInspectCurrentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterInspectCurrentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterInspectCurrentResponse) ProtoMessage() {}

func (x *SdkClusterInspectCurrentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterInspectCurrentResponse.ProtoReflect.Descriptor instead.
func (*SdkClusterInspectCurrentResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{190}
}

func (x *SdkClusterInspectCurrentResponse) GetCluster() *StorageCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// Defines a request when inspecting a node
type SdkNodeInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of node to inspect
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *SdkNodeInspectRequest) Reset() {
	*x = SdkNodeInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeInspectRequest) ProtoMessage() {}

func (x *SdkNodeInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeInspectRequest.ProtoReflect.Descriptor instead.
func (*SdkNodeInspectRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{191}
}

func (x *SdkNodeInspectRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

// Job is a generic job object that can encapsulate other
// messages which follow the job framework of APIs
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the job
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// State of the current job
	State Job_State `protobuf:"varint,2,opt,name=state,proto3,enum=openstorage.api.Job_State" json:"state,omitempty"`
	// Type is the job type
	Type Job_Type `protobuf:"varint,3,opt,name=type,proto3,enum=openstorage.api.Job_Type" json:"type,omitempty"`
	// Job is one of the supported jobs
	//
	// Types that are assignable to Job:
	//	*Job_DrainAttachments
	//	*Job_ClouddriveTransfer
	//	*Job_CollectDiags
	Job isJob_Job `protobuf_oneof:"job"`
	// CreateTime is the time the job was created
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// LastUpdateTime is the time the job was updated
	LastUpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{192}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetState() Job_State {
	if x != nil {
		return x.State
	}
	return Job_UNSPECIFIED_STATE
}

func (x *Job) GetType() Job_Type {
	if x != nil {
		return x.Type
	}
	return Job_UNSPECIFIED_TYPE
}

func (m *Job) GetJob() isJob_Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (x *Job) GetDrainAttachments() *NodeDrainAttachmentsJob {
	if x, ok := x.GetJob().(*Job_DrainAttachments); ok {
		return x.DrainAttachments
	}
	return nil
}

func (x *Job) GetClouddriveTransfer() *CloudDriveTransferJob {
	if x, ok := x.GetJob().(*Job_ClouddriveTransfer); ok {
		return x.ClouddriveTransfer
	}
	return nil
}

func (x *Job) GetCollectDiags() *CollectDiagsJob {
	if x, ok := x.GetJob().(*Job_CollectDiags); ok {
		return x.CollectDiags
	}
	return nil
}

func (x *Job) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Job) GetLastUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

type isJob_Job interface {
	isJob_Job()
}

type Job_DrainAttachments struct {
	// NodeDrainAttachmentsJob if selected this job desribes
	// the task for removing volume attachments from a node
	DrainAttachments *NodeDrainAttachmentsJob `protobuf:"bytes,400,opt,name=drain_attachments,json=drainAttachments,proto3,oneof"`
}

type Job_ClouddriveTransfer struct {
	// CloudDriveTransferJob if selected describes the task to transfer a cloud driveset
	// from one node to another
	ClouddriveTransfer *CloudDriveTransferJob `protobuf:"bytes,401,opt,name=clouddrive_transfer,json=clouddriveTransfer,proto3,oneof"`
}

type Job_CollectDiags struct {
	// CollectDiagsJob if selected describes the task to collect diagnostics for the cluster
	CollectDiags *CollectDiagsJob `protobuf:"bytes,402,opt,name=collect_diags,json=collectDiags,proto3,oneof"`
}

func (*Job_DrainAttachments) isJob_Job() {}

func (*Job_ClouddriveTransfer) isJob_Job() {}

func (*Job_CollectDiags) isJob_Job() {}

// Defines a response for an SDK request that spins up a new job
// to perform the request
type SdkJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job that was created for the SDK request
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *SdkJobResponse) Reset() {
	*x = SdkJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkJobResponse) ProtoMessage() {}

func (x *SdkJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkJobResponse.ProtoReflect.Descriptor instead.
func (*SdkJobResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{193}
}

func (x *SdkJobResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

// Options for draining volume attachment from a node
type NodeDrainAttachmentOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NodeDrainAttachmentOptions) Reset() {
	*x = NodeDrainAttachmentOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDrainAttachmentOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDrainAttachmentOptions) ProtoMessage() {}

func (x *NodeDrainAttachmentOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDrainAttachmentOptions.ProtoReflect.Descriptor instead.
func (*NodeDrainAttachmentOptions) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{194}
}

// Defines a node drain volume attachments request
type SdkNodeDrainAttachmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the node to drain
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Selector is used for selecting volumes whose
	// attachment needs to be moved from this node.
	// The selector could be a list of volume label
	// key value pairs to select a subset of volumes.
	Selector []*LabelSelectorRequirement `protobuf:"bytes,2,rep,name=selector,proto3" json:"selector,omitempty"`
	// Drain only sharedv4 volumes from a node
	// By default all volumes will be drained.
	OnlySharedv4 bool `protobuf:"varint,3,opt,name=only_sharedv4,json=onlySharedv4,proto3" json:"only_sharedv4,omitempty"`
	// Issuer is a user friendly name for the caller who is
	// invoking the API. It can be used by caller to filter out
	// drain requests from a particular issuer
	Issuer string `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *SdkNodeDrainAttachmentsRequest) Reset() {
	*x = SdkNodeDrainAttachmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeDrainAttachmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeDrainAttachmentsRequest) ProtoMessage() {}

func (x *SdkNodeDrainAttachmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeDrainAttachmentsRequest.ProtoReflect.Descriptor instead.
func (*SdkNodeDrainAttachmentsRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{195}
}

func (x *SdkNodeDrainAttachmentsRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *SdkNodeDrainAttachmentsRequest) GetSelector() []*LabelSelectorRequirement {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *SdkNodeDrainAttachmentsRequest) GetOnlySharedv4() bool {
	if x != nil {
		return x.OnlySharedv4
	}
	return false
}

func (x *SdkNodeDrainAttachmentsRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

// NodeDrainAttachmentsJob describe a job to drain volume attachments from a node
type NodeDrainAttachmentsJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NodeID of the node for which this drain job is running
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Status describes a helpful status of this node drain operation
	Status string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	// Issuer is a user friendly name for the caller who is
	// invoking the API. It can be used by caller to filter out
	// drain requests from a particular issuer
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Parameters is the original request params for this node drain operation
	// This node drain job is applicable to only one of these node drain operations.
	Parameters *SdkNodeDrainAttachmentsRequest `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// CreateTime is the time the job was created
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// LastUpdateTime is the time the job was updated
	LastUpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
}

func (x *NodeDrainAttachmentsJob) Reset() {
	*x = NodeDrainAttachmentsJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDrainAttachmentsJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDrainAttachmentsJob) ProtoMessage() {}

func (x *NodeDrainAttachmentsJob) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDrainAttachmentsJob.ProtoReflect.Descriptor instead.
func (*NodeDrainAttachmentsJob) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{196}
}

func (x *NodeDrainAttachmentsJob) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeDrainAttachmentsJob) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NodeDrainAttachmentsJob) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *NodeDrainAttachmentsJob) GetParameters() *SdkNodeDrainAttachmentsRequest {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *NodeDrainAttachmentsJob) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *NodeDrainAttachmentsJob) GetLastUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

type CloudDriveTransferJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SourceDrivesetID is the ID of the current driveset that needs to be transferred
	SourceDrivesetId string `protobuf:"bytes,1,opt,name=source_driveset_id,json=sourceDrivesetId,proto3" json:"source_driveset_id,omitempty"`
	// DestinationInstanceID is the ID of the storageless instance that needs to take over the SourceDriveSetID
	DestinationInstanceId string `protobuf:"bytes,2,opt,name=destination_instance_id,json=destinationInstanceId,proto3" json:"destination_instance_id,omitempty"`
	// Status describes a helpful status of this operation
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CloudDriveTransferJob) Reset() {
	*x = CloudDriveTransferJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudDriveTransferJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudDriveTransferJob) ProtoMessage() {}

func (x *CloudDriveTransferJob) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudDriveTransferJob.ProtoReflect.Descriptor instead.
func (*CloudDriveTransferJob) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{197}
}

func (x *CloudDriveTransferJob) GetSourceDrivesetId() string {
	if x != nil {
		return x.SourceDrivesetId
	}
	return ""
}

func (x *CloudDriveTransferJob) GetDestinationInstanceId() string {
	if x != nil {
		return x.DestinationInstanceId
	}
	return ""
}

func (x *CloudDriveTransferJob) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CollectDiagsJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request is the user request for this diags collection job
	Request *SdkDiagsCollectRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// Statuses is a list of statuses for diags collection for each node that is part of the request
	Statuses []*DiagsCollectionStatus `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *CollectDiagsJob) Reset() {
	*x = CollectDiagsJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectDiagsJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectDiagsJob) ProtoMessage() {}

func (x *CollectDiagsJob) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectDiagsJob.ProtoReflect.Descriptor instead.
func (*CollectDiagsJob) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{198}
}

func (x *CollectDiagsJob) GetRequest() *SdkDiagsCollectRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CollectDiagsJob) GetStatuses() []*DiagsCollectionStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type DiagsCollectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node is the node that's collecting the diags
	Node string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	// State is the current state of diags collection on the node
	State DiagsCollectionStatus_State `protobuf:"varint,2,opt,name=state,proto3,enum=openstorage.api.DiagsCollectionStatus_State" json:"state,omitempty"`
	// Message is a user friendly message for current status of diags collection
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DiagsCollectionStatus) Reset() {
	*x = DiagsCollectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagsCollectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagsCollectionStatus) ProtoMessage() {}

func (x *DiagsCollectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagsCollectionStatus.ProtoReflect.Descriptor instead.
func (*DiagsCollectionStatus) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{199}
}

func (x *DiagsCollectionStatus) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *DiagsCollectionStatus) GetState() DiagsCollectionStatus_State {
	if x != nil {
		return x.State
	}
	return DiagsCollectionStatus_UNSPECIFIED
}

func (x *DiagsCollectionStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// SdkDiagsCollectRequest is the request object that specifies what should be part of the diags that are collected
// User can specify both Node and Volume or just one of them. If both are provided, the implementation will select
// nodes based on both and also handle overlaps
type SdkDiagsCollectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node selects the node(s) for diags collection
	Node *DiagsNodeSelector `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	// Volume selects the volume(s) for diags collection
	Volume *DiagsVolumeSelector `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	// ProfileOnly is an optional flag if true will only collect the stack and heap profile of the driver and will skip
	// other diag components
	ProfileOnly bool `protobuf:"varint,3,opt,name=profile_only,json=profileOnly,proto3" json:"profile_only,omitempty"`
	// Issuer is an optional  user friendly name for the caller invoking the API
	Issuer string `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// TimeoutMins is the timeout in minutes for the job. This is an optional field and if not provided, the
	// implementation of the SDK will use a sane default
	TimeoutMins int64 `protobuf:"varint,5,opt,name=timeout_mins,json=timeoutMins,proto3" json:"timeout_mins,omitempty"`
	// Live is an optional flag if true will collect live cores from running processes of the driver
	Live bool `protobuf:"varint,6,opt,name=live,proto3" json:"live,omitempty"`
	// Filename is an optional flag only to be used for testing purposes.
	Filename string `protobuf:"bytes,7,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *SdkDiagsCollectRequest) Reset() {
	*x = SdkDiagsCollectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkDiagsCollectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkDiagsCollectRequest) ProtoMessage() {}

func (x *SdkDiagsCollectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkDiagsCollectRequest.ProtoReflect.Descriptor instead.
func (*SdkDiagsCollectRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{200}
}

func (x *SdkDiagsCollectRequest) GetNode() *DiagsNodeSelector {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *SdkDiagsCollectRequest) GetVolume() *DiagsVolumeSelector {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *SdkDiagsCollectRequest) GetProfileOnly() bool {
	if x != nil {
		return x.ProfileOnly
	}
	return false
}

func (x *SdkDiagsCollectRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *SdkDiagsCollectRequest) GetTimeoutMins() int64 {
	if x != nil {
		return x.TimeoutMins
	}
	return 0
}

func (x *SdkDiagsCollectRequest) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

func (x *SdkDiagsCollectRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// SdkDiagsCollectResponse defines a response for an SDK request to collect diags
type SdkDiagsCollectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job that was created for the SDK request
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *SdkDiagsCollectResponse) Reset() {
	*x = SdkDiagsCollectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkDiagsCollectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkDiagsCollectResponse) ProtoMessage() {}

func (x *SdkDiagsCollectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkDiagsCollectResponse.ProtoReflect.Descriptor instead.
func (*SdkDiagsCollectResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{201}
}

func (x *SdkDiagsCollectResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

// DiagsNodeSelector allows selecting nodes for diags collection
// User can select NodeLabelSelector AND/OR NodeIDs. If both are provided, the implementation will select nodes based on
// both labels and IDs and also handle overlaps
// If All is set to true, other selectors are ignored since it selects all nodes
type DiagsNodeSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NodeLabelSelector is a label selector used to select the nodes for which diags will be collected
	NodeLabelSelector []*LabelSelectorRequirement `protobuf:"bytes,1,rep,name=node_label_selector,json=nodeLabelSelector,proto3" json:"node_label_selector,omitempty"`
	// NodeIDs are unique IDs fo the nodes for which the diags will be collected
	NodeIds []string `protobuf:"bytes,2,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	// All selects all nodes for diags collection
	All bool `protobuf:"varint,3,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *DiagsNodeSelector) Reset() {
	*x = DiagsNodeSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagsNodeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagsNodeSelector) ProtoMessage() {}

func (x *DiagsNodeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagsNodeSelector.ProtoReflect.Descriptor instead.
func (*DiagsNodeSelector) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{202}
}

func (x *DiagsNodeSelector) GetNodeLabelSelector() []*LabelSelectorRequirement {
	if x != nil {
		return x.NodeLabelSelector
	}
	return nil
}

func (x *DiagsNodeSelector) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *DiagsNodeSelector) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

// DiagsVolumeSelector allows selecting volumes for diags collection
// User can select VolumeLabelSelector AND/OR VolumeIDs. If both are provided, the implementation will select nodes
// based on both labels and IDs and also handle overlaps
type DiagsVolumeSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VolumeLabelSelector selects volumes by their labels and then uses replica and attached nodes for those volumes for
	// diags collection
	VolumeLabelSelector []*LabelSelectorRequirement `protobuf:"bytes,1,rep,name=volume_label_selector,json=volumeLabelSelector,proto3" json:"volume_label_selector,omitempty"`
	// VolumeIDs selects volumes by their unique IDs and then uses replica and attached nodes for those volumes for diags
	// collection
	VolumeIds []string `protobuf:"bytes,2,rep,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
}

func (x *DiagsVolumeSelector) Reset() {
	*x = DiagsVolumeSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagsVolumeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagsVolumeSelector) ProtoMessage() {}

func (x *DiagsVolumeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagsVolumeSelector.ProtoReflect.Descriptor instead.
func (*DiagsVolumeSelector) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{203}
}

func (x *DiagsVolumeSelector) GetVolumeLabelSelector() []*LabelSelectorRequirement {
	if x != nil {
		return x.VolumeLabelSelector
	}
	return nil
}

func (x *DiagsVolumeSelector) GetVolumeIds() []string {
	if x != nil {
		return x.VolumeIds
	}
	return nil
}

// Defines a request to list all the  jobs
type SdkEnumerateJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type if specified will list the jobs of the provided type
	Type Job_Type `protobuf:"varint,1,opt,name=type,proto3,enum=openstorage.api.Job_Type" json:"type,omitempty"`
}

func (x *SdkEnumerateJobsRequest) Reset() {
	*x = SdkEnumerateJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkEnumerateJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkEnumerateJobsRequest) ProtoMessage() {}

func (x *SdkEnumerateJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkEnumerateJobsRequest.ProtoReflect.Descriptor instead.
func (*SdkEnumerateJobsRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{204}
}

func (x *SdkEnumerateJobsRequest) GetType() Job_Type {
	if x != nil {
		return x.Type
	}
	return Job_UNSPECIFIED_TYPE
}

// Defines a response will all the known jobs
type SdkEnumerateJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Jobs is the list of jobs in the response
	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *SdkEnumerateJobsResponse) Reset() {
	*x = SdkEnumerateJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkEnumerateJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkEnumerateJobsResponse) ProtoMessage() {}

func (x *SdkEnumerateJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkEnumerateJobsResponse.ProtoReflect.Descriptor instead.
func (*SdkEnumerateJobsResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{205}
}

func (x *SdkEnumerateJobsResponse) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

// Defines a request to update an existing job
type SdkUpdateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the job
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of the job
	Type Job_Type `protobuf:"varint,2,opt,name=type,proto3,enum=openstorage.api.Job_Type" json:"type,omitempty"`
	// State is the new task state to update the job to
	State Job_State `protobuf:"varint,3,opt,name=state,proto3,enum=openstorage.api.Job_State" json:"state,omitempty"`
}

func (x *SdkUpdateJobRequest) Reset() {
	*x = SdkUpdateJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkUpdateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkUpdateJobRequest) ProtoMessage() {}

func (x *SdkUpdateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkUpdateJobRequest.ProtoReflect.Descriptor instead.
func (*SdkUpdateJobRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{206}
}

func (x *SdkUpdateJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SdkUpdateJobRequest) GetType() Job_Type {
	if x != nil {
		return x.Type
	}
	return Job_UNSPECIFIED_TYPE
}

func (x *SdkUpdateJobRequest) GetState() Job_State {
	if x != nil {
		return x.State
	}
	return Job_UNSPECIFIED_STATE
}

// Defines the response for an update to an existing job
type SdkUpdateJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkUpdateJobResponse) Reset() {
	*x = SdkUpdateJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkUpdateJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkUpdateJobResponse) ProtoMessage() {}

func (x *SdkUpdateJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkUpdateJobResponse.ProtoReflect.Descriptor instead.
func (*SdkUpdateJobResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{207}
}

// Defines a request to get the status of an existing job
type SdkGetJobStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the job
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of the job
	Type Job_Type `protobuf:"varint,2,opt,name=type,proto3,enum=openstorage.api.Job_Type" json:"type,omitempty"`
}

func (x *SdkGetJobStatusRequest) Reset() {
	*x = SdkGetJobStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkGetJobStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkGetJobStatusRequest) ProtoMessage() {}

func (x *SdkGetJobStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkGetJobStatusRequest.ProtoReflect.Descriptor instead.
func (*SdkGetJobStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{208}
}

func (x *SdkGetJobStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SdkGetJobStatusRequest) GetType() Job_Type {
	if x != nil {
		return x.Type
	}
	return Job_UNSPECIFIED_TYPE
}

// JobAudit is an audit entry for a job describing the different operations
// performed as a part of the job
type JobAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary []*JobWorkSummary `protobuf:"bytes,1,rep,name=summary,proto3" json:"summary,omitempty"`
}

func (x *JobAudit) Reset() {
	*x = JobAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobAudit) ProtoMessage() {}

func (x *JobAudit) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobAudit.ProtoReflect.Descriptor instead.
func (*JobAudit) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{209}
}

func (x *JobAudit) GetSummary() []*JobWorkSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

// JobWorkSummary describes an action taken while performing the hob
type JobWorkSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary provides more information about the on-going job
	//
	// Types that are assignable to Summary:
	//	*JobWorkSummary_DrainAttachmentsSummary
	Summary isJobWorkSummary_Summary `protobuf_oneof:"summary"`
}

func (x *JobWorkSummary) Reset() {
	*x = JobWorkSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobWorkSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobWorkSummary) ProtoMessage() {}

func (x *JobWorkSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobWorkSummary.ProtoReflect.Descriptor instead.
func (*JobWorkSummary) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{210}
}

func (m *JobWorkSummary) GetSummary() isJobWorkSummary_Summary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (x *JobWorkSummary) GetDrainAttachmentsSummary() *DrainAttachmentsSummary {
	if x, ok := x.GetSummary().(*JobWorkSummary_DrainAttachmentsSummary); ok {
		return x.DrainAttachmentsSummary
	}
	return nil
}

type isJobWorkSummary_Summary interface {
	isJobWorkSummary_Summary()
}

type JobWorkSummary_DrainAttachmentsSummary struct {
	// Summary summarizes drain attachment job
	DrainAttachmentsSummary *DrainAttachmentsSummary `protobuf:"bytes,3,opt,name=drain_attachments_summary,json=drainAttachmentsSummary,proto3,oneof"`
}

func (*JobWorkSummary_DrainAttachmentsSummary) isJobWorkSummary_Summary() {}

// JobSummary provides a summary of a job
type JobSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the job
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Total runtime in seconds
	TotalRuntimeSeconds uint64 `protobuf:"varint,2,opt,name=total_runtime_seconds,json=totalRuntimeSeconds,proto3" json:"total_runtime_seconds,omitempty"`
	// Summary provides more information about the on-going job
	WorkSummaries []*JobWorkSummary `protobuf:"bytes,3,rep,name=work_summaries,json=workSummaries,proto3" json:"work_summaries,omitempty"`
}

func (x *JobSummary) Reset() {
	*x = JobSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSummary) ProtoMessage() {}

func (x *JobSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSummary.ProtoReflect.Descriptor instead.
func (*JobSummary) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{211}
}

func (x *JobSummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobSummary) GetTotalRuntimeSeconds() uint64 {
	if x != nil {
		return x.TotalRuntimeSeconds
	}
	return 0
}

func (x *JobSummary) GetWorkSummaries() []*JobWorkSummary {
	if x != nil {
		return x.WorkSummaries
	}
	return nil
}

// Defines the status of an existing job
type SdkGetJobStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job for this node drain operation.
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	// Summary of this job
	Summary *JobSummary `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *SdkGetJobStatusResponse) Reset() {
	*x = SdkGetJobStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkGetJobStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkGetJobStatusResponse) ProtoMessage() {}

func (x *SdkGetJobStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkGetJobStatusResponse.ProtoReflect.Descriptor instead.
func (*SdkGetJobStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{212}
}

func (x *SdkGetJobStatusResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *SdkGetJobStatusResponse) GetSummary() *JobSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

// DrainAttachments summary of the volumes whose attachments need to be drained
// from a node
type DrainAttachmentsSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of volumes that need to be drained
	NumVolumesTotal uint64 `protobuf:"varint,2,opt,name=num_volumes_total,json=numVolumesTotal,proto3" json:"num_volumes_total,omitempty"`
	// Number of volumes which have been drained
	NumVolumesDone uint64 `protobuf:"varint,3,opt,name=num_volumes_done,json=numVolumesDone,proto3" json:"num_volumes_done,omitempty"`
	// Number of volumes which have not been drained yet
	NumVolumesPending uint64 `protobuf:"varint,4,opt,name=num_volumes_pending,json=numVolumesPending,proto3" json:"num_volumes_pending,omitempty"`
}

func (x *DrainAttachmentsSummary) Reset() {
	*x = DrainAttachmentsSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrainAttachmentsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrainAttachmentsSummary) ProtoMessage() {}

func (x *DrainAttachmentsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrainAttachmentsSummary.ProtoReflect.Descriptor instead.
func (*DrainAttachmentsSummary) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{213}
}

func (x *DrainAttachmentsSummary) GetNumVolumesTotal() uint64 {
	if x != nil {
		return x.NumVolumesTotal
	}
	return 0
}

func (x *DrainAttachmentsSummary) GetNumVolumesDone() uint64 {
	if x != nil {
		return x.NumVolumesDone
	}
	return 0
}

func (x *DrainAttachmentsSummary) GetNumVolumesPending() uint64 {
	if x != nil {
		return x.NumVolumesPending
	}
	return 0
}

// SdkNodeCordonAttachmentsRequest request for disabling new volume
// attachments from a node
type SdkNodeCordonAttachmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node ID on which any further volume attachments will be disabled
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *SdkNodeCordonAttachmentsRequest) Reset() {
	*x = SdkNodeCordonAttachmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeCordonAttachmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeCordonAttachmentsRequest) ProtoMessage() {}

func (x *SdkNodeCordonAttachmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeCordonAttachmentsRequest.ProtoReflect.Descriptor instead.
func (*SdkNodeCordonAttachmentsRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{214}
}

func (x *SdkNodeCordonAttachmentsRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

// SdkNodeCordonAttachmentsRespinse response for disabling new volume
// attachments from a node
type SdkNodeCordonAttachmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkNodeCordonAttachmentsResponse) Reset() {
	*x = SdkNodeCordonAttachmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeCordonAttachmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeCordonAttachmentsResponse) ProtoMessage() {}

func (x *SdkNodeCordonAttachmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeCordonAttachmentsResponse.ProtoReflect.Descriptor instead.
func (*SdkNodeCordonAttachmentsResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{215}
}

// SdkNodeUncordonAttachmentsRequest request for re-enabling volume
// attachments for a node
type SdkNodeUncordonAttachmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node ID on which any further volume attachments will be enabled
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *SdkNodeUncordonAttachmentsRequest) Reset() {
	*x = SdkNodeUncordonAttachmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeUncordonAttachmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeUncordonAttachmentsRequest) ProtoMessage() {}

func (x *SdkNodeUncordonAttachmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeUncordonAttachmentsRequest.ProtoReflect.Descriptor instead.
func (*SdkNodeUncordonAttachmentsRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{216}
}

func (x *SdkNodeUncordonAttachmentsRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

// SdkNodeUncordonAttachmentsRespinse response for enabling new volume
// attachments from a node
type SdkNodeUncordonAttachmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkNodeUncordonAttachmentsResponse) Reset() {
	*x = SdkNodeUncordonAttachmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeUncordonAttachmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeUncordonAttachmentsResponse) ProtoMessage() {}

func (x *SdkNodeUncordonAttachmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeUncordonAttachmentsResponse.ProtoReflect.Descriptor instead.
func (*SdkNodeUncordonAttachmentsResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{217}
}

// Defines a request when inspect a storage pool
type SdkStoragePoolResizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the storage pool to inspect
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// ResizeFactor is the option to indicate if you would like to resize the pool
	// by a fixed size or by a percentage of current size
	//
	// Types that are assignable to ResizeFactor:
	//	*SdkStoragePoolResizeRequest_Size
	//	*SdkStoragePoolResizeRequest_Percentage
	ResizeFactor isSdkStoragePoolResizeRequest_ResizeFactor `protobuf_oneof:"resize_factor"`
	// OperationType is the operation that's used to resize the storage pool (optional)
	OperationType SdkStoragePool_ResizeOperationType `protobuf:"varint,3,opt,name=operation_type,json=operationType,proto3,enum=openstorage.api.SdkStoragePool_ResizeOperationType" json:"operation_type,omitempty"`
	// SkipWaitForCleanVolumes would skip the wait for all volumes on the pool to be clean before doing a resize
	SkipWaitForCleanVolumes bool `protobuf:"varint,4,opt,name=skip_wait_for_clean_volumes,json=skipWaitForCleanVolumes,proto3" json:"skip_wait_for_clean_volumes,omitempty"`
}

func (x *SdkStoragePoolResizeRequest) Reset() {
	*x = SdkStoragePoolResizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkStoragePoolResizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkStoragePoolResizeRequest) ProtoMessage() {}

func (x *SdkStoragePoolResizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkStoragePoolResizeRequest.ProtoReflect.Descriptor instead.
func (*SdkStoragePoolResizeRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{218}
}

func (x *SdkStoragePoolResizeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (m *SdkStoragePoolResizeRequest) GetResizeFactor() isSdkStoragePoolResizeRequest_ResizeFactor {
	if m != nil {
		return m.ResizeFactor
	}
	return nil
}

func (x *SdkStoragePoolResizeRequest) GetSize() uint64 {
	if x, ok := x.GetResizeFactor().(*SdkStoragePoolResizeRequest_Size); ok {
		return x.Size
	}
	return 0
}

func (x *SdkStoragePoolResizeRequest) GetPercentage() uint64 {
	if x, ok := x.GetResizeFactor().(*SdkStoragePoolResizeRequest_Percentage); ok {
		return x.Percentage
	}
	return 0
}

func (x *SdkStoragePoolResizeRequest) GetOperationType() SdkStoragePool_ResizeOperationType {
	if x != nil {
		return x.OperationType
	}
	return SdkStoragePool_RESIZE_TYPE_AUTO
}

func (x *SdkStoragePoolResizeRequest) GetSkipWaitForCleanVolumes() bool {
	if x != nil {
		return x.SkipWaitForCleanVolumes
	}
	return false
}

type isSdkStoragePoolResizeRequest_ResizeFactor interface {
	isSdkStoragePoolResizeRequest_ResizeFactor()
}

type SdkStoragePoolResizeRequest_Size struct {
	// Size is the new desired size of the storage pool
	Size uint64 `protobuf:"varint,200,opt,name=size,proto3,oneof"`
}

type SdkStoragePoolResizeRequest_Percentage struct {
	// Size is the new desired size of the storage pool
	Percentage uint64 `protobuf:"varint,201,opt,name=percentage,proto3,oneof"`
}

func (*SdkStoragePoolResizeRequest_Size) isSdkStoragePoolResizeRequest_ResizeFactor() {}

func (*SdkStoragePoolResizeRequest_Percentage) isSdkStoragePoolResizeRequest_ResizeFactor() {}

type StorageRebalanceTriggerThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type defines type of threshold
	Type StorageRebalanceTriggerThreshold_Type `protobuf:"varint,1,opt,name=type,proto3,enum=openstorage.api.StorageRebalanceTriggerThreshold_Type" json:"type,omitempty"`
	// Metric defines metric for which this threshold applies to.
	Metric StorageRebalanceTriggerThreshold_Metric `protobuf:"varint,2,opt,name=metric,proto3,enum=openstorage.api.StorageRebalanceTriggerThreshold_Metric" json:"metric,omitempty"`
	// OverLoadTriggerThreshold will select entity which is over this
	// threshold. OverLoadTriggerThreshold threshold selects pools
	// which act as source for reduction of load defined by the metric.
	OverLoadTriggerThreshold uint64 `protobuf:"varint,3,opt,name=over_load_trigger_threshold,json=overLoadTriggerThreshold,proto3" json:"over_load_trigger_threshold,omitempty"`
	// UnderLoadTriggerThreshold will select entity which is under this
	// threshold. UnderLoadTriggerThreshold selects pools which act as
	// targets for increasing load defined by metric.
	UnderLoadTriggerThreshold uint64 `protobuf:"varint,4,opt,name=under_load_trigger_threshold,json=underLoadTriggerThreshold,proto3" json:"under_load_trigger_threshold,omitempty"`
}

func (x *StorageRebalanceTriggerThreshold) Reset() {
	*x = StorageRebalanceTriggerThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageRebalanceTriggerThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageRebalanceTriggerThreshold) ProtoMessage() {}

func (x *StorageRebalanceTriggerThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageRebalanceTriggerThreshold.ProtoReflect.Descriptor instead.
func (*StorageRebalanceTriggerThreshold) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{219}
}

func (x *StorageRebalanceTriggerThreshold) GetType() StorageRebalanceTriggerThreshold_Type {
	if x != nil {
		return x.Type
	}
	return StorageRebalanceTriggerThreshold_ABSOLUTE_PERCENT
}

func (x *StorageRebalanceTriggerThreshold) GetMetric() StorageRebalanceTriggerThreshold_Metric {
	if x != nil {
		return x.Metric
	}
	return StorageRebalanceTriggerThreshold_PROVISION_SPACE
}

func (x *StorageRebalanceTriggerThreshold) GetOverLoadTriggerThreshold() uint64 {
	if x != nil {
		return x.OverLoadTriggerThreshold
	}
	return 0
}

func (x *StorageRebalanceTriggerThreshold) GetUnderLoadTriggerThreshold() uint64 {
	if x != nil {
		return x.UnderLoadTriggerThreshold
	}
	return 0
}

type SdkStorageRebalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TriggerThresholds defines thresholds that would trigger rebalance.
	// For example, TriggerThreshold{ThresholdTypeAbsolutePercent, MetricTypeUsedSpace, 75, 10}
	// would trigger rebalance on pools where used space is more than 75% or less than 10%. Similarly,
	// TriggerThreshold{ThresholdTypeDeltaMeanPercent, MetricTypeUsedSpace, 15, 25} will
	// trigger rebalance for pools where used space is more than 15% from the mean
	// percent for used space for the entire cluster or less than 25% from the mean
	// percent for used space for the entire cluster.
	TriggerThresholds []*StorageRebalanceTriggerThreshold `protobuf:"bytes,1,rep,name=trigger_thresholds,json=triggerThresholds,proto3" json:"trigger_thresholds,omitempty"`
	// TrialRun if true the job only produces steps that would be taken without making any changes
	TrialRun bool `protobuf:"varint,2,opt,name=trial_run,json=trialRun,proto3" json:"trial_run,omitempty"`
	// SourcePoolSelector allows selecting pools to which trigger thresholds will apply as source
	SourcePoolSelector []*LabelSelectorRequirement `protobuf:"bytes,3,rep,name=source_pool_selector,json=sourcePoolSelector,proto3" json:"source_pool_selector,omitempty"`
	// TargetPoolSelector allows selecting pools to which trigger thresholds will apply as target
	TargetPoolSelector []*LabelSelectorRequirement `protobuf:"bytes,4,rep,name=target_pool_selector,json=targetPoolSelector,proto3" json:"target_pool_selector,omitempty"`
	// MaxDurationMinutes defines how long operation should run when started at schedule.
	// 0 values means no limit on duration
	MaxDurationMinutes uint64 `protobuf:"varint,5,opt,name=max_duration_minutes,json=maxDurationMinutes,proto3" json:"max_duration_minutes,omitempty"`
	// RemoveRepl1Snapshots if true will instruct rebalance job to remove repl-1 snapshots
	RemoveRepl_1Snapshots bool `protobuf:"varint,6,opt,name=remove_repl_1_snapshots,json=removeRepl1Snapshots,proto3" json:"remove_repl_1_snapshots,omitempty"`
}

func (x *SdkStorageRebalanceRequest) Reset() {
	*x = SdkStorageRebalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkStorageRebalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkStorageRebalanceRequest) ProtoMessage() {}

func (x *SdkStorageRebalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkStorageRebalanceRequest.ProtoReflect.Descriptor instead.
func (*SdkStorageRebalanceRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{220}
}

func (x *SdkStorageRebalanceRequest) GetTriggerThresholds() []*StorageRebalanceTriggerThreshold {
	if x != nil {
		return x.TriggerThresholds
	}
	return nil
}

func (x *SdkStorageRebalanceRequest) GetTrialRun() bool {
	if x != nil {
		return x.TrialRun
	}
	return false
}

func (x *SdkStorageRebalanceRequest) GetSourcePoolSelector() []*LabelSelectorRequirement {
	if x != nil {
		return x.SourcePoolSelector
	}
	return nil
}

func (x *SdkStorageRebalanceRequest) GetTargetPoolSelector() []*LabelSelectorRequirement {
	if x != nil {
		return x.TargetPoolSelector
	}
	return nil
}

func (x *SdkStorageRebalanceRequest) GetMaxDurationMinutes() uint64 {
	if x != nil {
		return x.MaxDurationMinutes
	}
	return 0
}

func (x *SdkStorageRebalanceRequest) GetRemoveRepl_1Snapshots() bool {
	if x != nil {
		return x.RemoveRepl_1Snapshots
	}
	return false
}

// SdkStorageRebalanceResponse is the response to a storage rebalance request
type SdkStorageRebalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job for this rebalance
	Job *StorageRebalanceJob `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	// Summary summarizes the rebalance job
	Summary *StorageRebalanceSummary `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// Actions describe all the actions taken during this rebalance
	Actions []*StorageRebalanceAudit `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *SdkStorageRebalanceResponse) Reset() {
	*x = SdkStorageRebalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkStorageRebalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkStorageRebalanceResponse) ProtoMessage() {}

func (x *SdkStorageRebalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkStorageRebalanceResponse.ProtoReflect.Descriptor instead.
func (*SdkStorageRebalanceResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{221}
}

func (x *SdkStorageRebalanceResponse) GetJob() *StorageRebalanceJob {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *SdkStorageRebalanceResponse) GetSummary() *StorageRebalanceSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *SdkStorageRebalanceResponse) GetActions() []*StorageRebalanceAudit {
	if x != nil {
		return x.Actions
	}
	return nil
}

// StorageRebalanceJob describes job input and current status
type StorageRebalanceJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the rebalance job
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Status describes status of pools after rebalance if rebalance did not finish successfully
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// State of the current job
	State StorageRebalanceJobState `protobuf:"varint,3,opt,name=state,proto3,enum=openstorage.api.StorageRebalanceJobState" json:"state,omitempty"`
	// Parameters is the original request params for this rebalance operation
	Parameters *SdkStorageRebalanceRequest `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// CreateTime is the time the job was created
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// LastUpdateTime is the time the job was updated
	LastUpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
}

func (x *StorageRebalanceJob) Reset() {
	*x = StorageRebalanceJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageRebalanceJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageRebalanceJob) ProtoMessage() {}

func (x *StorageRebalanceJob) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageRebalanceJob.ProtoReflect.Descriptor instead.
func (*StorageRebalanceJob) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{222}
}

func (x *StorageRebalanceJob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StorageRebalanceJob) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StorageRebalanceJob) GetState() StorageRebalanceJobState {
	if x != nil {
		return x.State
	}
	return StorageRebalanceJobState_PENDING
}

func (x *StorageRebalanceJob) GetParameters() *SdkStorageRebalanceRequest {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *StorageRebalanceJob) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *StorageRebalanceJob) GetLastUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

// StorageRebalanceSummary describes summary for the job
type StorageRebalanceSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TotalRunTimeSeconds is the total time rebalance is running
	TotalRunTimeSeconds uint64 `protobuf:"varint,1,opt,name=total_run_time_seconds,json=totalRunTimeSeconds,proto3" json:"total_run_time_seconds,omitempty"`
	// WorkSummary summarizes the work done
	WorkSummary []*StorageRebalanceWorkSummary `protobuf:"bytes,2,rep,name=work_summary,json=workSummary,proto3" json:"work_summary,omitempty"`
}

func (x *StorageRebalanceSummary) Reset() {
	*x = StorageRebalanceSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageRebalanceSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageRebalanceSummary) ProtoMessage() {}

func (x *StorageRebalanceSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageRebalanceSummary.ProtoReflect.Descriptor instead.
func (*StorageRebalanceSummary) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{223}
}

func (x *StorageRebalanceSummary) GetTotalRunTimeSeconds() uint64 {
	if x != nil {
		return x.TotalRunTimeSeconds
	}
	return 0
}

func (x *StorageRebalanceSummary) GetWorkSummary() []*StorageRebalanceWorkSummary {
	if x != nil {
		return x.WorkSummary
	}
	return nil
}

type StorageRebalanceWorkSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type describes the type of summary.
	Type StorageRebalanceWorkSummary_Type `protobuf:"varint,1,opt,name=type,proto3,enum=openstorage.api.StorageRebalanceWorkSummary_Type" json:"type,omitempty"`
	// Done is the amount of bytes/work done
	Done uint64 `protobuf:"varint,2,opt,name=done,proto3" json:"done,omitempty"`
	// Pending is the amount of bytes/work pending. Done + Pending == Total
	Pending uint64 `protobuf:"varint,3,opt,name=pending,proto3" json:"pending,omitempty"`
}

func (x *StorageRebalanceWorkSummary) Reset() {
	*x = StorageRebalanceWorkSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageRebalanceWorkSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageRebalanceWorkSummary) ProtoMessage() {}

func (x *StorageRebalanceWorkSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageRebalanceWorkSummary.ProtoReflect.Descriptor instead.
func (*StorageRebalanceWorkSummary) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{224}
}

func (x *StorageRebalanceWorkSummary) GetType() StorageRebalanceWorkSummary_Type {
	if x != nil {
		return x.Type
	}
	return StorageRebalanceWorkSummary_UnbalancedPools
}

func (x *StorageRebalanceWorkSummary) GetDone() uint64 {
	if x != nil {
		return x.Done
	}
	return 0
}

func (x *StorageRebalanceWorkSummary) GetPending() uint64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

// StorageRebalanceAudit describes the action taken during rebalance
type StorageRebalanceAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VolumeID is the id of the volume which was rebalanced
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Name is the name of the volumes which was rebalanced
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Action is the action executed
	Action StorageRebalanceAudit_StorageRebalanceAction `protobuf:"varint,3,opt,name=action,proto3,enum=openstorage.api.StorageRebalanceAudit_StorageRebalanceAction" json:"action,omitempty"`
	// Node on which this action happened
	Node string `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`
	// Pool on which this action happened
	Pool string `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`
	// StartTime is the time at which action was started
	StartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// EndTime is time time at which action ended
	EndTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// WorkSummary summarizes the work done
	WorkSummary []*StorageRebalanceWorkSummary `protobuf:"bytes,8,rep,name=work_summary,json=workSummary,proto3" json:"work_summary,omitempty"`
	// ReplicationSetId is the ID of the replication set
	ReplicationSetId uint64 `protobuf:"varint,9,opt,name=replication_set_id,json=replicationSetId,proto3" json:"replication_set_id,omitempty"`
	// State is the current state of the rebalance action
	State StorageRebalanceJobState `protobuf:"varint,10,opt,name=state,proto3,enum=openstorage.api.StorageRebalanceJobState" json:"state,omitempty"`
}

func (x *StorageRebalanceAudit) Reset() {
	*x = StorageRebalanceAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageRebalanceAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageRebalanceAudit) ProtoMessage() {}

func (x *StorageRebalanceAudit) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageRebalanceAudit.ProtoReflect.Descriptor instead.
func (*StorageRebalanceAudit) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{225}
}

func (x *StorageRebalanceAudit) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *StorageRebalanceAudit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StorageRebalanceAudit) GetAction() StorageRebalanceAudit_StorageRebalanceAction {
	if x != nil {
		return x.Action
	}
	return StorageRebalanceAudit_ADD_REPLICA
}

func (x *StorageRebalanceAudit) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *StorageRebalanceAudit) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *StorageRebalanceAudit) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *StorageRebalanceAudit) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *StorageRebalanceAudit) GetWorkSummary() []*StorageRebalanceWorkSummary {
	if x != nil {
		return x.WorkSummary
	}
	return nil
}

func (x *StorageRebalanceAudit) GetReplicationSetId() uint64 {
	if x != nil {
		return x.ReplicationSetId
	}
	return 0
}

func (x *StorageRebalanceAudit) GetState() StorageRebalanceJobState {
	if x != nil {
		return x.State
	}
	return StorageRebalanceJobState_PENDING
}

type SdkUpdateRebalanceJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the rebalance job
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// State is the new task state to update the job to
	State StorageRebalanceJobState `protobuf:"varint,2,opt,name=state,proto3,enum=openstorage.api.StorageRebalanceJobState" json:"state,omitempty"`
}

func (x *SdkUpdateRebalanceJobRequest) Reset() {
	*x = SdkUpdateRebalanceJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkUpdateRebalanceJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkUpdateRebalanceJobRequest) ProtoMessage() {}

func (x *SdkUpdateRebalanceJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkUpdateRebalanceJobRequest.ProtoReflect.Descriptor instead.
func (*SdkUpdateRebalanceJobRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{226}
}

func (x *SdkUpdateRebalanceJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SdkUpdateRebalanceJobRequest) GetState() StorageRebalanceJobState {
	if x != nil {
		return x.State
	}
	return StorageRebalanceJobState_PENDING
}

type SdkUpdateRebalanceJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkUpdateRebalanceJobResponse) Reset() {
	*x = SdkUpdateRebalanceJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkUpdateRebalanceJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkUpdateRebalanceJobResponse) ProtoMessage() {}

func (x *SdkUpdateRebalanceJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkUpdateRebalanceJobResponse.ProtoReflect.Descriptor instead.
func (*SdkUpdateRebalanceJobResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{227}
}

type SdkGetRebalanceJobStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the rebalance job
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SdkGetRebalanceJobStatusRequest) Reset() {
	*x = SdkGetRebalanceJobStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkGetRebalanceJobStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkGetRebalanceJobStatusRequest) ProtoMessage() {}

func (x *SdkGetRebalanceJobStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkGetRebalanceJobStatusRequest.ProtoReflect.Descriptor instead.
func (*SdkGetRebalanceJobStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{228}
}

func (x *SdkGetRebalanceJobStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SdkGetRebalanceJobStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job for this rebalance
	Job *StorageRebalanceJob `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	// Summary summarizes the rebalance job
	Summary *StorageRebalanceSummary `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// Actions describe all the actions taken during this rebalance
	Actions []*StorageRebalanceAudit `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *SdkGetRebalanceJobStatusResponse) Reset() {
	*x = SdkGetRebalanceJobStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkGetRebalanceJobStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkGetRebalanceJobStatusResponse) ProtoMessage() {}

func (x *SdkGetRebalanceJobStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkGetRebalanceJobStatusResponse.ProtoReflect.Descriptor instead.
func (*SdkGetRebalanceJobStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{229}
}

func (x *SdkGetRebalanceJobStatusResponse) GetJob() *StorageRebalanceJob {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *SdkGetRebalanceJobStatusResponse) GetSummary() *StorageRebalanceSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *SdkGetRebalanceJobStatusResponse) GetActions() []*StorageRebalanceAudit {
	if x != nil {
		return x.Actions
	}
	return nil
}

type SdkEnumerateRebalanceJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkEnumerateRebalanceJobsRequest) Reset() {
	*x = SdkEnumerateRebalanceJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkEnumerateRebalanceJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkEnumerateRebalanceJobsRequest) ProtoMessage() {}

func (x *SdkEnumerateRebalanceJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkEnumerateRebalanceJobsRequest.ProtoReflect.Descriptor instead.
func (*SdkEnumerateRebalanceJobsRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{230}
}

type SdkEnumerateRebalanceJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Jobs is the list of rebalance jobs in the response
	Jobs []*StorageRebalanceJob `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *SdkEnumerateRebalanceJobsResponse) Reset() {
	*x = SdkEnumerateRebalanceJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkEnumerateRebalanceJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkEnumerateRebalanceJobsResponse) ProtoMessage() {}

func (x *SdkEnumerateRebalanceJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkEnumerateRebalanceJobsResponse.ProtoReflect.Descriptor instead.
func (*SdkEnumerateRebalanceJobsResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{231}
}

func (x *SdkEnumerateRebalanceJobsResponse) GetJobs() []*StorageRebalanceJob {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type SdkStoragePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkStoragePool) Reset() {
	*x = SdkStoragePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkStoragePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkStoragePool) ProtoMessage() {}

func (x *SdkStoragePool) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkStoragePool.ProtoReflect.Descriptor instead.
func (*SdkStoragePool) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{232}
}

// Defines a response when resizing a storage pool
type SdkStoragePoolResizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkStoragePoolResizeResponse) Reset() {
	*x = SdkStoragePoolResizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkStoragePoolResizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkStoragePoolResizeResponse) ProtoMessage() {}

func (x *SdkStoragePoolResizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkStoragePoolResizeResponse.ProtoReflect.Descriptor instead.
func (*SdkStoragePoolResizeResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{233}
}

// Defines a response when inspecting a node
type SdkNodeInspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node information
	Node *StorageNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *SdkNodeInspectResponse) Reset() {
	*x = SdkNodeInspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeInspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeInspectResponse) ProtoMessage() {}

func (x *SdkNodeInspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeInspectResponse.ProtoReflect.Descriptor instead.
func (*SdkNodeInspectResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{234}
}

func (x *SdkNodeInspectResponse) GetNode() *StorageNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Empty request
type SdkNodeInspectCurrentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkNodeInspectCurrentRequest) Reset() {
	*x = SdkNodeInspectCurrentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeInspectCurrentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeInspectCurrentRequest) ProtoMessage() {}

func (x *SdkNodeInspectCurrentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeInspectCurrentRequest.ProtoReflect.Descriptor instead.
func (*SdkNodeInspectCurrentRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{235}
}

// Defines a response when inspecting a node
type SdkNodeInspectCurrentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node information
	Node *StorageNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *SdkNodeInspectCurrentResponse) Reset() {
	*x = SdkNodeInspectCurrentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeInspectCurrentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeInspectCurrentResponse) ProtoMessage() {}

func (x *SdkNodeInspectCurrentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeInspectCurrentResponse.ProtoReflect.Descriptor instead.
func (*SdkNodeInspectCurrentResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{236}
}

func (x *SdkNodeInspectCurrentResponse) GetNode() *StorageNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Empty request
type SdkNodeEnumerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkNodeEnumerateRequest) Reset() {
	*x = SdkNodeEnumerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeEnumerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeEnumerateRequest) ProtoMessage() {}

func (x *SdkNodeEnumerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeEnumerateRequest.ProtoReflect.Descriptor instead.
func (*SdkNodeEnumerateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{237}
}

// Defines a response with a list of node ids
type SdkNodeEnumerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the node ids in the cluster
	NodeIds []string `protobuf:"bytes,1,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
}

func (x *SdkNodeEnumerateResponse) Reset() {
	*x = SdkNodeEnumerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeEnumerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeEnumerateResponse) ProtoMessage() {}

func (x *SdkNodeEnumerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeEnumerateResponse.ProtoReflect.Descriptor instead.
func (*SdkNodeEnumerateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{238}
}

func (x *SdkNodeEnumerateResponse) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

// Defines a request to list nodes with given filter. Currently there are
// no filters and all the nodes will be returned.
type SdkNodeEnumerateWithFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkNodeEnumerateWithFiltersRequest) Reset() {
	*x = SdkNodeEnumerateWithFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeEnumerateWithFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeEnumerateWithFiltersRequest) ProtoMessage() {}

func (x *SdkNodeEnumerateWithFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeEnumerateWithFiltersRequest.ProtoReflect.Descriptor instead.
func (*SdkNodeEnumerateWithFiltersRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{239}
}

// Defines a response with a list of nodes
type SdkNodeEnumerateWithFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the nodes in the cluster
	Nodes []*StorageNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *SdkNodeEnumerateWithFiltersResponse) Reset() {
	*x = SdkNodeEnumerateWithFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkNodeEnumerateWithFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkNodeEnumerateWithFiltersResponse) ProtoMessage() {}

func (x *SdkNodeEnumerateWithFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkNodeEnumerateWithFiltersResponse.ProtoReflect.Descriptor instead.
func (*SdkNodeEnumerateWithFiltersResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{240}
}

func (x *SdkNodeEnumerateWithFiltersResponse) GetNodes() []*StorageNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Defines a request to get information about an object store endpoint
type SdkObjectstoreInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the object store
	ObjectstoreId string `protobuf:"bytes,1,opt,name=objectstore_id,json=objectstoreId,proto3" json:"objectstore_id,omitempty"`
}

func (x *SdkObjectstoreInspectRequest) Reset() {
	*x = SdkObjectstoreInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkObjectstoreInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkObjectstoreInspectRequest) ProtoMessage() {}

func (x *SdkObjectstoreInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkObjectstoreInspectRequest.ProtoReflect.Descriptor instead.
func (*SdkObjectstoreInspectRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{241}
}

func (x *SdkObjectstoreInspectRequest) GetObjectstoreId() string {
	if x != nil {
		return x.ObjectstoreId
	}
	return ""
}

// Defines a response when inspecting an object store endpoint
type SdkObjectstoreInspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains information about the object store requested
	ObjectstoreStatus *ObjectstoreInfo `protobuf:"bytes,1,opt,name=objectstore_status,json=objectstoreStatus,proto3" json:"objectstore_status,omitempty"`
}

func (x *SdkObjectstoreInspectResponse) Reset() {
	*x = SdkObjectstoreInspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkObjectstoreInspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkObjectstoreInspectResponse) ProtoMessage() {}

func (x *SdkObjectstoreInspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkObjectstoreInspectResponse.ProtoReflect.Descriptor instead.
func (*SdkObjectstoreInspectResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{242}
}

func (x *SdkObjectstoreInspectResponse) GetObjectstoreStatus() *ObjectstoreInfo {
	if x != nil {
		return x.ObjectstoreStatus
	}
	return nil
}

// Defines a request to create an object store
type SdkObjectstoreCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Volume on which objectstore will be running
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *SdkObjectstoreCreateRequest) Reset() {
	*x = SdkObjectstoreCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkObjectstoreCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkObjectstoreCreateRequest) ProtoMessage() {}

func (x *SdkObjectstoreCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkObjectstoreCreateRequest.ProtoReflect.Descriptor instead.
func (*SdkObjectstoreCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{243}
}

func (x *SdkObjectstoreCreateRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

// Defines a response when an object store has been created for a
// specified volume
type SdkObjectstoreCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Created objecstore status
	ObjectstoreStatus *ObjectstoreInfo `protobuf:"bytes,1,opt,name=objectstore_status,json=objectstoreStatus,proto3" json:"objectstore_status,omitempty"`
}

func (x *SdkObjectstoreCreateResponse) Reset() {
	*x = SdkObjectstoreCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkObjectstoreCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkObjectstoreCreateResponse) ProtoMessage() {}

func (x *SdkObjectstoreCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkObjectstoreCreateResponse.ProtoReflect.Descriptor instead.
func (*SdkObjectstoreCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{244}
}

func (x *SdkObjectstoreCreateResponse) GetObjectstoreStatus() *ObjectstoreInfo {
	if x != nil {
		return x.ObjectstoreStatus
	}
	return nil
}

// Defines a request to delete an object store service from a volume
type SdkObjectstoreDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the object store to delete
	ObjectstoreId string `protobuf:"bytes,1,opt,name=objectstore_id,json=objectstoreId,proto3" json:"objectstore_id,omitempty"`
}

func (x *SdkObjectstoreDeleteRequest) Reset() {
	*x = SdkObjectstoreDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkObjectstoreDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkObjectstoreDeleteRequest) ProtoMessage() {}

func (x *SdkObjectstoreDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkObjectstoreDeleteRequest.ProtoReflect.Descriptor instead.
func (*SdkObjectstoreDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{245}
}

func (x *SdkObjectstoreDeleteRequest) GetObjectstoreId() string {
	if x != nil {
		return x.ObjectstoreId
	}
	return ""
}

// Empty response
type SdkObjectstoreDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkObjectstoreDeleteResponse) Reset() {
	*x = SdkObjectstoreDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkObjectstoreDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkObjectstoreDeleteResponse) ProtoMessage() {}

func (x *SdkObjectstoreDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkObjectstoreDeleteResponse.ProtoReflect.Descriptor instead.
func (*SdkObjectstoreDeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{246}
}

// Defines a request to update an object store
type SdkObjectstoreUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Objectstore Id to update
	ObjectstoreId string `protobuf:"bytes,1,opt,name=objectstore_id,json=objectstoreId,proto3" json:"objectstore_id,omitempty"`
	// enable/disable objectstore
	Enable bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *SdkObjectstoreUpdateRequest) Reset() {
	*x = SdkObjectstoreUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkObjectstoreUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkObjectstoreUpdateRequest) ProtoMessage() {}

func (x *SdkObjectstoreUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkObjectstoreUpdateRequest.ProtoReflect.Descriptor instead.
func (*SdkObjectstoreUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{247}
}

func (x *SdkObjectstoreUpdateRequest) GetObjectstoreId() string {
	if x != nil {
		return x.ObjectstoreId
	}
	return ""
}

func (x *SdkObjectstoreUpdateRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

// Empty response
type SdkObjectstoreUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkObjectstoreUpdateResponse) Reset() {
	*x = SdkObjectstoreUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkObjectstoreUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkObjectstoreUpdateResponse) ProtoMessage() {}

func (x *SdkObjectstoreUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkObjectstoreUpdateResponse.ProtoReflect.Descriptor instead.
func (*SdkObjectstoreUpdateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{248}
}

// Defines a request to create a backup of a volume to the cloud
type SdkCloudBackupCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VolumeID of the volume for which cloudbackup is requested
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Credential id refers to the cloud credentials needed to backup
	CredentialId string `protobuf:"bytes,2,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// Full indicates if full backup is desired even though incremental is possible
	Full bool `protobuf:"varint,3,opt,name=full,proto3" json:"full,omitempty"`
	// TaskId of the task performing this backup. This value can be used for
	// idempotency.
	TaskId string `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Labels are list of key value pairs to tag the cloud backup. These labels
	// are stored in the metadata associated with the backup.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// FullBackupFrequency indicates number of incremental backup after which
	// a fullbackup must be created. This is to override the default value for
	// manual/user triggerred backups and not applicable for scheduled backups
	// Value of 0 retains the default behavior.
	FullBackupFrequency uint32 `protobuf:"varint,6,opt,name=full_backup_frequency,json=fullBackupFrequency,proto3" json:"full_backup_frequency,omitempty"`
	// DeleteLocal indicates if local snap created for backup must be deleted after
	// the backup is complete
	DeleteLocal bool `protobuf:"varint,7,opt,name=delete_local,json=deleteLocal,proto3" json:"delete_local,omitempty"`
}

func (x *SdkCloudBackupCreateRequest) Reset() {
	*x = SdkCloudBackupCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupCreateRequest) ProtoMessage() {}

func (x *SdkCloudBackupCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupCreateRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{249}
}

func (x *SdkCloudBackupCreateRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkCloudBackupCreateRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *SdkCloudBackupCreateRequest) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

func (x *SdkCloudBackupCreateRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SdkCloudBackupCreateRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SdkCloudBackupCreateRequest) GetFullBackupFrequency() uint32 {
	if x != nil {
		return x.FullBackupFrequency
	}
	return 0
}

func (x *SdkCloudBackupCreateRequest) GetDeleteLocal() bool {
	if x != nil {
		return x.DeleteLocal
	}
	return false
}

// Empty response
type SdkCloudBackupCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskId of the task performing the backup
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *SdkCloudBackupCreateResponse) Reset() {
	*x = SdkCloudBackupCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupCreateResponse) ProtoMessage() {}

func (x *SdkCloudBackupCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupCreateResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{250}
}

func (x *SdkCloudBackupCreateResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// Defines a request to create a group backup of a group to the cloud
type SdkCloudBackupGroupCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GroupID of the volume for which cloudbackup is requested
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// VolumeIds are a list of volume IDs to use for the backup request.
	// If multiple of GroupID, Labels or VolumeIDs are specified, volumes matching
	// all of them are backed uup
	VolumeIds []string `protobuf:"bytes,2,rep,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
	// Credential id refers to the cloud credentials needed to backup
	CredentialId string `protobuf:"bytes,3,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// Full indicates if full backup is desired even though incremental is possible
	Full bool `protobuf:"varint,4,opt,name=full,proto3" json:"full,omitempty"`
	// Labels are list of key value pairs to tag the cloud backup. These labels
	// are stored in the metadata associated with the backup.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DeleteLocal indicates if local snap created for backup must be deleted after
	// the backup is complete
	DeleteLocal bool `protobuf:"varint,6,opt,name=delete_local,json=deleteLocal,proto3" json:"delete_local,omitempty"`
}

func (x *SdkCloudBackupGroupCreateRequest) Reset() {
	*x = SdkCloudBackupGroupCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupGroupCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupGroupCreateRequest) ProtoMessage() {}

func (x *SdkCloudBackupGroupCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupGroupCreateRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupGroupCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{251}
}

func (x *SdkCloudBackupGroupCreateRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *SdkCloudBackupGroupCreateRequest) GetVolumeIds() []string {
	if x != nil {
		return x.VolumeIds
	}
	return nil
}

func (x *SdkCloudBackupGroupCreateRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *SdkCloudBackupGroupCreateRequest) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

func (x *SdkCloudBackupGroupCreateRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SdkCloudBackupGroupCreateRequest) GetDeleteLocal() bool {
	if x != nil {
		return x.DeleteLocal
	}
	return false
}

// Empty response
type SdkCloudBackupGroupCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID for this group of backups
	GroupCloudBackupId string `protobuf:"bytes,1,opt,name=group_cloud_backup_id,json=groupCloudBackupId,proto3" json:"group_cloud_backup_id,omitempty"`
	// TaskIds of the tasks performing the group backup
	TaskIds []string `protobuf:"bytes,2,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
}

func (x *SdkCloudBackupGroupCreateResponse) Reset() {
	*x = SdkCloudBackupGroupCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupGroupCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupGroupCreateResponse) ProtoMessage() {}

func (x *SdkCloudBackupGroupCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupGroupCreateResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupGroupCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{252}
}

func (x *SdkCloudBackupGroupCreateResponse) GetGroupCloudBackupId() string {
	if x != nil {
		return x.GroupCloudBackupId
	}
	return ""
}

func (x *SdkCloudBackupGroupCreateResponse) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

// Defines a request to restore a volume from an existing backup stored by
// a cloud provider
type SdkCloudBackupRestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Backup ID being restored
	BackupId string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Optional volume Name of the new volume to be created
	// in the cluster for restoring the cloudbackup
	RestoreVolumeName string `protobuf:"bytes,2,opt,name=restore_volume_name,json=restoreVolumeName,proto3" json:"restore_volume_name,omitempty"`
	// The credential to be used for restore operation
	CredentialId string `protobuf:"bytes,3,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// Optional for provisioning restore
	// volume (ResoreVolumeName should not be specified)
	NodeId string `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// TaskId of the task performing this restore
	TaskId string `protobuf:"bytes,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Modifiable Restore volume spec
	Spec *RestoreVolumeSpec `protobuf:"bytes,6,opt,name=spec,proto3" json:"spec,omitempty"`
	// RestoreVolume locator
	Locator *VolumeLocator `protobuf:"bytes,7,opt,name=locator,proto3" json:"locator,omitempty"`
}

func (x *SdkCloudBackupRestoreRequest) Reset() {
	*x = SdkCloudBackupRestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupRestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupRestoreRequest) ProtoMessage() {}

func (x *SdkCloudBackupRestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupRestoreRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupRestoreRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{253}
}

func (x *SdkCloudBackupRestoreRequest) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *SdkCloudBackupRestoreRequest) GetRestoreVolumeName() string {
	if x != nil {
		return x.RestoreVolumeName
	}
	return ""
}

func (x *SdkCloudBackupRestoreRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *SdkCloudBackupRestoreRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *SdkCloudBackupRestoreRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SdkCloudBackupRestoreRequest) GetSpec() *RestoreVolumeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *SdkCloudBackupRestoreRequest) GetLocator() *VolumeLocator {
	if x != nil {
		return x.Locator
	}
	return nil
}

// Defines a response when restoring a volume from a backup stored by
// a cloud provider
type SdkCloudBackupRestoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VolumeID to which the backup is being restored
	RestoreVolumeId string `protobuf:"bytes,1,opt,name=restore_volume_id,json=restoreVolumeId,proto3" json:"restore_volume_id,omitempty"`
	// TaskId of the task performing the restore
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *SdkCloudBackupRestoreResponse) Reset() {
	*x = SdkCloudBackupRestoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupRestoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupRestoreResponse) ProtoMessage() {}

func (x *SdkCloudBackupRestoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupRestoreResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupRestoreResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{254}
}

func (x *SdkCloudBackupRestoreResponse) GetRestoreVolumeId() string {
	if x != nil {
		return x.RestoreVolumeId
	}
	return ""
}

func (x *SdkCloudBackupRestoreResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// Defines a request to delete a single backup stored by a cloud provider
type SdkCloudBackupDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the ID of the cloud backup
	BackupId string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Credential id is the credential for cloud to be used for the request
	CredentialId string `protobuf:"bytes,2,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// Force Delete cloudbackup even if there are dependencies. This may be
	// needed if the backup is an incremental backup and subsequent backups
	// depend on this backup specified by `backup_id`.
	Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	// Bucket name to which cloud backup belongs to
	Bucket string `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (x *SdkCloudBackupDeleteRequest) Reset() {
	*x = SdkCloudBackupDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupDeleteRequest) ProtoMessage() {}

func (x *SdkCloudBackupDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupDeleteRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{255}
}

func (x *SdkCloudBackupDeleteRequest) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *SdkCloudBackupDeleteRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *SdkCloudBackupDeleteRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *SdkCloudBackupDeleteRequest) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

// Empty response
type SdkCloudBackupDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkCloudBackupDeleteResponse) Reset() {
	*x = SdkCloudBackupDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupDeleteResponse) ProtoMessage() {}

func (x *SdkCloudBackupDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupDeleteResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupDeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{256}
}

// Defines a request to delete all the backups stored by a cloud provider
// for a specified volume
type SdkCloudBackupDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the volume for the request
	SrcVolumeId string `protobuf:"bytes,1,opt,name=src_volume_id,json=srcVolumeId,proto3" json:"src_volume_id,omitempty"`
	// Credential id is the credential for cloud to be used for the request
	CredentialId string `protobuf:"bytes,2,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (x *SdkCloudBackupDeleteAllRequest) Reset() {
	*x = SdkCloudBackupDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupDeleteAllRequest) ProtoMessage() {}

func (x *SdkCloudBackupDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{257}
}

func (x *SdkCloudBackupDeleteAllRequest) GetSrcVolumeId() string {
	if x != nil {
		return x.SrcVolumeId
	}
	return ""
}

func (x *SdkCloudBackupDeleteAllRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

// Empty response
type SdkCloudBackupDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkCloudBackupDeleteAllResponse) Reset() {
	*x = SdkCloudBackupDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupDeleteAllResponse) ProtoMessage() {}

func (x *SdkCloudBackupDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{258}
}

// Defines a request to list the backups stored by a cloud provider.
// The following combinations can be used to get cloud backup information:
//
// * For a specific volume in current cluster: Set `src_volume_id` to your desired volume id
// and do not provide `cluster_id` and `all`.
// * For a specific volume in a specific cluster: Set `src_volume_id` to your desired volume id
// and specify `cluster_id`.
// * For a specific volume in all clusters: Set `src_volume_id` to your desired volume id
// and set `all` to true, do not provide `cluster_id`.
// * For all volumes in current cluster: do not provide `cluster_id`, `volume_id` and `all`.
// * For all volumes in a specific cluster: Set `cluster_id` to your desired cluster id
// and do not provide `volume_id` and `all`.
// * For all volumes in all clusters: Set `all` to true do not provide `volume_id` and `cluster_id`.
type SdkCloudBackupEnumerateWithFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional) Source id of the volume for the request.
	SrcVolumeId string `protobuf:"bytes,1,opt,name=src_volume_id,json=srcVolumeId,proto3" json:"src_volume_id,omitempty"`
	// (optional) Cluster id specifies the cluster for the request
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Credential id is the credential for cloud to be used for the request
	CredentialId string `protobuf:"bytes,3,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// (optional) All indicates if the request should show cloud backups for all clusters or the current cluster.
	All bool `protobuf:"varint,4,opt,name=all,proto3" json:"all,omitempty"`
	// (optional) enumerates backups that have status specified by this type
	StatusFilter SdkCloudBackupStatusType `protobuf:"varint,5,opt,name=status_filter,json=statusFilter,proto3,enum=openstorage.api.SdkCloudBackupStatusType" json:"status_filter,omitempty"`
	// (optional) Enumerates backups that have tags of this type
	MetadataFilter map[string]string `protobuf:"bytes,6,rep,name=metadata_filter,json=metadataFilter,proto3" json:"metadata_filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (optional) if caller wished to limit number of backups returned by enumerate
	MaxBackups uint64 `protobuf:"varint,7,opt,name=max_backups,json=maxBackups,proto3" json:"max_backups,omitempty"`
	// Returned in the enumerate response if not all of the backups could be returned in the
	// response.
	ContinuationToken string `protobuf:"bytes,8,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
	// If one wants to enumerate known backup, set this field to the backup ID
	// naming format :clusteruuidORbicketname/srcVolId-snapId(-incr)
	CloudBackupId string `protobuf:"bytes,9,opt,name=cloud_backup_id,json=cloudBackupId,proto3" json:"cloud_backup_id,omitempty"`
	// To enumerate cloudbackups for which source volumes do not exist in this
	// cluster
	MissingSrcVolumes bool `protobuf:"varint,10,opt,name=missing_src_volumes,json=missingSrcVolumes,proto3" json:"missing_src_volumes,omitempty"`
}

func (x *SdkCloudBackupEnumerateWithFiltersRequest) Reset() {
	*x = SdkCloudBackupEnumerateWithFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupEnumerateWithFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupEnumerateWithFiltersRequest) ProtoMessage() {}

func (x *SdkCloudBackupEnumerateWithFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupEnumerateWithFiltersRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupEnumerateWithFiltersRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{259}
}

func (x *SdkCloudBackupEnumerateWithFiltersRequest) GetSrcVolumeId() string {
	if x != nil {
		return x.SrcVolumeId
	}
	return ""
}

func (x *SdkCloudBackupEnumerateWithFiltersRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *SdkCloudBackupEnumerateWithFiltersRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *SdkCloudBackupEnumerateWithFiltersRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *SdkCloudBackupEnumerateWithFiltersRequest) GetStatusFilter() SdkCloudBackupStatusType {
	if x != nil {
		return x.StatusFilter
	}
	return SdkCloudBackupStatusType_SdkCloudBackupStatusTypeUnknown
}

func (x *SdkCloudBackupEnumerateWithFiltersRequest) GetMetadataFilter() map[string]string {
	if x != nil {
		return x.MetadataFilter
	}
	return nil
}

func (x *SdkCloudBackupEnumerateWithFiltersRequest) GetMaxBackups() uint64 {
	if x != nil {
		return x.MaxBackups
	}
	return 0
}

func (x *SdkCloudBackupEnumerateWithFiltersRequest) GetContinuationToken() string {
	if x != nil {
		return x.ContinuationToken
	}
	return ""
}

func (x *SdkCloudBackupEnumerateWithFiltersRequest) GetCloudBackupId() string {
	if x != nil {
		return x.CloudBackupId
	}
	return ""
}

func (x *SdkCloudBackupEnumerateWithFiltersRequest) GetMissingSrcVolumes() bool {
	if x != nil {
		return x.MissingSrcVolumes
	}
	return false
}

// SdkCloudBackupInfo has information about a backup stored by a cloud provider
type SdkCloudBackupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the id as represented by the cloud provider
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Source volumeID of the backup
	SrcVolumeId string `protobuf:"bytes,2,opt,name=src_volume_id,json=srcVolumeId,proto3" json:"src_volume_id,omitempty"`
	// Name of the sourceVolume of the backup
	SrcVolumeName string `protobuf:"bytes,3,opt,name=src_volume_name,json=srcVolumeName,proto3" json:"src_volume_name,omitempty"`
	// Timestamp is the timestamp at which the source volume
	// was backed up to cloud
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Metadata associated with the backup
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Status indicates the status of the backup
	Status SdkCloudBackupStatusType `protobuf:"varint,6,opt,name=status,proto3,enum=openstorage.api.SdkCloudBackupStatusType" json:"status,omitempty"`
	// cluster indicates if the cloudbackup belongs to current cluster,
	// with older cluster this value may be unknown
	ClusterType SdkCloudBackupClusterType `protobuf:"varint,7,opt,name=cluster_type,json=clusterType,proto3,enum=openstorage.api.SdkCloudBackupClusterType" json:"cluster_type,omitempty"`
	// k8s namespace to which this backup belongs to
	Namespace string `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *SdkCloudBackupInfo) Reset() {
	*x = SdkCloudBackupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupInfo) ProtoMessage() {}

func (x *SdkCloudBackupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupInfo.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupInfo) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{260}
}

func (x *SdkCloudBackupInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SdkCloudBackupInfo) GetSrcVolumeId() string {
	if x != nil {
		return x.SrcVolumeId
	}
	return ""
}

func (x *SdkCloudBackupInfo) GetSrcVolumeName() string {
	if x != nil {
		return x.SrcVolumeName
	}
	return ""
}

func (x *SdkCloudBackupInfo) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SdkCloudBackupInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SdkCloudBackupInfo) GetStatus() SdkCloudBackupStatusType {
	if x != nil {
		return x.Status
	}
	return SdkCloudBackupStatusType_SdkCloudBackupStatusTypeUnknown
}

func (x *SdkCloudBackupInfo) GetClusterType() SdkCloudBackupClusterType {
	if x != nil {
		return x.ClusterType
	}
	return SdkCloudBackupClusterType_SdkCloudBackupClusterUnknown
}

func (x *SdkCloudBackupInfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Defines a response which lists all the backups stored by a cloud provider
type SdkCloudBackupEnumerateWithFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backups []*SdkCloudBackupInfo `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
	// if this is not an empty string, callers must pass this to get next list of
	// backups
	ContinuationToken string `protobuf:"bytes,2,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
}

func (x *SdkCloudBackupEnumerateWithFiltersResponse) Reset() {
	*x = SdkCloudBackupEnumerateWithFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupEnumerateWithFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupEnumerateWithFiltersResponse) ProtoMessage() {}

func (x *SdkCloudBackupEnumerateWithFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupEnumerateWithFiltersResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupEnumerateWithFiltersResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{261}
}

func (x *SdkCloudBackupEnumerateWithFiltersResponse) GetBackups() []*SdkCloudBackupInfo {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *SdkCloudBackupEnumerateWithFiltersResponse) GetContinuationToken() string {
	if x != nil {
		return x.ContinuationToken
	}
	return ""
}

// SdkCloudBackupStatus defines the status of a backup stored by a cloud provider
type SdkCloudBackupStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the id as represented by the cloud provider
	BackupId string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// OpType indicates if this is a backup or restore
	Optype SdkCloudBackupOpType `protobuf:"varint,2,opt,name=optype,proto3,enum=openstorage.api.SdkCloudBackupOpType" json:"optype,omitempty"`
	// State indicates if the op is currently active/done/failed
	Status SdkCloudBackupStatusType `protobuf:"varint,3,opt,name=status,proto3,enum=openstorage.api.SdkCloudBackupStatusType" json:"status,omitempty"`
	// BytesDone indicates total Bytes uploaded/downloaded
	BytesDone uint64 `protobuf:"varint,4,opt,name=bytes_done,json=bytesDone,proto3" json:"bytes_done,omitempty"`
	// StartTime indicates Op's start time
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// CompletedTime indicates Op's completed time
	CompletedTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=completed_time,json=completedTime,proto3" json:"completed_time,omitempty"`
	// NodeID is the ID of the node where this Op is active
	NodeId string `protobuf:"bytes,7,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// SourceVolumeID is the the volume that is either being backed up to cloud
	// or target volume to which a backup is being restored
	SrcVolumeId string `protobuf:"bytes,8,opt,name=src_volume_id,json=srcVolumeId,proto3" json:"src_volume_id,omitempty"`
	// Info currently indicates the failure cause for failed backup/restore
	Info []string `protobuf:"bytes,9,rep,name=info,proto3" json:"info,omitempty"`
	// CredentialId is the credential used for cloud with this backup/restore op
	CredentialId string `protobuf:"bytes,10,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// BytesTotal is the total number of bytes being transferred
	BytesTotal uint64 `protobuf:"varint,11,opt,name=bytes_total,json=bytesTotal,proto3" json:"bytes_total,omitempty"`
	// ETASeconds is the number of seconds for cloud backup completion
	EtaSeconds int64 `protobuf:"varint,12,opt,name=eta_seconds,json=etaSeconds,proto3" json:"eta_seconds,omitempty"`
	// string group_id volume's group id if this was group cloud backup
	GroupId string `protobuf:"bytes,13,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *SdkCloudBackupStatus) Reset() {
	*x = SdkCloudBackupStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupStatus) ProtoMessage() {}

func (x *SdkCloudBackupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupStatus.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupStatus) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{262}
}

func (x *SdkCloudBackupStatus) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *SdkCloudBackupStatus) GetOptype() SdkCloudBackupOpType {
	if x != nil {
		return x.Optype
	}
	return SdkCloudBackupOpType_SdkCloudBackupOpTypeUnknown
}

func (x *SdkCloudBackupStatus) GetStatus() SdkCloudBackupStatusType {
	if x != nil {
		return x.Status
	}
	return SdkCloudBackupStatusType_SdkCloudBackupStatusTypeUnknown
}

func (x *SdkCloudBackupStatus) GetBytesDone() uint64 {
	if x != nil {
		return x.BytesDone
	}
	return 0
}

func (x *SdkCloudBackupStatus) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SdkCloudBackupStatus) GetCompletedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedTime
	}
	return nil
}

func (x *SdkCloudBackupStatus) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *SdkCloudBackupStatus) GetSrcVolumeId() string {
	if x != nil {
		return x.SrcVolumeId
	}
	return ""
}

func (x *SdkCloudBackupStatus) GetInfo() []string {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SdkCloudBackupStatus) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *SdkCloudBackupStatus) GetBytesTotal() uint64 {
	if x != nil {
		return x.BytesTotal
	}
	return 0
}

func (x *SdkCloudBackupStatus) GetEtaSeconds() int64 {
	if x != nil {
		return x.EtaSeconds
	}
	return 0
}

func (x *SdkCloudBackupStatus) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// Defines a request to retrieve the status of a backup or restore for a
// specified volume
type SdkCloudBackupStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional) VolumeId is a value which is used to get information on the
	// status of a backup for the specified volume. If no volume id and task_id
	// is provided, then status for all volumes is returned.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Local indicates if only those backups/restores that are
	// active on current node must be returned
	Local bool `protobuf:"varint,2,opt,name=local,proto3" json:"local,omitempty"`
	// TaskId of the backup/restore task, if this is specified,
	// volume_id is ignored.
	TaskId string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *SdkCloudBackupStatusRequest) Reset() {
	*x = SdkCloudBackupStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupStatusRequest) ProtoMessage() {}

func (x *SdkCloudBackupStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupStatusRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{263}
}

func (x *SdkCloudBackupStatusRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkCloudBackupStatusRequest) GetLocal() bool {
	if x != nil {
		return x.Local
	}
	return false
}

func (x *SdkCloudBackupStatusRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// Defines a response containing the status of the backups for a specified volume
type SdkCloudBackupStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Statuses is list of currently active/failed/done backup/restores where
	// the key is the id of the task performing backup/restore.
	Statuses map[string]*SdkCloudBackupStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SdkCloudBackupStatusResponse) Reset() {
	*x = SdkCloudBackupStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupStatusResponse) ProtoMessage() {}

func (x *SdkCloudBackupStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupStatusResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{264}
}

func (x *SdkCloudBackupStatusResponse) GetStatuses() map[string]*SdkCloudBackupStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

// Defines a request to get catalog of a backup stored by a cloud provider
type SdkCloudBackupCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the backup
	BackupId string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Credential id describe the credentials for the cloud
	CredentialId string `protobuf:"bytes,2,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (x *SdkCloudBackupCatalogRequest) Reset() {
	*x = SdkCloudBackupCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupCatalogRequest) ProtoMessage() {}

func (x *SdkCloudBackupCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupCatalogRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupCatalogRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{265}
}

func (x *SdkCloudBackupCatalogRequest) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *SdkCloudBackupCatalogRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

// Defines a response containing the contents of a backup stored by a cloud provider
type SdkCloudBackupCatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contents is listing of backup contents
	Contents []string `protobuf:"bytes,1,rep,name=contents,proto3" json:"contents,omitempty"`
}

func (x *SdkCloudBackupCatalogResponse) Reset() {
	*x = SdkCloudBackupCatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupCatalogResponse) ProtoMessage() {}

func (x *SdkCloudBackupCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupCatalogResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupCatalogResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{266}
}

func (x *SdkCloudBackupCatalogResponse) GetContents() []string {
	if x != nil {
		return x.Contents
	}
	return nil
}

// SdkCloudBackupHistoryItem contains information about a backup for a
// specific volume
type SdkCloudBackupHistoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SrcVolumeID is volume ID which was backedup
	SrcVolumeId string `protobuf:"bytes,1,opt,name=src_volume_id,json=srcVolumeId,proto3" json:"src_volume_id,omitempty"`
	// TimeStamp is the time at which either backup completed/failed
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Status indicates whether backup was completed/failed
	Status SdkCloudBackupStatusType `protobuf:"varint,3,opt,name=status,proto3,enum=openstorage.api.SdkCloudBackupStatusType" json:"status,omitempty"`
}

func (x *SdkCloudBackupHistoryItem) Reset() {
	*x = SdkCloudBackupHistoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupHistoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupHistoryItem) ProtoMessage() {}

func (x *SdkCloudBackupHistoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupHistoryItem.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupHistoryItem) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{267}
}

func (x *SdkCloudBackupHistoryItem) GetSrcVolumeId() string {
	if x != nil {
		return x.SrcVolumeId
	}
	return ""
}

func (x *SdkCloudBackupHistoryItem) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SdkCloudBackupHistoryItem) GetStatus() SdkCloudBackupStatusType {
	if x != nil {
		return x.Status
	}
	return SdkCloudBackupStatusType_SdkCloudBackupStatusTypeUnknown
}

// Defines a request to retrieve the history of the backups for
// a specific volume to a cloud provider
type SdkCloudBackupHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This optional value defines which history of backups is being
	// requested. If not provided, it will return the history for all volumes.
	SrcVolumeId string `protobuf:"bytes,1,opt,name=src_volume_id,json=srcVolumeId,proto3" json:"src_volume_id,omitempty"`
}

func (x *SdkCloudBackupHistoryRequest) Reset() {
	*x = SdkCloudBackupHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupHistoryRequest) ProtoMessage() {}

func (x *SdkCloudBackupHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupHistoryRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupHistoryRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{268}
}

func (x *SdkCloudBackupHistoryRequest) GetSrcVolumeId() string {
	if x != nil {
		return x.SrcVolumeId
	}
	return ""
}

// Defines a response containing a list of history of backups to a cloud provider
type SdkCloudBackupHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HistoryList is list of past backups on this volume
	HistoryList []*SdkCloudBackupHistoryItem `protobuf:"bytes,1,rep,name=history_list,json=historyList,proto3" json:"history_list,omitempty"`
}

func (x *SdkCloudBackupHistoryResponse) Reset() {
	*x = SdkCloudBackupHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupHistoryResponse) ProtoMessage() {}

func (x *SdkCloudBackupHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupHistoryResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupHistoryResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{269}
}

func (x *SdkCloudBackupHistoryResponse) GetHistoryList() []*SdkCloudBackupHistoryItem {
	if x != nil {
		return x.HistoryList
	}
	return nil
}

// Defines a request to change the state of a backup or restore to or
// from a cloud provider
type SdkCloudBackupStateChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the backup/restore task
	// state change is being requested
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// The desired state of the operation
	RequestedState SdkCloudBackupRequestedState `protobuf:"varint,2,opt,name=requested_state,json=requestedState,proto3,enum=openstorage.api.SdkCloudBackupRequestedState" json:"requested_state,omitempty"`
}

func (x *SdkCloudBackupStateChangeRequest) Reset() {
	*x = SdkCloudBackupStateChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupStateChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupStateChangeRequest) ProtoMessage() {}

func (x *SdkCloudBackupStateChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupStateChangeRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupStateChangeRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{270}
}

func (x *SdkCloudBackupStateChangeRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SdkCloudBackupStateChangeRequest) GetRequestedState() SdkCloudBackupRequestedState {
	if x != nil {
		return x.RequestedState
	}
	return SdkCloudBackupRequestedState_SdkCloudBackupRequestedStateUnknown
}

// Empty response
type SdkCloudBackupStateChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkCloudBackupStateChangeResponse) Reset() {
	*x = SdkCloudBackupStateChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupStateChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupStateChangeResponse) ProtoMessage() {}

func (x *SdkCloudBackupStateChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupStateChangeResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupStateChangeResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{271}
}

// SdkCloudBackupScheduleInfo describes a schedule for volume backups to
// a cloud provider
type SdkCloudBackupScheduleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The schedule's source volume
	SrcVolumeId string `protobuf:"bytes,1,opt,name=src_volume_id,json=srcVolumeId,proto3" json:"src_volume_id,omitempty"`
	// The cloud credential used with this schedule
	CredentialId string `protobuf:"bytes,2,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// Schedules are the frequencies of the backup
	Schedules []*SdkSchedulePolicyInterval `protobuf:"bytes,3,rep,name=schedules,proto3" json:"schedules,omitempty"`
	// MaxBackups indicates when to force full backup to cloud. If RetentionDays
	// is not specified or is 0 (older scheme), this is also the maximum number
	// of scheduled backups retained in the cloud. Older backups are deleted
	MaxBackups uint64 `protobuf:"varint,4,opt,name=max_backups,json=maxBackups,proto3" json:"max_backups,omitempty"`
	// Full indicates if scheduled backups should always be full and never incremental.
	Full bool `protobuf:"varint,5,opt,name=full,proto3" json:"full,omitempty"`
	// Number of days that Scheduled CloudBackups will be kept after which they
	// are deleted
	RetentionDays uint32 `protobuf:"varint,6,opt,name=retention_days,json=retentionDays,proto3" json:"retention_days,omitempty"`
	// GroupId indicates the group of volumes for which this schedule applies
	GroupId string `protobuf:"bytes,7,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// labels indicates group of volumes with similar labels for which this schedule applies
	Labels map[string]string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SdkCloudBackupScheduleInfo) Reset() {
	*x = SdkCloudBackupScheduleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupScheduleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupScheduleInfo) ProtoMessage() {}

func (x *SdkCloudBackupScheduleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupScheduleInfo.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupScheduleInfo) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{272}
}

func (x *SdkCloudBackupScheduleInfo) GetSrcVolumeId() string {
	if x != nil {
		return x.SrcVolumeId
	}
	return ""
}

func (x *SdkCloudBackupScheduleInfo) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *SdkCloudBackupScheduleInfo) GetSchedules() []*SdkSchedulePolicyInterval {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *SdkCloudBackupScheduleInfo) GetMaxBackups() uint64 {
	if x != nil {
		return x.MaxBackups
	}
	return 0
}

func (x *SdkCloudBackupScheduleInfo) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

func (x *SdkCloudBackupScheduleInfo) GetRetentionDays() uint32 {
	if x != nil {
		return x.RetentionDays
	}
	return 0
}

func (x *SdkCloudBackupScheduleInfo) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *SdkCloudBackupScheduleInfo) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Defines a request to create a schedule for volume backups to a
// cloud provider
type SdkCloudBackupSchedCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Backup Schedule info
	CloudSchedInfo *SdkCloudBackupScheduleInfo `protobuf:"bytes,1,opt,name=cloud_sched_info,json=cloudSchedInfo,proto3" json:"cloud_sched_info,omitempty"`
}

func (x *SdkCloudBackupSchedCreateRequest) Reset() {
	*x = SdkCloudBackupSchedCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupSchedCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupSchedCreateRequest) ProtoMessage() {}

func (x *SdkCloudBackupSchedCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupSchedCreateRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupSchedCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{273}
}

func (x *SdkCloudBackupSchedCreateRequest) GetCloudSchedInfo() *SdkCloudBackupScheduleInfo {
	if x != nil {
		return x.CloudSchedInfo
	}
	return nil
}

// Defines a response containing the id of a schedule for a volume backup
// to a cloud provider
type SdkCloudBackupSchedCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of newly created backup schedule
	BackupScheduleId string `protobuf:"bytes,1,opt,name=backup_schedule_id,json=backupScheduleId,proto3" json:"backup_schedule_id,omitempty"`
}

func (x *SdkCloudBackupSchedCreateResponse) Reset() {
	*x = SdkCloudBackupSchedCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupSchedCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupSchedCreateResponse) ProtoMessage() {}

func (x *SdkCloudBackupSchedCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupSchedCreateResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupSchedCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{274}
}

func (x *SdkCloudBackupSchedCreateResponse) GetBackupScheduleId() string {
	if x != nil {
		return x.BackupScheduleId
	}
	return ""
}

// Defines a request to update a schedule for volume backups to a
// cloud provider
type SdkCloudBackupSchedUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Backup Schedule info
	CloudSchedInfo *SdkCloudBackupScheduleInfo `protobuf:"bytes,1,opt,name=cloud_sched_info,json=cloudSchedInfo,proto3" json:"cloud_sched_info,omitempty"`
	SchedUuid      string                      `protobuf:"bytes,2,opt,name=sched_uuid,json=schedUuid,proto3" json:"sched_uuid,omitempty"`
}

func (x *SdkCloudBackupSchedUpdateRequest) Reset() {
	*x = SdkCloudBackupSchedUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupSchedUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupSchedUpdateRequest) ProtoMessage() {}

func (x *SdkCloudBackupSchedUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupSchedUpdateRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupSchedUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{275}
}

func (x *SdkCloudBackupSchedUpdateRequest) GetCloudSchedInfo() *SdkCloudBackupScheduleInfo {
	if x != nil {
		return x.CloudSchedInfo
	}
	return nil
}

func (x *SdkCloudBackupSchedUpdateRequest) GetSchedUuid() string {
	if x != nil {
		return x.SchedUuid
	}
	return ""
}

// Empty response
type SdkCloudBackupSchedUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkCloudBackupSchedUpdateResponse) Reset() {
	*x = SdkCloudBackupSchedUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupSchedUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupSchedUpdateResponse) ProtoMessage() {}

func (x *SdkCloudBackupSchedUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupSchedUpdateResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupSchedUpdateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{276}
}

// Defines a request to delete a backup schedule
type SdkCloudBackupSchedDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of cloud backup to delete
	BackupScheduleId string `protobuf:"bytes,1,opt,name=backup_schedule_id,json=backupScheduleId,proto3" json:"backup_schedule_id,omitempty"`
}

func (x *SdkCloudBackupSchedDeleteRequest) Reset() {
	*x = SdkCloudBackupSchedDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupSchedDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupSchedDeleteRequest) ProtoMessage() {}

func (x *SdkCloudBackupSchedDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupSchedDeleteRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupSchedDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{277}
}

func (x *SdkCloudBackupSchedDeleteRequest) GetBackupScheduleId() string {
	if x != nil {
		return x.BackupScheduleId
	}
	return ""
}

// Empty response
type SdkCloudBackupSchedDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkCloudBackupSchedDeleteResponse) Reset() {
	*x = SdkCloudBackupSchedDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupSchedDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupSchedDeleteResponse) ProtoMessage() {}

func (x *SdkCloudBackupSchedDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupSchedDeleteResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupSchedDeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{278}
}

// Empty request
type SdkCloudBackupSchedEnumerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkCloudBackupSchedEnumerateRequest) Reset() {
	*x = SdkCloudBackupSchedEnumerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupSchedEnumerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupSchedEnumerateRequest) ProtoMessage() {}

func (x *SdkCloudBackupSchedEnumerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupSchedEnumerateRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupSchedEnumerateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{279}
}

// Defines a response containing a map listing the schedules for volume
// backups to a cloud provider
type SdkCloudBackupSchedEnumerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Returns list of backup schedules
	CloudSchedList map[string]*SdkCloudBackupScheduleInfo `protobuf:"bytes,1,rep,name=cloud_sched_list,json=cloudSchedList,proto3" json:"cloud_sched_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SdkCloudBackupSchedEnumerateResponse) Reset() {
	*x = SdkCloudBackupSchedEnumerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupSchedEnumerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupSchedEnumerateResponse) ProtoMessage() {}

func (x *SdkCloudBackupSchedEnumerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupSchedEnumerateResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupSchedEnumerateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{280}
}

func (x *SdkCloudBackupSchedEnumerateResponse) GetCloudSchedList() map[string]*SdkCloudBackupScheduleInfo {
	if x != nil {
		return x.CloudSchedList
	}
	return nil
}

// Defines a request to retrieve the size of the volume for the
// specificed volume
type SdkCloudBackupSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BackupId is a value which is used to get information on the
	// size of the specified backup.
	BackupId string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Credential id describe the credentials for the cloud
	CredentialId string `protobuf:"bytes,2,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (x *SdkCloudBackupSizeRequest) Reset() {
	*x = SdkCloudBackupSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupSizeRequest) ProtoMessage() {}

func (x *SdkCloudBackupSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupSizeRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupSizeRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{281}
}

func (x *SdkCloudBackupSizeRequest) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *SdkCloudBackupSizeRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

// Defines a response containing the size of the volume
type SdkCloudBackupSizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size is the size of the volume in bytes
	Size uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *SdkCloudBackupSizeResponse) Reset() {
	*x = SdkCloudBackupSizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudBackupSizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudBackupSizeResponse) ProtoMessage() {}

func (x *SdkCloudBackupSizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudBackupSizeResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudBackupSizeResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{282}
}

func (x *SdkCloudBackupSizeResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

//
// SdkRule is the message used to construct custom roles in the OpenStorage SDK.
//
// ### Format
// The following shows the supported format for SdkRule:
//
// * Services: Is the gRPC service name in `OpenStorage<service name>` in lowercase
// * Apis: Is the API name in the service in lowercase
//
// Values can also be set to `*`, or start or end with `*` to allow multiple matches in services or apis.
//
// Services and APIs can also be denied by prefixing the value with a `!`. Note that on rule conflicts,
// denial will always be chosen.
//
// ### Examples
//
// * Allow any call:
//
// ```yaml
// SdkRule:
//   - Services: ["*"]
//     Apis: ["*"]
// ```
//
// * Allow only cluster operations:
//
// ```yaml
// SdkRule:
//   - services: ["cluster"]
//     apis: ["*"]
// ```
//
// * Allow inspection of any object and listings of only volumes
//
// ```yaml
// SdkRule:
//   - Services: ["volumes"]
//     Apis: ["*enumerate*"]
//   - Services: ["*"]
//     Apis: ["inspect*"]
// ```
//
// * Allow all volume call except create
//
// ```yaml
// SdkRule:
//   - Services: ["volumes"]
//     Apis: ["*", "!create"]
// ```
//
type SdkRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The gRPC service name in `OpenStorage<service name>` in lowercase
	Services []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	// The API name in the service in lowercase
	Apis []string `protobuf:"bytes,2,rep,name=apis,proto3" json:"apis,omitempty"`
}

func (x *SdkRule) Reset() {
	*x = SdkRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkRule) ProtoMessage() {}

func (x *SdkRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkRule.ProtoReflect.Descriptor instead.
func (*SdkRule) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{283}
}

func (x *SdkRule) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *SdkRule) GetApis() []string {
	if x != nil {
		return x.Apis
	}
	return nil
}

type SdkRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Rules []*SdkRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SdkRole) Reset() {
	*x = SdkRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkRole) ProtoMessage() {}

func (x *SdkRole) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkRole.ProtoReflect.Descriptor instead.
func (*SdkRole) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{284}
}

func (x *SdkRole) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SdkRole) GetRules() []*SdkRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// Defines a request for creating a role
type SdkRoleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Role
	Role *SdkRole `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *SdkRoleCreateRequest) Reset() {
	*x = SdkRoleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkRoleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkRoleCreateRequest) ProtoMessage() {}

func (x *SdkRoleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkRoleCreateRequest.ProtoReflect.Descriptor instead.
func (*SdkRoleCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{285}
}

func (x *SdkRoleCreateRequest) GetRole() *SdkRole {
	if x != nil {
		return x.Role
	}
	return nil
}

// Response contains informaiton about the creation of the role
type SdkRoleCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Role created
	Role *SdkRole `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *SdkRoleCreateResponse) Reset() {
	*x = SdkRoleCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkRoleCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkRoleCreateResponse) ProtoMessage() {}

func (x *SdkRoleCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkRoleCreateResponse.ProtoReflect.Descriptor instead.
func (*SdkRoleCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{286}
}

func (x *SdkRoleCreateResponse) GetRole() *SdkRole {
	if x != nil {
		return x.Role
	}
	return nil
}

// Empty request
type SdkRoleEnumerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkRoleEnumerateRequest) Reset() {
	*x = SdkRoleEnumerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkRoleEnumerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkRoleEnumerateRequest) ProtoMessage() {}

func (x *SdkRoleEnumerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkRoleEnumerateRequest.ProtoReflect.Descriptor instead.
func (*SdkRoleEnumerateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{287}
}

// Respose to enumerate all roles
type SdkRoleEnumerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of role names
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *SdkRoleEnumerateResponse) Reset() {
	*x = SdkRoleEnumerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkRoleEnumerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkRoleEnumerateResponse) ProtoMessage() {}

func (x *SdkRoleEnumerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkRoleEnumerateResponse.ProtoReflect.Descriptor instead.
func (*SdkRoleEnumerateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{288}
}

func (x *SdkRoleEnumerateResponse) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// Defines a request to inspect a role
type SdkRoleInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of role
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SdkRoleInspectRequest) Reset() {
	*x = SdkRoleInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkRoleInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkRoleInspectRequest) ProtoMessage() {}

func (x *SdkRoleInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkRoleInspectRequest.ProtoReflect.Descriptor instead.
func (*SdkRoleInspectRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{289}
}

func (x *SdkRoleInspectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response to inspection request
type SdkRoleInspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Role requested
	Role *SdkRole `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *SdkRoleInspectResponse) Reset() {
	*x = SdkRoleInspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkRoleInspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkRoleInspectResponse) ProtoMessage() {}

func (x *SdkRoleInspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkRoleInspectResponse.ProtoReflect.Descriptor instead.
func (*SdkRoleInspectResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{290}
}

func (x *SdkRoleInspectResponse) GetRole() *SdkRole {
	if x != nil {
		return x.Role
	}
	return nil
}

// Defines a request to delete a role
type SdkRoleDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SdkRoleDeleteRequest) Reset() {
	*x = SdkRoleDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkRoleDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkRoleDeleteRequest) ProtoMessage() {}

func (x *SdkRoleDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkRoleDeleteRequest.ProtoReflect.Descriptor instead.
func (*SdkRoleDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{291}
}

func (x *SdkRoleDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Empty response
type SdkRoleDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkRoleDeleteResponse) Reset() {
	*x = SdkRoleDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkRoleDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkRoleDeleteResponse) ProtoMessage() {}

func (x *SdkRoleDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkRoleDeleteResponse.ProtoReflect.Descriptor instead.
func (*SdkRoleDeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{292}
}

// Defines a request to update an existing role
type SdkRoleUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New role update
	Role *SdkRole `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *SdkRoleUpdateRequest) Reset() {
	*x = SdkRoleUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkRoleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkRoleUpdateRequest) ProtoMessage() {}

func (x *SdkRoleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkRoleUpdateRequest.ProtoReflect.Descriptor instead.
func (*SdkRoleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{293}
}

func (x *SdkRoleUpdateRequest) GetRole() *SdkRole {
	if x != nil {
		return x.Role
	}
	return nil
}

// Response contains information about the updated role
type SdkRoleUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Role updated
	Role *SdkRole `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *SdkRoleUpdateResponse) Reset() {
	*x = SdkRoleUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkRoleUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkRoleUpdateResponse) ProtoMessage() {}

func (x *SdkRoleUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkRoleUpdateResponse.ProtoReflect.Descriptor instead.
func (*SdkRoleUpdateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{294}
}

func (x *SdkRoleUpdateResponse) GetRole() *SdkRole {
	if x != nil {
		return x.Role
	}
	return nil
}

type FilesystemTrim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FilesystemTrim) Reset() {
	*x = FilesystemTrim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemTrim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemTrim) ProtoMessage() {}

func (x *FilesystemTrim) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemTrim.ProtoReflect.Descriptor instead.
func (*FilesystemTrim) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{295}
}

// SdkFilesystemTrimStartRequest defines a request to start a background filesystem trim operation
type SdkFilesystemTrimStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the volume
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Path where the volume is mounted
	MountPath string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
}

func (x *SdkFilesystemTrimStartRequest) Reset() {
	*x = SdkFilesystemTrimStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkFilesystemTrimStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkFilesystemTrimStartRequest) ProtoMessage() {}

func (x *SdkFilesystemTrimStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkFilesystemTrimStartRequest.ProtoReflect.Descriptor instead.
func (*SdkFilesystemTrimStartRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{296}
}

func (x *SdkFilesystemTrimStartRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkFilesystemTrimStartRequest) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

// SdkFilesystemTrimStartResponse defines the response for a
// SdkFilesystemTrimStartRequest.
type SdkFilesystemTrimStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status code representing the state of the filesystem trim operation
	Status FilesystemTrim_FilesystemTrimStatus `protobuf:"varint,1,opt,name=status,proto3,enum=openstorage.api.FilesystemTrim_FilesystemTrimStatus" json:"status,omitempty"`
	// Text blob containing ASCII text providing details of the operation
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SdkFilesystemTrimStartResponse) Reset() {
	*x = SdkFilesystemTrimStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkFilesystemTrimStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkFilesystemTrimStartResponse) ProtoMessage() {}

func (x *SdkFilesystemTrimStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkFilesystemTrimStartResponse.ProtoReflect.Descriptor instead.
func (*SdkFilesystemTrimStartResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{297}
}

func (x *SdkFilesystemTrimStartResponse) GetStatus() FilesystemTrim_FilesystemTrimStatus {
	if x != nil {
		return x.Status
	}
	return FilesystemTrim_FS_TRIM_UNKNOWN
}

func (x *SdkFilesystemTrimStartResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// SdkFilesystemTrimStatusRequest defines a request to get status of a
// background filesystem trim operation
type SdkFilesystemTrimStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the volume
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Path where the volume is mounted
	MountPath string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
}

func (x *SdkFilesystemTrimStatusRequest) Reset() {
	*x = SdkFilesystemTrimStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkFilesystemTrimStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkFilesystemTrimStatusRequest) ProtoMessage() {}

func (x *SdkFilesystemTrimStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkFilesystemTrimStatusRequest.ProtoReflect.Descriptor instead.
func (*SdkFilesystemTrimStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{298}
}

func (x *SdkFilesystemTrimStatusRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkFilesystemTrimStatusRequest) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

// SdkFilesystemTrimStatusResponse defines the response for a
// SdkFilesystemTrimStatusRequest.
type SdkFilesystemTrimStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status code representing the state of the filesystem trim operation
	Status FilesystemTrim_FilesystemTrimStatus `protobuf:"varint,1,opt,name=status,proto3,enum=openstorage.api.FilesystemTrim_FilesystemTrimStatus" json:"status,omitempty"`
	// Text blob containing ASCII text providing details of the operation
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SdkFilesystemTrimStatusResponse) Reset() {
	*x = SdkFilesystemTrimStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkFilesystemTrimStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkFilesystemTrimStatusResponse) ProtoMessage() {}

func (x *SdkFilesystemTrimStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkFilesystemTrimStatusResponse.ProtoReflect.Descriptor instead.
func (*SdkFilesystemTrimStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{299}
}

func (x *SdkFilesystemTrimStatusResponse) GetStatus() FilesystemTrim_FilesystemTrimStatus {
	if x != nil {
		return x.Status
	}
	return FilesystemTrim_FS_TRIM_UNKNOWN
}

func (x *SdkFilesystemTrimStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// SdkAutoFSTrimStatusRequest defines a request to get status of autofs trim operation
type SdkAutoFSTrimStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkAutoFSTrimStatusRequest) Reset() {
	*x = SdkAutoFSTrimStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAutoFSTrimStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAutoFSTrimStatusRequest) ProtoMessage() {}

func (x *SdkAutoFSTrimStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAutoFSTrimStatusRequest.ProtoReflect.Descriptor instead.
func (*SdkAutoFSTrimStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{300}
}

// SdkAutoFSTrimStatusResponse defines the response for a
// SdkAutoFSTrimStatusRequest.
type SdkAutoFSTrimStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// map of volume id and the state of the filesystem trim operation
	TrimStatus map[string]FilesystemTrim_FilesystemTrimStatus `protobuf:"bytes,1,rep,name=trim_status,json=trimStatus,proto3" json:"trim_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=openstorage.api.FilesystemTrim_FilesystemTrimStatus"`
	// Text blob containing ASCII text providing details of the operation
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SdkAutoFSTrimStatusResponse) Reset() {
	*x = SdkAutoFSTrimStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAutoFSTrimStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAutoFSTrimStatusResponse) ProtoMessage() {}

func (x *SdkAutoFSTrimStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAutoFSTrimStatusResponse.ProtoReflect.Descriptor instead.
func (*SdkAutoFSTrimStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{301}
}

func (x *SdkAutoFSTrimStatusResponse) GetTrimStatus() map[string]FilesystemTrim_FilesystemTrimStatus {
	if x != nil {
		return x.TrimStatus
	}
	return nil
}

func (x *SdkAutoFSTrimStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// SdkAutoFSTrimUsageRequest defines a request to get status of autofs trim operation
type SdkAutoFSTrimUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkAutoFSTrimUsageRequest) Reset() {
	*x = SdkAutoFSTrimUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAutoFSTrimUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAutoFSTrimUsageRequest) ProtoMessage() {}

func (x *SdkAutoFSTrimUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAutoFSTrimUsageRequest.ProtoReflect.Descriptor instead.
func (*SdkAutoFSTrimUsageRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{302}
}

// SdkAutoFSTrimUsageResponse defines the response for a
// SdkAutoFSTrimUsageRequest.
type SdkAutoFSTrimUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// map of fstrim disk usage and volume name
	Usage map[string]*FstrimVolumeUsageInfo `protobuf:"bytes,1,rep,name=usage,proto3" json:"usage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Text blob containing ASCII text providing details of the operation
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SdkAutoFSTrimUsageResponse) Reset() {
	*x = SdkAutoFSTrimUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkAutoFSTrimUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkAutoFSTrimUsageResponse) ProtoMessage() {}

func (x *SdkAutoFSTrimUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkAutoFSTrimUsageResponse.ProtoReflect.Descriptor instead.
func (*SdkAutoFSTrimUsageResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{303}
}

func (x *SdkAutoFSTrimUsageResponse) GetUsage() map[string]*FstrimVolumeUsageInfo {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *SdkAutoFSTrimUsageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// SdkFilesystemTrimStopRequest defines a request to stop a background
// filesystem trim operation
type SdkFilesystemTrimStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the volume
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Path where the volume is mounted
	MountPath string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
}

func (x *SdkFilesystemTrimStopRequest) Reset() {
	*x = SdkFilesystemTrimStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkFilesystemTrimStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkFilesystemTrimStopRequest) ProtoMessage() {}

func (x *SdkFilesystemTrimStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkFilesystemTrimStopRequest.ProtoReflect.Descriptor instead.
func (*SdkFilesystemTrimStopRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{304}
}

func (x *SdkFilesystemTrimStopRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkFilesystemTrimStopRequest) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

// Empty response
type SdkFilesystemTrimStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkFilesystemTrimStopResponse) Reset() {
	*x = SdkFilesystemTrimStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkFilesystemTrimStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkFilesystemTrimStopResponse) ProtoMessage() {}

func (x *SdkFilesystemTrimStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkFilesystemTrimStopResponse.ProtoReflect.Descriptor instead.
func (*SdkFilesystemTrimStopResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{305}
}

type FilesystemCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FilesystemCheck) Reset() {
	*x = FilesystemCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemCheck) ProtoMessage() {}

func (x *FilesystemCheck) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemCheck.ProtoReflect.Descriptor instead.
func (*FilesystemCheck) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{306}
}

// SdkFilesystemCheckStartRequest defines a request to start a background
// filesystem consistency check operation
type SdkFilesystemCheckStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the volume
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Mode of operation
	Mode string `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *SdkFilesystemCheckStartRequest) Reset() {
	*x = SdkFilesystemCheckStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkFilesystemCheckStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkFilesystemCheckStartRequest) ProtoMessage() {}

func (x *SdkFilesystemCheckStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkFilesystemCheckStartRequest.ProtoReflect.Descriptor instead.
func (*SdkFilesystemCheckStartRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{307}
}

func (x *SdkFilesystemCheckStartRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkFilesystemCheckStartRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

// SdkFilesystemCheckStartResponse defines the response for a
// SdkFilesystemCheckStartRequest.
type SdkFilesystemCheckStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status code representing the state of the filesystem check operation
	Status FilesystemCheck_FilesystemCheckStatus `protobuf:"varint,1,opt,name=status,proto3,enum=openstorage.api.FilesystemCheck_FilesystemCheckStatus" json:"status,omitempty"`
	// Text blob containing ASCII text providing details of the operation
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SdkFilesystemCheckStartResponse) Reset() {
	*x = SdkFilesystemCheckStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkFilesystemCheckStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkFilesystemCheckStartResponse) ProtoMessage() {}

func (x *SdkFilesystemCheckStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkFilesystemCheckStartResponse.ProtoReflect.Descriptor instead.
func (*SdkFilesystemCheckStartResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{308}
}

func (x *SdkFilesystemCheckStartResponse) GetStatus() FilesystemCheck_FilesystemCheckStatus {
	if x != nil {
		return x.Status
	}
	return FilesystemCheck_FS_CHECK_UNKNOWN
}

func (x *SdkFilesystemCheckStartResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// SdkFilesystemCheckStatusRequest defines a request to get status of a
// background filesystem check operation
type SdkFilesystemCheckStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the volume
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *SdkFilesystemCheckStatusRequest) Reset() {
	*x = SdkFilesystemCheckStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkFilesystemCheckStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkFilesystemCheckStatusRequest) ProtoMessage() {}

func (x *SdkFilesystemCheckStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkFilesystemCheckStatusRequest.ProtoReflect.Descriptor instead.
func (*SdkFilesystemCheckStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{309}
}

func (x *SdkFilesystemCheckStatusRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

// SdkFilesystemCheckStatusResponse defines the response for a
// SdkFilesystemCheckStatusRequest.
type SdkFilesystemCheckStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status code representing the state of the filesystem check operation
	Status FilesystemCheck_FilesystemCheckStatus `protobuf:"varint,1,opt,name=status,proto3,enum=openstorage.api.FilesystemCheck_FilesystemCheckStatus" json:"status,omitempty"`
	// Status code representing the health of the filesystem after a checkHealth
	// operation
	HealthStatus FilesystemHealthStatus `protobuf:"varint,2,opt,name=health_status,json=healthStatus,proto3,enum=openstorage.api.FilesystemHealthStatus" json:"health_status,omitempty"`
	// Text string representing the mode of filesystem check operation
	Mode string `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	// Text blob containing ASCII text providing details of the operation
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SdkFilesystemCheckStatusResponse) Reset() {
	*x = SdkFilesystemCheckStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkFilesystemCheckStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkFilesystemCheckStatusResponse) ProtoMessage() {}

func (x *SdkFilesystemCheckStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkFilesystemCheckStatusResponse.ProtoReflect.Descriptor instead.
func (*SdkFilesystemCheckStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{310}
}

func (x *SdkFilesystemCheckStatusResponse) GetStatus() FilesystemCheck_FilesystemCheckStatus {
	if x != nil {
		return x.Status
	}
	return FilesystemCheck_FS_CHECK_UNKNOWN
}

func (x *SdkFilesystemCheckStatusResponse) GetHealthStatus() FilesystemHealthStatus {
	if x != nil {
		return x.HealthStatus
	}
	return FilesystemHealthStatus_FS_HEALTH_STATUS_UNKNOWN
}

func (x *SdkFilesystemCheckStatusResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *SdkFilesystemCheckStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// SdkFilesystemCheckStopRequest defines a request to stop a background
// filesystem check operation
type SdkFilesystemCheckStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the volume
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *SdkFilesystemCheckStopRequest) Reset() {
	*x = SdkFilesystemCheckStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkFilesystemCheckStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkFilesystemCheckStopRequest) ProtoMessage() {}

func (x *SdkFilesystemCheckStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkFilesystemCheckStopRequest.ProtoReflect.Descriptor instead.
func (*SdkFilesystemCheckStopRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{311}
}

func (x *SdkFilesystemCheckStopRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

// Empty response
type SdkFilesystemCheckStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkFilesystemCheckStopResponse) Reset() {
	*x = SdkFilesystemCheckStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkFilesystemCheckStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkFilesystemCheckStopResponse) ProtoMessage() {}

func (x *SdkFilesystemCheckStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkFilesystemCheckStopResponse.ProtoReflect.Descriptor instead.
func (*SdkFilesystemCheckStopResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{312}
}

// Empty request
type SdkIdentityCapabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkIdentityCapabilitiesRequest) Reset() {
	*x = SdkIdentityCapabilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkIdentityCapabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkIdentityCapabilitiesRequest) ProtoMessage() {}

func (x *SdkIdentityCapabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkIdentityCapabilitiesRequest.ProtoReflect.Descriptor instead.
func (*SdkIdentityCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{313}
}

// Defines a response containing the capabilities of the cluster
type SdkIdentityCapabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provides all the capabilities supported by the cluster
	Capabilities []*SdkServiceCapability `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *SdkIdentityCapabilitiesResponse) Reset() {
	*x = SdkIdentityCapabilitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkIdentityCapabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkIdentityCapabilitiesResponse) ProtoMessage() {}

func (x *SdkIdentityCapabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkIdentityCapabilitiesResponse.ProtoReflect.Descriptor instead.
func (*SdkIdentityCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{314}
}

func (x *SdkIdentityCapabilitiesResponse) GetCapabilities() []*SdkServiceCapability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// Empty request
type SdkIdentityVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkIdentityVersionRequest) Reset() {
	*x = SdkIdentityVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkIdentityVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkIdentityVersionRequest) ProtoMessage() {}

func (x *SdkIdentityVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkIdentityVersionRequest.ProtoReflect.Descriptor instead.
func (*SdkIdentityVersionRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{315}
}

// Defines a response containing version information
type SdkIdentityVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OpenStorage SDK version used by the server
	SdkVersion *SdkVersion `protobuf:"bytes,1,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	// Version information about the storage system
	Version *StorageVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SdkIdentityVersionResponse) Reset() {
	*x = SdkIdentityVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkIdentityVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkIdentityVersionResponse) ProtoMessage() {}

func (x *SdkIdentityVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkIdentityVersionResponse.ProtoReflect.Descriptor instead.
func (*SdkIdentityVersionResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{316}
}

func (x *SdkIdentityVersionResponse) GetSdkVersion() *SdkVersion {
	if x != nil {
		return x.SdkVersion
	}
	return nil
}

func (x *SdkIdentityVersionResponse) GetVersion() *StorageVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

// Defines a capability of he cluster
type SdkServiceCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use oneof to have only one type of service defined making it
	// future proof to add other types.
	//
	// Types that are assignable to Type:
	//	*SdkServiceCapability_Service
	Type isSdkServiceCapability_Type `protobuf_oneof:"type"`
}

func (x *SdkServiceCapability) Reset() {
	*x = SdkServiceCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkServiceCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkServiceCapability) ProtoMessage() {}

func (x *SdkServiceCapability) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkServiceCapability.ProtoReflect.Descriptor instead.
func (*SdkServiceCapability) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{317}
}

func (m *SdkServiceCapability) GetType() isSdkServiceCapability_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SdkServiceCapability) GetService() *SdkServiceCapability_OpenStorageService {
	if x, ok := x.GetType().(*SdkServiceCapability_Service); ok {
		return x.Service
	}
	return nil
}

type isSdkServiceCapability_Type interface {
	isSdkServiceCapability_Type()
}

type SdkServiceCapability_Service struct {
	// service type supported by this cluster
	Service *SdkServiceCapability_OpenStorageService `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}

func (*SdkServiceCapability_Service) isSdkServiceCapability_Type() {}

// SDK version in Major.Minor.Patch format. The goal of this
// message is to provide clients a method to determine the SDK
// version run by an SDK server.
type SdkVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SDK version major number
	Major int32 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	// SDK version minor number
	Minor int32 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	// SDK version patch number
	Patch int32 `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
	// String representation of the SDK version. Must be
	// in `major.minor.patch` format.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SdkVersion) Reset() {
	*x = SdkVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVersion) ProtoMessage() {}

func (x *SdkVersion) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVersion.ProtoReflect.Descriptor instead.
func (*SdkVersion) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{318}
}

func (x *SdkVersion) GetMajor() int32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *SdkVersion) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *SdkVersion) GetPatch() int32 {
	if x != nil {
		return x.Patch
	}
	return 0
}

func (x *SdkVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Version information about the storage system
type StorageVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OpenStorage driver name
	Driver string `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	// Version of the server
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Extra information provided by the storage system
	Details map[string]string `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StorageVersion) Reset() {
	*x = StorageVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageVersion) ProtoMessage() {}

func (x *StorageVersion) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageVersion.ProtoReflect.Descriptor instead.
func (*StorageVersion) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{319}
}

func (x *StorageVersion) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *StorageVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StorageVersion) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

type CloudMigrate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloudMigrate) Reset() {
	*x = CloudMigrate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudMigrate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudMigrate) ProtoMessage() {}

func (x *CloudMigrate) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudMigrate.ProtoReflect.Descriptor instead.
func (*CloudMigrate) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{320}
}

// Request to start a cloud migration
type CloudMigrateStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of operation to start
	Operation CloudMigrate_OperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=openstorage.api.CloudMigrate_OperationType" json:"operation,omitempty"`
	// ID of the cluster to which volumes are to be migrated
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Depending on the operation type this can be a VolumeID or VolumeGroupID
	TargetId string `protobuf:"bytes,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// (Optional) Unique TaskId assocaiated with this migration. If not provided one will
	// be generated and returned in the response
	TaskId string `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *CloudMigrateStartRequest) Reset() {
	*x = CloudMigrateStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudMigrateStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudMigrateStartRequest) ProtoMessage() {}

func (x *CloudMigrateStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudMigrateStartRequest.ProtoReflect.Descriptor instead.
func (*CloudMigrateStartRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{321}
}

func (x *CloudMigrateStartRequest) GetOperation() CloudMigrate_OperationType {
	if x != nil {
		return x.Operation
	}
	return CloudMigrate_InvalidType
}

func (x *CloudMigrateStartRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CloudMigrateStartRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *CloudMigrateStartRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// Defines a migration request
type SdkCloudMigrateStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the cluster to which volumes are to be migrated
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Unique name assocaiated with this migration.
	// This is a Optional field for idempotency
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Types that are assignable to Opt:
	//	*SdkCloudMigrateStartRequest_Volume
	//	*SdkCloudMigrateStartRequest_VolumeGroup
	//	*SdkCloudMigrateStartRequest_AllVolumes
	Opt isSdkCloudMigrateStartRequest_Opt `protobuf_oneof:"opt"`
}

func (x *SdkCloudMigrateStartRequest) Reset() {
	*x = SdkCloudMigrateStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudMigrateStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudMigrateStartRequest) ProtoMessage() {}

func (x *SdkCloudMigrateStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudMigrateStartRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudMigrateStartRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{322}
}

func (x *SdkCloudMigrateStartRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *SdkCloudMigrateStartRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (m *SdkCloudMigrateStartRequest) GetOpt() isSdkCloudMigrateStartRequest_Opt {
	if m != nil {
		return m.Opt
	}
	return nil
}

func (x *SdkCloudMigrateStartRequest) GetVolume() *SdkCloudMigrateStartRequest_MigrateVolume {
	if x, ok := x.GetOpt().(*SdkCloudMigrateStartRequest_Volume); ok {
		return x.Volume
	}
	return nil
}

func (x *SdkCloudMigrateStartRequest) GetVolumeGroup() *SdkCloudMigrateStartRequest_MigrateVolumeGroup {
	if x, ok := x.GetOpt().(*SdkCloudMigrateStartRequest_VolumeGroup); ok {
		return x.VolumeGroup
	}
	return nil
}

func (x *SdkCloudMigrateStartRequest) GetAllVolumes() *SdkCloudMigrateStartRequest_MigrateAllVolumes {
	if x, ok := x.GetOpt().(*SdkCloudMigrateStartRequest_AllVolumes); ok {
		return x.AllVolumes
	}
	return nil
}

type isSdkCloudMigrateStartRequest_Opt interface {
	isSdkCloudMigrateStartRequest_Opt()
}

type SdkCloudMigrateStartRequest_Volume struct {
	// Request to migrate a volume
	Volume *SdkCloudMigrateStartRequest_MigrateVolume `protobuf:"bytes,200,opt,name=volume,proto3,oneof"`
}

type SdkCloudMigrateStartRequest_VolumeGroup struct {
	// Request to migrate a volume group
	VolumeGroup *SdkCloudMigrateStartRequest_MigrateVolumeGroup `protobuf:"bytes,201,opt,name=volume_group,json=volumeGroup,proto3,oneof"`
}

type SdkCloudMigrateStartRequest_AllVolumes struct {
	// Request to migrate all volumes
	AllVolumes *SdkCloudMigrateStartRequest_MigrateAllVolumes `protobuf:"bytes,202,opt,name=all_volumes,json=allVolumes,proto3,oneof"`
}

func (*SdkCloudMigrateStartRequest_Volume) isSdkCloudMigrateStartRequest_Opt() {}

func (*SdkCloudMigrateStartRequest_VolumeGroup) isSdkCloudMigrateStartRequest_Opt() {}

func (*SdkCloudMigrateStartRequest_AllVolumes) isSdkCloudMigrateStartRequest_Opt() {}

// Response to start a cloud migration
type CloudMigrateStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskId assocaiated with the migration that was started
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *CloudMigrateStartResponse) Reset() {
	*x = CloudMigrateStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudMigrateStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudMigrateStartResponse) ProtoMessage() {}

func (x *CloudMigrateStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudMigrateStartResponse.ProtoReflect.Descriptor instead.
func (*CloudMigrateStartResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{323}
}

func (x *CloudMigrateStartResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// Defines a response for the migration that was started
type SdkCloudMigrateStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result assocaiated with the migration that was started
	Result *CloudMigrateStartResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SdkCloudMigrateStartResponse) Reset() {
	*x = SdkCloudMigrateStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudMigrateStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudMigrateStartResponse) ProtoMessage() {}

func (x *SdkCloudMigrateStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudMigrateStartResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudMigrateStartResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{324}
}

func (x *SdkCloudMigrateStartResponse) GetResult() *CloudMigrateStartResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

// Request to stop a cloud migration
type CloudMigrateCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the task to cancel
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *CloudMigrateCancelRequest) Reset() {
	*x = CloudMigrateCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudMigrateCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudMigrateCancelRequest) ProtoMessage() {}

func (x *CloudMigrateCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudMigrateCancelRequest.ProtoReflect.Descriptor instead.
func (*CloudMigrateCancelRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{325}
}

func (x *CloudMigrateCancelRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// Defines a request to stop a cloud migration
type SdkCloudMigrateCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request containing the task id to be cancelled
	Request *CloudMigrateCancelRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *SdkCloudMigrateCancelRequest) Reset() {
	*x = SdkCloudMigrateCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudMigrateCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudMigrateCancelRequest) ProtoMessage() {}

func (x *SdkCloudMigrateCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudMigrateCancelRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudMigrateCancelRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{326}
}

func (x *SdkCloudMigrateCancelRequest) GetRequest() *CloudMigrateCancelRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

// Empty Response
type SdkCloudMigrateCancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkCloudMigrateCancelResponse) Reset() {
	*x = SdkCloudMigrateCancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudMigrateCancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudMigrateCancelResponse) ProtoMessage() {}

func (x *SdkCloudMigrateCancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudMigrateCancelResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudMigrateCancelResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{327}
}

type CloudMigrateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task id associated with this migration
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// ID of the cluster where the volume is being migrated
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the volume on the local cluster
	LocalVolumeId string `protobuf:"bytes,3,opt,name=local_volume_id,json=localVolumeId,proto3" json:"local_volume_id,omitempty"`
	// Name of the volume on the local cluster
	LocalVolumeName string `protobuf:"bytes,4,opt,name=local_volume_name,json=localVolumeName,proto3" json:"local_volume_name,omitempty"`
	// ID of the volume on the remote cluster
	RemoteVolumeId string `protobuf:"bytes,5,opt,name=remote_volume_id,json=remoteVolumeId,proto3" json:"remote_volume_id,omitempty"`
	// ID of the cloudbackup used for the migration
	CloudbackupId string `protobuf:"bytes,6,opt,name=cloudbackup_id,json=cloudbackupId,proto3" json:"cloudbackup_id,omitempty"`
	// Current stage of the volume migration
	CurrentStage CloudMigrate_Stage `protobuf:"varint,7,opt,name=current_stage,json=currentStage,proto3,enum=openstorage.api.CloudMigrate_Stage" json:"current_stage,omitempty"`
	// Status of the current stage
	Status CloudMigrate_Status `protobuf:"varint,8,opt,name=status,proto3,enum=openstorage.api.CloudMigrate_Status" json:"status,omitempty"`
	// Last time the status was updated
	LastUpdate *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	// Contains the reason for the migration error
	ErrorReason string `protobuf:"bytes,10,opt,name=error_reason,json=errorReason,proto3" json:"error_reason,omitempty"`
	// StartTime indicates Op's start time
	StartTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// CompletedTime indicates Op's completed time
	CompletedTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=completed_time,json=completedTime,proto3" json:"completed_time,omitempty"`
	// BytesTotal is the number of bytes being transferred
	BytesTotal uint64 `protobuf:"varint,13,opt,name=bytes_total,json=bytesTotal,proto3" json:"bytes_total,omitempty"`
	// BytesDone is the number of bytes already transferred
	BytesDone uint64 `protobuf:"varint,14,opt,name=bytes_done,json=bytesDone,proto3" json:"bytes_done,omitempty"`
	// ETASeconds the time duration in seconds for cloud migration completion
	EtaSeconds int64 `protobuf:"varint,15,opt,name=eta_seconds,json=etaSeconds,proto3" json:"eta_seconds,omitempty"`
}

func (x *CloudMigrateInfo) Reset() {
	*x = CloudMigrateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudMigrateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudMigrateInfo) ProtoMessage() {}

func (x *CloudMigrateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudMigrateInfo.ProtoReflect.Descriptor instead.
func (*CloudMigrateInfo) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{328}
}

func (x *CloudMigrateInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CloudMigrateInfo) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CloudMigrateInfo) GetLocalVolumeId() string {
	if x != nil {
		return x.LocalVolumeId
	}
	return ""
}

func (x *CloudMigrateInfo) GetLocalVolumeName() string {
	if x != nil {
		return x.LocalVolumeName
	}
	return ""
}

func (x *CloudMigrateInfo) GetRemoteVolumeId() string {
	if x != nil {
		return x.RemoteVolumeId
	}
	return ""
}

func (x *CloudMigrateInfo) GetCloudbackupId() string {
	if x != nil {
		return x.CloudbackupId
	}
	return ""
}

func (x *CloudMigrateInfo) GetCurrentStage() CloudMigrate_Stage {
	if x != nil {
		return x.CurrentStage
	}
	return CloudMigrate_InvalidStage
}

func (x *CloudMigrateInfo) GetStatus() CloudMigrate_Status {
	if x != nil {
		return x.Status
	}
	return CloudMigrate_InvalidStatus
}

func (x *CloudMigrateInfo) GetLastUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *CloudMigrateInfo) GetErrorReason() string {
	if x != nil {
		return x.ErrorReason
	}
	return ""
}

func (x *CloudMigrateInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CloudMigrateInfo) GetCompletedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedTime
	}
	return nil
}

func (x *CloudMigrateInfo) GetBytesTotal() uint64 {
	if x != nil {
		return x.BytesTotal
	}
	return 0
}

func (x *CloudMigrateInfo) GetBytesDone() uint64 {
	if x != nil {
		return x.BytesDone
	}
	return 0
}

func (x *CloudMigrateInfo) GetEtaSeconds() int64 {
	if x != nil {
		return x.EtaSeconds
	}
	return 0
}

type CloudMigrateInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CloudMigrateInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CloudMigrateInfoList) Reset() {
	*x = CloudMigrateInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudMigrateInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudMigrateInfoList) ProtoMessage() {}

func (x *CloudMigrateInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudMigrateInfoList.ProtoReflect.Descriptor instead.
func (*CloudMigrateInfoList) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{329}
}

func (x *CloudMigrateInfoList) GetList() []*CloudMigrateInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// Request for cloud migration operation status
type SdkCloudMigrateStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request contains the task id and cluster id for which status should be
	// returned
	Request *CloudMigrateStatusRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *SdkCloudMigrateStatusRequest) Reset() {
	*x = SdkCloudMigrateStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudMigrateStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudMigrateStatusRequest) ProtoMessage() {}

func (x *SdkCloudMigrateStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudMigrateStatusRequest.ProtoReflect.Descriptor instead.
func (*SdkCloudMigrateStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{330}
}

func (x *SdkCloudMigrateStatusRequest) GetRequest() *CloudMigrateStatusRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

// Request for cloud migration operation status
type CloudMigrateStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task id for which to return status
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// ID of the cluster for which to return migration statuses
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *CloudMigrateStatusRequest) Reset() {
	*x = CloudMigrateStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudMigrateStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudMigrateStatusRequest) ProtoMessage() {}

func (x *CloudMigrateStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudMigrateStatusRequest.ProtoReflect.Descriptor instead.
func (*CloudMigrateStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{331}
}

func (x *CloudMigrateStatusRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CloudMigrateStatusRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// Response with a status of the cloud migration operations
type CloudMigrateStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of cluster id to the status of volumes being migrated
	Info map[string]*CloudMigrateInfoList `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CloudMigrateStatusResponse) Reset() {
	*x = CloudMigrateStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudMigrateStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudMigrateStatusResponse) ProtoMessage() {}

func (x *CloudMigrateStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudMigrateStatusResponse.ProtoReflect.Descriptor instead.
func (*CloudMigrateStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{332}
}

func (x *CloudMigrateStatusResponse) GetInfo() map[string]*CloudMigrateInfoList {
	if x != nil {
		return x.Info
	}
	return nil
}

// Defines a response for the status request
type SdkCloudMigrateStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of all migration requests
	Result *CloudMigrateStatusResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SdkCloudMigrateStatusResponse) Reset() {
	*x = SdkCloudMigrateStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudMigrateStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudMigrateStatusResponse) ProtoMessage() {}

func (x *SdkCloudMigrateStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudMigrateStatusResponse.ProtoReflect.Descriptor instead.
func (*SdkCloudMigrateStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{333}
}

func (x *SdkCloudMigrateStatusResponse) GetResult() *CloudMigrateStatusResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

type ClusterPairMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClusterPairMode) Reset() {
	*x = ClusterPairMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterPairMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterPairMode) ProtoMessage() {}

func (x *ClusterPairMode) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterPairMode.ProtoReflect.Descriptor instead.
func (*ClusterPairMode) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{334}
}

// Used to send a request to create a cluster pair
type ClusterPairCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP of the remote cluster
	RemoteClusterIp string `protobuf:"bytes,1,opt,name=remote_cluster_ip,json=remoteClusterIp,proto3" json:"remote_cluster_ip,omitempty"`
	// Port for the remote cluster
	RemoteClusterPort uint32 `protobuf:"varint,2,opt,name=remote_cluster_port,json=remoteClusterPort,proto3" json:"remote_cluster_port,omitempty"`
	// Token used to authenticate with the remote cluster
	RemoteClusterToken string `protobuf:"bytes,3,opt,name=remote_cluster_token,json=remoteClusterToken,proto3" json:"remote_cluster_token,omitempty"`
	// Set the new pair as the default
	SetDefault bool `protobuf:"varint,4,opt,name=set_default,json=setDefault,proto3" json:"set_default,omitempty"`
	// The mode to use for the cluster pair
	Mode ClusterPairMode_Mode `protobuf:"varint,5,opt,name=mode,proto3,enum=openstorage.api.ClusterPairMode_Mode" json:"mode,omitempty"`
	// Use for the cluster pairing, if given
	// credential id will be used in ClusterPairCreate service
	CredentialId string `protobuf:"bytes,6,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (x *ClusterPairCreateRequest) Reset() {
	*x = ClusterPairCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterPairCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterPairCreateRequest) ProtoMessage() {}

func (x *ClusterPairCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterPairCreateRequest.ProtoReflect.Descriptor instead.
func (*ClusterPairCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{335}
}

func (x *ClusterPairCreateRequest) GetRemoteClusterIp() string {
	if x != nil {
		return x.RemoteClusterIp
	}
	return ""
}

func (x *ClusterPairCreateRequest) GetRemoteClusterPort() uint32 {
	if x != nil {
		return x.RemoteClusterPort
	}
	return 0
}

func (x *ClusterPairCreateRequest) GetRemoteClusterToken() string {
	if x != nil {
		return x.RemoteClusterToken
	}
	return ""
}

func (x *ClusterPairCreateRequest) GetSetDefault() bool {
	if x != nil {
		return x.SetDefault
	}
	return false
}

func (x *ClusterPairCreateRequest) GetMode() ClusterPairMode_Mode {
	if x != nil {
		return x.Mode
	}
	return ClusterPairMode_Default
}

func (x *ClusterPairCreateRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

// Response for a pair request
type ClusterPairCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the remote cluster
	RemoteClusterId string `protobuf:"bytes,1,opt,name=remote_cluster_id,json=remoteClusterId,proto3" json:"remote_cluster_id,omitempty"`
	// Name of the remote cluster
	RemoteClusterName string `protobuf:"bytes,2,opt,name=remote_cluster_name,json=remoteClusterName,proto3" json:"remote_cluster_name,omitempty"`
}

func (x *ClusterPairCreateResponse) Reset() {
	*x = ClusterPairCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterPairCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterPairCreateResponse) ProtoMessage() {}

func (x *ClusterPairCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterPairCreateResponse.ProtoReflect.Descriptor instead.
func (*ClusterPairCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{336}
}

func (x *ClusterPairCreateResponse) GetRemoteClusterId() string {
	if x != nil {
		return x.RemoteClusterId
	}
	return ""
}

func (x *ClusterPairCreateResponse) GetRemoteClusterName() string {
	if x != nil {
		return x.RemoteClusterName
	}
	return ""
}

// Defines a request for creating a cluster pair
type SdkClusterPairCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *ClusterPairCreateRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *SdkClusterPairCreateRequest) Reset() {
	*x = SdkClusterPairCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterPairCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterPairCreateRequest) ProtoMessage() {}

func (x *SdkClusterPairCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterPairCreateRequest.ProtoReflect.Descriptor instead.
func (*SdkClusterPairCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{337}
}

func (x *SdkClusterPairCreateRequest) GetRequest() *ClusterPairCreateRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

// Defines a result of the cluster pair
type SdkClusterPairCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the information about cluster pair
	Result *ClusterPairCreateResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SdkClusterPairCreateResponse) Reset() {
	*x = SdkClusterPairCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterPairCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterPairCreateResponse) ProtoMessage() {}

func (x *SdkClusterPairCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterPairCreateResponse.ProtoReflect.Descriptor instead.
func (*SdkClusterPairCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{338}
}

func (x *SdkClusterPairCreateResponse) GetResult() *ClusterPairCreateResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

// Used to process a pair request from a remote cluster
type ClusterPairProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the cluster requesting the pairing
	SourceClusterId string `protobuf:"bytes,1,opt,name=source_cluster_id,json=sourceClusterId,proto3" json:"source_cluster_id,omitempty"`
	// Token used to authenticate with the remote cluster
	RemoteClusterToken string `protobuf:"bytes,2,opt,name=remote_cluster_token,json=remoteClusterToken,proto3" json:"remote_cluster_token,omitempty"`
	// The mode to use for the cluster pair
	Mode ClusterPairMode_Mode `protobuf:"varint,3,opt,name=mode,proto3,enum=openstorage.api.ClusterPairMode_Mode" json:"mode,omitempty"`
	// Use for the cluster pairing, if given
	// credential id will be used in ClusterPairCreate service
	CredentialId string `protobuf:"bytes,4,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (x *ClusterPairProcessRequest) Reset() {
	*x = ClusterPairProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterPairProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterPairProcessRequest) ProtoMessage() {}

func (x *ClusterPairProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterPairProcessRequest.ProtoReflect.Descriptor instead.
func (*ClusterPairProcessRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{339}
}

func (x *ClusterPairProcessRequest) GetSourceClusterId() string {
	if x != nil {
		return x.SourceClusterId
	}
	return ""
}

func (x *ClusterPairProcessRequest) GetRemoteClusterToken() string {
	if x != nil {
		return x.RemoteClusterToken
	}
	return ""
}

func (x *ClusterPairProcessRequest) GetMode() ClusterPairMode_Mode {
	if x != nil {
		return x.Mode
	}
	return ClusterPairMode_Default
}

func (x *ClusterPairProcessRequest) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

// Response after a pairing has been processed
type ClusterPairProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the cluster which processed the pair request
	RemoteClusterId string `protobuf:"bytes,1,opt,name=remote_cluster_id,json=remoteClusterId,proto3" json:"remote_cluster_id,omitempty"`
	// Name of the cluster which processed the pair request
	RemoteClusterName string `protobuf:"bytes,2,opt,name=remote_cluster_name,json=remoteClusterName,proto3" json:"remote_cluster_name,omitempty"`
	// List of endpoints that can be used to communicate with the cluster
	RemoteClusterEndpoints []string `protobuf:"bytes,3,rep,name=remote_cluster_endpoints,json=remoteClusterEndpoints,proto3" json:"remote_cluster_endpoints,omitempty"`
	// Key/value pair of options returned on successful pairing.
	// Opaque to openstorage and interpreted by the drivers
	Options map[string]string `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClusterPairProcessResponse) Reset() {
	*x = ClusterPairProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterPairProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterPairProcessResponse) ProtoMessage() {}

func (x *ClusterPairProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterPairProcessResponse.ProtoReflect.Descriptor instead.
func (*ClusterPairProcessResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{340}
}

func (x *ClusterPairProcessResponse) GetRemoteClusterId() string {
	if x != nil {
		return x.RemoteClusterId
	}
	return ""
}

func (x *ClusterPairProcessResponse) GetRemoteClusterName() string {
	if x != nil {
		return x.RemoteClusterName
	}
	return ""
}

func (x *ClusterPairProcessResponse) GetRemoteClusterEndpoints() []string {
	if x != nil {
		return x.RemoteClusterEndpoints
	}
	return nil
}

func (x *ClusterPairProcessResponse) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

// Defines a delete request for a cluster pair
type SdkClusterPairDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the cluster pair to be deleted
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *SdkClusterPairDeleteRequest) Reset() {
	*x = SdkClusterPairDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterPairDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterPairDeleteRequest) ProtoMessage() {}

func (x *SdkClusterPairDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterPairDeleteRequest.ProtoReflect.Descriptor instead.
func (*SdkClusterPairDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{341}
}

func (x *SdkClusterPairDeleteRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// Empty response
type SdkClusterPairDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkClusterPairDeleteResponse) Reset() {
	*x = SdkClusterPairDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterPairDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterPairDeleteResponse) ProtoMessage() {}

func (x *SdkClusterPairDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterPairDeleteResponse.ProtoReflect.Descriptor instead.
func (*SdkClusterPairDeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{342}
}

// Response to get the cluster token
type ClusterPairTokenGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token used to authenticate clusters
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ClusterPairTokenGetResponse) Reset() {
	*x = ClusterPairTokenGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterPairTokenGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterPairTokenGetResponse) ProtoMessage() {}

func (x *ClusterPairTokenGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterPairTokenGetResponse.ProtoReflect.Descriptor instead.
func (*ClusterPairTokenGetResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{343}
}

func (x *ClusterPairTokenGetResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Empty request
type SdkClusterPairGetTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkClusterPairGetTokenRequest) Reset() {
	*x = SdkClusterPairGetTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterPairGetTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterPairGetTokenRequest) ProtoMessage() {}

func (x *SdkClusterPairGetTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterPairGetTokenRequest.ProtoReflect.Descriptor instead.
func (*SdkClusterPairGetTokenRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{344}
}

// Defines a response for the token request
type SdkClusterPairGetTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains authentication token for the cluster
	Result *ClusterPairTokenGetResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SdkClusterPairGetTokenResponse) Reset() {
	*x = SdkClusterPairGetTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterPairGetTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterPairGetTokenResponse) ProtoMessage() {}

func (x *SdkClusterPairGetTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterPairGetTokenResponse.ProtoReflect.Descriptor instead.
func (*SdkClusterPairGetTokenResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{345}
}

func (x *SdkClusterPairGetTokenResponse) GetResult() *ClusterPairTokenGetResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

// Empty request
type SdkClusterPairResetTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkClusterPairResetTokenRequest) Reset() {
	*x = SdkClusterPairResetTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterPairResetTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterPairResetTokenRequest) ProtoMessage() {}

func (x *SdkClusterPairResetTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterPairResetTokenRequest.ProtoReflect.Descriptor instead.
func (*SdkClusterPairResetTokenRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{346}
}

// Defines a response for the token request
type SdkClusterPairResetTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains authentication token for the cluster
	Result *ClusterPairTokenGetResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SdkClusterPairResetTokenResponse) Reset() {
	*x = SdkClusterPairResetTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterPairResetTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterPairResetTokenResponse) ProtoMessage() {}

func (x *SdkClusterPairResetTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterPairResetTokenResponse.ProtoReflect.Descriptor instead.
func (*SdkClusterPairResetTokenResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{347}
}

func (x *SdkClusterPairResetTokenResponse) GetResult() *ClusterPairTokenGetResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

// Information about a cluster pair
type ClusterPairInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the cluster
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the cluster
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The endpoint used for creating the pair
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Current endpoints of the cluster
	CurrentEndpoints []string `protobuf:"bytes,4,rep,name=current_endpoints,json=currentEndpoints,proto3" json:"current_endpoints,omitempty"`
	// Flag used to determine if communication is over a secure channel
	Secure bool `protobuf:"varint,5,opt,name=secure,proto3" json:"secure,omitempty"`
	// Token associated with cluster
	Token string `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	// Key/value pair of options associated with the cluster
	// Opaque to openstorage and interpreted by the drivers
	Options map[string]string `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Mode for the cluster pair
	Mode ClusterPairMode_Mode `protobuf:"varint,8,opt,name=mode,proto3,enum=openstorage.api.ClusterPairMode_Mode" json:"mode,omitempty"`
}

func (x *ClusterPairInfo) Reset() {
	*x = ClusterPairInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterPairInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterPairInfo) ProtoMessage() {}

func (x *ClusterPairInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterPairInfo.ProtoReflect.Descriptor instead.
func (*ClusterPairInfo) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{348}
}

func (x *ClusterPairInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClusterPairInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterPairInfo) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *ClusterPairInfo) GetCurrentEndpoints() []string {
	if x != nil {
		return x.CurrentEndpoints
	}
	return nil
}

func (x *ClusterPairInfo) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

func (x *ClusterPairInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ClusterPairInfo) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ClusterPairInfo) GetMode() ClusterPairMode_Mode {
	if x != nil {
		return x.Mode
	}
	return ClusterPairMode_Default
}

// Defines a cluster pair inspect request
type SdkClusterPairInspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the cluster, if empty gets the default pair
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SdkClusterPairInspectRequest) Reset() {
	*x = SdkClusterPairInspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterPairInspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterPairInspectRequest) ProtoMessage() {}

func (x *SdkClusterPairInspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterPairInspectRequest.ProtoReflect.Descriptor instead.
func (*SdkClusterPairInspectRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{349}
}

func (x *SdkClusterPairInspectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response to get a cluster pair
type ClusterPairGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Info about the cluster pair
	PairInfo *ClusterPairInfo `protobuf:"bytes,1,opt,name=pair_info,json=pairInfo,proto3" json:"pair_info,omitempty"`
}

func (x *ClusterPairGetResponse) Reset() {
	*x = ClusterPairGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterPairGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterPairGetResponse) ProtoMessage() {}

func (x *ClusterPairGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterPairGetResponse.ProtoReflect.Descriptor instead.
func (*ClusterPairGetResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{350}
}

func (x *ClusterPairGetResponse) GetPairInfo() *ClusterPairInfo {
	if x != nil {
		return x.PairInfo
	}
	return nil
}

// Defines a cluster pair inspect response
type SdkClusterPairInspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about cluster pair
	Result *ClusterPairGetResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SdkClusterPairInspectResponse) Reset() {
	*x = SdkClusterPairInspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterPairInspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterPairInspectResponse) ProtoMessage() {}

func (x *SdkClusterPairInspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterPairInspectResponse.ProtoReflect.Descriptor instead.
func (*SdkClusterPairInspectResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{351}
}

func (x *SdkClusterPairInspectResponse) GetResult() *ClusterPairGetResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

// Empty Request
type SdkClusterPairEnumerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkClusterPairEnumerateRequest) Reset() {
	*x = SdkClusterPairEnumerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterPairEnumerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterPairEnumerateRequest) ProtoMessage() {}

func (x *SdkClusterPairEnumerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterPairEnumerateRequest.ProtoReflect.Descriptor instead.
func (*SdkClusterPairEnumerateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{352}
}

// Response to enumerate all the cluster pairs
type ClusterPairsEnumerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the default cluster pair
	DefaultId string `protobuf:"bytes,1,opt,name=default_id,json=defaultId,proto3" json:"default_id,omitempty"`
	// Pairs Info about the cluster pairs
	Pairs map[string]*ClusterPairInfo `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClusterPairsEnumerateResponse) Reset() {
	*x = ClusterPairsEnumerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterPairsEnumerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterPairsEnumerateResponse) ProtoMessage() {}

func (x *ClusterPairsEnumerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterPairsEnumerateResponse.ProtoReflect.Descriptor instead.
func (*ClusterPairsEnumerateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{353}
}

func (x *ClusterPairsEnumerateResponse) GetDefaultId() string {
	if x != nil {
		return x.DefaultId
	}
	return ""
}

func (x *ClusterPairsEnumerateResponse) GetPairs() map[string]*ClusterPairInfo {
	if x != nil {
		return x.Pairs
	}
	return nil
}

// Defines a list of cluster pair
type SdkClusterPairEnumerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the cluster pairs
	Result *ClusterPairsEnumerateResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SdkClusterPairEnumerateResponse) Reset() {
	*x = SdkClusterPairEnumerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkClusterPairEnumerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkClusterPairEnumerateResponse) ProtoMessage() {}

func (x *SdkClusterPairEnumerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkClusterPairEnumerateResponse.ProtoReflect.Descriptor instead.
func (*SdkClusterPairEnumerateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{354}
}

func (x *SdkClusterPairEnumerateResponse) GetResult() *ClusterPairsEnumerateResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

type Catalog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the Directory/File
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Full Path of the Directory/File
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Type Directory or File
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// File or Directory Size
	Size uint64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// Last Modified
	LastModified *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=LastModified,proto3" json:"LastModified,omitempty"`
	// Children
	Children []*Catalog `protobuf:"bytes,6,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Catalog) Reset() {
	*x = Catalog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Catalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Catalog) ProtoMessage() {}

func (x *Catalog) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Catalog.ProtoReflect.Descriptor instead.
func (*Catalog) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{355}
}

func (x *Catalog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Catalog) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Catalog) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Catalog) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Catalog) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Catalog) GetChildren() []*Catalog {
	if x != nil {
		return x.Children
	}
	return nil
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Directory count
	Directories int64 `protobuf:"varint,2,opt,name=directories,proto3" json:"directories,omitempty"`
	// File count
	Files int64 `protobuf:"varint,3,opt,name=files,proto3" json:"files,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{356}
}

func (x *Report) GetDirectories() int64 {
	if x != nil {
		return x.Directories
	}
	return 0
}

func (x *Report) GetFiles() int64 {
	if x != nil {
		return x.Files
	}
	return 0
}

type CatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Root Catalog
	Root *Catalog `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// Report of total directories and files count
	Report *Report `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *CatalogResponse) Reset() {
	*x = CatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatalogResponse) ProtoMessage() {}

func (x *CatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatalogResponse.ProtoReflect.Descriptor instead.
func (*CatalogResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{357}
}

func (x *CatalogResponse) GetRoot() *Catalog {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *CatalogResponse) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

// Locate response would be used to return a set of mounts
// and/or Container IDs and their mount paths
type LocateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of mounts
	// <host>: /var/lib/osd/<volumemount>
	Mounts map[string]string `protobuf:"bytes,1,rep,name=mounts,proto3" json:"mounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Map of docker id's and their mounts
	// <containerid>: /var/www
	Dockerids map[string]string `protobuf:"bytes,2,rep,name=dockerids,proto3" json:"dockerids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LocateResponse) Reset() {
	*x = LocateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateResponse) ProtoMessage() {}

func (x *LocateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateResponse.ProtoReflect.Descriptor instead.
func (*LocateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{358}
}

func (x *LocateResponse) GetMounts() map[string]string {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *LocateResponse) GetDockerids() map[string]string {
	if x != nil {
		return x.Dockerids
	}
	return nil
}

// VolumePlacementStrategy defines a strategy for placing volumes in the cluster which will be a series of rules
// All the rules specified will be applied for volume placement.
// Rules that have enforcement as "required" are strictly enforced while "preferred" are best effort.
// In situations, where 2 or more rules conflict, the weight of the rules will dictate which wins.
type VolumePlacementStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ReplicaAffinity defines affinity rules between replicas within a volume
	ReplicaAffinity []*ReplicaPlacementSpec `protobuf:"bytes,1,rep,name=replica_affinity,json=replicaAffinity,proto3" json:"replica_affinity,omitempty"`
	// ReplicaAntiAffinity defines anti-affinity rules between replicas within a volume
	ReplicaAntiAffinity []*ReplicaPlacementSpec `protobuf:"bytes,2,rep,name=replica_anti_affinity,json=replicaAntiAffinity,proto3" json:"replica_anti_affinity,omitempty"`
	// VolumeAffinity defines affinity rules between volumes
	VolumeAffinity []*VolumePlacementSpec `protobuf:"bytes,3,rep,name=volume_affinity,json=volumeAffinity,proto3" json:"volume_affinity,omitempty"`
	// VolumeAntiAffinity defines anti-affinity rules between volumes
	VolumeAntiAffinity []*VolumePlacementSpec `protobuf:"bytes,4,rep,name=volume_anti_affinity,json=volumeAntiAffinity,proto3" json:"volume_anti_affinity,omitempty"`
}

func (x *VolumePlacementStrategy) Reset() {
	*x = VolumePlacementStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumePlacementStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumePlacementStrategy) ProtoMessage() {}

func (x *VolumePlacementStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumePlacementStrategy.ProtoReflect.Descriptor instead.
func (*VolumePlacementStrategy) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{359}
}

func (x *VolumePlacementStrategy) GetReplicaAffinity() []*ReplicaPlacementSpec {
	if x != nil {
		return x.ReplicaAffinity
	}
	return nil
}

func (x *VolumePlacementStrategy) GetReplicaAntiAffinity() []*ReplicaPlacementSpec {
	if x != nil {
		return x.ReplicaAntiAffinity
	}
	return nil
}

func (x *VolumePlacementStrategy) GetVolumeAffinity() []*VolumePlacementSpec {
	if x != nil {
		return x.VolumeAffinity
	}
	return nil
}

func (x *VolumePlacementStrategy) GetVolumeAntiAffinity() []*VolumePlacementSpec {
	if x != nil {
		return x.VolumeAntiAffinity
	}
	return nil
}

type ReplicaPlacementSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Weight defines the weight of the rule which allows to break the tie with other matching rules. A rule with
	// higher weight wins over a rule with lower weight.
	// (optional)
	Weight int64 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	// Enforcement specifies the rule enforcement policy. Can take values: required or preferred.
	// (optional)
	Enforcement EnforcementType `protobuf:"varint,2,opt,name=enforcement,proto3,enum=openstorage.api.EnforcementType" json:"enforcement,omitempty"`
	// AffectedReplicas defines the number of volume replicas affected by this rule. If not provided,
	// rule would affect all replicas
	// (optional)
	AffectedReplicas int32 `protobuf:"varint,3,opt,name=affected_replicas,json=affectedReplicas,proto3" json:"affected_replicas,omitempty"`
	// TopologyKey key for the matching all segments of the cluster topology with the same key
	// e.g If the key is failure-domain.beta.kubernetes.io/zone, this should match all nodes with
	// the same value for this key (i.e in the same zone)
	TopologyKey string `protobuf:"bytes,4,opt,name=topology_key,json=topologyKey,proto3" json:"topology_key,omitempty"`
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []*LabelSelectorRequirement `protobuf:"bytes,5,rep,name=match_expressions,json=matchExpressions,proto3" json:"match_expressions,omitempty"`
}

func (x *ReplicaPlacementSpec) Reset() {
	*x = ReplicaPlacementSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaPlacementSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaPlacementSpec) ProtoMessage() {}

func (x *ReplicaPlacementSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaPlacementSpec.ProtoReflect.Descriptor instead.
func (*ReplicaPlacementSpec) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{360}
}

func (x *ReplicaPlacementSpec) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ReplicaPlacementSpec) GetEnforcement() EnforcementType {
	if x != nil {
		return x.Enforcement
	}
	return EnforcementType_required
}

func (x *ReplicaPlacementSpec) GetAffectedReplicas() int32 {
	if x != nil {
		return x.AffectedReplicas
	}
	return 0
}

func (x *ReplicaPlacementSpec) GetTopologyKey() string {
	if x != nil {
		return x.TopologyKey
	}
	return ""
}

func (x *ReplicaPlacementSpec) GetMatchExpressions() []*LabelSelectorRequirement {
	if x != nil {
		return x.MatchExpressions
	}
	return nil
}

type VolumePlacementSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Weight defines the weight of the rule which allows to break the tie with other matching rules. A rule with
	// higher weight wins over a rule with lower weight.
	// (optional)
	Weight int64 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	// Enforcement specifies the rule enforcement policy. Can take values: required or preferred.
	// (optional)
	Enforcement EnforcementType `protobuf:"varint,2,opt,name=enforcement,proto3,enum=openstorage.api.EnforcementType" json:"enforcement,omitempty"`
	// TopologyKey key for the matching all segments of the cluster topology with the same key
	// e.g If the key is failure-domain.beta.kubernetes.io/zone, this should match all nodes with
	// the same value for this key (i.e in the same zone)
	TopologyKey string `protobuf:"bytes,3,opt,name=topology_key,json=topologyKey,proto3" json:"topology_key,omitempty"`
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []*LabelSelectorRequirement `protobuf:"bytes,4,rep,name=match_expressions,json=matchExpressions,proto3" json:"match_expressions,omitempty"`
}

func (x *VolumePlacementSpec) Reset() {
	*x = VolumePlacementSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumePlacementSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumePlacementSpec) ProtoMessage() {}

func (x *VolumePlacementSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumePlacementSpec.ProtoReflect.Descriptor instead.
func (*VolumePlacementSpec) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{361}
}

func (x *VolumePlacementSpec) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *VolumePlacementSpec) GetEnforcement() EnforcementType {
	if x != nil {
		return x.Enforcement
	}
	return EnforcementType_required
}

func (x *VolumePlacementSpec) GetTopologyKey() string {
	if x != nil {
		return x.TopologyKey
	}
	return ""
}

func (x *VolumePlacementSpec) GetMatchExpressions() []*LabelSelectorRequirement {
	if x != nil {
		return x.MatchExpressions
	}
	return nil
}

// LabelSelectorRequirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type LabelSelectorRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is the label key that the selector applies to.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator LabelSelectorRequirement_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=openstorage.api.LabelSelectorRequirement_Operator" json:"operator,omitempty"`
	// Values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *LabelSelectorRequirement) Reset() {
	*x = LabelSelectorRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelSelectorRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelectorRequirement) ProtoMessage() {}

func (x *LabelSelectorRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelectorRequirement.ProtoReflect.Descriptor instead.
func (*LabelSelectorRequirement) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{362}
}

func (x *LabelSelectorRequirement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LabelSelectorRequirement) GetOperator() LabelSelectorRequirement_Operator {
	if x != nil {
		return x.Operator
	}
	return LabelSelectorRequirement_In
}

func (x *LabelSelectorRequirement) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type RestoreVolSnashotSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedule string `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *RestoreVolSnashotSchedule) Reset() {
	*x = RestoreVolSnashotSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreVolSnashotSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreVolSnashotSchedule) ProtoMessage() {}

func (x *RestoreVolSnashotSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreVolSnashotSchedule.ProtoReflect.Descriptor instead.
func (*RestoreVolSnashotSchedule) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{363}
}

func (x *RestoreVolSnashotSchedule) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

type RestoreVolStoragePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy string `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *RestoreVolStoragePolicy) Reset() {
	*x = RestoreVolStoragePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreVolStoragePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreVolStoragePolicy) ProtoMessage() {}

func (x *RestoreVolStoragePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreVolStoragePolicy.ProtoReflect.Descriptor instead.
func (*RestoreVolStoragePolicy) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{364}
}

func (x *RestoreVolStoragePolicy) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

// RestoreSpec allows some of the restore volume properties of to be modified
// while restoring the cloud baackup. All pointer fields with nil value will
// inherit corresponding field value from backup's spec.
type RestoreVolumeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HaLevel specifies the number of copies of data.
	HaLevel int64 `protobuf:"varint,1,opt,name=ha_level,json=haLevel,proto3" json:"ha_level,omitempty"`
	// Cos specifies the relative class of service.
	Cos CosType `protobuf:"varint,2,opt,name=cos,proto3,enum=openstorage.api.CosType" json:"cos,omitempty"`
	// IoProfile provides a hint about application using this volume. This field
	// is ignored if IoProfileBkupSrc is set true
	IoProfile IoProfile `protobuf:"varint,3,opt,name=io_profile,json=ioProfile,proto3,enum=openstorage.api.IoProfile" json:"io_profile,omitempty"`
	// SnapshotInterval in minutes, set to 0 to disable snapshots
	SnapshotInterval uint32 `protobuf:"varint,4,opt,name=snapshot_interval,json=snapshotInterval,proto3" json:"snapshot_interval,omitempty"`
	// Shared is true if this volume can be concurrently accessed by multiple users.
	Shared RestoreParamBoolType `protobuf:"varint,5,opt,name=shared,proto3,enum=openstorage.api.RestoreParamBoolType" json:"shared,omitempty"`
	// ReplicaSet is the desired set of nodes for the volume data.
	ReplicaSet *ReplicaSet `protobuf:"bytes,6,opt,name=replica_set,json=replicaSet,proto3" json:"replica_set,omitempty"`
	// Aggregation level Specifies the number of parts the volume can be aggregated from.
	AggregationLevel uint32 `protobuf:"varint,7,opt,name=aggregation_level,json=aggregationLevel,proto3" json:"aggregation_level,omitempty"`
	// SnapshotSchedule a well known string that specifies when snapshots should be taken.
	SnapshotSchedule *RestoreVolSnashotSchedule `protobuf:"bytes,8,opt,name=snapshot_schedule,json=snapshotSchedule,proto3" json:"snapshot_schedule,omitempty"`
	// Sticky volumes cannot be deleted until the flag is removed.
	Sticky RestoreParamBoolType `protobuf:"varint,9,opt,name=sticky,proto3,enum=openstorage.api.RestoreParamBoolType" json:"sticky,omitempty"`
	// Group identifies a consistency group
	Group *Group `protobuf:"bytes,10,opt,name=group,proto3" json:"group,omitempty"`
	// GroupEnforced is true if consistency group creation is enforced.
	GroupEnforced bool `protobuf:"varint,11,opt,name=group_enforced,json=groupEnforced,proto3" json:"group_enforced,omitempty"`
	// Journal is true if data for the volume goes into the journal.
	Journal RestoreParamBoolType `protobuf:"varint,12,opt,name=journal,proto3,enum=openstorage.api.RestoreParamBoolType" json:"journal,omitempty"`
	// Sharedv4 is true if this volume can be accessed via sharedv4.
	Sharedv4 RestoreParamBoolType `protobuf:"varint,13,opt,name=sharedv4,proto3,enum=openstorage.api.RestoreParamBoolType" json:"sharedv4,omitempty"`
	// QueueDepth defines the desired block device queue depth
	QueueDepth uint32 `protobuf:"varint,14,opt,name=queue_depth,json=queueDepth,proto3" json:"queue_depth,omitempty"`
	// Nodiscard specifies if the volume will be mounted with discard support disabled.
	// i.e. FS will not release allocated blocks back to the backing storage pool.
	Nodiscard RestoreParamBoolType `protobuf:"varint,15,opt,name=nodiscard,proto3,enum=openstorage.api.RestoreParamBoolType" json:"nodiscard,omitempty"`
	// IoStrategy preferred strategy for I/O.
	IoStrategy *IoStrategy `protobuf:"bytes,16,opt,name=io_strategy,json=ioStrategy,proto3" json:"io_strategy,omitempty"`
	// PlacementStrategy specifies a spec to indicate where to place the volume.
	PlacementStrategy *VolumePlacementStrategy `protobuf:"bytes,17,opt,name=placement_strategy,json=placementStrategy,proto3" json:"placement_strategy,omitempty"`
	// StoragePolicy if applied/specified while creating volume
	StoragePolicy *RestoreVolStoragePolicy `protobuf:"bytes,18,opt,name=storage_policy,json=storagePolicy,proto3" json:"storage_policy,omitempty"`
	// Ownership
	Ownership *Ownership `protobuf:"bytes,19,opt,name=ownership,proto3" json:"ownership,omitempty"`
	// ExportSpec defines how the volume should be exported.
	ExportSpec *ExportSpec `protobuf:"bytes,20,opt,name=export_spec,json=exportSpec,proto3" json:"export_spec,omitempty"`
	// fastpath extensions
	FpPreference RestoreParamBoolType `protobuf:"varint,21,opt,name=fp_preference,json=fpPreference,proto3,enum=openstorage.api.RestoreParamBoolType" json:"fp_preference,omitempty"`
	// MountOptions defines the options that should be used while mounting this volume
	MountOptions *MountOptions `protobuf:"bytes,22,opt,name=mount_options,json=mountOptions,proto3" json:"mount_options,omitempty"`
	// Sharedv4MountOptions defines the options that will be used while mounting a sharedv4 volume
	// from a node where the volume replica does not exist
	Sharedv4MountOptions *MountOptions `protobuf:"bytes,23,opt,name=sharedv4_mount_options,json=sharedv4MountOptions,proto3" json:"sharedv4_mount_options,omitempty"`
	// Proxy_write is true if proxy write replication is enabled for the volume
	ProxyWrite RestoreParamBoolType `protobuf:"varint,24,opt,name=proxy_write,json=proxyWrite,proto3,enum=openstorage.api.RestoreParamBoolType" json:"proxy_write,omitempty"`
	// IoProfileBkupSrc indicates to inherit IoProfile from cloudbackup
	IoProfileBkupSrc bool `protobuf:"varint,25,opt,name=io_profile_bkup_src,json=ioProfileBkupSrc,proto3" json:"io_profile_bkup_src,omitempty"`
	// ProxySpec indicates that this volume is used for proxying an external data source
	ProxySpec *ProxySpec `protobuf:"bytes,26,opt,name=proxy_spec,json=proxySpec,proto3" json:"proxy_spec,omitempty"`
	// Sharedv4ServiceSpec specifies a spec for configuring a service for a sharedv4 volume
	Sharedv4ServiceSpec *Sharedv4ServiceSpec `protobuf:"bytes,27,opt,name=sharedv4_service_spec,json=sharedv4ServiceSpec,proto3" json:"sharedv4_service_spec,omitempty"`
	// Sharedv4Spec specifies common properties of sharedv4 and sharedv4 service volumes
	Sharedv4Spec *Sharedv4Spec `protobuf:"bytes,28,opt,name=sharedv4_spec,json=sharedv4Spec,proto3" json:"sharedv4_spec,omitempty"`
	// Autofstrim is true if automatic fstrim is enabled for the volume
	AutoFstrim RestoreParamBoolType `protobuf:"varint,29,opt,name=auto_fstrim,json=autoFstrim,proto3,enum=openstorage.api.RestoreParamBoolType" json:"auto_fstrim,omitempty"`
	// IoThrottle specifies maximum io(iops/bandwidth) this volume is restricted to
	IoThrottle *IoThrottle `protobuf:"bytes,30,opt,name=io_throttle,json=ioThrottle,proto3" json:"io_throttle,omitempty"`
	// Enable readahead for the volume
	Readahead RestoreParamBoolType `protobuf:"varint,31,opt,name=readahead,proto3,enum=openstorage.api.RestoreParamBoolType" json:"readahead,omitempty"`
}

func (x *RestoreVolumeSpec) Reset() {
	*x = RestoreVolumeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreVolumeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreVolumeSpec) ProtoMessage() {}

func (x *RestoreVolumeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreVolumeSpec.ProtoReflect.Descriptor instead.
func (*RestoreVolumeSpec) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{365}
}

func (x *RestoreVolumeSpec) GetHaLevel() int64 {
	if x != nil {
		return x.HaLevel
	}
	return 0
}

func (x *RestoreVolumeSpec) GetCos() CosType {
	if x != nil {
		return x.Cos
	}
	return CosType_NONE
}

func (x *RestoreVolumeSpec) GetIoProfile() IoProfile {
	if x != nil {
		return x.IoProfile
	}
	return IoProfile_IO_PROFILE_SEQUENTIAL
}

func (x *RestoreVolumeSpec) GetSnapshotInterval() uint32 {
	if x != nil {
		return x.SnapshotInterval
	}
	return 0
}

func (x *RestoreVolumeSpec) GetShared() RestoreParamBoolType {
	if x != nil {
		return x.Shared
	}
	return RestoreParamBoolType_PARAM_BKUPSRC
}

func (x *RestoreVolumeSpec) GetReplicaSet() *ReplicaSet {
	if x != nil {
		return x.ReplicaSet
	}
	return nil
}

func (x *RestoreVolumeSpec) GetAggregationLevel() uint32 {
	if x != nil {
		return x.AggregationLevel
	}
	return 0
}

func (x *RestoreVolumeSpec) GetSnapshotSchedule() *RestoreVolSnashotSchedule {
	if x != nil {
		return x.SnapshotSchedule
	}
	return nil
}

func (x *RestoreVolumeSpec) GetSticky() RestoreParamBoolType {
	if x != nil {
		return x.Sticky
	}
	return RestoreParamBoolType_PARAM_BKUPSRC
}

func (x *RestoreVolumeSpec) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *RestoreVolumeSpec) GetGroupEnforced() bool {
	if x != nil {
		return x.GroupEnforced
	}
	return false
}

func (x *RestoreVolumeSpec) GetJournal() RestoreParamBoolType {
	if x != nil {
		return x.Journal
	}
	return RestoreParamBoolType_PARAM_BKUPSRC
}

func (x *RestoreVolumeSpec) GetSharedv4() RestoreParamBoolType {
	if x != nil {
		return x.Sharedv4
	}
	return RestoreParamBoolType_PARAM_BKUPSRC
}

func (x *RestoreVolumeSpec) GetQueueDepth() uint32 {
	if x != nil {
		return x.QueueDepth
	}
	return 0
}

func (x *RestoreVolumeSpec) GetNodiscard() RestoreParamBoolType {
	if x != nil {
		return x.Nodiscard
	}
	return RestoreParamBoolType_PARAM_BKUPSRC
}

func (x *RestoreVolumeSpec) GetIoStrategy() *IoStrategy {
	if x != nil {
		return x.IoStrategy
	}
	return nil
}

func (x *RestoreVolumeSpec) GetPlacementStrategy() *VolumePlacementStrategy {
	if x != nil {
		return x.PlacementStrategy
	}
	return nil
}

func (x *RestoreVolumeSpec) GetStoragePolicy() *RestoreVolStoragePolicy {
	if x != nil {
		return x.StoragePolicy
	}
	return nil
}

func (x *RestoreVolumeSpec) GetOwnership() *Ownership {
	if x != nil {
		return x.Ownership
	}
	return nil
}

func (x *RestoreVolumeSpec) GetExportSpec() *ExportSpec {
	if x != nil {
		return x.ExportSpec
	}
	return nil
}

func (x *RestoreVolumeSpec) GetFpPreference() RestoreParamBoolType {
	if x != nil {
		return x.FpPreference
	}
	return RestoreParamBoolType_PARAM_BKUPSRC
}

func (x *RestoreVolumeSpec) GetMountOptions() *MountOptions {
	if x != nil {
		return x.MountOptions
	}
	return nil
}

func (x *RestoreVolumeSpec) GetSharedv4MountOptions() *MountOptions {
	if x != nil {
		return x.Sharedv4MountOptions
	}
	return nil
}

func (x *RestoreVolumeSpec) GetProxyWrite() RestoreParamBoolType {
	if x != nil {
		return x.ProxyWrite
	}
	return RestoreParamBoolType_PARAM_BKUPSRC
}

func (x *RestoreVolumeSpec) GetIoProfileBkupSrc() bool {
	if x != nil {
		return x.IoProfileBkupSrc
	}
	return false
}

func (x *RestoreVolumeSpec) GetProxySpec() *ProxySpec {
	if x != nil {
		return x.ProxySpec
	}
	return nil
}

func (x *RestoreVolumeSpec) GetSharedv4ServiceSpec() *Sharedv4ServiceSpec {
	if x != nil {
		return x.Sharedv4ServiceSpec
	}
	return nil
}

func (x *RestoreVolumeSpec) GetSharedv4Spec() *Sharedv4Spec {
	if x != nil {
		return x.Sharedv4Spec
	}
	return nil
}

func (x *RestoreVolumeSpec) GetAutoFstrim() RestoreParamBoolType {
	if x != nil {
		return x.AutoFstrim
	}
	return RestoreParamBoolType_PARAM_BKUPSRC
}

func (x *RestoreVolumeSpec) GetIoThrottle() *IoThrottle {
	if x != nil {
		return x.IoThrottle
	}
	return nil
}

func (x *RestoreVolumeSpec) GetReadahead() RestoreParamBoolType {
	if x != nil {
		return x.Readahead
	}
	return RestoreParamBoolType_PARAM_BKUPSRC
}

// Request message to get the volume catalog
type SdkVolumeCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VolumeId of the volume that is getting it's catalog retrieved.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Path which will be used as root (default is the actual root)
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Depth of folders/files retrieved (default is all of it, 1 would only return 1 layer)
	Depth string `protobuf:"bytes,3,opt,name=depth,proto3" json:"depth,omitempty"`
}

func (x *SdkVolumeCatalogRequest) Reset() {
	*x = SdkVolumeCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeCatalogRequest) ProtoMessage() {}

func (x *SdkVolumeCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeCatalogRequest.ProtoReflect.Descriptor instead.
func (*SdkVolumeCatalogRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{366}
}

func (x *SdkVolumeCatalogRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *SdkVolumeCatalogRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SdkVolumeCatalogRequest) GetDepth() string {
	if x != nil {
		return x.Depth
	}
	return ""
}

// Response message to get volume catalog
type SdkVolumeCatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Catalog
	Catalog *CatalogResponse `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
}

func (x *SdkVolumeCatalogResponse) Reset() {
	*x = SdkVolumeCatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkVolumeCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkVolumeCatalogResponse) ProtoMessage() {}

func (x *SdkVolumeCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkVolumeCatalogResponse.ProtoReflect.Descriptor instead.
func (*SdkVolumeCatalogResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{367}
}

func (x *SdkVolumeCatalogResponse) GetCatalog() *CatalogResponse {
	if x != nil {
		return x.Catalog
	}
	return nil
}

// PublicAccessControl allows assigning public ownership
type Ownership_PublicAccessControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccessType declares which level of public access is allowed
	Type Ownership_AccessType `protobuf:"varint,1,opt,name=type,proto3,enum=openstorage.api.Ownership_AccessType" json:"type,omitempty"`
}

func (x *Ownership_PublicAccessControl) Reset() {
	*x = Ownership_PublicAccessControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ownership_PublicAccessControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ownership_PublicAccessControl) ProtoMessage() {}

func (x *Ownership_PublicAccessControl) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ownership_PublicAccessControl.ProtoReflect.Descriptor instead.
func (*Ownership_PublicAccessControl) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{31, 0}
}

func (x *Ownership_PublicAccessControl) GetType() Ownership_AccessType {
	if x != nil {
		return x.Type
	}
	return Ownership_Read
}

type Ownership_AccessControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Group access to resource which must match the group set in the
	// authorization token.
	// Can be set by the owner or the system administrator only.
	// Possible values are:
	// 1. no groups: Means no groups are given access.
	// 2. `["*"]`: All groups are allowed.
	// 3. `["group1", "group2"]`: Only certain groups are allowed. In this example only
	// _group1_ and _group2_ are allowed.
	Groups map[string]Ownership_AccessType `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=openstorage.api.Ownership_AccessType"`
	// Collaborator access to resource gives access to other user.
	// Must be the username (unique id) set in the authorization token.
	// The owner or the administrator can set this value. Possible values are:
	// 1. no collaborators: Means no users are given access.
	// 2. `["*"]`: All users are allowed.
	// 3. `["username1", "username2"]`: Only certain usernames are allowed. In this example only
	// _username1_ and _username2_ are allowed.
	Collaborators map[string]Ownership_AccessType `protobuf:"bytes,2,rep,name=collaborators,proto3" json:"collaborators,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=openstorage.api.Ownership_AccessType"`
	// Public access to resource may be assigned for access by the public userd
	Public *Ownership_PublicAccessControl `protobuf:"bytes,3,opt,name=public,proto3" json:"public,omitempty"`
}

func (x *Ownership_AccessControl) Reset() {
	*x = Ownership_AccessControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ownership_AccessControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ownership_AccessControl) ProtoMessage() {}

func (x *Ownership_AccessControl) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ownership_AccessControl.ProtoReflect.Descriptor instead.
func (*Ownership_AccessControl) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{31, 1}
}

func (x *Ownership_AccessControl) GetGroups() map[string]Ownership_AccessType {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Ownership_AccessControl) GetCollaborators() map[string]Ownership_AccessType {
	if x != nil {
		return x.Collaborators
	}
	return nil
}

func (x *Ownership_AccessControl) GetPublic() *Ownership_PublicAccessControl {
	if x != nil {
		return x.Public
	}
	return nil
}

type SdkServiceCapability_OpenStorageService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of service supported
	Type SdkServiceCapability_OpenStorageService_Type `protobuf:"varint,1,opt,name=type,proto3,enum=openstorage.api.SdkServiceCapability_OpenStorageService_Type" json:"type,omitempty"`
}

func (x *SdkServiceCapability_OpenStorageService) Reset() {
	*x = SdkServiceCapability_OpenStorageService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkServiceCapability_OpenStorageService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkServiceCapability_OpenStorageService) ProtoMessage() {}

func (x *SdkServiceCapability_OpenStorageService) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkServiceCapability_OpenStorageService.ProtoReflect.Descriptor instead.
func (*SdkServiceCapability_OpenStorageService) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{317, 0}
}

func (x *SdkServiceCapability_OpenStorageService) GetType() SdkServiceCapability_OpenStorageService_Type {
	if x != nil {
		return x.Type
	}
	return SdkServiceCapability_OpenStorageService_UNKNOWN
}

// Defines a migration request for a volume
type SdkCloudMigrateStartRequest_MigrateVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *SdkCloudMigrateStartRequest_MigrateVolume) Reset() {
	*x = SdkCloudMigrateStartRequest_MigrateVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudMigrateStartRequest_MigrateVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudMigrateStartRequest_MigrateVolume) ProtoMessage() {}

func (x *SdkCloudMigrateStartRequest_MigrateVolume) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudMigrateStartRequest_MigrateVolume.ProtoReflect.Descriptor instead.
func (*SdkCloudMigrateStartRequest_MigrateVolume) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{322, 0}
}

func (x *SdkCloudMigrateStartRequest_MigrateVolume) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

// Defines a migration request for a volume group
type SdkCloudMigrateStartRequest_MigrateVolumeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *SdkCloudMigrateStartRequest_MigrateVolumeGroup) Reset() {
	*x = SdkCloudMigrateStartRequest_MigrateVolumeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudMigrateStartRequest_MigrateVolumeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudMigrateStartRequest_MigrateVolumeGroup) ProtoMessage() {}

func (x *SdkCloudMigrateStartRequest_MigrateVolumeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudMigrateStartRequest_MigrateVolumeGroup.ProtoReflect.Descriptor instead.
func (*SdkCloudMigrateStartRequest_MigrateVolumeGroup) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{322, 1}
}

func (x *SdkCloudMigrateStartRequest_MigrateVolumeGroup) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// Defines a migration request for all volumes in a cluster
type SdkCloudMigrateStartRequest_MigrateAllVolumes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SdkCloudMigrateStartRequest_MigrateAllVolumes) Reset() {
	*x = SdkCloudMigrateStartRequest_MigrateAllVolumes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkCloudMigrateStartRequest_MigrateAllVolumes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkCloudMigrateStartRequest_MigrateAllVolumes) ProtoMessage() {}

func (x *SdkCloudMigrateStartRequest_MigrateAllVolumes) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkCloudMigrateStartRequest_MigrateAllVolumes.ProtoReflect.Descriptor instead.
func (*SdkCloudMigrateStartRequest_MigrateAllVolumes) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{322, 2}
}

var File_api_api_proto protoreflect.FileDescriptor

var file_api_api_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xcf, 0x03, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x71, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x65, 0x71, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x57, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x57, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x63, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x70, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x65,
	0x76, 0x22, 0xb0, 0x03, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x03, 0x43, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x43, 0x6f, 0x73, 0x12, 0x36, 0x0a,
	0x06, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x06, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x69, 0x64, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x61, 0x69, 0x64, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x55, 0x73, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x46, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xba, 0x02,
	0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x49, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x02, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a,
	0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2c,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x14,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x65, 0x70, 0x22, 0x34, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x22, 0x17,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x0a, 0x49, 0x6f, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x63, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6f, 0x22, 0x34, 0x0a, 0x05, 0x58, 0x61,
	0x74, 0x74, 0x72, 0x22, 0x2b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x4f, 0x57, 0x5f, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x01,
	0x22, 0x7d, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x48,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x4a, 0x0a, 0x0c, 0x4e, 0x46, 0x53, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x22, 0x2e, 0x0a, 0x0b, 0x53,
	0x33, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x0c, 0x50,
	0x58, 0x44, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x0d, 0x50,
	0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x55, 0x0a, 0x0c, 0x50, 0x75, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x56,
	0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x03, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x45, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6e, 0x66, 0x73, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x46, 0x53, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x6e, 0x66, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x33, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x33, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x06, 0x73, 0x33, 0x53, 0x70, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x78, 0x64, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x58, 0x44,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x70, 0x78, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75,
	0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x70, 0x75, 0x72,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x75,
	0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x22,
	0xe7, 0x01, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x76, 0x34, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4d, 0x0a, 0x0b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f,
	0x44, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x49, 0x50, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x41, 0x44, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x10, 0x03, 0x22, 0x50, 0x0a, 0x18, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x76, 0x34, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x34, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x47, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x22, 0x6c, 0x0a, 0x0c, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5c, 0x0a, 0x11, 0x66,
	0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76,
	0x34, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x02, 0x0a,
	0x11, 0x46, 0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x64, 0x65, 0x76, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x61, 0x63, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x0e, 0x46, 0x61,
	0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x4f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46,
	0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69,
	0x72, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x55, 0x75, 0x69, 0x64, 0x22,
	0xcc, 0x02, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x41,
	0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x63, 0x61,
	0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53,
	0x63, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5f, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4e, 0x5f,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47,
	0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x02, 0x22, 0x5a, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x49, 0x52, 0x10, 0x02, 0x22, 0x96,
	0x01, 0x0a, 0x0a, 0x49, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x62, 0x77, 0x5f, 0x6d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x42, 0x77, 0x4d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x77, 0x5f, 0x6d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42,
	0x77, 0x4d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0xc3, 0x11, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x53, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x61, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x03, 0x63, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x63, 0x6f, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x69, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x09, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x52, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x0a,
	0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x0a, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x57,
	0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x70, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66,
	0x70, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x78,
	0x61, 0x74, 0x74, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x58, 0x61, 0x74,
	0x74, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x78, 0x61, 0x74, 0x74, 0x72, 0x12,
	0x3c, 0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x42, 0x0a,
	0x0d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x53, 0x0a, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76,
	0x34, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x0d,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x73, 0x74, 0x72, 0x69,
	0x6d, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x0a, 0x69, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x61, 0x68, 0x65, 0x61, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x61, 0x68, 0x65, 0x61, 0x64, 0x12, 0x57, 0x0a, 0x14, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x1a, 0x3f, 0x0a, 0x11,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x10,
	0x0a, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x68, 0x61, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x07, 0x68, 0x61,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x03, 0x63, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x03,
	0x63, 0x6f, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6f, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x06, 0x64, 0x65, 0x64, 0x75, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x06, 0x64, 0x65, 0x64, 0x75, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x06, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65,
	0x74, 0x12, 0x20, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x09, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x06, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x0b, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x12, 0x21,
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f,
	0x52, 0x09, 0x6e, 0x6f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x69,
	0x6f, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0a, 0x69,
	0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x48, 0x10, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x08, 0x66, 0x61, 0x73,
	0x74, 0x70, 0x61, 0x74, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x11, 0x52, 0x08, 0x66,
	0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x05, 0x78, 0x61, 0x74, 0x74, 0x72,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x58, 0x61, 0x74, 0x74, 0x72, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x12, 0x52, 0x05, 0x78, 0x61, 0x74, 0x74, 0x72, 0x12, 0x3e, 0x0a,
	0x0b, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48,
	0x13, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x45, 0x0a,
	0x0e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x14, 0x52, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x56, 0x0a, 0x17, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34,
	0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x15, 0x52, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x16, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12,
	0x3b, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x48,
	0x17, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x15,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x48, 0x18, 0x52, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x76, 0x34, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x53, 0x70, 0x65, 0x63, 0x48, 0x19,
	0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x1a, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x73, 0x74, 0x72, 0x69,
	0x6d, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x48, 0x1b, 0x52, 0x0a, 0x69, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x61, 0x68, 0x65, 0x61, 0x64, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x1c, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x61, 0x68, 0x65, 0x61,
	0x64, 0x12, 0x1c, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x1d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x68,
	0x61, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63,
	0x6f, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x69, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x10, 0x0a,
	0x0e, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x42,
	0x17, 0x0a, 0x15, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x5f,
	0x6f, 0x70, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x70, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x74, 0x42,
	0x11, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x6f,
	0x70, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6f, 0x70, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x66, 0x61, 0x73, 0x74, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x78, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x6f, 0x70, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x1b,
	0x0a, 0x19, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6f, 0x70, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x5f,
	0x6f, 0x70, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x69, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x61, 0x68,
	0x65, 0x61, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x22, 0xc5, 0x14, 0x0a, 0x10, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x68, 0x61, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x07, 0x68, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x2c, 0x0a, 0x03, 0x63, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x03, 0x63, 0x6f, 0x73, 0x12, 0x3b, 0x0a,
	0x0a, 0x69, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x03, 0x52,
	0x09, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x06, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x05, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x58, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x53, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x70, 0x61, 0x73,
	0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x06, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a,
	0x52, 0x06, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48,
	0x0b, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x07, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x07, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x76, 0x34, 0x12, 0x21, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x10, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x52, 0x0c, 0x73, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x11, 0x68, 0x61, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x52, 0x0f, 0x68, 0x61,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x51, 0x0a,
	0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f,
	0x70, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x68, 0x0a, 0x1a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70,
	0x52, 0x18, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x48, 0x11, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6f,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0a, 0x69, 0x6f,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x48, 0x12, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x13, 0x52, 0x0a, 0x73, 0x63,
	0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x0e, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x14, 0x52, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x56, 0x0a, 0x17, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x15, 0x52, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x16, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x48, 0x17, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x08, 0x66, 0x61, 0x73, 0x74, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x18, 0x52, 0x08, 0x66, 0x61, 0x73,
	0x74, 0x70, 0x61, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76,
	0x34, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x19, 0x52, 0x13, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x76, 0x34, 0x53, 0x70, 0x65, 0x63, 0x48, 0x1a, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x76, 0x34, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x66, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x0a,
	0x61, 0x75, 0x74, 0x6f, 0x46, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6f,
	0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x1c, 0x52, 0x0a,
	0x69, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x61, 0x68, 0x65, 0x61, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1d, 0x52,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x61, 0x68, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x77, 0x69,
	0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1e, 0x52, 0x08,
	0x77, 0x69, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x08, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4f, 0x70, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x10, 0x02, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x68, 0x61, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x73, 0x5f, 0x6f, 0x70,
	0x74, 0x42, 0x10, 0x0a, 0x0e, 0x69, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x64, 0x75, 0x70, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x42, 0x17, 0x0a, 0x15, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0f, 0x0a,
	0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x17,
	0x0a, 0x15, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x70,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x6f, 0x70, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x66, 0x61, 0x73, 0x74, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x76, 0x34, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x6f, 0x70, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x69,
	0x6f, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x42, 0x0f,
	0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x61, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x22,
	0x51, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x55, 0x75, 0x69,
	0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x57, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x2e,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x3f, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb5, 0x05, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x04, 0x61, 0x63,
	0x6c, 0x73, 0x1a, 0x50, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0xd3, 0x03, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x4c, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x61, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x1a,
	0x60, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x67, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c, 0x0a, 0x0a, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x02, 0x22, 0xdf, 0x0d, 0x0a, 0x06, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x38,
	0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x53, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x0b,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x53, 0x65, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52,
	0x0c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x0f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x66, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x73, 0x52,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x74,
	0x61, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x66, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x61, 0x73, 0x74,
	0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x66, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x61,
	0x6e, 0x5f, 0x66, 0x69, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x61,
	0x6e, 0x46, 0x69, 0x78, 0x12, 0x51, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x61,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x16, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x76, 0x34, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x48, 0x0a, 0x12, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6f, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x10, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x49, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x5f, 0x74, 0x72, 0x61, 0x73, 0x68, 0x63, 0x61, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x73, 0x68, 0x63, 0x61, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x03, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x64, 0x4d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6f, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x6f, 0x5f, 0x6d, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x69, 0x6f, 0x4d, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x54, 0x0a, 0x11, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x3f, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xbf, 0x01, 0x0a, 0x15, 0x46, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x64, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x78, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x78, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x73, 0x74,
	0x72, 0x69, 0x6d, 0x22, 0x34, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75,
	0x6d, 0x5f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x6e, 0x75, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x65, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x10, 0x53, 0x64,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x22, 0xbd, 0x03, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54, 0x61, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x22, 0x85, 0x01, 0x0a, 0x11, 0x53, 0x64, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x12, 0x53, 0x64, 0x6b, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x53, 0x64, 0x6b,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x11,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x09, 0x69, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x44, 0x0a,
	0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x70, 0x61, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x22, 0x60, 0x0a, 0x1a, 0x53, 0x64,
	0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7c, 0x0a, 0x17,
	0x53, 0x64, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x18, 0x53,
	0x64, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0xdd, 0x02, 0x0a, 0x0e,
	0x53, 0x64, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5d,
	0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x54, 0x0a,
	0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x57, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x64, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x04,
	0x6f, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6f, 0x70,
	0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x61, 0x0a, 0x24, 0x53,
	0x64, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x57,
	0x0a, 0x25, 0x53, 0x64, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x16, 0x53, 0x64, 0x6b, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x19, 0x0a, 0x17,
	0x53, 0x64, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x06, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x22,
	0xcc, 0x02, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xb1,
	0x01, 0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x22, 0x26, 0x0a, 0x0e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x70, 0x0a, 0x14, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x01, 0x0a,
	0x11, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x38,
	0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xbf, 0x02, 0x0a, 0x10, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x07,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x3a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a,
	0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x48, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x11,
	0x53, 0x6e, 0x61, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x38, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x22, 0x71, 0x0a, 0x12, 0x53, 0x6e, 0x61, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x14, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x0e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x14,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x76, 0x5f, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x76, 0x43, 0x6d, 0x64, 0x12, 0x5d, 0x0a,
	0x0e, 0x73, 0x72, 0x76, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x76,
	0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x73, 0x72, 0x76, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x3f, 0x0a, 0x11,
	0x53, 0x72, 0x76, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01,
	0x0a, 0x1d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x13, 0x76, 0x6f, 0x6c, 0x5f, 0x73, 0x72, 0x76, 0x5f, 0x72, 0x73, 0x70, 0x5f, 0x6f, 0x62,
	0x6a, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x76, 0x6f, 0x6c,
	0x53, 0x72, 0x76, 0x52, 0x73, 0x70, 0x4f, 0x62, 0x6a, 0x43, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0b,
	0x76, 0x6f, 0x6c, 0x5f, 0x73, 0x72, 0x76, 0x5f, 0x72, 0x73, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x53, 0x72, 0x76, 0x52, 0x73, 0x70, 0x22, 0x64, 0x0a, 0x12,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0x27, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x0d,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x08, 0x52, 0x65, 0x71, 0x65, 0x73, 0x74, 0x4b, 0x56, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x71, 0x65, 0x73, 0x74, 0x4b, 0x56, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x52,
	0x65, 0x71, 0x65, 0x73, 0x74, 0x4b, 0x56, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x65, 0x73,
	0x74, 0x4b, 0x56, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x7a, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0d, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xfb, 0x01, 0x0a, 0x16, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe9,
	0x01, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x61, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x07, 0x0a, 0x0b, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70,
	0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6d, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6d,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x46, 0x72, 0x65, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x76, 0x67, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x64,
	0x69, 0x73, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x67, 0x6d, 0x74, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x48,
	0x57, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x48, 0x57, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x1a, 0x5a, 0x0a, 0x0a, 0x44,
	0x69, 0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x44,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x03, 0x22, 0x65, 0x0a, 0x0e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xc7, 0x01, 0x0a, 0x13, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x68, 0x0a, 0x19, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x19, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x14, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22,
	0x89, 0x01, 0x0a, 0x13, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x7f, 0x0a, 0x18, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x57, 0x0a,
	0x19, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x17, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x22,
	0x6d, 0x0a, 0x21, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x64, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x24,
	0x0a, 0x22, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x0a, 0x24, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x25,
	0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x22, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a,
	0x23, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x64, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x37,
	0x0a, 0x21, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x64, 0x6b, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a,
	0x21, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x24, 0x0a, 0x22,
	0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3b, 0x0a, 0x25, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x28, 0x0a, 0x26, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x64, 0x6b,
	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x25, 0x0a, 0x23, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x29, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x2a, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x6d, 0x0a, 0x1e, 0x53,
	0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a,
	0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x64,
	0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a,
	0x1e, 0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4b, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x21, 0x0a, 0x1f,
	0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x23, 0x0a, 0x21, 0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x22, 0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x1f, 0x53, 0x64,
	0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x5e, 0x0a, 0x20, 0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0x34, 0x0a, 0x1e, 0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x1e, 0x53, 0x64,
	0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1f, 0x53, 0x64, 0x6b,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x03,
	0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68,
	0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0x60, 0x0a, 0x20, 0x53,
	0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0x3d, 0x0a,
	0x21, 0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xfc, 0x02, 0x0a,
	0x19, 0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x18, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x06,
	0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x48,
	0x00, 0x52, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x07, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x42, 0x0d, 0x0a, 0x0b,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x11, 0x53,
	0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xad,
	0x04, 0x0a, 0x1a, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x61, 0x6d, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x61, 0x6d,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x33, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x52, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x41,
	0x77, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x77, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x58, 0x0a, 0x10, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x5b,
	0x0a, 0x11, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x42,
	0x0a, 0x1b, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x1a, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xda, 0x01, 0x0a, 0x17, 0x53, 0x64, 0x6b, 0x41, 0x77, 0x73, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x73, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x73, 0x6c,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x5f,
	0x0a, 0x19, 0x53, 0x64, 0x6b, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22,
	0x56, 0x0a, 0x1a, 0x53, 0x64, 0x6b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6a, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0xe6, 0x01, 0x0a, 0x18, 0x53, 0x64, 0x6b, 0x41,
	0x77, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x73, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x73, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x33, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x22, 0x3f, 0x0a, 0x1a, 0x53, 0x64, 0x6b, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x3c, 0x0a, 0x1b, 0x53, 0x64, 0x6b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22,
	0x1f, 0x0a, 0x1d, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x47, 0x0a, 0x1e, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x1b, 0x53, 0x64, 0x6b,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x86, 0x04,
	0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x09,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x61, 0x6d, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x61, 0x6d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x53, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x64, 0x6b, 0x41, 0x77, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x77, 0x73,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x59, 0x0a, 0x10, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x5c, 0x0a, 0x11, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x41, 0x0a, 0x1a, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x64, 0x6b,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x1f, 0x0a,
	0x1d, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b,
	0x0a, 0x24, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x53,
	0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x16, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x73, 0x74, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x73, 0x74, 0x70, 0x61,
	0x74, 0x68, 0x22, 0xba, 0x02, 0x0a, 0x15, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x60, 0x0a, 0x0e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x40, 0x0a,
	0x12, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x18, 0x0a, 0x16, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x53, 0x64,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x4b, 0x0a, 0x23, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e,
	0x6e, 0x6f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xbf,
	0x02, 0x0a, 0x17, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x62, 0x0a, 0x0e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x40,
	0x0a, 0x12, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x1a, 0x0a, 0x18, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x02, 0x0a,
	0x16, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x17,
	0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x7e, 0x0a, 0x16, 0x53, 0x64, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x6e, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0x9d, 0x02, 0x0a, 0x16, 0x53, 0x64, 0x6b,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x64, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x16, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x4b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x17, 0x53,
	0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x15, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x35, 0x0a,
	0x16, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x16, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x53,
	0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x0a, 0x17, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xe9, 0x01, 0x0a, 0x18, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x4d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf5, 0x02, 0x0a, 0x22,
	0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x38, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x09,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2c, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x6a, 0x0a, 0x23, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22,
	0xf4, 0x01, 0x0a, 0x16, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5b, 0x0a, 0x15, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6e, 0x6f, 0x74, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x46,
	0x0a, 0x16, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x3c, 0x0a, 0x1d, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x1e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x64,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x1a, 0x53, 0x64, 0x6b, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x24, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x59, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x09,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x09, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2c, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x46, 0x0a, 0x25, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x1e, 0x53, 0x64, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x1f, 0x53,
	0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22,
	0x5f, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64,
	0x22, 0x22, 0x0a, 0x20, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x0a, 0x21, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x22, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x22, 0xe9, 0x01, 0x0a,
	0x2c, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5f, 0x0a, 0x2d, 0x53, 0x64, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x22, 0x7d, 0x0a, 0x26, 0x53, 0x64, 0x6b,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x15, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x27, 0x53, 0x64, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22,
	0x72, 0x0a, 0x20, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x3c, 0x0a, 0x21, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x78, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x75, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x22, 0x62, 0x0a, 0x22, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x78, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x22, 0x53, 0x64,
	0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x45,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x50, 0x0a, 0x1e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x51, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x21, 0x53,
	0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x24, 0x0a, 0x22, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x20, 0x53, 0x64, 0x6b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x15, 0x53, 0x64, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xd7, 0x05, 0x0a, 0x03, 0x4a,
	0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x10, 0x64, 0x72, 0x61,
	0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5a, 0x0a,
	0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x73, 0x18, 0x92, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x69, 0x61, 0x67, 0x73,
	0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x69,
	0x61, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45,
	0x4e, 0x54, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x44,
	0x52, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x49, 0x41, 0x47, 0x53,
	0x10, 0x04, 0x22, 0x69, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x42, 0x05, 0x0a,
	0x03, 0x6a, 0x6f, 0x62, 0x22, 0x38, 0x0a, 0x0e, 0x53, 0x64, 0x6b, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x1c,
	0x0a, 0x1a, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbd, 0x01, 0x0a,
	0x1e, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x76, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0xb6, 0x02, 0x0a,
	0x17, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4a, 0x6f, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x12, 0x4f, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x44,
	0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x98, 0x01,
	0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x69, 0x61, 0x67, 0x73, 0x4a, 0x6f,
	0x62, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x44, 0x69, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x73, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x61,
	0x67, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x22, 0x9c,
	0x02, 0x0a, 0x16, 0x53, 0x64, 0x6b, 0x44, 0x69, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x3c, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x76,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a,
	0x17, 0x53, 0x64, 0x6b, 0x44, 0x69, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62,
	0x22, 0x9b, 0x01, 0x0a, 0x11, 0x44, 0x69, 0x61, 0x67, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11,
	0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x22, 0x93,
	0x01, 0x0a, 0x13, 0x44, 0x69, 0x61, 0x67, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x73, 0x22, 0x48, 0x0a, 0x17, 0x53, 0x64, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x44,
	0x0a, 0x18, 0x53, 0x64, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6a, 0x6f,
	0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x04,
	0x6a, 0x6f, 0x62, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x53, 0x64, 0x6b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x16, 0x0a,
	0x14, 0x53, 0x64, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x16, 0x53, 0x64, 0x6b, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x45,
	0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f,
	0x62, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x57, 0x6f, 0x72,
	0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x66, 0x0a, 0x19, 0x64, 0x72, 0x61, 0x69,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72,
	0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x17, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x98, 0x01, 0x0a, 0x0a,
	0x4a, 0x6f, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x46,
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62, 0x57, 0x6f, 0x72, 0x6b,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x17, 0x53, 0x64, 0x6b, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x22, 0x9f, 0x01, 0x0a, 0x17, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x44, 0x6f,
	0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x6e, 0x75, 0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x22, 0x3a, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x72,
	0x64, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x22,
	0x0a, 0x20, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3c, 0x0a, 0x21, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x63,
	0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x22, 0x24, 0x0a, 0x22, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x63, 0x6f, 0x72,
	0x64, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x1b, 0x53, 0x64, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x21, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0xc9, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x64, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3c, 0x0a, 0x1b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x6b, 0x69, 0x70, 0x57, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0xa5, 0x03, 0x0a, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x50, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x61,
	0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f,
	0x61, 0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x22, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x42,
	0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x5f, 0x4d, 0x45, 0x41, 0x4e, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x22, 0x2d, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x53, 0x45, 0x44, 0x5f,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x01, 0x22, 0xbe, 0x03, 0x0a, 0x1a, 0x53, 0x64, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x75, 0x6e, 0x12, 0x5b, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d,
	0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x5f, 0x31, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x31, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x1b, 0x53, 0x64, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62,
	0x12, 0x42, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xce, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x89, 0x02, 0x0a, 0x1b, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x64, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x75,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x55,
	0x6e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x6e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x6e, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x73, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x10, 0x03, 0x22, 0xb8, 0x04, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x55, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x3d, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x44, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x01,
	0x22, 0x6f, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x64, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x31, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x20, 0x53, 0x64, 0x6b, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x6a, 0x6f,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a,
	0x6f, 0x62, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x64, 0x6b, 0x45,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x21,
	0x53, 0x64, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x0e,
	0x53, 0x64, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x73,
	0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x22, 0x25, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x00, 0x22, 0x62, 0x0a, 0x13, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x49, 0x5a,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x02, 0x22, 0x1e,
	0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a,
	0x0a, 0x16, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x64,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x1d, 0x53, 0x64,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x19, 0x0a,
	0x17, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x18, 0x53, 0x64, 0x6b, 0x4e,
	0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x22,
	0x24, 0x0a, 0x22, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x23, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x45, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x1d, 0x53, 0x64, 0x6b, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3a, 0x0a, 0x1b, 0x53, 0x64, 0x6b,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x44, 0x0a, 0x1b, 0x53, 0x64, 0x6b, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c,
	0x53, 0x64, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x1b,
	0x53, 0x64, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x64,
	0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x1b, 0x53,
	0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x66, 0x75, 0x6c, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a,
	0x1c, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xca, 0x02, 0x0a, 0x20, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75,
	0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x55,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x21, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x22, 0xb4, 0x02, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x64, 0x0a,
	0x1d, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x1e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72,
	0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x21,
	0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xd9, 0x04, 0x0a, 0x29, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x4e, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x77, 0x0a, 0x0f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x53, 0x72, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x03,
	0x0a, 0x12, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x01, 0x0a, 0x2a, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xa5, 0x04, 0x0a, 0x14, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x6f, 0x70, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x1b, 0x53,
	0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x1a, 0x62, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1d, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x19, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x42, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x1d, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x20, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x23, 0x0a, 0x21,
	0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xb2, 0x03, 0x0a, 0x1a, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x79, 0x0a, 0x20, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x51, 0x0a, 0x21, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x20, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x55, 0x75, 0x69, 0x64, 0x22,
	0x23, 0x0a, 0x21, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x20, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x53,
	0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x24, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x10, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x1a, 0x6e, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x5d, 0x0a, 0x19, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22,
	0x30, 0x0a, 0x1a, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x39, 0x0a, 0x07, 0x53, 0x64, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x70, 0x69, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x70, 0x69, 0x73, 0x22, 0x4d, 0x0a, 0x07,
	0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x14, 0x53,
	0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x22, 0x45, 0x0a, 0x15, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x64, 0x6b, 0x52,
	0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x18, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x46, 0x0a, 0x16, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x53, 0x64,
	0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x44, 0x0a, 0x14, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x45, 0x0a, 0x15, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xc4, 0x01, 0x0a,
	0x0e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d, 0x22,
	0xb1, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72,
	0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x53, 0x5f, 0x54,
	0x52, 0x49, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x53, 0x5f, 0x54, 0x52, 0x49, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x53, 0x5f, 0x54, 0x52, 0x49,
	0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x46,
	0x53, 0x5f, 0x54, 0x52, 0x49, 0x4d, 0x5f, 0x49, 0x4e, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x53, 0x5f, 0x54, 0x52, 0x49, 0x4d, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x53, 0x5f, 0x54,
	0x52, 0x49, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x53, 0x5f, 0x54, 0x52, 0x49, 0x4d, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x06, 0x22, 0x5b, 0x0a, 0x1d, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x88, 0x01, 0x0a, 0x1e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x72, 0x69, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54,
	0x72, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5c, 0x0a, 0x1e, 0x53,
	0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x89, 0x01, 0x0a, 0x1f, 0x53, 0x64,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x64, 0x6b, 0x41, 0x75, 0x74, 0x6f,
	0x46, 0x53, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x1b, 0x53, 0x64, 0x6b, 0x41, 0x75, 0x74, 0x6f, 0x46,
	0x53, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x41, 0x75,
	0x74, 0x6f, 0x46, 0x53, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x73, 0x0a, 0x0f,
	0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69,
	0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x64, 0x6b, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x53, 0x54, 0x72,
	0x69, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe6,
	0x01, 0x0a, 0x1a, 0x53, 0x64, 0x6b, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x53, 0x54, 0x72, 0x69, 0x6d,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x64, 0x6b, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x53, 0x54, 0x72, 0x69, 0x6d, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x60, 0x0a, 0x0a, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x53, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x53, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x53, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x06, 0x22, 0x51, 0x0a, 0x1e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x20, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3c, 0x0a, 0x1d, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x64, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x64, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x1a, 0x53, 0x64, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x03, 0x0a, 0x14,
	0x53, 0x64, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0xc7, 0x02, 0x0a, 0x12, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x44, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x53, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x41, 0x43, 0x48, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x4c, 0x45, 0x10,
	0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x49,
	0x52, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x45, 0x10, 0x0c,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x10, 0x0d, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb3, 0x01, 0x0a,
	0x0a, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f,
	0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x6f, 0x72,
	0x10, 0x94, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x10, 0x00, 0x1a, 0x02,
	0x10, 0x01, 0x22, 0xc6, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a,
	0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x02, 0x0a, 0x0c,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x22, 0x5f, 0x0a, 0x0d,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x03, 0x22, 0x4e, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x04, 0x22, 0x70, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10,
	0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x06, 0x22,
	0xba, 0x01, 0x0a, 0x18, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xf2, 0x03, 0x0a,
	0x1b, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x62, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0x2c, 0x0a, 0x0d, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x1a, 0x2f, 0x0a, 0x12, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x1a, 0x13, 0x0a, 0x11, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x6f, 0x70,
	0x74, 0x22, 0x34, 0x0a, 0x19, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x34, 0x0a, 0x19, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x22, 0x64, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x05, 0x0a, 0x10, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x4d, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x64, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x19, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x1a,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x5e, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x1d, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x52, 0x0a, 0x0f, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x3f,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x6e, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x22,
	0xa9, 0x02, 0x0a, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x19, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x1b, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd9, 0x01, 0x0a,
	0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x1a, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x52, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a,
	0x1b, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x53,
	0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x1b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x66, 0x0a, 0x1e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x72, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x64, 0x6b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x20,
	0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xec, 0x02, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x60,
	0x0a, 0x1d, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x20, 0x0a, 0x1e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x1d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72,
	0x73, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70,
	0x61, 0x69, 0x72, 0x73, 0x1a, 0x5a, 0x0a, 0x0a, 0x50, 0x61, 0x69, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x69, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x07,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x40, 0x0a,
	0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0x70, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74,
	0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x9c, 0x02, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x69, 0x64, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x69, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xed, 0x02, 0x0a, 0x17, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x50, 0x0a, 0x10,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x59,
	0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x61,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x41, 0x6e, 0x74,
	0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x14, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x12, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x22, 0x9a, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x42, 0x0a, 0x0b, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xec, 0x01,
	0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x42, 0x0a,
	0x0b, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe1, 0x01, 0x0a,
	0x18, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x06, 0x0a, 0x02, 0x49, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x49, 0x6e,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x03,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x74, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x74, 0x10, 0x05,
	0x22, 0x37, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x53, 0x6e,
	0x61, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x31, 0x0a, 0x17, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xa3, 0x0f, 0x0a,
	0x11, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a,
	0x03, 0x63, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x63, 0x6f, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x6f, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x49, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x69, 0x6f, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53,
	0x65, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x57, 0x0a, 0x11, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x56, 0x6f, 0x6c, 0x53, 0x6e, 0x61, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x76, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x12, 0x1f, 0x0a, 0x0b,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x43, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42,
	0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6f, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x0a, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x57, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x4a, 0x0a, 0x0d, 0x66, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x66, 0x70, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x42,
	0x0a, 0x0d, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x53, 0x0a, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x6f, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12,
	0x2d, 0x0a, 0x13, 0x69, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x6b,
	0x75, 0x70, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6f,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x6b, 0x75, 0x70, 0x53, 0x72, 0x63, 0x12, 0x39,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x76, 0x34, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x76, 0x34, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x13,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x76, 0x34, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x76, 0x34, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x76, 0x34, 0x53, 0x70, 0x65, 0x63, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x66, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x6f, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x12,
	0x3c, 0x0a, 0x0b, 0x69, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x0a, 0x69, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x43, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x61, 0x68, 0x65, 0x61, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42,
	0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x61, 0x68, 0x65,
	0x61, 0x64, 0x22, 0x60, 0x0a, 0x17, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x22, 0x56, 0x0a, 0x18, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2a, 0x8a, 0x03, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f,
	0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x06, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x09, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f,
	0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d,
	0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x0d, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x4d, 0x41, 0x49, 0x4e,
	0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0f, 0x2a, 0x99, 0x01, 0x0a, 0x0a, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x52, 0x49, 0x56,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52,
	0x41, 0x50, 0x48, 0x10, 0x05, 0x2a, 0xa8, 0x01, 0x0a, 0x06, 0x46, 0x53, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x54,
	0x52, 0x46, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x58, 0x54, 0x34, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x55, 0x53, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x46, 0x53, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x46, 0x53, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x46,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x46, 0x53, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b,
	0x46, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x46, 0x53, 0x10, 0x07, 0x12, 0x11, 0x0a,
	0x0d, 0x46, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x46, 0x53, 0x76, 0x32, 0x10, 0x08,
	0x2a, 0xab, 0x01, 0x0a, 0x15, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x52,
	0x41, 0x50, 0x48, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x44, 0x52,
	0x49, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x52, 0x41, 0x50,
	0x48, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x74,
	0x0a, 0x0c, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x10, 0x03, 0x2a, 0xa4, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x56,
	0x45, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x05, 0x2a, 0x87, 0x01, 0x0a, 0x0f,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x6a, 0x0a, 0x11, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4f,
	0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x4f, 0x4c, 0x55,
	0x4d, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x4e, 0x10,
	0x02, 0x2a, 0x32, 0x0a, 0x07, 0x43, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x03, 0x2a, 0xc4, 0x01, 0x0a, 0x09, 0x49, 0x6f, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x49, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x44, 0x42, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4f, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x42, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x43, 0x4d, 0x53, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4f, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4f, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x07, 0x2a, 0x99, 0x02, 0x0a,
	0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4f, 0x4c,
	0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x1b, 0x0a, 0x17, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1e,
	0x0a, 0x1a, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x52, 0x59, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x18,
	0x0a, 0x14, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x09, 0x2a, 0x8f, 0x01, 0x0a, 0x0c, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x4f, 0x4c,
	0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x9d, 0x01, 0x0a, 0x16, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x49,
	0x58, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x49, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x5d, 0x0a, 0x0d, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x4d, 0x41,
	0x47, 0x4e, 0x45, 0x54, 0x49, 0x43, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x53, 0x53, 0x44, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x5f, 0x4e, 0x56, 0x4d, 0x45, 0x10, 0x02, 0x2a, 0x65, 0x0a, 0x0b, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x02,
	0x2a, 0x54, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4f,
	0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x43, 0x48, 0x5f, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x42, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x10, 0x02, 0x2a, 0x46, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x58, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x49, 0x53, 0x43, 0x53, 0x49, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x46, 0x53, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x04, 0x2a, 0xaf, 0x01, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52,
	0x4f, 0x58, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4e, 0x46, 0x53,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x33, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f,
	0x58, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x58, 0x44, 0x10,
	0x03, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x55, 0x52, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x50, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x05, 0x2a, 0x98,
	0x01, 0x0a, 0x0e, 0x46, 0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x53, 0x54, 0x50,
	0x41, 0x54, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x41, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x46, 0x41, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x81, 0x01, 0x0a, 0x10, 0x46, 0x61,
	0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a,
	0x0a, 0x16, 0x46, 0x41, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x41,
	0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4e, 0x56, 0x4d,
	0x45, 0x4f, 0x46, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x53,
	0x54, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x49, 0x53, 0x43, 0x53,
	0x49, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x71, 0x0a,
	0x19, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x04,
	0x2a, 0xce, 0x01, 0x0a, 0x0e, 0x53, 0x64, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x65, 0x6b,
	0x64, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x64, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65,
	0x65, 0x6b, 0x64, 0x61, 0x79, 0x53, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x64, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x4d,
	0x6f, 0x6e, 0x64, 0x61, 0x79, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x64, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x54, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x64, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x65,
	0x6b, 0x64, 0x61, 0x79, 0x57, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x10, 0x03, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x64, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61,
	0x79, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x64, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x46, 0x72, 0x69,
	0x64, 0x61, 0x79, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x64, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x53, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x10,
	0x06, 0x2a, 0x59, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x7f, 0x0a, 0x19,
	0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x64, 0x6b,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x02, 0x2a, 0x7c, 0x0a,
	0x14, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x4f, 0x70, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x64, 0x6b, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x10, 0x02, 0x2a, 0x88, 0x03, 0x0a, 0x18,
	0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x26, 0x0a,
	0x22, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x04,
	0x12, 0x23, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x64, 0x6b,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x07, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x10,
	0x08, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x09, 0x2a, 0xbc, 0x01, 0x0a, 0x1c, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x25, 0x0a, 0x21, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x10, 0x02, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x6f, 0x70, 0x10, 0x03, 0x2a, 0x2e, 0x0a, 0x0f, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x10, 0x01, 0x2a, 0x4a, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x4b, 0x55, 0x50, 0x53, 0x52, 0x43, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10,
	0x02, 0x32, 0xb0, 0x02, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x30, 0x01,
	0x12, 0x72, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x32, 0xd5, 0x04, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x52,
	0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0b, 0x12, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x07,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c,
	0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x71, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x6d, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x1a, 0x09,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x32, 0x87, 0x06, 0x0a,
	0x19, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d, 0x12, 0x8e, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f,
	0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x72,
	0x69, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x8f, 0x01, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2d, 0x74, 0x72, 0x69, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x9d, 0x01,
	0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x53, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x53, 0x54, 0x72,
	0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x53, 0x54, 0x72, 0x69, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x72, 0x69, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x2d,
	0x66, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x99, 0x01,
	0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x53, 0x54, 0x72, 0x69, 0x6d, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x53, 0x54, 0x72, 0x69,
	0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x53, 0x54, 0x72, 0x69, 0x6d, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2d, 0x74, 0x72, 0x69, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x66, 0x73, 0x74,
	0x72, 0x69, 0x6d, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x04, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x72, 0x69, 0x6d, 0x2f, 0x73,
	0x74, 0x6f, 0x70, 0x3a, 0x01, 0x2a, 0x32, 0xd5, 0x03, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x91, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x92, 0x01, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8d,
	0x01, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x3a, 0x01, 0x2a, 0x32, 0xb3,
	0x02, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x96, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x82, 0x01, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x32, 0xb1, 0x01, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x0e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x30,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x32, 0xee, 0x06, 0x0a, 0x16, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8f, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x73, 0x2f, 0x69, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x45,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x72, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x72, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x73, 0x2f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x94, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22,
	0x16, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72,
	0x73, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x32, 0xb9, 0x05, 0x0a, 0x19, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x07, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x12, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0xaa, 0x01, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x31, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x12, 0xb2, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35,
	0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x32, 0xac, 0x06, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x8d, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x1a, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x8a, 0x01, 0x0a, 0x09, 0x52, 0x65,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a, 0x1a, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x1a, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa9,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa7, 0x01, 0x0a, 0x16, 0x45,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x45, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x2f, 0x6a, 0x6f, 0x62, 0x32, 0x86, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x61, 0x67, 0x73, 0x12, 0x72, 0x0a, 0x07, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x44, 0x69, 0x61, 0x67, 0x73, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x44, 0x69, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22,
	0x09, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x32, 0xec, 0x02,
	0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4a, 0x6f, 0x62,
	0x12, 0x6f, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x1a,
	0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0x75, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x64, 0x6b, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x6a,
	0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x72, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x32, 0xf8, 0x0a, 0x0a,
	0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x7f, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12,
	0x09, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x14, 0x45,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x11, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa1, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61,
	0x78, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x65, 0x12,
	0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x78, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x96, 0x01, 0x0a, 0x10,
	0x44, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x1a, 0x25, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xac, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x1a, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x01, 0x0a, 0x13, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x1a, 0x26, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x32, 0x9d, 0x04, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x6c, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x76, 0x31, 0x2f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x7b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0x8e, 0x01, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2f, 0x7b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x2f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x2f, 0x7b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x32, 0xee, 0x12, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x73, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x76, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a,
	0x17, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x87, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0xaa, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x77, 0x69, 0x74, 0x68, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x7f, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x1a, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a,
	0x12, 0x7f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x97, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x79, 0x0a, 0x09, 0x45,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x95,
	0x01, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2f, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x9b, 0x01, 0x0a, 0x11, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0xd3, 0x01, 0x0a, 0x1c, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22,
	0x29, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xc2, 0x01,
	0x0a, 0x16, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x3a,
	0x01, 0x2a, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x3a, 0x01, 0x2a, 0x32, 0x99, 0x04, 0x0a, 0x16, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x12, 0x7e, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x3a, 0x01, 0x2a, 0x12, 0x7e, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68,
	0x3a, 0x01, 0x2a, 0x12, 0x7a, 0x0a, 0x05, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x2f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x82, 0x01, 0x0a, 0x07, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x2f, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x3a, 0x01, 0x2a, 0x32, 0xad, 0x03, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x8c, 0x01, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x2d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x12,
	0x82, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x32, 0xe4, 0x04, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x9b, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x82, 0x01,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x93, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x1a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x32, 0xb2, 0x08, 0x0a, 0x16,
	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x7f, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8f, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x1a, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x45, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11,
	0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x97, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8c, 0x01, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9b, 0x01, 0x0a, 0x08, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb5, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x35, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x2a, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x32, 0xff, 0x05, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x8c,
	0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01,
	0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x92, 0x01, 0x0a,
	0x09, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x9b, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x30, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0x90, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x32, 0x9e, 0x12, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x82, 0x01,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x97, 0x01, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x8d, 0x01, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22,
	0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x92, 0x01, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x2f, 0x7b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x95, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12,
	0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x61, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xbe, 0x01, 0x0a, 0x14, 0x45, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x45,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8d, 0x01, 0x0a, 0x07, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x9a, 0x01, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x73, 0x72, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0x9d, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x9b, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0x9b, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x1a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0xad, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x2a, 0x2f,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0xa1, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x73,
	0x69, 0x7a, 0x65, 0x32, 0x8f, 0x0a, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x91, 0x01, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x97, 0x01,
	0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64,
	0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x1a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x95,
	0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xac, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xae, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x22, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x50, 0x01, 0x5a, 0x09,
	0x2e, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_api_proto_rawDescOnce sync.Once
	file_api_api_proto_rawDescData = file_api_api_proto_rawDesc
)

func file_api_api_proto_rawDescGZIP() []byte {
	file_api_api_proto_rawDescOnce.Do(func() {
		file_api_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_api_proto_rawDescData)
	})
	return file_api_api_proto_rawDescData
}

var file_api_api_proto_enumTypes = make([]protoimpl.EnumInfo, 57)
var file_api_api_proto_msgTypes = make([]protoimpl.MessageInfo, 421)
var file_api_api_proto_goTypes = []interface{}{
	(Status)(0),                                           // 0: openstorage.api.Status
	(DriverType)(0),                                       // 1: openstorage.api.DriverType
	(FSType)(0),                                           // 2: openstorage.api.FSType
	(GraphDriverChangeType)(0),                            // 3: openstorage.api.GraphDriverChangeType
	(SeverityType)(0),                                     // 4: openstorage.api.SeverityType
	(ResourceType)(0),                                     // 5: openstorage.api.ResourceType
	(AlertActionType)(0),                                  // 6: openstorage.api.AlertActionType
	(VolumeActionParam)(0),                                // 7: openstorage.api.VolumeActionParam
	(CosType)(0),                                          // 8: openstorage.api.CosType
	(IoProfile)(0),                                        // 9: openstorage.api.IoProfile
	(VolumeState)(0),                                      // 10: openstorage.api.VolumeState
	(VolumeStatus)(0),                                     // 11: openstorage.api.VolumeStatus
	(FilesystemHealthStatus)(0),                           // 12: openstorage.api.FilesystemHealthStatus
	(StorageMedium)(0),                                    // 13: openstorage.api.StorageMedium
	(AttachState)(0),                                      // 14: openstorage.api.AttachState
	(OperationFlags)(0),                                   // 15: openstorage.api.OperationFlags
	(HardwareType)(0),                                     // 16: openstorage.api.HardwareType
	(ExportProtocol)(0),                                   // 17: openstorage.api.ExportProtocol
	(ProxyProtocol)(0),                                    // 18: openstorage.api.ProxyProtocol
	(FastpathStatus)(0),                                   // 19: openstorage.api.FastpathStatus
	(FastpathProtocol)(0),                                 // 20: openstorage.api.FastpathProtocol
	(AnonymousBucketAccessMode)(0),                        // 21: openstorage.api.AnonymousBucketAccessMode
	(SdkTimeWeekday)(0),                                   // 22: openstorage.api.SdkTimeWeekday
	(StorageRebalanceJobState)(0),                         // 23: openstorage.api.StorageRebalanceJobState
	(SdkCloudBackupClusterType)(0),                        // 24: openstorage.api.SdkCloudBackupClusterType
	(SdkCloudBackupOpType)(0),                             // 25: openstorage.api.SdkCloudBackupOpType
	(SdkCloudBackupStatusType)(0),                         // 26: openstorage.api.SdkCloudBackupStatusType
	(SdkCloudBackupRequestedState)(0),                     // 27: openstorage.api.SdkCloudBackupRequestedState
	(EnforcementType)(0),                                  // 28: openstorage.api.EnforcementType
	(RestoreParamBoolType)(0),                             // 29: openstorage.api.RestoreParamBoolType
	(Xattr_Value)(0),                                      // 30: openstorage.api.Xattr.Value
	(Sharedv4ServiceSpec_ServiceType)(0),                  // 31: openstorage.api.Sharedv4ServiceSpec.ServiceType
	(Sharedv4FailoverStrategy_Value)(0),                   // 32: openstorage.api.Sharedv4FailoverStrategy.Value
	(ScanPolicy_ScanTrigger)(0),                           // 33: openstorage.api.ScanPolicy.ScanTrigger
	(ScanPolicy_ScanAction)(0),                            // 34: openstorage.api.ScanPolicy.ScanAction
	(VolumeSpecPolicy_PolicyOp)(0),                        // 35: openstorage.api.VolumeSpecPolicy.PolicyOp
	(Ownership_AccessType)(0),                             // 36: openstorage.api.Ownership.AccessType
	(StorageNode_SecurityStatus)(0),                       // 37: openstorage.api.StorageNode.SecurityStatus
	(Job_Type)(0),                                         // 38: openstorage.api.Job.Type
	(Job_State)(0),                                        // 39: openstorage.api.Job.State
	(DiagsCollectionStatus_State)(0),                      // 40: openstorage.api.DiagsCollectionStatus.State
	(StorageRebalanceTriggerThreshold_Type)(0),            // 41: openstorage.api.StorageRebalanceTriggerThreshold.Type
	(StorageRebalanceTriggerThreshold_Metric)(0),          // 42: openstorage.api.StorageRebalanceTriggerThreshold.Metric
	(StorageRebalanceWorkSummary_Type)(0),                 // 43: openstorage.api.StorageRebalanceWorkSummary.Type
	(StorageRebalanceAudit_StorageRebalanceAction)(0),     // 44: openstorage.api.StorageRebalanceAudit.StorageRebalanceAction
	(SdkStoragePool_OperationStatus)(0),                   // 45: openstorage.api.SdkStoragePool.OperationStatus
	(SdkStoragePool_OperationType)(0),                     // 46: openstorage.api.SdkStoragePool.OperationType
	(SdkStoragePool_ResizeOperationType)(0),               // 47: openstorage.api.SdkStoragePool.ResizeOperationType
	(FilesystemTrim_FilesystemTrimStatus)(0),              // 48: openstorage.api.FilesystemTrim.FilesystemTrimStatus
	(FilesystemCheck_FilesystemCheckStatus)(0),            // 49: openstorage.api.FilesystemCheck.FilesystemCheckStatus
	(SdkServiceCapability_OpenStorageService_Type)(0),     // 50: openstorage.api.SdkServiceCapability.OpenStorageService.Type
	(SdkVersion_Version)(0),                               // 51: openstorage.api.SdkVersion.Version
	(CloudMigrate_OperationType)(0),                       // 52: openstorage.api.CloudMigrate.OperationType
	(CloudMigrate_Stage)(0),                               // 53: openstorage.api.CloudMigrate.Stage
	(CloudMigrate_Status)(0),                              // 54: openstorage.api.CloudMigrate.Status
	(ClusterPairMode_Mode)(0),                             // 55: openstorage.api.ClusterPairMode.Mode
	(LabelSelectorRequirement_Operator)(0),                // 56: openstorage.api.LabelSelectorRequirement.Operator
	(*StorageResource)(nil),                               // 57: openstorage.api.StorageResource
	(*StoragePool)(nil),                                   // 58: openstorage.api.StoragePool
	(*SchedulerTopology)(nil),                             // 59: openstorage.api.SchedulerTopology
	(*StoragePoolOperation)(nil),                          // 60: openstorage.api.StoragePoolOperation
	(*TopologyRequirement)(nil),                           // 61: openstorage.api.TopologyRequirement
	(*VolumeLocator)(nil),                                 // 62: openstorage.api.VolumeLocator
	(*VolumeInspectOptions)(nil),                          // 63: openstorage.api.VolumeInspectOptions
	(*Source)(nil),                                        // 64: openstorage.api.Source
	(*Group)(nil),                                         // 65: openstorage.api.Group
	(*IoStrategy)(nil),                                    // 66: openstorage.api.IoStrategy
	(*Xattr)(nil),                                         // 67: openstorage.api.Xattr
	(*ExportSpec)(nil),                                    // 68: openstorage.api.ExportSpec
	(*NFSProxySpec)(nil),                                  // 69: openstorage.api.NFSProxySpec
	(*S3ProxySpec)(nil),                                   // 70: openstorage.api.S3ProxySpec
	(*PXDProxySpec)(nil),                                  // 71: openstorage.api.PXDProxySpec
	(*PureBlockSpec)(nil),                                 // 72: openstorage.api.PureBlockSpec
	(*PureFileSpec)(nil),                                  // 73: openstorage.api.PureFileSpec
	(*ProxySpec)(nil),                                     // 74: openstorage.api.ProxySpec
	(*Sharedv4ServiceSpec)(nil),                           // 75: openstorage.api.Sharedv4ServiceSpec
	(*Sharedv4FailoverStrategy)(nil),                      // 76: openstorage.api.Sharedv4FailoverStrategy
	(*Sharedv4Spec)(nil),                                  // 77: openstorage.api.Sharedv4Spec
	(*MountOptions)(nil),                                  // 78: openstorage.api.MountOptions
	(*FastpathReplState)(nil),                             // 79: openstorage.api.FastpathReplState
	(*FastpathConfig)(nil),                                // 80: openstorage.api.FastpathConfig
	(*ScanPolicy)(nil),                                    // 81: openstorage.api.ScanPolicy
	(*IoThrottle)(nil),                                    // 82: openstorage.api.IoThrottle
	(*VolumeSpec)(nil),                                    // 83: openstorage.api.VolumeSpec
	(*VolumeSpecUpdate)(nil),                              // 84: openstorage.api.VolumeSpecUpdate
	(*VolumeSpecPolicy)(nil),                              // 85: openstorage.api.VolumeSpecPolicy
	(*ReplicaSet)(nil),                                    // 86: openstorage.api.ReplicaSet
	(*RuntimeStateMap)(nil),                               // 87: openstorage.api.RuntimeStateMap
	(*Ownership)(nil),                                     // 88: openstorage.api.Ownership
	(*Volume)(nil),                                        // 89: openstorage.api.Volume
	(*Stats)(nil),                                         // 90: openstorage.api.Stats
	(*CapacityUsageInfo)(nil),                             // 91: openstorage.api.CapacityUsageInfo
	(*VolumeUsage)(nil),                                   // 92: openstorage.api.VolumeUsage
	(*VolumeUsageByNode)(nil),                             // 93: openstorage.api.VolumeUsageByNode
	(*FstrimVolumeUsageInfo)(nil),                         // 94: openstorage.api.FstrimVolumeUsageInfo
	(*RelaxedReclaimPurge)(nil),                           // 95: openstorage.api.RelaxedReclaimPurge
	(*SdkStoragePolicy)(nil),                              // 96: openstorage.api.SdkStoragePolicy
	(*Alert)(nil),                                         // 97: openstorage.api.Alert
	(*SdkAlertsTimeSpan)(nil),                             // 98: openstorage.api.SdkAlertsTimeSpan
	(*SdkAlertsCountSpan)(nil),                            // 99: openstorage.api.SdkAlertsCountSpan
	(*SdkAlertsOption)(nil),                               // 100: openstorage.api.SdkAlertsOption
	(*SdkAlertsResourceTypeQuery)(nil),                    // 101: openstorage.api.SdkAlertsResourceTypeQuery
	(*SdkAlertsAlertTypeQuery)(nil),                       // 102: openstorage.api.SdkAlertsAlertTypeQuery
	(*SdkAlertsResourceIdQuery)(nil),                      // 103: openstorage.api.SdkAlertsResourceIdQuery
	(*SdkAlertsQuery)(nil),                                // 104: openstorage.api.SdkAlertsQuery
	(*SdkAlertsEnumerateWithFiltersRequest)(nil),          // 105: openstorage.api.SdkAlertsEnumerateWithFiltersRequest
	(*SdkAlertsEnumerateWithFiltersResponse)(nil),         // 106: openstorage.api.SdkAlertsEnumerateWithFiltersResponse
	(*SdkAlertsDeleteRequest)(nil),                        // 107: openstorage.api.SdkAlertsDeleteRequest
	(*SdkAlertsDeleteResponse)(nil),                       // 108: openstorage.api.SdkAlertsDeleteResponse
	(*Alerts)(nil),                                        // 109: openstorage.api.Alerts
	(*ObjectstoreInfo)(nil),                               // 110: openstorage.api.ObjectstoreInfo
	(*VolumeCreateRequest)(nil),                           // 111: openstorage.api.VolumeCreateRequest
	(*VolumeResponse)(nil),                                // 112: openstorage.api.VolumeResponse
	(*VolumeCreateResponse)(nil),                          // 113: openstorage.api.VolumeCreateResponse
	(*VolumeStateAction)(nil),                             // 114: openstorage.api.VolumeStateAction
	(*VolumeSetRequest)(nil),                              // 115: openstorage.api.VolumeSetRequest
	(*VolumeSetResponse)(nil),                             // 116: openstorage.api.VolumeSetResponse
	(*SnapCreateRequest)(nil),                             // 117: openstorage.api.SnapCreateRequest
	(*SnapCreateResponse)(nil),                            // 118: openstorage.api.SnapCreateResponse
	(*VolumeInfo)(nil),                                    // 119: openstorage.api.VolumeInfo
	(*VolumeConsumer)(nil),                                // 120: openstorage.api.VolumeConsumer
	(*VolumeServiceRequest)(nil),                          // 121: openstorage.api.VolumeServiceRequest
	(*VolumeServiceInstanceResponse)(nil),                 // 122: openstorage.api.VolumeServiceInstanceResponse
	(*VolumeServiceResponse)(nil),                         // 123: openstorage.api.VolumeServiceResponse
	(*GraphDriverChanges)(nil),                            // 124: openstorage.api.GraphDriverChanges
	(*ClusterResponse)(nil),                               // 125: openstorage.api.ClusterResponse
	(*ActiveRequest)(nil),                                 // 126: openstorage.api.ActiveRequest
	(*ActiveRequests)(nil),                                // 127: openstorage.api.ActiveRequests
	(*GroupSnapCreateRequest)(nil),                        // 128: openstorage.api.GroupSnapCreateRequest
	(*GroupSnapCreateResponse)(nil),                       // 129: openstorage.api.GroupSnapCreateResponse
	(*StorageNode)(nil),                                   // 130: openstorage.api.StorageNode
	(*StorageCluster)(nil),                                // 131: openstorage.api.StorageCluster
	(*BucketCreateRequest)(nil),                           // 132: openstorage.api.BucketCreateRequest
	(*BucketCreateResponse)(nil),                          // 133: openstorage.api.BucketCreateResponse
	(*BucketDeleteRequest)(nil),                           // 134: openstorage.api.BucketDeleteRequest
	(*BucketDeleteResponse)(nil),                          // 135: openstorage.api.BucketDeleteResponse
	(*BucketGrantAccessRequest)(nil),                      // 136: openstorage.api.BucketGrantAccessRequest
	(*BucketGrantAccessResponse)(nil),                     // 137: openstorage.api.BucketGrantAccessResponse
	(*BucketRevokeAccessRequest)(nil),                     // 138: openstorage.api.BucketRevokeAccessRequest
	(*BucketRevokeAccessResponse)(nil),                    // 139: openstorage.api.BucketRevokeAccessResponse
	(*BucketAccessCredentials)(nil),                       // 140: openstorage.api.BucketAccessCredentials
	(*SdkOpenStoragePolicyCreateRequest)(nil),             // 141: openstorage.api.SdkOpenStoragePolicyCreateRequest
	(*SdkOpenStoragePolicyCreateResponse)(nil),            // 142: openstorage.api.SdkOpenStoragePolicyCreateResponse
	(*SdkOpenStoragePolicyEnumerateRequest)(nil),          // 143: openstorage.api.SdkOpenStoragePolicyEnumerateRequest
	(*SdkOpenStoragePolicyEnumerateResponse)(nil),         // 144: openstorage.api.SdkOpenStoragePolicyEnumerateResponse
	(*SdkOpenStoragePolicyInspectRequest)(nil),            // 145: openstorage.api.SdkOpenStoragePolicyInspectRequest
	(*SdkOpenStoragePolicyInspectResponse)(nil),           // 146: openstorage.api.SdkOpenStoragePolicyInspectResponse
	(*SdkOpenStoragePolicyDeleteRequest)(nil),             // 147: openstorage.api.SdkOpenStoragePolicyDeleteRequest
	(*SdkOpenStoragePolicyDeleteResponse)(nil),            // 148: openstorage.api.SdkOpenStoragePolicyDeleteResponse
	(*SdkOpenStoragePolicyUpdateRequest)(nil),             // 149: openstorage.api.SdkOpenStoragePolicyUpdateRequest
	(*SdkOpenStoragePolicyUpdateResponse)(nil),            // 150: openstorage.api.SdkOpenStoragePolicyUpdateResponse
	(*SdkOpenStoragePolicySetDefaultRequest)(nil),         // 151: openstorage.api.SdkOpenStoragePolicySetDefaultRequest
	(*SdkOpenStoragePolicySetDefaultResponse)(nil),        // 152: openstorage.api.SdkOpenStoragePolicySetDefaultResponse
	(*SdkOpenStoragePolicyReleaseRequest)(nil),            // 153: openstorage.api.SdkOpenStoragePolicyReleaseRequest
	(*SdkOpenStoragePolicyReleaseResponse)(nil),           // 154: openstorage.api.SdkOpenStoragePolicyReleaseResponse
	(*SdkOpenStoragePolicyDefaultInspectRequest)(nil),     // 155: openstorage.api.SdkOpenStoragePolicyDefaultInspectRequest
	(*SdkOpenStoragePolicyDefaultInspectResponse)(nil),    // 156: openstorage.api.SdkOpenStoragePolicyDefaultInspectResponse
	(*SdkSchedulePolicyCreateRequest)(nil),                // 157: openstorage.api.SdkSchedulePolicyCreateRequest
	(*SdkSchedulePolicyCreateResponse)(nil),               // 158: openstorage.api.SdkSchedulePolicyCreateResponse
	(*SdkSchedulePolicyUpdateRequest)(nil),                // 159: openstorage.api.SdkSchedulePolicyUpdateRequest
	(*SdkSchedulePolicyUpdateResponse)(nil),               // 160: openstorage.api.SdkSchedulePolicyUpdateResponse
	(*SdkSchedulePolicyEnumerateRequest)(nil),             // 161: openstorage.api.SdkSchedulePolicyEnumerateRequest
	(*SdkSchedulePolicyEnumerateResponse)(nil),            // 162: openstorage.api.SdkSchedulePolicyEnumerateResponse
	(*SdkSchedulePolicyInspectRequest)(nil),               // 163: openstorage.api.SdkSchedulePolicyInspectRequest
	(*SdkSchedulePolicyInspectResponse)(nil),              // 164: openstorage.api.SdkSchedulePolicyInspectResponse
	(*SdkSchedulePolicyDeleteRequest)(nil),                // 165: openstorage.api.SdkSchedulePolicyDeleteRequest
	(*SdkSchedulePolicyDeleteResponse)(nil),               // 166: openstorage.api.SdkSchedulePolicyDeleteResponse
	(*SdkSchedulePolicyIntervalDaily)(nil),                // 167: openstorage.api.SdkSchedulePolicyIntervalDaily
	(*SdkSchedulePolicyIntervalWeekly)(nil),               // 168: openstorage.api.SdkSchedulePolicyIntervalWeekly
	(*SdkSchedulePolicyIntervalMonthly)(nil),              // 169: openstorage.api.SdkSchedulePolicyIntervalMonthly
	(*SdkSchedulePolicyIntervalPeriodic)(nil),             // 170: openstorage.api.SdkSchedulePolicyIntervalPeriodic
	(*SdkSchedulePolicyInterval)(nil),                     // 171: openstorage.api.SdkSchedulePolicyInterval
	(*SdkSchedulePolicy)(nil),                             // 172: openstorage.api.SdkSchedulePolicy
	(*SdkCredentialCreateRequest)(nil),                    // 173: openstorage.api.SdkCredentialCreateRequest
	(*SdkCredentialCreateResponse)(nil),                   // 174: openstorage.api.SdkCredentialCreateResponse
	(*SdkCredentialUpdateRequest)(nil),                    // 175: openstorage.api.SdkCredentialUpdateRequest
	(*SdkCredentialUpdateResponse)(nil),                   // 176: openstorage.api.SdkCredentialUpdateResponse
	(*SdkAwsCredentialRequest)(nil),                       // 177: openstorage.api.SdkAwsCredentialRequest
	(*SdkAzureCredentialRequest)(nil),                     // 178: openstorage.api.SdkAzureCredentialRequest
	(*SdkGoogleCredentialRequest)(nil),                    // 179: openstorage.api.SdkGoogleCredentialRequest
	(*SdkAwsCredentialResponse)(nil),                      // 180: openstorage.api.SdkAwsCredentialResponse
	(*SdkAzureCredentialResponse)(nil),                    // 181: openstorage.api.SdkAzureCredentialResponse
	(*SdkGoogleCredentialResponse)(nil),                   // 182: openstorage.api.SdkGoogleCredentialResponse
	(*SdkCredentialEnumerateRequest)(nil),                 // 183: openstorage.api.SdkCredentialEnumerateRequest
	(*SdkCredentialEnumerateResponse)(nil),                // 184: openstorage.api.SdkCredentialEnumerateResponse
	(*SdkCredentialInspectRequest)(nil),                   // 185: openstorage.api.SdkCredentialInspectRequest
	(*SdkCredentialInspectResponse)(nil),                  // 186: openstorage.api.SdkCredentialInspectResponse
	(*SdkCredentialDeleteRequest)(nil),                    // 187: openstorage.api.SdkCredentialDeleteRequest
	(*SdkCredentialDeleteResponse)(nil),                   // 188: openstorage.api.SdkCredentialDeleteResponse
	(*SdkCredentialValidateRequest)(nil),                  // 189: openstorage.api.SdkCredentialValidateRequest
	(*SdkCredentialValidateResponse)(nil),                 // 190: openstorage.api.SdkCredentialValidateResponse
	(*SdkCredentialDeleteReferencesRequest)(nil),          // 191: openstorage.api.SdkCredentialDeleteReferencesRequest
	(*SdkCredentialDeleteReferencesResponse)(nil),         // 192: openstorage.api.SdkCredentialDeleteReferencesResponse
	(*SdkVolumeAttachOptions)(nil),                        // 193: openstorage.api.SdkVolumeAttachOptions
	(*SdkVolumeMountRequest)(nil),                         // 194: openstorage.api.SdkVolumeMountRequest
	(*SdkVolumeMountResponse)(nil),                        // 195: openstorage.api.SdkVolumeMountResponse
	(*SdkVolumeUnmountOptions)(nil),                       // 196: openstorage.api.SdkVolumeUnmountOptions
	(*SdkVolumeUnmountRequest)(nil),                       // 197: openstorage.api.SdkVolumeUnmountRequest
	(*SdkVolumeUnmountResponse)(nil),                      // 198: openstorage.api.SdkVolumeUnmountResponse
	(*SdkVolumeAttachRequest)(nil),                        // 199: openstorage.api.SdkVolumeAttachRequest
	(*SdkVolumeAttachResponse)(nil),                       // 200: openstorage.api.SdkVolumeAttachResponse
	(*SdkVolumeDetachOptions)(nil),                        // 201: openstorage.api.SdkVolumeDetachOptions
	(*SdkVolumeDetachRequest)(nil),                        // 202: openstorage.api.SdkVolumeDetachRequest
	(*SdkVolumeDetachResponse)(nil),                       // 203: openstorage.api.SdkVolumeDetachResponse
	(*SdkVolumeCreateRequest)(nil),                        // 204: openstorage.api.SdkVolumeCreateRequest
	(*SdkVolumeCreateResponse)(nil),                       // 205: openstorage.api.SdkVolumeCreateResponse
	(*SdkVolumeCloneRequest)(nil),                         // 206: openstorage.api.SdkVolumeCloneRequest
	(*SdkVolumeCloneResponse)(nil),                        // 207: openstorage.api.SdkVolumeCloneResponse
	(*SdkVolumeDeleteRequest)(nil),                        // 208: openstorage.api.SdkVolumeDeleteRequest
	(*SdkVolumeDeleteResponse)(nil),                       // 209: openstorage.api.SdkVolumeDeleteResponse
	(*SdkVolumeInspectRequest)(nil),                       // 210: openstorage.api.SdkVolumeInspectRequest
	(*SdkVolumeInspectResponse)(nil),                      // 211: openstorage.api.SdkVolumeInspectResponse
	(*SdkVolumeInspectWithFiltersRequest)(nil),            // 212: openstorage.api.SdkVolumeInspectWithFiltersRequest
	(*SdkVolumeInspectWithFiltersResponse)(nil),           // 213: openstorage.api.SdkVolumeInspectWithFiltersResponse
	(*SdkVolumeUpdateRequest)(nil),                        // 214: openstorage.api.SdkVolumeUpdateRequest
	(*SdkVolumeUpdateResponse)(nil),                       // 215: openstorage.api.SdkVolumeUpdateResponse
	(*SdkVolumeStatsRequest)(nil),                         // 216: openstorage.api.SdkVolumeStatsRequest
	(*SdkVolumeStatsResponse)(nil),                        // 217: openstorage.api.SdkVolumeStatsResponse
	(*SdkVolumeCapacityUsageRequest)(nil),                 // 218: openstorage.api.SdkVolumeCapacityUsageRequest
	(*SdkVolumeCapacityUsageResponse)(nil),                // 219: openstorage.api.SdkVolumeCapacityUsageResponse
	(*SdkVolumeEnumerateRequest)(nil),                     // 220: openstorage.api.SdkVolumeEnumerateRequest
	(*SdkVolumeEnumerateResponse)(nil),                    // 221: openstorage.api.SdkVolumeEnumerateResponse
	(*SdkVolumeEnumerateWithFiltersRequest)(nil),          // 222: openstorage.api.SdkVolumeEnumerateWithFiltersRequest
	(*SdkVolumeEnumerateWithFiltersResponse)(nil),         // 223: openstorage.api.SdkVolumeEnumerateWithFiltersResponse
	(*SdkVolumeSnapshotCreateRequest)(nil),                // 224: openstorage.api.SdkVolumeSnapshotCreateRequest
	(*SdkVolumeSnapshotCreateResponse)(nil),               // 225: openstorage.api.SdkVolumeSnapshotCreateResponse
	(*SdkVolumeSnapshotRestoreRequest)(nil),               // 226: openstorage.api.SdkVolumeSnapshotRestoreRequest
	(*SdkVolumeSnapshotRestoreResponse)(nil),              // 227: openstorage.api.SdkVolumeSnapshotRestoreResponse
	(*SdkVolumeSnapshotEnumerateRequest)(nil),             // 228: openstorage.api.SdkVolumeSnapshotEnumerateRequest
	(*SdkVolumeSnapshotEnumerateResponse)(nil),            // 229: openstorage.api.SdkVolumeSnapshotEnumerateResponse
	(*SdkVolumeSnapshotEnumerateWithFiltersRequest)(nil),  // 230: openstorage.api.SdkVolumeSnapshotEnumerateWithFiltersRequest
	(*SdkVolumeSnapshotEnumerateWithFiltersResponse)(nil), // 231: openstorage.api.SdkVolumeSnapshotEnumerateWithFiltersResponse
	(*SdkVolumeSnapshotScheduleUpdateRequest)(nil),        // 232: openstorage.api.SdkVolumeSnapshotScheduleUpdateRequest
	(*SdkVolumeSnapshotScheduleUpdateResponse)(nil),       // 233: openstorage.api.SdkVolumeSnapshotScheduleUpdateResponse
	(*SdkNodeVolumeUsageByNodeRequest)(nil),               // 234: openstorage.api.SdkNodeVolumeUsageByNodeRequest
	(*SdkNodeVolumeUsageByNodeResponse)(nil),              // 235: openstorage.api.SdkNodeVolumeUsageByNodeResponse
	(*SdkNodeRelaxedReclaimPurgeRequest)(nil),             // 236: openstorage.api.SdkNodeRelaxedReclaimPurgeRequest
	(*SdkNodeRelaxedReclaimPurgeResponse)(nil),            // 237: openstorage.api.SdkNodeRelaxedReclaimPurgeResponse
	(*SdkClusterDomainsEnumerateRequest)(nil),             // 238: openstorage.api.SdkClusterDomainsEnumerateRequest
	(*SdkClusterDomainsEnumerateResponse)(nil),            // 239: openstorage.api.SdkClusterDomainsEnumerateResponse
	(*SdkClusterDomainInspectRequest)(nil),                // 240: openstorage.api.SdkClusterDomainInspectRequest
	(*SdkClusterDomainInspectResponse)(nil),               // 241: openstorage.api.SdkClusterDomainInspectResponse
	(*SdkClusterDomainActivateRequest)(nil),               // 242: openstorage.api.SdkClusterDomainActivateRequest
	(*SdkClusterDomainActivateResponse)(nil),              // 243: openstorage.api.SdkClusterDomainActivateResponse
	(*SdkClusterDomainDeactivateRequest)(nil),             // 244: openstorage.api.SdkClusterDomainDeactivateRequest
	(*SdkClusterDomainDeactivateResponse)(nil),            // 245: openstorage.api.SdkClusterDomainDeactivateResponse
	(*SdkClusterInspectCurrentRequest)(nil),               // 246: openstorage.api.SdkClusterInspectCurrentRequest
	(*SdkClusterInspectCurrentResponse)(nil),              // 247: openstorage.api.SdkClusterInspectCurrentResponse
	(*SdkNodeInspectRequest)(nil),                         // 248: openstorage.api.SdkNodeInspectRequest
	(*Job)(nil),                                           // 249: openstorage.api.Job
	(*SdkJobResponse)(nil),                                // 250: openstorage.api.SdkJobResponse
	(*NodeDrainAttachmentOptions)(nil),                    // 251: openstorage.api.NodeDrainAttachmentOptions
	(*SdkNodeDrainAttachmentsRequest)(nil),                // 252: openstorage.api.SdkNodeDrainAttachmentsRequest
	(*NodeDrainAttachmentsJob)(nil),                       // 253: openstorage.api.NodeDrainAttachmentsJob
	(*CloudDriveTransferJob)(nil),                         // 254: openstorage.api.CloudDriveTransferJob
	(*CollectDiagsJob)(nil),                               // 255: openstorage.api.CollectDiagsJob
	(*DiagsCollectionStatus)(nil),                         // 256: openstorage.api.DiagsCollectionStatus
	(*SdkDiagsCollectRequest)(nil),                        // 257: openstorage.api.SdkDiagsCollectRequest
	(*SdkDiagsCollectResponse)(nil),                       // 258: openstorage.api.SdkDiagsCollectResponse
	(*DiagsNodeSelector)(nil),                             // 259: openstorage.api.DiagsNodeSelector
	(*DiagsVolumeSelector)(nil),                           // 260: openstorage.api.DiagsVolumeSelector
	(*SdkEnumerateJobsRequest)(nil),                       // 261: openstorage.api.SdkEnumerateJobsRequest
	(*SdkEnumerateJobsResponse)(nil),                      // 262: openstorage.api.SdkEnumerateJobsResponse
	(*SdkUpdateJobRequest)(nil),                           // 263: openstorage.api.SdkUpdateJobRequest
	(*SdkUpdateJobResponse)(nil),                          // 264: openstorage.api.SdkUpdateJobResponse
	(*SdkGetJobStatusRequest)(nil),                        // 265: openstorage.api.SdkGetJobStatusRequest
	(*JobAudit)(nil),                                      // 266: openstorage.api.JobAudit
	(*JobWorkSummary)(nil),                                // 267: openstorage.api.JobWorkSummary
	(*JobSummary)(nil),                                    // 268: openstorage.api.JobSummary
	(*SdkGetJobStatusResponse)(nil),                       // 269: openstorage.api.SdkGetJobStatusResponse
	(*DrainAttachmentsSummary)(nil),                       // 270: openstorage.api.DrainAttachmentsSummary
	(*SdkNodeCordonAttachmentsRequest)(nil),               // 271: openstorage.api.SdkNodeCordonAttachmentsRequest
	(*SdkNodeCordonAttachmentsResponse)(nil),              // 272: openstorage.api.SdkNodeCordonAttachmentsResponse
	(*SdkNodeUncordonAttachmentsRequest)(nil),             // 273: openstorage.api.SdkNodeUncordonAttachmentsRequest
	(*SdkNodeUncordonAttachmentsResponse)(nil),            // 274: openstorage.api.SdkNodeUncordonAttachmentsResponse
	(*SdkStoragePoolResizeRequest)(nil),                   // 275: openstorage.api.SdkStoragePoolResizeRequest
	(*StorageRebalanceTriggerThreshold)(nil),              // 276: openstorage.api.StorageRebalanceTriggerThreshold
	(*SdkStorageRebalanceRequest)(nil),                    // 277: openstorage.api.SdkStorageRebalanceRequest
	(*SdkStorageRebalanceResponse)(nil),                   // 278: openstorage.api.SdkStorageRebalanceResponse
	(*StorageRebalanceJob)(nil),                           // 279: openstorage.api.StorageRebalanceJob
	(*StorageRebalanceSummary)(nil),                       // 280: openstorage.api.StorageRebalanceSummary
	(*StorageRebalanceWorkSummary)(nil),                   // 281: openstorage.api.StorageRebalanceWorkSummary
	(*StorageRebalanceAudit)(nil),                         // 282: openstorage.api.StorageRebalanceAudit
	(*SdkUpdateRebalanceJobRequest)(nil),                  // 283: openstorage.api.SdkUpdateRebalanceJobRequest
	(*SdkUpdateRebalanceJobResponse)(nil),                 // 284: openstorage.api.SdkUpdateRebalanceJobResponse
	(*SdkGetRebalanceJobStatusRequest)(nil),               // 285: openstorage.api.SdkGetRebalanceJobStatusRequest
	(*SdkGetRebalanceJobStatusResponse)(nil),              // 286: openstorage.api.SdkGetRebalanceJobStatusResponse
	(*SdkEnumerateRebalanceJobsRequest)(nil),              // 287: openstorage.api.SdkEnumerateRebalanceJobsRequest
	(*SdkEnumerateRebalanceJobsResponse)(nil),             // 288: openstorage.api.SdkEnumerateRebalanceJobsResponse
	(*SdkStoragePool)(nil),                                // 289: openstorage.api.SdkStoragePool
	(*SdkStoragePoolResizeResponse)(nil),                  // 290: openstorage.api.SdkStoragePoolResizeResponse
	(*SdkNodeInspectResponse)(nil),                        // 291: openstorage.api.SdkNodeInspectResponse
	(*SdkNodeInspectCurrentRequest)(nil),                  // 292: openstorage.api.SdkNodeInspectCurrentRequest
	(*SdkNodeInspectCurrentResponse)(nil),                 // 293: openstorage.api.SdkNodeInspectCurrentResponse
	(*SdkNodeEnumerateRequest)(nil),                       // 294: openstorage.api.SdkNodeEnumerateRequest
	(*SdkNodeEnumerateResponse)(nil),                      // 295: openstorage.api.SdkNodeEnumerateResponse
	(*SdkNodeEnumerateWithFiltersRequest)(nil),            // 296: openstorage.api.SdkNodeEnumerateWithFiltersRequest
	(*SdkNodeEnumerateWithFiltersResponse)(nil),           // 297: openstorage.api.SdkNodeEnumerateWithFiltersResponse
	(*SdkObjectstoreInspectRequest)(nil),                  // 298: openstorage.api.SdkObjectstoreInspectRequest
	(*SdkObjectstoreInspectResponse)(nil),                 // 299: openstorage.api.SdkObjectstoreInspectResponse
	(*SdkObjectstoreCreateRequest)(nil),                   // 300: openstorage.api.SdkObjectstoreCreateRequest
	(*SdkObjectstoreCreateResponse)(nil),                  // 301: openstorage.api.SdkObjectstoreCreateResponse
	(*SdkObjectstoreDeleteRequest)(nil),                   // 302: openstorage.api.SdkObjectstoreDeleteRequest
	(*SdkObjectstoreDeleteResponse)(nil),                  // 303: openstorage.api.SdkObjectstoreDeleteResponse
	(*SdkObjectstoreUpdateRequest)(nil),                   // 304: openstorage.api.SdkObjectstoreUpdateRequest
	(*SdkObjectstoreUpdateResponse)(nil),                  // 305: openstorage.api.SdkObjectstoreUpdateResponse
	(*SdkCloudBackupCreateRequest)(nil),                   // 306: openstorage.api.SdkCloudBackupCreateRequest
	(*SdkCloudBackupCreateResponse)(nil),                  // 307: openstorage.api.SdkCloudBackupCreateResponse
	(*SdkCloudBackupGroupCreateRequest)(nil),              // 308: openstorage.api.SdkCloudBackupGroupCreateRequest
	(*SdkCloudBackupGroupCreateResponse)(nil),             // 309: openstorage.api.SdkCloudBackupGroupCreateResponse
	(*SdkCloudBackupRestoreRequest)(nil),                  // 310: openstorage.api.SdkCloudBackupRestoreRequest
	(*SdkCloudBackupRestoreResponse)(nil),                 // 311: openstorage.api.SdkCloudBackupRestoreResponse
	(*SdkCloudBackupDeleteRequest)(nil),                   // 312: openstorage.api.SdkCloudBackupDeleteRequest
	(*SdkCloudBackupDeleteResponse)(nil),                  // 313: openstorage.api.SdkCloudBackupDeleteResponse
	(*SdkCloudBackupDeleteAllRequest)(nil),                // 314: openstorage.api.SdkCloudBackupDeleteAllRequest
	(*SdkCloudBackupDeleteAllResponse)(nil),               // 315: openstorage.api.SdkCloudBackupDeleteAllResponse
	(*SdkCloudBackupEnumerateWithFiltersRequest)(nil),     // 316: openstorage.api.SdkCloudBackupEnumerateWithFiltersRequest
	(*SdkCloudBackupInfo)(nil),                            // 317: openstorage.api.SdkCloudBackupInfo
	(*SdkCloudBackupEnumerateWithFiltersResponse)(nil),    // 318: openstorage.api.SdkCloudBackupEnumerateWithFiltersResponse
	(*SdkCloudBackupStatus)(nil),                          // 319: openstorage.api.SdkCloudBackupStatus
	(*SdkCloudBackupStatusRequest)(nil),                   // 320: openstorage.api.SdkCloudBackupStatusRequest
	(*SdkCloudBackupStatusResponse)(nil),                  // 321: openstorage.api.SdkCloudBackupStatusResponse
	(*SdkCloudBackupCatalogRequest)(nil),                  // 322: openstorage.api.SdkCloudBackupCatalogRequest
	(*SdkCloudBackupCatalogResponse)(nil),                 // 323: openstorage.api.SdkCloudBackupCatalogResponse
	(*SdkCloudBackupHistoryItem)(nil),                     // 324: openstorage.api.SdkCloudBackupHistoryItem
	(*SdkCloudBackupHistoryRequest)(nil),                  // 325: openstorage.api.SdkCloudBackupHistoryRequest
	(*SdkCloudBackupHistoryResponse)(nil),                 // 326: openstorage.api.SdkCloudBackupHistoryResponse
	(*SdkCloudBackupStateChangeRequest)(nil),              // 327: openstorage.api.SdkCloudBackupStateChangeRequest
	(*SdkCloudBackupStateChangeResponse)(nil),             // 328: openstorage.api.SdkCloudBackupStateChangeResponse
	(*SdkCloudBackupScheduleInfo)(nil),                    // 329: openstorage.api.SdkCloudBackupScheduleInfo
	(*SdkCloudBackupSchedCreateRequest)(nil),              // 330: openstorage.api.SdkCloudBackupSchedCreateRequest
	(*SdkCloudBackupSchedCreateResponse)(nil),             // 331: openstorage.api.SdkCloudBackupSchedCreateResponse
	(*SdkCloudBackupSchedUpdateRequest)(nil),              // 332: openstorage.api.SdkCloudBackupSchedUpdateRequest
	(*SdkCloudBackupSchedUpdateResponse)(nil),             // 333: openstorage.api.SdkCloudBackupSchedUpdateResponse
	(*SdkCloudBackupSchedDeleteRequest)(nil),              // 334: openstorage.api.SdkCloudBackupSchedDeleteRequest
	(*SdkCloudBackupSchedDeleteResponse)(nil),             // 335: openstorage.api.SdkCloudBackupSchedDeleteResponse
	(*SdkCloudBackupSchedEnumerateRequest)(nil),           // 336: openstorage.api.SdkCloudBackupSchedEnumerateRequest
	(*SdkCloudBackupSchedEnumerateResponse)(nil),          // 337: openstorage.api.SdkCloudBackupSchedEnumerateResponse
	(*SdkCloudBackupSizeRequest)(nil),                     // 338: openstorage.api.SdkCloudBackupSizeRequest
	(*SdkCloudBackupSizeResponse)(nil),                    // 339: openstorage.api.SdkCloudBackupSizeResponse
	(*SdkRule)(nil),                                       // 340: openstorage.api.SdkRule
	(*SdkRole)(nil),                                       // 341: openstorage.api.SdkRole
	(*SdkRoleCreateRequest)(nil),                          // 342: openstorage.api.SdkRoleCreateRequest
	(*SdkRoleCreateResponse)(nil),                         // 343: openstorage.api.SdkRoleCreateResponse
	(*SdkRoleEnumerateRequest)(nil),                       // 344: openstorage.api.SdkRoleEnumerateRequest
	(*SdkRoleEnumerateResponse)(nil),                      // 345: openstorage.api.SdkRoleEnumerateResponse
	(*SdkRoleInspectRequest)(nil),                         // 346: openstorage.api.SdkRoleInspectRequest
	(*SdkRoleInspectResponse)(nil),                        // 347: openstorage.api.SdkRoleInspectResponse
	(*SdkRoleDeleteRequest)(nil),                          // 348: openstorage.api.SdkRoleDeleteRequest
	(*SdkRoleDeleteResponse)(nil),                         // 349: openstorage.api.SdkRoleDeleteResponse
	(*SdkRoleUpdateRequest)(nil),                          // 350: openstorage.api.SdkRoleUpdateRequest
	(*SdkRoleUpdateResponse)(nil),                         // 351: openstorage.api.SdkRoleUpdateResponse
	(*FilesystemTrim)(nil),                                // 352: openstorage.api.FilesystemTrim
	(*SdkFilesystemTrimStartRequest)(nil),                 // 353: openstorage.api.SdkFilesystemTrimStartRequest
	(*SdkFilesystemTrimStartResponse)(nil),                // 354: openstorage.api.SdkFilesystemTrimStartResponse
	(*SdkFilesystemTrimStatusRequest)(nil),                // 355: openstorage.api.SdkFilesystemTrimStatusRequest
	(*SdkFilesystemTrimStatusResponse)(nil),               // 356: openstorage.api.SdkFilesystemTrimStatusResponse
	(*SdkAutoFSTrimStatusRequest)(nil),                    // 357: openstorage.api.SdkAutoFSTrimStatusRequest
	(*SdkAutoFSTrimStatusResponse)(nil),                   // 358: openstorage.api.SdkAutoFSTrimStatusResponse
	(*SdkAutoFSTrimUsageRequest)(nil),                     // 359: openstorage.api.SdkAutoFSTrimUsageRequest
	(*SdkAutoFSTrimUsageResponse)(nil),                    // 360: openstorage.api.SdkAutoFSTrimUsageResponse
	(*SdkFilesystemTrimStopRequest)(nil),                  // 361: openstorage.api.SdkFilesystemTrimStopRequest
	(*SdkFilesystemTrimStopResponse)(nil),                 // 362: openstorage.api.SdkFilesystemTrimStopResponse
	(*FilesystemCheck)(nil),                               // 363: openstorage.api.FilesystemCheck
	(*SdkFilesystemCheckStartRequest)(nil),                // 364: openstorage.api.SdkFilesystemCheckStartRequest
	(*SdkFilesystemCheckStartResponse)(nil),               // 365: openstorage.api.SdkFilesystemCheckStartResponse
	(*SdkFilesystemCheckStatusRequest)(nil),               // 366: openstorage.api.SdkFilesystemCheckStatusRequest
	(*SdkFilesystemCheckStatusResponse)(nil),              // 367: openstorage.api.SdkFilesystemCheckStatusResponse
	(*SdkFilesystemCheckStopRequest)(nil),                 // 368: openstorage.api.SdkFilesystemCheckStopRequest
	(*SdkFilesystemCheckStopResponse)(nil),                // 369: openstorage.api.SdkFilesystemCheckStopResponse
	(*SdkIdentityCapabilitiesRequest)(nil),                // 370: openstorage.api.SdkIdentityCapabilitiesRequest
	(*SdkIdentityCapabilitiesResponse)(nil),               // 371: openstorage.api.SdkIdentityCapabilitiesResponse
	(*SdkIdentityVersionRequest)(nil),                     // 372: openstorage.api.SdkIdentityVersionRequest
	(*SdkIdentityVersionResponse)(nil),                    // 373: openstorage.api.SdkIdentityVersionResponse
	(*SdkServiceCapability)(nil),                          // 374: openstorage.api.SdkServiceCapability
	(*SdkVersion)(nil),                                    // 375: openstorage.api.SdkVersion
	(*StorageVersion)(nil),                                // 376: openstorage.api.StorageVersion
	(*CloudMigrate)(nil),                                  // 377: openstorage.api.CloudMigrate
	(*CloudMigrateStartRequest)(nil),                      // 378: openstorage.api.CloudMigrateStartRequest
	(*SdkCloudMigrateStartRequest)(nil),                   // 379: openstorage.api.SdkCloudMigrateStartRequest
	(*CloudMigrateStartResponse)(nil),                     // 380: openstorage.api.CloudMigrateStartResponse
	(*SdkCloudMigrateStartResponse)(nil),                  // 381: openstorage.api.SdkCloudMigrateStartResponse
	(*CloudMigrateCancelRequest)(nil),                     // 382: openstorage.api.CloudMigrateCancelRequest
	(*SdkCloudMigrateCancelRequest)(nil),                  // 383: openstorage.api.SdkCloudMigrateCancelRequest
	(*SdkCloudMigrateCancelResponse)(nil),                 // 384: openstorage.api.SdkCloudMigrateCancelResponse
	(*CloudMigrateInfo)(nil),                              // 385: openstorage.api.CloudMigrateInfo
	(*CloudMigrateInfoList)(nil),                          // 386: openstorage.api.CloudMigrateInfoList
	(*SdkCloudMigrateStatusRequest)(nil),                  // 387: openstorage.api.SdkCloudMigrateStatusRequest
	(*CloudMigrateStatusRequest)(nil),                     // 388: openstorage.api.CloudMigrateStatusRequest
	(*CloudMigrateStatusResponse)(nil),                    // 389: openstorage.api.CloudMigrateStatusResponse
	(*SdkCloudMigrateStatusResponse)(nil),                 // 390: openstorage.api.SdkCloudMigrateStatusResponse
	(*ClusterPairMode)(nil),                               // 391: openstorage.api.ClusterPairMode
	(*ClusterPairCreateRequest)(nil),                      // 392: openstorage.api.ClusterPairCreateRequest
	(*ClusterPairCreateResponse)(nil),                     // 393: openstorage.api.ClusterPairCreateResponse
	(*SdkClusterPairCreateRequest)(nil),                   // 394: openstorage.api.SdkClusterPairCreateRequest
	(*SdkClusterPairCreateResponse)(nil),                  // 395: openstorage.api.SdkClusterPairCreateResponse
	(*ClusterPairProcessRequest)(nil),                     // 396: openstorage.api.ClusterPairProcessRequest
	(*ClusterPairProcessResponse)(nil),                    // 397: openstorage.api.ClusterPairProcessResponse
	(*SdkClusterPairDeleteRequest)(nil),                   // 398: openstorage.api.SdkClusterPairDeleteRequest
	(*SdkClusterPairDeleteResponse)(nil),                  // 399: openstorage.api.SdkClusterPairDeleteResponse
	(*ClusterPairTokenGetResponse)(nil),                   // 400: openstorage.api.ClusterPairTokenGetResponse
	(*SdkClusterPairGetTokenRequest)(nil),                 // 401: openstorage.api.SdkClusterPairGetTokenRequest
	(*SdkClusterPairGetTokenResponse)(nil),                // 402: openstorage.api.SdkClusterPairGetTokenResponse
	(*SdkClusterPairResetTokenRequest)(nil),               // 403: openstorage.api.SdkClusterPairResetTokenRequest
	(*SdkClusterPairResetTokenResponse)(nil),              // 404: openstorage.api.SdkClusterPairResetTokenResponse
	(*ClusterPairInfo)(nil),                               // 405: openstorage.api.ClusterPairInfo
	(*SdkClusterPairInspectRequest)(nil),                  // 406: openstorage.api.SdkClusterPairInspectRequest
	(*ClusterPairGetResponse)(nil),                        // 407: openstorage.api.ClusterPairGetResponse
	(*SdkClusterPairInspectResponse)(nil),                 // 408: openstorage.api.SdkClusterPairInspectResponse
	(*SdkClusterPairEnumerateRequest)(nil),                // 409: openstorage.api.SdkClusterPairEnumerateRequest
	(*ClusterPairsEnumerateResponse)(nil),                 // 410: openstorage.api.ClusterPairsEnumerateResponse
	(*SdkClusterPairEnumerateResponse)(nil),               // 411: openstorage.api.SdkClusterPairEnumerateResponse
	(*Catalog)(nil),                                       // 412: openstorage.api.Catalog
	(*Report)(nil),                                        // 413: openstorage.api.Report
	(*CatalogResponse)(nil),                               // 414: openstorage.api.CatalogResponse
	(*LocateResponse)(nil),                                // 415: openstorage.api.LocateResponse
	(*VolumePlacementStrategy)(nil),                       // 416: openstorage.api.VolumePlacementStrategy
	(*ReplicaPlacementSpec)(nil),                          // 417: openstorage.api.ReplicaPlacementSpec
	(*VolumePlacementSpec)(nil),                           // 418: openstorage.api.VolumePlacementSpec
	(*LabelSelectorRequirement)(nil),                      // 419: openstorage.api.LabelSelectorRequirement
	(*RestoreVolSnashotSchedule)(nil),                     // 420: openstorage.api.RestoreVolSnashotSchedule
	(*RestoreVolStoragePolicy)(nil),                       // 421: openstorage.api.RestoreVolStoragePolicy
	(*RestoreVolumeSpec)(nil),                             // 422: openstorage.api.RestoreVolumeSpec
	(*SdkVolumeCatalogRequest)(nil),                       // 423: openstorage.api.SdkVolumeCatalogRequest
	(*SdkVolumeCatalogResponse)(nil),                      // 424: openstorage.api.SdkVolumeCatalogResponse
	nil,                                                   // 425: openstorage.api.StoragePool.LabelsEntry
	nil,                                                   // 426: openstorage.api.SchedulerTopology.LabelsEntry
	nil,                                                   // 427: openstorage.api.StoragePoolOperation.ParamsEntry
	nil,                                                   // 428: openstorage.api.TopologyRequirement.LabelsEntry
	nil,                                                   // 429: openstorage.api.VolumeLocator.VolumeLabelsEntry
	nil,                                                   // 430: openstorage.api.MountOptions.OptionsEntry
	nil,                                                   // 431: openstorage.api.VolumeSpec.VolumeLabelsEntry
	nil,                                                   // 432: openstorage.api.VolumeSpecPolicy.VolumeLabelsEntry
	nil,                                                   // 433: openstorage.api.RuntimeStateMap.RuntimeStateEntry
	(*Ownership_PublicAccessControl)(nil),                 // 434: openstorage.api.Ownership.PublicAccessControl
	(*Ownership_AccessControl)(nil),                       // 435: openstorage.api.Ownership.AccessControl
	nil,                                                   // 436: openstorage.api.Ownership.AccessControl.GroupsEntry
	nil,                                                   // 437: openstorage.api.Ownership.AccessControl.CollaboratorsEntry
	nil,                                                   // 438: openstorage.api.Volume.AttachInfoEntry
	nil,                                                   // 439: openstorage.api.VolumeSetRequest.OptionsEntry
	nil,                                                   // 440: openstorage.api.VolumeServiceRequest.SrvCmdParamsEntry
	nil,                                                   // 441: openstorage.api.VolumeServiceInstanceResponse.StatusEntry
	nil,                                                   // 442: openstorage.api.ActiveRequest.ReqestKVEntry
	nil,                                                   // 443: openstorage.api.GroupSnapCreateRequest.LabelsEntry
	nil,                                                   // 444: openstorage.api.GroupSnapCreateResponse.SnapshotsEntry
	nil,                                                   // 445: openstorage.api.StorageNode.DisksEntry
	nil,                                                   // 446: openstorage.api.StorageNode.NodeLabelsEntry
	nil,                                                   // 447: openstorage.api.SdkVolumeMountRequest.DriverOptionsEntry
	nil,                                                   // 448: openstorage.api.SdkVolumeUnmountRequest.DriverOptionsEntry
	nil,                                                   // 449: openstorage.api.SdkVolumeAttachRequest.DriverOptionsEntry
	nil,                                                   // 450: openstorage.api.SdkVolumeDetachRequest.DriverOptionsEntry
	nil,                                                   // 451: openstorage.api.SdkVolumeCreateRequest.LabelsEntry
	nil,                                                   // 452: openstorage.api.SdkVolumeInspectResponse.LabelsEntry
	nil,                                                   // 453: openstorage.api.SdkVolumeInspectWithFiltersRequest.LabelsEntry
	nil,                                                   // 454: openstorage.api.SdkVolumeUpdateRequest.LabelsEntry
	nil,                                                   // 455: openstorage.api.SdkVolumeEnumerateWithFiltersRequest.LabelsEntry
	nil,                                                   // 456: openstorage.api.SdkVolumeSnapshotCreateRequest.LabelsEntry
	nil,                                                   // 457: openstorage.api.SdkVolumeSnapshotEnumerateWithFiltersRequest.LabelsEntry
	nil,                                                   // 458: openstorage.api.SdkCloudBackupCreateRequest.LabelsEntry
	nil,                                                   // 459: openstorage.api.SdkCloudBackupGroupCreateRequest.LabelsEntry
	nil,                                                   // 460: openstorage.api.SdkCloudBackupEnumerateWithFiltersRequest.MetadataFilterEntry
	nil,                                                   // 461: openstorage.api.SdkCloudBackupInfo.MetadataEntry
	nil,                                                   // 462: openstorage.api.SdkCloudBackupStatusResponse.StatusesEntry
	nil,                                                   // 463: openstorage.api.SdkCloudBackupScheduleInfo.LabelsEntry
	nil,                                                   // 464: openstorage.api.SdkCloudBackupSchedEnumerateResponse.CloudSchedListEntry
	nil,                                                   // 465: openstorage.api.SdkAutoFSTrimStatusResponse.TrimStatusEntry
	nil,                                                   // 466: openstorage.api.SdkAutoFSTrimUsageResponse.UsageEntry
	(*SdkServiceCapability_OpenStorageService)(nil),       // 467: openstorage.api.SdkServiceCapability.OpenStorageService
	nil, // 468: openstorage.api.StorageVersion.DetailsEntry
	(*SdkCloudMigrateStartRequest_MigrateVolume)(nil),      // 469: openstorage.api.SdkCloudMigrateStartRequest.MigrateVolume
	(*SdkCloudMigrateStartRequest_MigrateVolumeGroup)(nil), // 470: openstorage.api.SdkCloudMigrateStartRequest.MigrateVolumeGroup
	(*SdkCloudMigrateStartRequest_MigrateAllVolumes)(nil),  // 471: openstorage.api.SdkCloudMigrateStartRequest.MigrateAllVolumes
	nil,                           // 472: openstorage.api.CloudMigrateStatusResponse.InfoEntry
	nil,                           // 473: openstorage.api.ClusterPairProcessResponse.OptionsEntry
	nil,                           // 474: openstorage.api.ClusterPairInfo.OptionsEntry
	nil,                           // 475: openstorage.api.ClusterPairsEnumerateResponse.PairsEntry
	nil,                           // 476: openstorage.api.LocateResponse.MountsEntry
	nil,                           // 477: openstorage.api.LocateResponse.DockeridsEntry
	(*timestamppb.Timestamp)(nil), // 478: google.protobuf.Timestamp
}
var file_api_api_proto_depIdxs = []int32{
	13,  // 0: openstorage.api.StorageResource.medium:type_name -> openstorage.api.StorageMedium
	478, // 1: openstorage.api.StorageResource.last_scan:type_name -> google.protobuf.Timestamp
	8,   // 2: openstorage.api.StoragePool.Cos:type_name -> openstorage.api.CosType
	13,  // 3: openstorage.api.StoragePool.Medium:type_name -> openstorage.api.StorageMedium
	425, // 4: openstorage.api.StoragePool.labels:type_name -> openstorage.api.StoragePool.LabelsEntry
	60,  // 5: openstorage.api.StoragePool.last_operation:type_name -> openstorage.api.StoragePoolOperation
	426, // 6: openstorage.api.SchedulerTopology.labels:type_name -> openstorage.api.SchedulerTopology.LabelsEntry
	46,  // 7: openstorage.api.StoragePoolOperation.type:type_name -> openstorage.api.SdkStoragePool.OperationType
	427, // 8: openstorage.api.StoragePoolOperation.params:type_name -> openstorage.api.StoragePoolOperation.ParamsEntry
	45,  // 9: openstorage.api.StoragePoolOperation.status:type_name -> openstorage.api.SdkStoragePool.OperationStatus
	428, // 10: openstorage.api.TopologyRequirement.labels:type_name -> openstorage.api.TopologyRequirement.LabelsEntry
	429, // 11: openstorage.api.VolumeLocator.volume_labels:type_name -> openstorage.api.VolumeLocator.VolumeLabelsEntry
	88,  // 12: openstorage.api.VolumeLocator.ownership:type_name -> openstorage.api.Ownership
	65,  // 13: openstorage.api.VolumeLocator.group:type_name -> openstorage.api.Group
	17,  // 14: openstorage.api.ExportSpec.export_protocol:type_name -> openstorage.api.ExportProtocol
	18,  // 15: openstorage.api.ProxySpec.proxy_protocol:type_name -> openstorage.api.ProxyProtocol
	69,  // 16: openstorage.api.ProxySpec.nfs_spec:type_name -> openstorage.api.NFSProxySpec
	70,  // 17: openstorage.api.ProxySpec.s3_spec:type_name -> openstorage.api.S3ProxySpec
	71,  // 18: openstorage.api.ProxySpec.pxd_spec:type_name -> openstorage.api.PXDProxySpec
	72,  // 19: openstorage.api.ProxySpec.pure_block_spec:type_name -> openstorage.api.PureBlockSpec
	73,  // 20: openstorage.api.ProxySpec.pure_file_spec:type_name -> openstorage.api.PureFileSpec
	31,  // 21: openstorage.api.Sharedv4ServiceSpec.type:type_name -> openstorage.api.Sharedv4ServiceSpec.ServiceType
	32,  // 22: openstorage.api.Sharedv4Spec.failover_strategy:type_name -> openstorage.api.Sharedv4FailoverStrategy.Value
	430, // 23: openstorage.api.MountOptions.options:type_name -> openstorage.api.MountOptions.OptionsEntry
	20,  // 24: openstorage.api.FastpathReplState.protocol:type_name -> openstorage.api.FastpathProtocol
	19,  // 25: openstorage.api.FastpathConfig.status:type_name -> openstorage.api.FastpathStatus
	79,  // 26: openstorage.api.FastpathConfig.replicas:type_name -> openstorage.api.FastpathReplState
	33,  // 27: openstorage.api.ScanPolicy.trigger:type_name -> openstorage.api.ScanPolicy.ScanTrigger
	34,  // 28: openstorage.api.ScanPolicy.action:type_name -> openstorage.api.ScanPolicy.ScanAction
	2,   // 29: openstorage.api.VolumeSpec.format:type_name -> openstorage.api.FSType
	8,   // 30: openstorage.api.VolumeSpec.cos:type_name -> openstorage.api.CosType
	9,   // 31: openstorage.api.VolumeSpec.io_profile:type_name -> openstorage.api.IoProfile
	431, // 32: openstorage.api.VolumeSpec.volume_labels:type_name -> openstorage.api.VolumeSpec.VolumeLabelsEntry
	86,  // 33: openstorage.api.VolumeSpec.replica_set:type_name -> openstorage.api.ReplicaSet
	65,  // 34: openstorage.api.VolumeSpec.group:type_name -> openstorage.api.Group
	66,  // 35: openstorage.api.VolumeSpec.io_strategy:type_name -> openstorage.api.IoStrategy
	416, // 36: openstorage.api.VolumeSpec.placement_strategy:type_name -> openstorage.api.VolumePlacementStrategy
	88,  // 37: openstorage.api.VolumeSpec.ownership:type_name -> openstorage.api.Ownership
	68,  // 38: openstorage.api.VolumeSpec.export_spec:type_name -> openstorage.api.ExportSpec
	30,  // 39: openstorage.api.VolumeSpec.xattr:type_name -> openstorage.api.Xattr.Value
	81,  // 40: openstorage.api.VolumeSpec.scan_policy:type_name -> openstorage.api.ScanPolicy
	78,  // 41: openstorage.api.VolumeSpec.mount_options:type_name -> openstorage.api.MountOptions
	78,  // 42: openstorage.api.VolumeSpec.sharedv4_mount_options:type_name -> openstorage.api.MountOptions
	74,  // 43: openstorage.api.VolumeSpec.proxy_spec:type_name -> openstorage.api.ProxySpec
	75,  // 44: openstorage.api.VolumeSpec.sharedv4_service_spec:type_name -> openstorage.api.Sharedv4ServiceSpec
	77,  // 45: openstorage.api.VolumeSpec.sharedv4_spec:type_name -> openstorage.api.Sharedv4Spec
	82,  // 46: openstorage.api.VolumeSpec.io_throttle:type_name -> openstorage.api.IoThrottle
	61,  // 47: openstorage.api.VolumeSpec.topology_requirement:type_name -> openstorage.api.TopologyRequirement
	8,   // 48: openstorage.api.VolumeSpecUpdate.cos:type_name -> openstorage.api.CosType
	9,   // 49: openstorage.api.VolumeSpecUpdate.io_profile:type_name -> openstorage.api.IoProfile
	86,  // 50: openstorage.api.VolumeSpecUpdate.replica_set:type_name -> openstorage.api.ReplicaSet
	65,  // 51: openstorage.api.VolumeSpecUpdate.group:type_name -> openstorage.api.Group
	88,  // 52: openstorage.api.VolumeSpecUpdate.ownership:type_name -> openstorage.api.Ownership
	66,  // 53: openstorage.api.VolumeSpecUpdate.io_strategy:type_name -> openstorage.api.IoStrategy
	68,  // 54: openstorage.api.VolumeSpecUpdate.export_spec:type_name -> openstorage.api.ExportSpec
	30,  // 55: openstorage.api.VolumeSpecUpdate.xattr:type_name -> openstorage.api.Xattr.Value
	81,  // 56: openstorage.api.VolumeSpecUpdate.scan_policy:type_name -> openstorage.api.ScanPolicy
	78,  // 57: openstorage.api.VolumeSpecUpdate.mount_opt_spec:type_name -> openstorage.api.MountOptions
	78,  // 58: openstorage.api.VolumeSpecUpdate.sharedv4_mount_opt_spec:type_name -> openstorage.api.MountOptions
	74,  // 59: openstorage.api.VolumeSpecUpdate.proxy_spec:type_name -> openstorage.api.ProxySpec
	75,  // 60: openstorage.api.VolumeSpecUpdate.sharedv4_service_spec:type_name -> openstorage.api.Sharedv4ServiceSpec
	77,  // 61: openstorage.api.VolumeSpecUpdate.sharedv4_spec:type_name -> openstorage.api.Sharedv4Spec
	82,  // 62: openstorage.api.VolumeSpecUpdate.io_throttle:type_name -> openstorage.api.IoThrottle
	8,   // 63: openstorage.api.VolumeSpecPolicy.cos:type_name -> openstorage.api.CosType
	9,   // 64: openstorage.api.VolumeSpecPolicy.io_profile:type_name -> openstorage.api.IoProfile
	432, // 65: openstorage.api.VolumeSpecPolicy.volume_labels:type_name -> openstorage.api.VolumeSpecPolicy.VolumeLabelsEntry
	86,  // 66: openstorage.api.VolumeSpecPolicy.replica_set:type_name -> openstorage.api.ReplicaSet
	65,  // 67: openstorage.api.VolumeSpecPolicy.group:type_name -> openstorage.api.Group
	35,  // 68: openstorage.api.VolumeSpecPolicy.size_operator:type_name -> openstorage.api.VolumeSpecPolicy.PolicyOp
	35,  // 69: openstorage.api.VolumeSpecPolicy.ha_level_operator:type_name -> openstorage.api.VolumeSpecPolicy.PolicyOp
	35,  // 70: openstorage.api.VolumeSpecPolicy.scale_operator:type_name -> openstorage.api.VolumeSpecPolicy.PolicyOp
	35,  // 71: openstorage.api.VolumeSpecPolicy.snapshot_interval_operator:type_name -> openstorage.api.VolumeSpecPolicy.PolicyOp
	66,  // 72: openstorage.api.VolumeSpecPolicy.io_strategy:type_name -> openstorage.api.IoStrategy
	68,  // 73: openstorage.api.VolumeSpecPolicy.export_spec:type_name -> openstorage.api.ExportSpec
	81,  // 74: openstorage.api.VolumeSpecPolicy.scan_policy:type_name -> openstorage.api.ScanPolicy
	78,  // 75: openstorage.api.VolumeSpecPolicy.mount_opt_spec:type_name -> openstorage.api.MountOptions
	78,  // 76: openstorage.api.VolumeSpecPolicy.sharedv4_mount_opt_spec:type_name -> openstorage.api.MountOptions
	74,  // 77: openstorage.api.VolumeSpecPolicy.proxy_spec:type_name -> openstorage.api.ProxySpec
	75,  // 78: openstorage.api.VolumeSpecPolicy.sharedv4_service_spec:type_name -> openstorage.api.Sharedv4ServiceSpec
	77,  // 79: openstorage.api.VolumeSpecPolicy.sharedv4_spec:type_name -> openstorage.api.Sharedv4Spec
	82,  // 80: openstorage.api.VolumeSpecPolicy.io_throttle:type_name -> openstorage.api.IoThrottle
	433, // 81: openstorage.api.RuntimeStateMap.runtime_state:type_name -> openstorage.api.RuntimeStateMap.RuntimeStateEntry
	435, // 82: openstorage.api.Ownership.acls:type_name -> openstorage.api.Ownership.AccessControl
	64,  // 83: openstorage.api.Volume.source:type_name -> openstorage.api.Source
	65,  // 84: openstorage.api.Volume.group:type_name -> openstorage.api.Group
	62,  // 85: openstorage.api.Volume.locator:type_name -> openstorage.api.VolumeLocator
	478, // 86: openstorage.api.Volume.ctime:type_name -> google.protobuf.Timestamp
	83,  // 87: openstorage.api.Volume.spec:type_name -> openstorage.api.VolumeSpec
	478, // 88: openstorage.api.Volume.last_scan:type_name -> google.protobuf.Timestamp
	2,   // 89: openstorage.api.Volume.format:type_name -> openstorage.api.FSType
	11,  // 90: openstorage.api.Volume.status:type_name -> openstorage.api.VolumeStatus
	10,  // 91: openstorage.api.Volume.state:type_name -> openstorage.api.VolumeState
	14,  // 92: openstorage.api.Volume.attached_state:type_name -> openstorage.api.AttachState
	438, // 93: openstorage.api.Volume.attach_info:type_name -> openstorage.api.Volume.AttachInfoEntry
	86,  // 94: openstorage.api.Volume.replica_sets:type_name -> openstorage.api.ReplicaSet
	87,  // 95: openstorage.api.Volume.runtime_state:type_name -> openstorage.api.RuntimeStateMap
	120, // 96: openstorage.api.Volume.volume_consumers:type_name -> openstorage.api.VolumeConsumer
	478, // 97: openstorage.api.Volume.attach_time:type_name -> google.protobuf.Timestamp
	478, // 98: openstorage.api.Volume.detach_time:type_name -> google.protobuf.Timestamp
	80,  // 99: openstorage.api.Volume.fpConfig:type_name -> openstorage.api.FastpathConfig
	478, // 100: openstorage.api.Volume.last_scan_fix:type_name -> google.protobuf.Timestamp
	12,  // 101: openstorage.api.Volume.last_scan_status:type_name -> openstorage.api.FilesystemHealthStatus
	78,  // 102: openstorage.api.Volume.mount_options:type_name -> openstorage.api.MountOptions
	78,  // 103: openstorage.api.Volume.sharedv4_mount_options:type_name -> openstorage.api.MountOptions
	9,   // 104: openstorage.api.Volume.derived_io_profile:type_name -> openstorage.api.IoProfile
	92,  // 105: openstorage.api.VolumeUsageByNode.volume_usage:type_name -> openstorage.api.VolumeUsage
	85,  // 106: openstorage.api.SdkStoragePolicy.policy:type_name -> openstorage.api.VolumeSpecPolicy
	88,  // 107: openstorage.api.SdkStoragePolicy.ownership:type_name -> openstorage.api.Ownership
	4,   // 108: openstorage.api.Alert.severity:type_name -> openstorage.api.SeverityType
	478, // 109: openstorage.api.Alert.timestamp:type_name -> google.protobuf.Timestamp
	5,   // 110: openstorage.api.Alert.resource:type_name -> openstorage.api.ResourceType
	478, // 111: openstorage.api.Alert.first_seen:type_name -> google.protobuf.Timestamp
	478, // 112: openstorage.api.SdkAlertsTimeSpan.start_time:type_name -> google.protobuf.Timestamp
	478, // 113: openstorage.api.SdkAlertsTimeSpan.end_time:type_name -> google.protobuf.Timestamp
	4,   // 114: openstorage.api.SdkAlertsOption.min_severity_type:type_name -> openstorage.api.SeverityType
	98,  // 115: openstorage.api.SdkAlertsOption.time_span:type_name -> openstorage.api.SdkAlertsTimeSpan
	99,  // 116: openstorage.api.SdkAlertsOption.count_span:type_name -> openstorage.api.SdkAlertsCountSpan
	5,   // 117: openstorage.api.SdkAlertsResourceTypeQuery.resource_type:type_name -> openstorage.api.ResourceType
	5,   // 118: openstorage.api.SdkAlertsAlertTypeQuery.resource_type:type_name -> openstorage.api.ResourceType
	5,   // 119: openstorage.api.SdkAlertsResourceIdQuery.resource_type:type_name -> openstorage.api.ResourceType
	101, // 120: openstorage.api.SdkAlertsQuery.resource_type_query:type_name -> openstorage.api.SdkAlertsResourceTypeQuery
	102, // 121: openstorage.api.SdkAlertsQuery.alert_type_query:type_name -> openstorage.api.SdkAlertsAlertTypeQuery
	103, // 122: openstorage.api.SdkAlertsQuery.resource_id_query:type_name -> openstorage.api.SdkAlertsResourceIdQuery
	100, // 123: openstorage.api.SdkAlertsQuery.opts:type_name -> openstorage.api.SdkAlertsOption
	104, // 124: openstorage.api.SdkAlertsEnumerateWithFiltersRequest.queries:type_name -> openstorage.api.SdkAlertsQuery
	97,  // 125: openstorage.api.SdkAlertsEnumerateWithFiltersResponse.alerts:type_name -> openstorage.api.Alert
	104, // 126: openstorage.api.SdkAlertsDeleteRequest.queries:type_name -> openstorage.api.SdkAlertsQuery
	97,  // 127: openstorage.api.Alerts.alert:type_name -> openstorage.api.Alert
	62,  // 128: openstorage.api.VolumeCreateRequest.locator:type_name -> openstorage.api.VolumeLocator
	64,  // 129: openstorage.api.VolumeCreateRequest.source:type_name -> openstorage.api.Source
	83,  // 130: openstorage.api.VolumeCreateRequest.spec:type_name -> openstorage.api.VolumeSpec
	112, // 131: openstorage.api.VolumeCreateResponse.volume_response:type_name -> openstorage.api.VolumeResponse
	7,   // 132: openstorage.api.VolumeStateAction.attach:type_name -> openstorage.api.VolumeActionParam
	7,   // 133: openstorage.api.VolumeStateAction.mount:type_name -> openstorage.api.VolumeActionParam
	62,  // 134: openstorage.api.VolumeSetRequest.locator:type_name -> openstorage.api.VolumeLocator
	83,  // 135: openstorage.api.VolumeSetRequest.spec:type_name -> openstorage.api.VolumeSpec
	114, // 136: openstorage.api.VolumeSetRequest.action:type_name -> openstorage.api.VolumeStateAction
	439, // 137: openstorage.api.VolumeSetRequest.options:type_name -> openstorage.api.VolumeSetRequest.OptionsEntry
	89,  // 138: openstorage.api.VolumeSetResponse.volume:type_name -> openstorage.api.Volume
	112, // 139: openstorage.api.VolumeSetResponse.volume_response:type_name -> openstorage.api.VolumeResponse
	62,  // 140: openstorage.api.SnapCreateRequest.locator:type_name -> openstorage.api.VolumeLocator
	113, // 141: openstorage.api.SnapCreateResponse.volume_create_response:type_name -> openstorage.api.VolumeCreateResponse
	83,  // 142: openstorage.api.VolumeInfo.storage:type_name -> openstorage.api.VolumeSpec
	440, // 143: openstorage.api.VolumeServiceRequest.srv_cmd_params:type_name -> openstorage.api.VolumeServiceRequest.SrvCmdParamsEntry
	441, // 144: openstorage.api.VolumeServiceInstanceResponse.status:type_name -> openstorage.api.VolumeServiceInstanceResponse.StatusEntry
	122, // 145: openstorage.api.VolumeServiceResponse.vol_srv_rsp:type_name -> openstorage.api.VolumeServiceInstanceResponse
	3,   // 146: openstorage.api.GraphDriverChanges.kind:type_name -> openstorage.api.GraphDriverChangeType
	442, // 147: openstorage.api.ActiveRequest.ReqestKV:type_name -> openstorage.api.ActiveRequest.ReqestKVEntry
	126, // 148: openstorage.api.ActiveRequests.ActiveRequest:type_name -> openstorage.api.ActiveRequest
	443, // 149: openstorage.api.GroupSnapCreateRequest.Labels:type_name -> openstorage.api.GroupSnapCreateRequest.LabelsEntry
	444, // 150: openstorage.api.GroupSnapCreateResponse.snapshots:type_name -> openstorage.api.GroupSnapCreateResponse.SnapshotsEntry
	0,   // 151: openstorage.api.StorageNode.status:type_name -> openstorage.api.Status
	445, // 152: openstorage.api.StorageNode.disks:type_name -> openstorage.api.StorageNode.DisksEntry
	58,  // 153: openstorage.api.StorageNode.pools:type_name -> openstorage.api.StoragePool
	446, // 154: openstorage.api.StorageNode.node_labels:type_name -> openstorage.api.StorageNode.NodeLabelsEntry
	16,  // 155: openstorage.api.StorageNode.HWType:type_name -> openstorage.api.HardwareType
	37,  // 156: openstorage.api.StorageNode.security_status:type_name -> openstorage.api.StorageNode.SecurityStatus
	59,  // 157: openstorage.api.StorageNode.scheduler_topology:type_name -> openstorage.api.SchedulerTopology
	0,   // 158: openstorage.api.StorageCluster.status:type_name -> openstorage.api.Status
	21,  // 159: openstorage.api.BucketCreateRequest.anonymousBucketAccessMode:type_name -> openstorage.api.AnonymousBucketAccessMode
	140, // 160: openstorage.api.BucketGrantAccessResponse.credentials:type_name -> openstorage.api.BucketAccessCredentials
	96,  // 161: openstorage.api.SdkOpenStoragePolicyCreateRequest.storage_policy:type_name -> openstorage.api.SdkStoragePolicy
	96,  // 162: openstorage.api.SdkOpenStoragePolicyEnumerateResponse.storage_policies:type_name -> openstorage.api.SdkStoragePolicy
	96,  // 163: openstorage.api.SdkOpenStoragePolicyInspectResponse.storage_policy:type_name -> openstorage.api.SdkStoragePolicy
	96,  // 164: openstorage.api.SdkOpenStoragePolicyUpdateRequest.storage_policy:type_name -> openstorage.api.SdkStoragePolicy
	96,  // 165: openstorage.api.SdkOpenStoragePolicyDefaultInspectResponse.storage_policy:type_name -> openstorage.api.SdkStoragePolicy
	172, // 166: openstorage.api.SdkSchedulePolicyCreateRequest.schedule_policy:type_name -> openstorage.api.SdkSchedulePolicy
	172, // 167: openstorage.api.SdkSchedulePolicyUpdateRequest.schedule_policy:type_name -> openstorage.api.SdkSchedulePolicy
	172, // 168: openstorage.api.SdkSchedulePolicyEnumerateResponse.policies:type_name -> openstorage.api.SdkSchedulePolicy
	172, // 169: openstorage.api.SdkSchedulePolicyInspectResponse.policy:type_name -> openstorage.api.SdkSchedulePolicy
	22,  // 170: openstorage.api.SdkSchedulePolicyIntervalWeekly.day:type_name -> openstorage.api.SdkTimeWeekday
	167, // 171: openstorage.api.SdkSchedulePolicyInterval.daily:type_name -> openstorage.api.SdkSchedulePolicyIntervalDaily
	168, // 172: openstorage.api.SdkSchedulePolicyInterval.weekly:type_name -> openstorage.api.SdkSchedulePolicyIntervalWeekly
	169, // 173: openstorage.api.SdkSchedulePolicyInterval.monthly:type_name -> openstorage.api.SdkSchedulePolicyIntervalMonthly
	170, // 174: openstorage.api.SdkSchedulePolicyInterval.periodic:type_name -> openstorage.api.SdkSchedulePolicyIntervalPeriodic
	171, // 175: openstorage.api.SdkSchedulePolicy.schedules:type_name -> openstorage.api.SdkSchedulePolicyInterval
	88,  // 176: openstorage.api.SdkCredentialCreateRequest.ownership:type_name -> openstorage.api.Ownership
	177, // 177: openstorage.api.SdkCredentialCreateRequest.aws_credential:type_name -> openstorage.api.SdkAwsCredentialRequest
	178, // 178: openstorage.api.SdkCredentialCreateRequest.azure_credential:type_name -> openstorage.api.SdkAzureCredentialRequest
	179, // 179: openstorage.api.SdkCredentialCreateRequest.google_credential:type_name -> openstorage.api.SdkGoogleCredentialRequest
	173, // 180: openstorage.api.SdkCredentialUpdateRequest.update_req:type_name -> openstorage.api.SdkCredentialCreateRequest
	88,  // 181: openstorage.api.SdkCredentialInspectResponse.ownership:type_name -> openstorage.api.Ownership
	180, // 182: openstorage.api.SdkCredentialInspectResponse.aws_credential:type_name -> openstorage.api.SdkAwsCredentialResponse
	181, // 183: openstorage.api.SdkCredentialInspectResponse.azure_credential:type_name -> openstorage.api.SdkAzureCredentialResponse
	182, // 184: openstorage.api.SdkCredentialInspectResponse.google_credential:type_name -> openstorage.api.SdkGoogleCredentialResponse
	193, // 185: openstorage.api.SdkVolumeMountRequest.options:type_name -> openstorage.api.SdkVolumeAttachOptions
	447, // 186: openstorage.api.SdkVolumeMountRequest.driver_options:type_name -> openstorage.api.SdkVolumeMountRequest.DriverOptionsEntry
	196, // 187: openstorage.api.SdkVolumeUnmountRequest.options:type_name -> openstorage.api.SdkVolumeUnmountOptions
	448, // 188: openstorage.api.SdkVolumeUnmountRequest.driver_options:type_name -> openstorage.api.SdkVolumeUnmountRequest.DriverOptionsEntry
	193, // 189: openstorage.api.SdkVolumeAttachRequest.options:type_name -> openstorage.api.SdkVolumeAttachOptions
	449, // 190: openstorage.api.SdkVolumeAttachRequest.driver_options:type_name -> openstorage.api.SdkVolumeAttachRequest.DriverOptionsEntry
	201, // 191: openstorage.api.SdkVolumeDetachRequest.options:type_name -> openstorage.api.SdkVolumeDetachOptions
	450, // 192: openstorage.api.SdkVolumeDetachRequest.driver_options:type_name -> openstorage.api.SdkVolumeDetachRequest.DriverOptionsEntry
	83,  // 193: openstorage.api.SdkVolumeCreateRequest.spec:type_name -> openstorage.api.VolumeSpec
	451, // 194: openstorage.api.SdkVolumeCreateRequest.labels:type_name -> openstorage.api.SdkVolumeCreateRequest.LabelsEntry
	63,  // 195: openstorage.api.SdkVolumeInspectRequest.options:type_name -> openstorage.api.VolumeInspectOptions
	89,  // 196: openstorage.api.SdkVolumeInspectResponse.volume:type_name -> openstorage.api.Volume
	452, // 197: openstorage.api.SdkVolumeInspectResponse.labels:type_name -> openstorage.api.SdkVolumeInspectResponse.LabelsEntry
	453, // 198: openstorage.api.SdkVolumeInspectWithFiltersRequest.labels:type_name -> openstorage.api.SdkVolumeInspectWithFiltersRequest.LabelsEntry
	88,  // 199: openstorage.api.SdkVolumeInspectWithFiltersRequest.ownership:type_name -> openstorage.api.Ownership
	65,  // 200: openstorage.api.SdkVolumeInspectWithFiltersRequest.group:type_name -> openstorage.api.Group
	63,  // 201: openstorage.api.SdkVolumeInspectWithFiltersRequest.options:type_name -> openstorage.api.VolumeInspectOptions
	211, // 202: openstorage.api.SdkVolumeInspectWithFiltersResponse.volumes:type_name -> openstorage.api.SdkVolumeInspectResponse
	454, // 203: openstorage.api.SdkVolumeUpdateRequest.labels:type_name -> openstorage.api.SdkVolumeUpdateRequest.LabelsEntry
	84,  // 204: openstorage.api.SdkVolumeUpdateRequest.spec:type_name -> openstorage.api.VolumeSpecUpdate
	90,  // 205: openstorage.api.SdkVolumeStatsResponse.stats:type_name -> openstorage.api.Stats
	91,  // 206: openstorage.api.SdkVolumeCapacityUsageResponse.capacity_usage_info:type_name -> openstorage.api.CapacityUsageInfo
	455, // 207: openstorage.api.SdkVolumeEnumerateWithFiltersRequest.labels:type_name -> openstorage.api.SdkVolumeEnumerateWithFiltersRequest.LabelsEntry
	88,  // 208: openstorage.api.SdkVolumeEnumerateWithFiltersRequest.ownership:type_name -> openstorage.api.Ownership
	65,  // 209: openstorage.api.SdkVolumeEnumerateWithFiltersRequest.group:type_name -> openstorage.api.Group
	456, // 210: openstorage.api.SdkVolumeSnapshotCreateRequest.labels:type_name -> openstorage.api.SdkVolumeSnapshotCreateRequest.LabelsEntry
	457, // 211: openstorage.api.SdkVolumeSnapshotEnumerateWithFiltersRequest.labels:type_name -> openstorage.api.SdkVolumeSnapshotEnumerateWithFiltersRequest.LabelsEntry
	93,  // 212: openstorage.api.SdkNodeVolumeUsageByNodeResponse.volume_usage_info:type_name -> openstorage.api.VolumeUsageByNode
	95,  // 213: openstorage.api.SdkNodeRelaxedReclaimPurgeResponse.status:type_name -> openstorage.api.RelaxedReclaimPurge
	131, // 214: openstorage.api.SdkClusterInspectCurrentResponse.cluster:type_name -> openstorage.api.StorageCluster
	39,  // 215: openstorage.api.Job.state:type_name -> openstorage.api.Job.State
	38,  // 216: openstorage.api.Job.type:type_name -> openstorage.api.Job.Type
	253, // 217: openstorage.api.Job.drain_attachments:type_name -> openstorage.api.NodeDrainAttachmentsJob
	254, // 218: openstorage.api.Job.clouddrive_transfer:type_name -> openstorage.api.CloudDriveTransferJob
	255, // 219: openstorage.api.Job.collect_diags:type_name -> openstorage.api.CollectDiagsJob
	478, // 220: openstorage.api.Job.create_time:type_name -> google.protobuf.Timestamp
	478, // 221: openstorage.api.Job.last_update_time:type_name -> google.protobuf.Timestamp
	249, // 222: openstorage.api.SdkJobResponse.job:type_name -> openstorage.api.Job
	419, // 223: openstorage.api.SdkNodeDrainAttachmentsRequest.selector:type_name -> openstorage.api.LabelSelectorRequirement
	252, // 224: openstorage.api.NodeDrainAttachmentsJob.parameters:type_name -> openstorage.api.SdkNodeDrainAttachmentsRequest
	478, // 225: openstorage.api.NodeDrainAttachmentsJob.create_time:type_name -> google.protobuf.Timestamp
	478, // 226: openstorage.api.NodeDrainAttachmentsJob.last_update_time:type_name -> google.protobuf.Timestamp
	257, // 227: openstorage.api.CollectDiagsJob.request:type_name -> openstorage.api.SdkDiagsCollectRequest
	256, // 228: openstorage.api.CollectDiagsJob.statuses:type_name -> openstorage.api.DiagsCollectionStatus
	40,  // 229: openstorage.api.DiagsCollectionStatus.state:type_name -> openstorage.api.DiagsCollectionStatus.State
	259, // 230: openstorage.api.SdkDiagsCollectRequest.node:type_name -> openstorage.api.DiagsNodeSelector
	260, // 231: openstorage.api.SdkDiagsCollectRequest.volume:type_name -> openstorage.api.DiagsVolumeSelector
	249, // 232: openstorage.api.SdkDiagsCollectResponse.job:type_name -> openstorage.api.Job
	419, // 233: openstorage.api.DiagsNodeSelector.node_label_selector:type_name -> openstorage.api.LabelSelectorRequirement
	419, // 234: openstorage.api.DiagsVolumeSelector.volume_label_selector:type_name -> openstorage.api.LabelSelectorRequirement
	38,  // 235: openstorage.api.SdkEnumerateJobsRequest.type:type_name -> openstorage.api.Job.Type
	249, // 236: openstorage.api.SdkEnumerateJobsResponse.jobs:type_name -> openstorage.api.Job
	38,  // 237: openstorage.api.SdkUpdateJobRequest.type:type_name -> openstorage.api.Job.Type
	39,  // 238: openstorage.api.SdkUpdateJobRequest.state:type_name -> openstorage.api.Job.State
	38,  // 239: openstorage.api.SdkGetJobStatusRequest.type:type_name -> openstorage.api.Job.Type
	267, // 240: openstorage.api.JobAudit.summary:type_name -> openstorage.api.JobWorkSummary
	270, // 241: openstorage.api.JobWorkSummary.drain_attachments_summary:type_name -> openstorage.api.DrainAttachmentsSummary
	267, // 242: openstorage.api.JobSummary.work_summaries:type_name -> openstorage.api.JobWorkSummary
	249, // 243: openstorage.api.SdkGetJobStatusResponse.job:type_name -> openstorage.api.Job
	268, // 244: openstorage.api.SdkGetJobStatusResponse.summary:type_name -> openstorage.api.JobSummary
	47,  // 245: openstorage.api.SdkStoragePoolResizeRequest.operation_type:type_name -> openstorage.api.SdkStoragePool.ResizeOperationType
	41,  // 246: openstorage.api.StorageRebalanceTriggerThreshold.type:type_name -> openstorage.api.StorageRebalanceTriggerThreshold.Type
	42,  // 247: openstorage.api.StorageRebalanceTriggerThreshold.metric:type_name -> openstorage.api.StorageRebalanceTriggerThreshold.Metric
	276, // 248: openstorage.api.SdkStorageRebalanceRequest.trigger_thresholds:type_name -> openstorage.api.StorageRebalanceTriggerThreshold
	419, // 249: openstorage.api.SdkStorageRebalanceRequest.source_pool_selector:type_name -> openstorage.api.LabelSelectorRequirement
	419, // 250: openstorage.api.SdkStorageRebalanceRequest.target_pool_selector:type_name -> openstorage.api.LabelSelectorRequirement
	279, // 251: openstorage.api.SdkStorageRebalanceResponse.job:type_name -> openstorage.api.StorageRebalanceJob
	280, // 252: openstorage.api.SdkStorageRebalanceResponse.summary:type_name -> openstorage.api.StorageRebalanceSummary
	282, // 253: openstorage.api.SdkStorageRebalanceResponse.actions:type_name -> openstorage.api.StorageRebalanceAudit
	23,  // 254: openstorage.api.StorageRebalanceJob.state:type_name -> openstorage.api.StorageRebalanceJobState
	277, // 255: openstorage.api.StorageRebalanceJob.parameters:type_name -> openstorage.api.SdkStorageRebalanceRequest
	478, // 256: openstorage.api.StorageRebalanceJob.create_time:type_name -> google.protobuf.Timestamp
	478, // 257: openstorage.api.StorageRebalanceJob.last_update_time:type_name -> google.protobuf.Timestamp
	281, // 258: openstorage.api.StorageRebalanceSummary.work_summary:type_name -> openstorage.api.StorageRebalanceWorkSummary
	43,  // 259: openstorage.api.StorageRebalanceWorkSummary.type:type_name -> openstorage.api.StorageRebalanceWorkSummary.Type
	44,  // 260: openstorage.api.StorageRebalanceAudit.action:type_name -> openstorage.api.StorageRebalanceAudit.StorageRebalanceAction
	478, // 261: openstorage.api.StorageRebalanceAudit.start_time:type_name -> google.protobuf.Timestamp
	478, // 262: openstorage.api.StorageRebalanceAudit.end_time:type_name -> google.protobuf.Timestamp
	281, // 263: openstorage.api.StorageRebalanceAudit.work_summary:type_name -> openstorage.api.StorageRebalanceWorkSummary
	23,  // 264: openstorage.api.StorageRebalanceAudit.state:type_name -> openstorage.api.StorageRebalanceJobState
	23,  // 265: openstorage.api.SdkUpdateRebalanceJobRequest.state:type_name -> openstorage.api.StorageRebalanceJobState
	279, // 266: openstorage.api.SdkGetRebalanceJobStatusResponse.job:type_name -> openstorage.api.StorageRebalanceJob
	280, // 267: openstorage.api.SdkGetRebalanceJobStatusResponse.summary:type_name -> openstorage.api.StorageRebalanceSummary
	282, // 268: openstorage.api.SdkGetRebalanceJobStatusResponse.actions:type_name -> openstorage.api.StorageRebalanceAudit
	279, // 269: openstorage.api.SdkEnumerateRebalanceJobsResponse.jobs:type_name -> openstorage.api.StorageRebalanceJob
	130, // 270: openstorage.api.SdkNodeInspectResponse.node:type_name -> openstorage.api.StorageNode
	130, // 271: openstorage.api.SdkNodeInspectCurrentResponse.node:type_name -> openstorage.api.StorageNode
	130, // 272: openstorage.api.SdkNodeEnumerateWithFiltersResponse.nodes:type_name -> openstorage.api.StorageNode
	110, // 273: openstorage.api.SdkObjectstoreInspectResponse.objectstore_status:type_name -> openstorage.api.ObjectstoreInfo
	110, // 274: openstorage.api.SdkObjectstoreCreateResponse.objectstore_status:type_name -> openstorage.api.ObjectstoreInfo
	458, // 275: openstorage.api.SdkCloudBackupCreateRequest.labels:type_name -> openstorage.api.SdkCloudBackupCreateRequest.LabelsEntry
	459, // 276: openstorage.api.SdkCloudBackupGroupCreateRequest.labels:type_name -> openstorage.api.SdkCloudBackupGroupCreateRequest.LabelsEntry
	422, // 277: openstorage.api.SdkCloudBackupRestoreRequest.spec:type_name -> openstorage.api.RestoreVolumeSpec
	62,  // 278: openstorage.api.SdkCloudBackupRestoreRequest.locator:type_name -> openstorage.api.VolumeLocator
	26,  // 279: openstorage.api.SdkCloudBackupEnumerateWithFiltersRequest.status_filter:type_name -> openstorage.api.SdkCloudBackupStatusType
	460, // 280: openstorage.api.SdkCloudBackupEnumerateWithFiltersRequest.metadata_filter:type_name -> openstorage.api.SdkCloudBackupEnumerateWithFiltersRequest.MetadataFilterEntry
	478, // 281: openstorage.api.SdkCloudBackupInfo.timestamp:type_name -> google.protobuf.Timestamp
	461, // 282: openstorage.api.SdkCloudBackupInfo.metadata:type_name -> openstorage.api.SdkCloudBackupInfo.MetadataEntry
	26,  // 283: openstorage.api.SdkCloudBackupInfo.status:type_name -> openstorage.api.SdkCloudBackupStatusType
	24,  // 284: openstorage.api.SdkCloudBackupInfo.cluster_type:type_name -> openstorage.api.SdkCloudBackupClusterType
	317, // 285: openstorage.api.SdkCloudBackupEnumerateWithFiltersResponse.backups:type_name -> openstorage.api.SdkCloudBackupInfo
	25,  // 286: openstorage.api.SdkCloudBackupStatus.optype:type_name -> openstorage.api.SdkCloudBackupOpType
	26,  // 287: openstorage.api.SdkCloudBackupStatus.status:type_name -> openstorage.api.SdkCloudBackupStatusType
	478, // 288: openstorage.api.SdkCloudBackupStatus.start_time:type_name -> google.protobuf.Timestamp
	478, // 289: openstorage.api.SdkCloudBackupStatus.completed_time:type_name -> google.protobuf.Timestamp
	462, // 290: openstorage.api.SdkCloudBackupStatusResponse.statuses:type_name -> openstorage.api.SdkCloudBackupStatusResponse.StatusesEntry
	478, // 291: openstorage.api.SdkCloudBackupHistoryItem.timestamp:type_name -> google.protobuf.Timestamp
	26,  // 292: openstorage.api.SdkCloudBackupHistoryItem.status:type_name -> openstorage.api.SdkCloudBackupStatusType
	324, // 293: openstorage.api.SdkCloudBackupHistoryResponse.history_list:type_name -> openstorage.api.SdkCloudBackupHistoryItem
	27,  // 294: openstorage.api.SdkCloudBackupStateChangeRequest.requested_state:type_name -> openstorage.api.SdkCloudBackupRequestedState
	171, // 295: openstorage.api.SdkCloudBackupScheduleInfo.schedules:type_name -> openstorage.api.SdkSchedulePolicyInterval
	463, // 296: openstorage.api.SdkCloudBackupScheduleInfo.labels:type_name -> openstorage.api.SdkCloudBackupScheduleInfo.LabelsEntry
	329, // 297: openstorage.api.SdkCloudBackupSchedCreateRequest.cloud_sched_info:type_name -> openstorage.api.SdkCloudBackupScheduleInfo
	329, // 298: openstorage.api.SdkCloudBackupSchedUpdateRequest.cloud_sched_info:type_name -> openstorage.api.SdkCloudBackupScheduleInfo
	464, // 299: openstorage.api.SdkCloudBackupSchedEnumerateResponse.cloud_sched_list:type_name -> openstorage.api.SdkCloudBackupSchedEnumerateResponse.CloudSchedListEntry
	340, // 300: openstorage.api.SdkRole.rules:type_name -> openstorage.api.SdkRule
	341, // 301: openstorage.api.SdkRoleCreateRequest.role:type_name -> openstorage.api.SdkRole
	341, // 302: openstorage.api.SdkRoleCreateResponse.role:type_name -> openstorage.api.SdkRole
	341, // 303: openstorage.api.SdkRoleInspectResponse.role:type_name -> openstorage.api.SdkRole
	341, // 304: openstorage.api.SdkRoleUpdateRequest.role:type_name -> openstorage.api.SdkRole
	341, // 305: openstorage.api.SdkRoleUpdateResponse.role:type_name -> openstorage.api.SdkRole
	48,  // 306: openstorage.api.SdkFilesystemTrimStartResponse.status:type_name -> openstorage.api.FilesystemTrim.FilesystemTrimStatus
	48,  // 307: openstorage.api.SdkFilesystemTrimStatusResponse.status:type_name -> openstorage.api.FilesystemTrim.FilesystemTrimStatus
	465, // 308: openstorage.api.SdkAutoFSTrimStatusResponse.trim_status:type_name -> openstorage.api.SdkAutoFSTrimStatusResponse.TrimStatusEntry
	466, // 309: openstorage.api.SdkAutoFSTrimUsageResponse.usage:type_name -> openstorage.api.SdkAutoFSTrimUsageResponse.UsageEntry
	49,  // 310: openstorage.api.SdkFilesystemCheckStartResponse.status:type_name -> openstorage.api.FilesystemCheck.FilesystemCheckStatus
	49,  // 311: openstorage.api.SdkFilesystemCheckStatusResponse.status:type_name -> openstorage.api.FilesystemCheck.FilesystemCheckStatus
	12,  // 312: openstorage.api.SdkFilesystemCheckStatusResponse.health_status:type_name -> openstorage.api.FilesystemHealthStatus
	374, // 313: openstorage.api.SdkIdentityCapabilitiesResponse.capabilities:type_name -> openstorage.api.SdkServiceCapability
	375, // 314: openstorage.api.SdkIdentityVersionResponse.sdk_version:type_name -> openstorage.api.SdkVersion
	376, // 315: openstorage.api.SdkIdentityVersionResponse.version:type_name -> openstorage.api.StorageVersion
	467, // 316: openstorage.api.SdkServiceCapability.service:type_name -> openstorage.api.SdkServiceCapability.OpenStorageService
	468, // 317: openstorage.api.StorageVersion.details:type_name -> openstorage.api.StorageVersion.DetailsEntry
	52,  // 318: openstorage.api.CloudMigrateStartRequest.operation:type_name -> openstorage.api.CloudMigrate.OperationType
	469, // 319: openstorage.api.SdkCloudMigrateStartRequest.volume:type_name -> openstorage.api.SdkCloudMigrateStartRequest.MigrateVolume
	470, // 320: openstorage.api.SdkCloudMigrateStartRequest.volume_group:type_name -> openstorage.api.SdkCloudMigrateStartRequest.MigrateVolumeGroup
	471, // 321: openstorage.api.SdkCloudMigrateStartRequest.all_volumes:type_name -> openstorage.api.SdkCloudMigrateStartRequest.MigrateAllVolumes
	380, // 322: openstorage.api.SdkCloudMigrateStartResponse.result:type_name -> openstorage.api.CloudMigrateStartResponse
	382, // 323: openstorage.api.SdkCloudMigrateCancelRequest.request:type_name -> openstorage.api.CloudMigrateCancelRequest
	53,  // 324: openstorage.api.CloudMigrateInfo.current_stage:type_name -> openstorage.api.CloudMigrate.Stage
	54,  // 325: openstorage.api.CloudMigrateInfo.status:type_name -> openstorage.api.CloudMigrate.Status
	478, // 326: openstorage.api.CloudMigrateInfo.last_update:type_name -> google.protobuf.Timestamp
	478, // 327: openstorage.api.CloudMigrateInfo.start_time:type_name -> google.protobuf.Timestamp
	478, // 328: openstorage.api.CloudMigrateInfo.completed_time:type_name -> google.protobuf.Timestamp
	385, // 329: openstorage.api.CloudMigrateInfoList.list:type_name -> openstorage.api.CloudMigrateInfo
	388, // 330: openstorage.api.SdkCloudMigrateStatusRequest.request:type_name -> openstorage.api.CloudMigrateStatusRequest
	472, // 331: openstorage.api.CloudMigrateStatusResponse.info:type_name -> openstorage.api.CloudMigrateStatusResponse.InfoEntry
	389, // 332: openstorage.api.SdkCloudMigrateStatusResponse.result:type_name -> openstorage.api.CloudMigrateStatusResponse
	55,  // 333: openstorage.api.ClusterPairCreateRequest.mode:type_name -> openstorage.api.ClusterPairMode.Mode
	392, // 334: openstorage.api.SdkClusterPairCreateRequest.request:type_name -> openstorage.api.ClusterPairCreateRequest
	393, // 335: openstorage.api.SdkClusterPairCreateResponse.result:type_name -> openstorage.api.ClusterPairCreateResponse
	55,  // 336: openstorage.api.ClusterPairProcessRequest.mode:type_name -> openstorage.api.ClusterPairMode.Mode
	473, // 337: openstorage.api.ClusterPairProcessResponse.options:type_name -> openstorage.api.ClusterPairProcessResponse.OptionsEntry
	400, // 338: openstorage.api.SdkClusterPairGetTokenResponse.result:type_name -> openstorage.api.ClusterPairTokenGetResponse
	400, // 339: openstorage.api.SdkClusterPairResetTokenResponse.result:type_name -> openstorage.api.ClusterPairTokenGetResponse
	474, // 340: openstorage.api.ClusterPairInfo.options:type_name -> openstorage.api.ClusterPairInfo.OptionsEntry
	55,  // 341: openstorage.api.ClusterPairInfo.mode:type_name -> openstorage.api.ClusterPairMode.Mode
	405, // 342: openstorage.api.ClusterPairGetResponse.pair_info:type_name -> openstorage.api.ClusterPairInfo
	407, // 343: openstorage.api.SdkClusterPairInspectResponse.result:type_name -> openstorage.api.ClusterPairGetResponse
	475, // 344: openstorage.api.ClusterPairsEnumerateResponse.pairs:type_name -> openstorage.api.ClusterPairsEnumerateResponse.PairsEntry
	410, // 345: openstorage.api.SdkClusterPairEnumerateResponse.result:type_name -> openstorage.api.ClusterPairsEnumerateResponse
	478, // 346: openstorage.api.Catalog.LastModified:type_name -> google.protobuf.Timestamp
	412, // 347: openstorage.api.Catalog.children:type_name -> openstorage.api.Catalog
	412, // 348: openstorage.api.CatalogResponse.root:type_name -> openstorage.api.Catalog
	413, // 349: openstorage.api.CatalogResponse.report:type_name -> openstorage.api.Report
	476, // 350: openstorage.api.LocateResponse.mounts:type_name -> openstorage.api.LocateResponse.MountsEntry
	477, // 351: openstorage.api.LocateResponse.dockerids:type_name -> openstorage.api.LocateResponse.DockeridsEntry
	417, // 352: openstorage.api.VolumePlacementStrategy.replica_affinity:type_name -> openstorage.api.ReplicaPlacementSpec
	417, // 353: openstorage.api.VolumePlacementStrategy.replica_anti_affinity:type_name -> openstorage.api.ReplicaPlacementSpec
	418, // 354: openstorage.api.VolumePlacementStrategy.volume_affinity:type_name -> openstorage.api.VolumePlacementSpec
	418, // 355: openstorage.api.VolumePlacementStrategy.volume_anti_affinity:type_name -> openstorage.api.VolumePlacementSpec
	28,  // 356: openstorage.api.ReplicaPlacementSpec.enforcement:type_name -> openstorage.api.EnforcementType
	419, // 357: openstorage.api.ReplicaPlacementSpec.match_expressions:type_name -> openstorage.api.LabelSelectorRequirement
	28,  // 358: openstorage.api.VolumePlacementSpec.enforcement:type_name -> openstorage.api.EnforcementType
	419, // 359: openstorage.api.VolumePlacementSpec.match_expressions:type_name -> openstorage.api.LabelSelectorRequirement
	56,  // 360: openstorage.api.LabelSelectorRequirement.operator:type_name -> openstorage.api.LabelSelectorRequirement.Operator
	8,   // 361: openstorage.api.RestoreVolumeSpec.cos:type_name -> openstorage.api.CosType
	9,   // 362: openstorage.api.RestoreVolumeSpec.io_profile:type_name -> openstorage.api.IoProfile
	29,  // 363: openstorage.api.RestoreVolumeSpec.shared:type_name -> openstorage.api.RestoreParamBoolType
	86,  // 364: openstorage.api.RestoreVolumeSpec.replica_set:type_name -> openstorage.api.ReplicaSet
	420, // 365: openstorage.api.RestoreVolumeSpec.snapshot_schedule:type_name -> openstorage.api.RestoreVolSnashotSchedule
	29,  // 366: openstorage.api.RestoreVolumeSpec.sticky:type_name -> openstorage.api.RestoreParamBoolType
	65,  // 367: openstorage.api.RestoreVolumeSpec.group:type_name -> openstorage.api.Group
	29,  // 368: openstorage.api.RestoreVolumeSpec.journal:type_name -> openstorage.api.RestoreParamBoolType
	29,  // 369: openstorage.api.RestoreVolumeSpec.sharedv4:type_name -> openstorage.api.RestoreParamBoolType
	29,  // 370: openstorage.api.RestoreVolumeSpec.nodiscard:type_name -> openstorage.api.RestoreParamBoolType
	66,  // 371: openstorage.api.RestoreVolumeSpec.io_strategy:type_name -> openstorage.api.IoStrategy
	416, // 372: openstorage.api.RestoreVolumeSpec.placement_strategy:type_name -> openstorage.api.VolumePlacementStrategy
	421, // 373: openstorage.api.RestoreVolumeSpec.storage_policy:type_name -> openstorage.api.RestoreVolStoragePolicy
	88,  // 374: openstorage.api.RestoreVolumeSpec.ownership:type_name -> openstorage.api.Ownership
	68,  // 375: openstorage.api.RestoreVolumeSpec.export_spec:type_name -> openstorage.api.ExportSpec
	29,  // 376: openstorage.api.RestoreVolumeSpec.fp_preference:type_name -> openstorage.api.RestoreParamBoolType
	78,  // 377: openstorage.api.RestoreVolumeSpec.mount_options:type_name -> openstorage.api.MountOptions
	78,  // 378: openstorage.api.RestoreVolumeSpec.sharedv4_mount_options:type_name -> openstorage.api.MountOptions
	29,  // 379: openstorage.api.RestoreVolumeSpec.proxy_write:type_name -> openstorage.api.RestoreParamBoolType
	74,  // 380: openstorage.api.RestoreVolumeSpec.proxy_spec:type_name -> openstorage.api.ProxySpec
	75,  // 381: openstorage.api.RestoreVolumeSpec.sharedv4_service_spec:type_name -> openstorage.api.Sharedv4ServiceSpec
	77,  // 382: openstorage.api.RestoreVolumeSpec.sharedv4_spec:type_name -> openstorage.api.Sharedv4Spec
	29,  // 383: openstorage.api.RestoreVolumeSpec.auto_fstrim:type_name -> openstorage.api.RestoreParamBoolType
	82,  // 384: openstorage.api.RestoreVolumeSpec.io_throttle:type_name -> openstorage.api.IoThrottle
	29,  // 385: openstorage.api.RestoreVolumeSpec.readahead:type_name -> openstorage.api.RestoreParamBoolType
	414, // 386: openstorage.api.SdkVolumeCatalogResponse.catalog:type_name -> openstorage.api.CatalogResponse
	36,  // 387: openstorage.api.Ownership.PublicAccessControl.type:type_name -> openstorage.api.Ownership.AccessType
	436, // 388: openstorage.api.Ownership.AccessControl.groups:type_name -> openstorage.api.Ownership.AccessControl.GroupsEntry
	437, // 389: openstorage.api.Ownership.AccessControl.collaborators:type_name -> openstorage.api.Ownership.AccessControl.CollaboratorsEntry
	434, // 390: openstorage.api.Ownership.AccessControl.public:type_name -> openstorage.api.Ownership.PublicAccessControl
	36,  // 391: openstorage.api.Ownership.AccessControl.GroupsEntry.value:type_name -> openstorage.api.Ownership.AccessType
	36,  // 392: openstorage.api.Ownership.AccessControl.CollaboratorsEntry.value:type_name -> openstorage.api.Ownership.AccessType
	118, // 393: openstorage.api.GroupSnapCreateResponse.SnapshotsEntry.value:type_name -> openstorage.api.SnapCreateResponse
	57,  // 394: openstorage.api.StorageNode.DisksEntry.value:type_name -> openstorage.api.StorageResource
	319, // 395: openstorage.api.SdkCloudBackupStatusResponse.StatusesEntry.value:type_name -> openstorage.api.SdkCloudBackupStatus
	329, // 396: openstorage.api.SdkCloudBackupSchedEnumerateResponse.CloudSchedListEntry.value:type_name -> openstorage.api.SdkCloudBackupScheduleInfo
	48,  // 397: openstorage.api.SdkAutoFSTrimStatusResponse.TrimStatusEntry.value:type_name -> openstorage.api.FilesystemTrim.FilesystemTrimStatus
	94,  // 398: openstorage.api.SdkAutoFSTrimUsageResponse.UsageEntry.value:type_name -> openstorage.api.FstrimVolumeUsageInfo
	50,  // 399: openstorage.api.SdkServiceCapability.OpenStorageService.type:type_name -> openstorage.api.SdkServiceCapability.OpenStorageService.Type
	386, // 400: openstorage.api.CloudMigrateStatusResponse.InfoEntry.value:type_name -> openstorage.api.CloudMigrateInfoList
	405, // 401: openstorage.api.ClusterPairsEnumerateResponse.PairsEntry.value:type_name -> openstorage.api.ClusterPairInfo
	105, // 402: openstorage.api.OpenStorageAlerts.EnumerateWithFilters:input_type -> openstorage.api.SdkAlertsEnumerateWithFiltersRequest
	107, // 403: openstorage.api.OpenStorageAlerts.Delete:input_type -> openstorage.api.SdkAlertsDeleteRequest
	342, // 404: openstorage.api.OpenStorageRole.Create:input_type -> openstorage.api.SdkRoleCreateRequest
	344, // 405: openstorage.api.OpenStorageRole.Enumerate:input_type -> openstorage.api.SdkRoleEnumerateRequest
	346, // 406: openstorage.api.OpenStorageRole.Inspect:input_type -> openstorage.api.SdkRoleInspectRequest
	348, // 407: openstorage.api.OpenStorageRole.Delete:input_type -> openstorage.api.SdkRoleDeleteRequest
	350, // 408: openstorage.api.OpenStorageRole.Update:input_type -> openstorage.api.SdkRoleUpdateRequest
	353, // 409: openstorage.api.OpenStorageFilesystemTrim.Start:input_type -> openstorage.api.SdkFilesystemTrimStartRequest
	355, // 410: openstorage.api.OpenStorageFilesystemTrim.Status:input_type -> openstorage.api.SdkFilesystemTrimStatusRequest
	357, // 411: openstorage.api.OpenStorageFilesystemTrim.AutoFSTrimStatus:input_type -> openstorage.api.SdkAutoFSTrimStatusRequest
	359, // 412: openstorage.api.OpenStorageFilesystemTrim.AutoFSTrimUsage:input_type -> openstorage.api.SdkAutoFSTrimUsageRequest
	361, // 413: openstorage.api.OpenStorageFilesystemTrim.Stop:input_type -> openstorage.api.SdkFilesystemTrimStopRequest
	364, // 414: openstorage.api.OpenStorageFilesystemCheck.Start:input_type -> openstorage.api.SdkFilesystemCheckStartRequest
	366, // 415: openstorage.api.OpenStorageFilesystemCheck.Status:input_type -> openstorage.api.SdkFilesystemCheckStatusRequest
	368, // 416: openstorage.api.OpenStorageFilesystemCheck.Stop:input_type -> openstorage.api.SdkFilesystemCheckStopRequest
	370, // 417: openstorage.api.OpenStorageIdentity.Capabilities:input_type -> openstorage.api.SdkIdentityCapabilitiesRequest
	372, // 418: openstorage.api.OpenStorageIdentity.Version:input_type -> openstorage.api.SdkIdentityVersionRequest
	246, // 419: openstorage.api.OpenStorageCluster.InspectCurrent:input_type -> openstorage.api.SdkClusterInspectCurrentRequest
	394, // 420: openstorage.api.OpenStorageClusterPair.Create:input_type -> openstorage.api.SdkClusterPairCreateRequest
	406, // 421: openstorage.api.OpenStorageClusterPair.Inspect:input_type -> openstorage.api.SdkClusterPairInspectRequest
	409, // 422: openstorage.api.OpenStorageClusterPair.Enumerate:input_type -> openstorage.api.SdkClusterPairEnumerateRequest
	401, // 423: openstorage.api.OpenStorageClusterPair.GetToken:input_type -> openstorage.api.SdkClusterPairGetTokenRequest
	403, // 424: openstorage.api.OpenStorageClusterPair.ResetToken:input_type -> openstorage.api.SdkClusterPairResetTokenRequest
	398, // 425: openstorage.api.OpenStorageClusterPair.Delete:input_type -> openstorage.api.SdkClusterPairDeleteRequest
	238, // 426: openstorage.api.OpenStorageClusterDomains.Enumerate:input_type -> openstorage.api.SdkClusterDomainsEnumerateRequest
	240, // 427: openstorage.api.OpenStorageClusterDomains.Inspect:input_type -> openstorage.api.SdkClusterDomainInspectRequest
	242, // 428: openstorage.api.OpenStorageClusterDomains.Activate:input_type -> openstorage.api.SdkClusterDomainActivateRequest
	244, // 429: openstorage.api.OpenStorageClusterDomains.Deactivate:input_type -> openstorage.api.SdkClusterDomainDeactivateRequest
	275, // 430: openstorage.api.OpenStoragePool.Resize:input_type -> openstorage.api.SdkStoragePoolResizeRequest
	277, // 431: openstorage.api.OpenStoragePool.Rebalance:input_type -> openstorage.api.SdkStorageRebalanceRequest
	283, // 432: openstorage.api.OpenStoragePool.UpdateRebalanceJobState:input_type -> openstorage.api.SdkUpdateRebalanceJobRequest
	285, // 433: openstorage.api.OpenStoragePool.GetRebalanceJobStatus:input_type -> openstorage.api.SdkGetRebalanceJobStatusRequest
	287, // 434: openstorage.api.OpenStoragePool.EnumerateRebalanceJobs:input_type -> openstorage.api.SdkEnumerateRebalanceJobsRequest
	257, // 435: openstorage.api.OpenStorageDiags.Collect:input_type -> openstorage.api.SdkDiagsCollectRequest
	263, // 436: openstorage.api.OpenStorageJob.Update:input_type -> openstorage.api.SdkUpdateJobRequest
	265, // 437: openstorage.api.OpenStorageJob.GetStatus:input_type -> openstorage.api.SdkGetJobStatusRequest
	261, // 438: openstorage.api.OpenStorageJob.Enumerate:input_type -> openstorage.api.SdkEnumerateJobsRequest
	248, // 439: openstorage.api.OpenStorageNode.Inspect:input_type -> openstorage.api.SdkNodeInspectRequest
	292, // 440: openstorage.api.OpenStorageNode.InspectCurrent:input_type -> openstorage.api.SdkNodeInspectCurrentRequest
	294, // 441: openstorage.api.OpenStorageNode.Enumerate:input_type -> openstorage.api.SdkNodeEnumerateRequest
	296, // 442: openstorage.api.OpenStorageNode.EnumerateWithFilters:input_type -> openstorage.api.SdkNodeEnumerateWithFiltersRequest
	234, // 443: openstorage.api.OpenStorageNode.VolumeUsageByNode:input_type -> openstorage.api.SdkNodeVolumeUsageByNodeRequest
	236, // 444: openstorage.api.OpenStorageNode.RelaxedReclaimPurge:input_type -> openstorage.api.SdkNodeRelaxedReclaimPurgeRequest
	252, // 445: openstorage.api.OpenStorageNode.DrainAttachments:input_type -> openstorage.api.SdkNodeDrainAttachmentsRequest
	271, // 446: openstorage.api.OpenStorageNode.CordonAttachments:input_type -> openstorage.api.SdkNodeCordonAttachmentsRequest
	273, // 447: openstorage.api.OpenStorageNode.UncordonAttachments:input_type -> openstorage.api.SdkNodeUncordonAttachmentsRequest
	132, // 448: openstorage.api.OpenStorageBucket.Create:input_type -> openstorage.api.BucketCreateRequest
	134, // 449: openstorage.api.OpenStorageBucket.Delete:input_type -> openstorage.api.BucketDeleteRequest
	136, // 450: openstorage.api.OpenStorageBucket.GrantAccess:input_type -> openstorage.api.BucketGrantAccessRequest
	138, // 451: openstorage.api.OpenStorageBucket.RevokeAccess:input_type -> openstorage.api.BucketRevokeAccessRequest
	204, // 452: openstorage.api.OpenStorageVolume.Create:input_type -> openstorage.api.SdkVolumeCreateRequest
	206, // 453: openstorage.api.OpenStorageVolume.Clone:input_type -> openstorage.api.SdkVolumeCloneRequest
	208, // 454: openstorage.api.OpenStorageVolume.Delete:input_type -> openstorage.api.SdkVolumeDeleteRequest
	210, // 455: openstorage.api.OpenStorageVolume.Inspect:input_type -> openstorage.api.SdkVolumeInspectRequest
	212, // 456: openstorage.api.OpenStorageVolume.InspectWithFilters:input_type -> openstorage.api.SdkVolumeInspectWithFiltersRequest
	214, // 457: openstorage.api.OpenStorageVolume.Update:input_type -> openstorage.api.SdkVolumeUpdateRequest
	216, // 458: openstorage.api.OpenStorageVolume.Stats:input_type -> openstorage.api.SdkVolumeStatsRequest
	218, // 459: openstorage.api.OpenStorageVolume.CapacityUsage:input_type -> openstorage.api.SdkVolumeCapacityUsageRequest
	220, // 460: openstorage.api.OpenStorageVolume.Enumerate:input_type -> openstorage.api.SdkVolumeEnumerateRequest
	222, // 461: openstorage.api.OpenStorageVolume.EnumerateWithFilters:input_type -> openstorage.api.SdkVolumeEnumerateWithFiltersRequest
	224, // 462: openstorage.api.OpenStorageVolume.SnapshotCreate:input_type -> openstorage.api.SdkVolumeSnapshotCreateRequest
	226, // 463: openstorage.api.OpenStorageVolume.SnapshotRestore:input_type -> openstorage.api.SdkVolumeSnapshotRestoreRequest
	228, // 464: openstorage.api.OpenStorageVolume.SnapshotEnumerate:input_type -> openstorage.api.SdkVolumeSnapshotEnumerateRequest
	230, // 465: openstorage.api.OpenStorageVolume.SnapshotEnumerateWithFilters:input_type -> openstorage.api.SdkVolumeSnapshotEnumerateWithFiltersRequest
	232, // 466: openstorage.api.OpenStorageVolume.SnapshotScheduleUpdate:input_type -> openstorage.api.SdkVolumeSnapshotScheduleUpdateRequest
	423, // 467: openstorage.api.OpenStorageVolume.VolumeCatalog:input_type -> openstorage.api.SdkVolumeCatalogRequest
	199, // 468: openstorage.api.OpenStorageMountAttach.Attach:input_type -> openstorage.api.SdkVolumeAttachRequest
	202, // 469: openstorage.api.OpenStorageMountAttach.Detach:input_type -> openstorage.api.SdkVolumeDetachRequest
	194, // 470: openstorage.api.OpenStorageMountAttach.Mount:input_type -> openstorage.api.SdkVolumeMountRequest
	197, // 471: openstorage.api.OpenStorageMountAttach.Unmount:input_type -> openstorage.api.SdkVolumeUnmountRequest
	379, // 472: openstorage.api.OpenStorageMigrate.Start:input_type -> openstorage.api.SdkCloudMigrateStartRequest
	383, // 473: openstorage.api.OpenStorageMigrate.Cancel:input_type -> openstorage.api.SdkCloudMigrateCancelRequest
	387, // 474: openstorage.api.OpenStorageMigrate.Status:input_type -> openstorage.api.SdkCloudMigrateStatusRequest
	298, // 475: openstorage.api.OpenStorageObjectstore.Inspect:input_type -> openstorage.api.SdkObjectstoreInspectRequest
	300, // 476: openstorage.api.OpenStorageObjectstore.Create:input_type -> openstorage.api.SdkObjectstoreCreateRequest
	302, // 477: openstorage.api.OpenStorageObjectstore.Delete:input_type -> openstorage.api.SdkObjectstoreDeleteRequest
	304, // 478: openstorage.api.OpenStorageObjectstore.Update:input_type -> openstorage.api.SdkObjectstoreUpdateRequest
	173, // 479: openstorage.api.OpenStorageCredentials.Create:input_type -> openstorage.api.SdkCredentialCreateRequest
	175, // 480: openstorage.api.OpenStorageCredentials.Update:input_type -> openstorage.api.SdkCredentialUpdateRequest
	183, // 481: openstorage.api.OpenStorageCredentials.Enumerate:input_type -> openstorage.api.SdkCredentialEnumerateRequest
	185, // 482: openstorage.api.OpenStorageCredentials.Inspect:input_type -> openstorage.api.SdkCredentialInspectRequest
	187, // 483: openstorage.api.OpenStorageCredentials.Delete:input_type -> openstorage.api.SdkCredentialDeleteRequest
	189, // 484: openstorage.api.OpenStorageCredentials.Validate:input_type -> openstorage.api.SdkCredentialValidateRequest
	191, // 485: openstorage.api.OpenStorageCredentials.DeleteReferences:input_type -> openstorage.api.SdkCredentialDeleteReferencesRequest
	157, // 486: openstorage.api.OpenStorageSchedulePolicy.Create:input_type -> openstorage.api.SdkSchedulePolicyCreateRequest
	159, // 487: openstorage.api.OpenStorageSchedulePolicy.Update:input_type -> openstorage.api.SdkSchedulePolicyUpdateRequest
	161, // 488: openstorage.api.OpenStorageSchedulePolicy.Enumerate:input_type -> openstorage.api.SdkSchedulePolicyEnumerateRequest
	163, // 489: openstorage.api.OpenStorageSchedulePolicy.Inspect:input_type -> openstorage.api.SdkSchedulePolicyInspectRequest
	165, // 490: openstorage.api.OpenStorageSchedulePolicy.Delete:input_type -> openstorage.api.SdkSchedulePolicyDeleteRequest
	306, // 491: openstorage.api.OpenStorageCloudBackup.Create:input_type -> openstorage.api.SdkCloudBackupCreateRequest
	308, // 492: openstorage.api.OpenStorageCloudBackup.GroupCreate:input_type -> openstorage.api.SdkCloudBackupGroupCreateRequest
	310, // 493: openstorage.api.OpenStorageCloudBackup.Restore:input_type -> openstorage.api.SdkCloudBackupRestoreRequest
	312, // 494: openstorage.api.OpenStorageCloudBackup.Delete:input_type -> openstorage.api.SdkCloudBackupDeleteRequest
	314, // 495: openstorage.api.OpenStorageCloudBackup.DeleteAll:input_type -> openstorage.api.SdkCloudBackupDeleteAllRequest
	316, // 496: openstorage.api.OpenStorageCloudBackup.EnumerateWithFilters:input_type -> openstorage.api.SdkCloudBackupEnumerateWithFiltersRequest
	320, // 497: openstorage.api.OpenStorageCloudBackup.Status:input_type -> openstorage.api.SdkCloudBackupStatusRequest
	322, // 498: openstorage.api.OpenStorageCloudBackup.Catalog:input_type -> openstorage.api.SdkCloudBackupCatalogRequest
	325, // 499: openstorage.api.OpenStorageCloudBackup.History:input_type -> openstorage.api.SdkCloudBackupHistoryRequest
	327, // 500: openstorage.api.OpenStorageCloudBackup.StateChange:input_type -> openstorage.api.SdkCloudBackupStateChangeRequest
	330, // 501: openstorage.api.OpenStorageCloudBackup.SchedCreate:input_type -> openstorage.api.SdkCloudBackupSchedCreateRequest
	332, // 502: openstorage.api.OpenStorageCloudBackup.SchedUpdate:input_type -> openstorage.api.SdkCloudBackupSchedUpdateRequest
	334, // 503: openstorage.api.OpenStorageCloudBackup.SchedDelete:input_type -> openstorage.api.SdkCloudBackupSchedDeleteRequest
	336, // 504: openstorage.api.OpenStorageCloudBackup.SchedEnumerate:input_type -> openstorage.api.SdkCloudBackupSchedEnumerateRequest
	338, // 505: openstorage.api.OpenStorageCloudBackup.Size:input_type -> openstorage.api.SdkCloudBackupSizeRequest
	141, // 506: openstorage.api.OpenStoragePolicy.Create:input_type -> openstorage.api.SdkOpenStoragePolicyCreateRequest
	143, // 507: openstorage.api.OpenStoragePolicy.Enumerate:input_type -> openstorage.api.SdkOpenStoragePolicyEnumerateRequest
	145, // 508: openstorage.api.OpenStoragePolicy.Inspect:input_type -> openstorage.api.SdkOpenStoragePolicyInspectRequest
	149, // 509: openstorage.api.OpenStoragePolicy.Update:input_type -> openstorage.api.SdkOpenStoragePolicyUpdateRequest
	147, // 510: openstorage.api.OpenStoragePolicy.Delete:input_type -> openstorage.api.SdkOpenStoragePolicyDeleteRequest
	151, // 511: openstorage.api.OpenStoragePolicy.SetDefault:input_type -> openstorage.api.SdkOpenStoragePolicySetDefaultRequest
	155, // 512: openstorage.api.OpenStoragePolicy.DefaultInspect:input_type -> openstorage.api.SdkOpenStoragePolicyDefaultInspectRequest
	153, // 513: openstorage.api.OpenStoragePolicy.Release:input_type -> openstorage.api.SdkOpenStoragePolicyReleaseRequest
	106, // 514: openstorage.api.OpenStorageAlerts.EnumerateWithFilters:output_type -> openstorage.api.SdkAlertsEnumerateWithFiltersResponse
	108, // 515: openstorage.api.OpenStorageAlerts.Delete:output_type -> openstorage.api.SdkAlertsDeleteResponse
	343, // 516: openstorage.api.OpenStorageRole.Create:output_type -> openstorage.api.SdkRoleCreateResponse
	345, // 517: openstorage.api.OpenStorageRole.Enumerate:output_type -> openstorage.api.SdkRoleEnumerateResponse
	347, // 518: openstorage.api.OpenStorageRole.Inspect:output_type -> openstorage.api.SdkRoleInspectResponse
	349, // 519: openstorage.api.OpenStorageRole.Delete:output_type -> openstorage.api.SdkRoleDeleteResponse
	351, // 520: openstorage.api.OpenStorageRole.Update:output_type -> openstorage.api.SdkRoleUpdateResponse
	354, // 521: openstorage.api.OpenStorageFilesystemTrim.Start:output_type -> openstorage.api.SdkFilesystemTrimStartResponse
	356, // 522: openstorage.api.OpenStorageFilesystemTrim.Status:output_type -> openstorage.api.SdkFilesystemTrimStatusResponse
	358, // 523: openstorage.api.OpenStorageFilesystemTrim.AutoFSTrimStatus:output_type -> openstorage.api.SdkAutoFSTrimStatusResponse
	360, // 524: openstorage.api.OpenStorageFilesystemTrim.AutoFSTrimUsage:output_type -> openstorage.api.SdkAutoFSTrimUsageResponse
	362, // 525: openstorage.api.OpenStorageFilesystemTrim.Stop:output_type -> openstorage.api.SdkFilesystemTrimStopResponse
	365, // 526: openstorage.api.OpenStorageFilesystemCheck.Start:output_type -> openstorage.api.SdkFilesystemCheckStartResponse
	367, // 527: openstorage.api.OpenStorageFilesystemCheck.Status:output_type -> openstorage.api.SdkFilesystemCheckStatusResponse
	369, // 528: openstorage.api.OpenStorageFilesystemCheck.Stop:output_type -> openstorage.api.SdkFilesystemCheckStopResponse
	371, // 529: openstorage.api.OpenStorageIdentity.Capabilities:output_type -> openstorage.api.SdkIdentityCapabilitiesResponse
	373, // 530: openstorage.api.OpenStorageIdentity.Version:output_type -> openstorage.api.SdkIdentityVersionResponse
	247, // 531: openstorage.api.OpenStorageCluster.InspectCurrent:output_type -> openstorage.api.SdkClusterInspectCurrentResponse
	395, // 532: openstorage.api.OpenStorageClusterPair.Create:output_type -> openstorage.api.SdkClusterPairCreateResponse
	408, // 533: openstorage.api.OpenStorageClusterPair.Inspect:output_type -> openstorage.api.SdkClusterPairInspectResponse
	411, // 534: openstorage.api.OpenStorageClusterPair.Enumerate:output_type -> openstorage.api.SdkClusterPairEnumerateResponse
	402, // 535: openstorage.api.OpenStorageClusterPair.GetToken:output_type -> openstorage.api.SdkClusterPairGetTokenResponse
	404, // 536: openstorage.api.OpenStorageClusterPair.ResetToken:output_type -> openstorage.api.SdkClusterPairResetTokenResponse
	399, // 537: openstorage.api.OpenStorageClusterPair.Delete:output_type -> openstorage.api.SdkClusterPairDeleteResponse
	239, // 538: openstorage.api.OpenStorageClusterDomains.Enumerate:output_type -> openstorage.api.SdkClusterDomainsEnumerateResponse
	241, // 539: openstorage.api.OpenStorageClusterDomains.Inspect:output_type -> openstorage.api.SdkClusterDomainInspectResponse
	243, // 540: openstorage.api.OpenStorageClusterDomains.Activate:output_type -> openstorage.api.SdkClusterDomainActivateResponse
	245, // 541: openstorage.api.OpenStorageClusterDomains.Deactivate:output_type -> openstorage.api.SdkClusterDomainDeactivateResponse
	290, // 542: openstorage.api.OpenStoragePool.Resize:output_type -> openstorage.api.SdkStoragePoolResizeResponse
	278, // 543: openstorage.api.OpenStoragePool.Rebalance:output_type -> openstorage.api.SdkStorageRebalanceResponse
	284, // 544: openstorage.api.OpenStoragePool.UpdateRebalanceJobState:output_type -> openstorage.api.SdkUpdateRebalanceJobResponse
	286, // 545: openstorage.api.OpenStoragePool.GetRebalanceJobStatus:output_type -> openstorage.api.SdkGetRebalanceJobStatusResponse
	288, // 546: openstorage.api.OpenStoragePool.EnumerateRebalanceJobs:output_type -> openstorage.api.SdkEnumerateRebalanceJobsResponse
	258, // 547: openstorage.api.OpenStorageDiags.Collect:output_type -> openstorage.api.SdkDiagsCollectResponse
	264, // 548: openstorage.api.OpenStorageJob.Update:output_type -> openstorage.api.SdkUpdateJobResponse
	269, // 549: openstorage.api.OpenStorageJob.GetStatus:output_type -> openstorage.api.SdkGetJobStatusResponse
	262, // 550: openstorage.api.OpenStorageJob.Enumerate:output_type -> openstorage.api.SdkEnumerateJobsResponse
	291, // 551: openstorage.api.OpenStorageNode.Inspect:output_type -> openstorage.api.SdkNodeInspectResponse
	293, // 552: openstorage.api.OpenStorageNode.InspectCurrent:output_type -> openstorage.api.SdkNodeInspectCurrentResponse
	295, // 553: openstorage.api.OpenStorageNode.Enumerate:output_type -> openstorage.api.SdkNodeEnumerateResponse
	297, // 554: openstorage.api.OpenStorageNode.EnumerateWithFilters:output_type -> openstorage.api.SdkNodeEnumerateWithFiltersResponse
	235, // 555: openstorage.api.OpenStorageNode.VolumeUsageByNode:output_type -> openstorage.api.SdkNodeVolumeUsageByNodeResponse
	237, // 556: openstorage.api.OpenStorageNode.RelaxedReclaimPurge:output_type -> openstorage.api.SdkNodeRelaxedReclaimPurgeResponse
	250, // 557: openstorage.api.OpenStorageNode.DrainAttachments:output_type -> openstorage.api.SdkJobResponse
	272, // 558: openstorage.api.OpenStorageNode.CordonAttachments:output_type -> openstorage.api.SdkNodeCordonAttachmentsResponse
	274, // 559: openstorage.api.OpenStorageNode.UncordonAttachments:output_type -> openstorage.api.SdkNodeUncordonAttachmentsResponse
	133, // 560: openstorage.api.OpenStorageBucket.Create:output_type -> openstorage.api.BucketCreateResponse
	135, // 561: openstorage.api.OpenStorageBucket.Delete:output_type -> openstorage.api.BucketDeleteResponse
	137, // 562: openstorage.api.OpenStorageBucket.GrantAccess:output_type -> openstorage.api.BucketGrantAccessResponse
	139, // 563: openstorage.api.OpenStorageBucket.RevokeAccess:output_type -> openstorage.api.BucketRevokeAccessResponse
	205, // 564: openstorage.api.OpenStorageVolume.Create:output_type -> openstorage.api.SdkVolumeCreateResponse
	207, // 565: openstorage.api.OpenStorageVolume.Clone:output_type -> openstorage.api.SdkVolumeCloneResponse
	209, // 566: openstorage.api.OpenStorageVolume.Delete:output_type -> openstorage.api.SdkVolumeDeleteResponse
	211, // 567: openstorage.api.OpenStorageVolume.Inspect:output_type -> openstorage.api.SdkVolumeInspectResponse
	213, // 568: openstorage.api.OpenStorageVolume.InspectWithFilters:output_type -> openstorage.api.SdkVolumeInspectWithFiltersResponse
	215, // 569: openstorage.api.OpenStorageVolume.Update:output_type -> openstorage.api.SdkVolumeUpdateResponse
	217, // 570: openstorage.api.OpenStorageVolume.Stats:output_type -> openstorage.api.SdkVolumeStatsResponse
	219, // 571: openstorage.api.OpenStorageVolume.CapacityUsage:output_type -> openstorage.api.SdkVolumeCapacityUsageResponse
	221, // 572: openstorage.api.OpenStorageVolume.Enumerate:output_type -> openstorage.api.SdkVolumeEnumerateResponse
	223, // 573: openstorage.api.OpenStorageVolume.EnumerateWithFilters:output_type -> openstorage.api.SdkVolumeEnumerateWithFiltersResponse
	225, // 574: openstorage.api.OpenStorageVolume.SnapshotCreate:output_type -> openstorage.api.SdkVolumeSnapshotCreateResponse
	227, // 575: openstorage.api.OpenStorageVolume.SnapshotRestore:output_type -> openstorage.api.SdkVolumeSnapshotRestoreResponse
	229, // 576: openstorage.api.OpenStorageVolume.SnapshotEnumerate:output_type -> openstorage.api.SdkVolumeSnapshotEnumerateResponse
	231, // 577: openstorage.api.OpenStorageVolume.SnapshotEnumerateWithFilters:output_type -> openstorage.api.SdkVolumeSnapshotEnumerateWithFiltersResponse
	233, // 578: openstorage.api.OpenStorageVolume.SnapshotScheduleUpdate:output_type -> openstorage.api.SdkVolumeSnapshotScheduleUpdateResponse
	424, // 579: openstorage.api.OpenStorageVolume.VolumeCatalog:output_type -> openstorage.api.SdkVolumeCatalogResponse
	200, // 580: openstorage.api.OpenStorageMountAttach.Attach:output_type -> openstorage.api.SdkVolumeAttachResponse
	203, // 581: openstorage.api.OpenStorageMountAttach.Detach:output_type -> openstorage.api.SdkVolumeDetachResponse
	195, // 582: openstorage.api.OpenStorageMountAttach.Mount:output_type -> openstorage.api.SdkVolumeMountResponse
	198, // 583: openstorage.api.OpenStorageMountAttach.Unmount:output_type -> openstorage.api.SdkVolumeUnmountResponse
	381, // 584: openstorage.api.OpenStorageMigrate.Start:output_type -> openstorage.api.SdkCloudMigrateStartResponse
	384, // 585: openstorage.api.OpenStorageMigrate.Cancel:output_type -> openstorage.api.SdkCloudMigrateCancelResponse
	390, // 586: openstorage.api.OpenStorageMigrate.Status:output_type -> openstorage.api.SdkCloudMigrateStatusResponse
	299, // 587: openstorage.api.OpenStorageObjectstore.Inspect:output_type -> openstorage.api.SdkObjectstoreInspectResponse
	301, // 588: openstorage.api.OpenStorageObjectstore.Create:output_type -> openstorage.api.SdkObjectstoreCreateResponse
	303, // 589: openstorage.api.OpenStorageObjectstore.Delete:output_type -> openstorage.api.SdkObjectstoreDeleteResponse
	305, // 590: openstorage.api.OpenStorageObjectstore.Update:output_type -> openstorage.api.SdkObjectstoreUpdateResponse
	174, // 591: openstorage.api.OpenStorageCredentials.Create:output_type -> openstorage.api.SdkCredentialCreateResponse
	176, // 592: openstorage.api.OpenStorageCredentials.Update:output_type -> openstorage.api.SdkCredentialUpdateResponse
	184, // 593: openstorage.api.OpenStorageCredentials.Enumerate:output_type -> openstorage.api.SdkCredentialEnumerateResponse
	186, // 594: openstorage.api.OpenStorageCredentials.Inspect:output_type -> openstorage.api.SdkCredentialInspectResponse
	188, // 595: openstorage.api.OpenStorageCredentials.Delete:output_type -> openstorage.api.SdkCredentialDeleteResponse
	190, // 596: openstorage.api.OpenStorageCredentials.Validate:output_type -> openstorage.api.SdkCredentialValidateResponse
	192, // 597: openstorage.api.OpenStorageCredentials.DeleteReferences:output_type -> openstorage.api.SdkCredentialDeleteReferencesResponse
	158, // 598: openstorage.api.OpenStorageSchedulePolicy.Create:output_type -> openstorage.api.SdkSchedulePolicyCreateResponse
	160, // 599: openstorage.api.OpenStorageSchedulePolicy.Update:output_type -> openstorage.api.SdkSchedulePolicyUpdateResponse
	162, // 600: openstorage.api.OpenStorageSchedulePolicy.Enumerate:output_type -> openstorage.api.SdkSchedulePolicyEnumerateResponse
	164, // 601: openstorage.api.OpenStorageSchedulePolicy.Inspect:output_type -> openstorage.api.SdkSchedulePolicyInspectResponse
	166, // 602: openstorage.api.OpenStorageSchedulePolicy.Delete:output_type -> openstorage.api.SdkSchedulePolicyDeleteResponse
	307, // 603: openstorage.api.OpenStorageCloudBackup.Create:output_type -> openstorage.api.SdkCloudBackupCreateResponse
	309, // 604: openstorage.api.OpenStorageCloudBackup.GroupCreate:output_type -> openstorage.api.SdkCloudBackupGroupCreateResponse
	311, // 605: openstorage.api.OpenStorageCloudBackup.Restore:output_type -> openstorage.api.SdkCloudBackupRestoreResponse
	313, // 606: openstorage.api.OpenStorageCloudBackup.Delete:output_type -> openstorage.api.SdkCloudBackupDeleteResponse
	315, // 607: openstorage.api.OpenStorageCloudBackup.DeleteAll:output_type -> openstorage.api.SdkCloudBackupDeleteAllResponse
	318, // 608: openstorage.api.OpenStorageCloudBackup.EnumerateWithFilters:output_type -> openstorage.api.SdkCloudBackupEnumerateWithFiltersResponse
	321, // 609: openstorage.api.OpenStorageCloudBackup.Status:output_type -> openstorage.api.SdkCloudBackupStatusResponse
	323, // 610: openstorage.api.OpenStorageCloudBackup.Catalog:output_type -> openstorage.api.SdkCloudBackupCatalogResponse
	326, // 611: openstorage.api.OpenStorageCloudBackup.History:output_type -> openstorage.api.SdkCloudBackupHistoryResponse
	328, // 612: openstorage.api.OpenStorageCloudBackup.StateChange:output_type -> openstorage.api.SdkCloudBackupStateChangeResponse
	331, // 613: openstorage.api.OpenStorageCloudBackup.SchedCreate:output_type -> openstorage.api.SdkCloudBackupSchedCreateResponse
	333, // 614: openstorage.api.OpenStorageCloudBackup.SchedUpdate:output_type -> openstorage.api.SdkCloudBackupSchedUpdateResponse
	335, // 615: openstorage.api.OpenStorageCloudBackup.SchedDelete:output_type -> openstorage.api.SdkCloudBackupSchedDeleteResponse
	337, // 616: openstorage.api.OpenStorageCloudBackup.SchedEnumerate:output_type -> openstorage.api.SdkCloudBackupSchedEnumerateResponse
	339, // 617: openstorage.api.OpenStorageCloudBackup.Size:output_type -> openstorage.api.SdkCloudBackupSizeResponse
	142, // 618: openstorage.api.OpenStoragePolicy.Create:output_type -> openstorage.api.SdkOpenStoragePolicyCreateResponse
	144, // 619: openstorage.api.OpenStoragePolicy.Enumerate:output_type -> openstorage.api.SdkOpenStoragePolicyEnumerateResponse
	146, // 620: openstorage.api.OpenStoragePolicy.Inspect:output_type -> openstorage.api.SdkOpenStoragePolicyInspectResponse
	150, // 621: openstorage.api.OpenStoragePolicy.Update:output_type -> openstorage.api.SdkOpenStoragePolicyUpdateResponse
	148, // 622: openstorage.api.OpenStoragePolicy.Delete:output_type -> openstorage.api.SdkOpenStoragePolicyDeleteResponse
	152, // 623: openstorage.api.OpenStoragePolicy.SetDefault:output_type -> openstorage.api.SdkOpenStoragePolicySetDefaultResponse
	156, // 624: openstorage.api.OpenStoragePolicy.DefaultInspect:output_type -> openstorage.api.SdkOpenStoragePolicyDefaultInspectResponse
	154, // 625: openstorage.api.OpenStoragePolicy.Release:output_type -> openstorage.api.SdkOpenStoragePolicyReleaseResponse
	514, // [514:626] is the sub-list for method output_type
	402, // [402:514] is the sub-list for method input_type
	402, // [402:402] is the sub-list for extension type_name
	402, // [402:402] is the sub-list for extension extendee
	0,   // [0:402] is the sub-list for field type_name
}

func init() { file_api_api_proto_init() }
func file_api_api_proto_init() {
	if File_api_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoragePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerTopology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoragePoolOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeLocator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeInspectOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IoStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Xattr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFSProxySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3ProxySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PXDProxySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PureBlockSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PureFileSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sharedv4ServiceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sharedv4FailoverStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sharedv4Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastpathReplState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastpathConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IoThrottle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeSpecUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeSpecPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeStateMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ownership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapacityUsageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeUsageByNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FstrimVolumeUsageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelaxedReclaimPurge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkStoragePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAlertsTimeSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAlertsCountSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAlertsOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAlertsResourceTypeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAlertsAlertTypeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAlertsResourceIdQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAlertsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAlertsEnumerateWithFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAlertsEnumerateWithFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAlertsDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAlertsDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectstoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeStateAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeConsumer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeServiceInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphDriverChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupSnapCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupSnapCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketGrantAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketGrantAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketRevokeAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketRevokeAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketAccessCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicyCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicyCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicyEnumerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicyEnumerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicyInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicyInspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicyDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicyDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicyUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicyUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicySetDefaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicySetDefaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicyReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicyReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicyDefaultInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkOpenStoragePolicyDefaultInspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyEnumerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyEnumerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyInspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyIntervalDaily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyIntervalWeekly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyIntervalMonthly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyIntervalPeriodic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicyInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkSchedulePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCredentialCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCredentialCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCredentialUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCredentialUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAwsCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAzureCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkGoogleCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAwsCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAzureCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkGoogleCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCredentialEnumerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCredentialEnumerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCredentialInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCredentialInspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCredentialDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCredentialDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCredentialValidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCredentialValidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCredentialDeleteReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCredentialDeleteReferencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeAttachOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeMountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeMountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeUnmountOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeUnmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeUnmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeAttachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeAttachResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeDetachOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeDetachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeDetachResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeCloneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeCloneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeInspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeInspectWithFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeInspectWithFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeCapacityUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeCapacityUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeEnumerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeEnumerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeEnumerateWithFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeEnumerateWithFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeSnapshotCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeSnapshotCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeSnapshotRestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeSnapshotRestoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeSnapshotEnumerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeSnapshotEnumerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeSnapshotEnumerateWithFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeSnapshotEnumerateWithFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeSnapshotScheduleUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeSnapshotScheduleUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeVolumeUsageByNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeVolumeUsageByNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeRelaxedReclaimPurgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeRelaxedReclaimPurgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterDomainsEnumerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterDomainsEnumerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterDomainInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterDomainInspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterDomainActivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterDomainActivateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterDomainDeactivateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterDomainDeactivateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterInspectCurrentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterInspectCurrentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDrainAttachmentOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeDrainAttachmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDrainAttachmentsJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudDriveTransferJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectDiagsJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagsCollectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkDiagsCollectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkDiagsCollectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagsNodeSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagsVolumeSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkEnumerateJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkEnumerateJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkUpdateJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkUpdateJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkGetJobStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobWorkSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkGetJobStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrainAttachmentsSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeCordonAttachmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeCordonAttachmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeUncordonAttachmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeUncordonAttachmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkStoragePoolResizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageRebalanceTriggerThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkStorageRebalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkStorageRebalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageRebalanceJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageRebalanceSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageRebalanceWorkSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageRebalanceAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkUpdateRebalanceJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkUpdateRebalanceJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkGetRebalanceJobStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkGetRebalanceJobStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkEnumerateRebalanceJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkEnumerateRebalanceJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkStoragePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkStoragePoolResizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeInspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeInspectCurrentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeInspectCurrentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeEnumerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeEnumerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeEnumerateWithFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkNodeEnumerateWithFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkObjectstoreInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkObjectstoreInspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkObjectstoreCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkObjectstoreCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkObjectstoreDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkObjectstoreDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkObjectstoreUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkObjectstoreUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupGroupCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupGroupCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupRestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupRestoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupEnumerateWithFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupEnumerateWithFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupCatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupHistoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupStateChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupStateChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupScheduleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupSchedCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupSchedCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupSchedUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupSchedUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupSchedDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupSchedDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupSchedEnumerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupSchedEnumerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudBackupSizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkRoleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkRoleCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkRoleEnumerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkRoleEnumerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkRoleInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkRoleInspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkRoleDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkRoleDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkRoleUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkRoleUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemTrim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkFilesystemTrimStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkFilesystemTrimStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkFilesystemTrimStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkFilesystemTrimStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAutoFSTrimStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAutoFSTrimStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAutoFSTrimUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkAutoFSTrimUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkFilesystemTrimStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkFilesystemTrimStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkFilesystemCheckStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkFilesystemCheckStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkFilesystemCheckStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkFilesystemCheckStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkFilesystemCheckStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkFilesystemCheckStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkIdentityCapabilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkIdentityCapabilitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkIdentityVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkIdentityVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkServiceCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudMigrate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudMigrateStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudMigrateStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudMigrateStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudMigrateStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudMigrateCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudMigrateCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudMigrateCancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudMigrateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudMigrateInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudMigrateStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudMigrateStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudMigrateStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudMigrateStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterPairMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterPairCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterPairCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterPairCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterPairCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterPairProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterPairProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterPairDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterPairDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterPairTokenGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterPairGetTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterPairGetTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterPairResetTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterPairResetTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterPairInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterPairInspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterPairGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterPairInspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterPairEnumerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterPairsEnumerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkClusterPairEnumerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Catalog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumePlacementStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaPlacementSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumePlacementSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelSelectorRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreVolSnashotSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreVolStoragePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreVolumeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkVolumeCatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ownership_PublicAccessControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ownership_AccessControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkServiceCapability_OpenStorageService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudMigrateStartRequest_MigrateVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudMigrateStartRequest_MigrateVolumeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkCloudMigrateStartRequest_MigrateAllVolumes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_api_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*VolumeSpecUpdate_Size)(nil),
		(*VolumeSpecUpdate_HaLevel)(nil),
		(*VolumeSpecUpdate_Cos)(nil),
		(*VolumeSpecUpdate_IoProfile)(nil),
		(*VolumeSpecUpdate_Dedupe)(nil),
		(*VolumeSpecUpdate_SnapshotInterval)(nil),
		(*VolumeSpecUpdate_Shared)(nil),
		(*VolumeSpecUpdate_Passphrase)(nil),
		(*VolumeSpecUpdate_SnapshotSchedule)(nil),
		(*VolumeSpecUpdate_Scale)(nil),
		(*VolumeSpecUpdate_Sticky)(nil),
		(*VolumeSpecUpdate_Group)(nil),
		(*VolumeSpecUpdate_Journal)(nil),
		(*VolumeSpecUpdate_Sharedv4)(nil),
		(*VolumeSpecUpdate_QueueDepth)(nil),
		(*VolumeSpecUpdate_Nodiscard)(nil),
		(*VolumeSpecUpdate_ExportSpec)(nil),
		(*VolumeSpecUpdate_Fastpath)(nil),
		(*VolumeSpecUpdate_Xattr)(nil),
		(*VolumeSpecUpdate_ScanPolicy)(nil),
		(*VolumeSpecUpdate_MountOptSpec)(nil),
		(*VolumeSpecUpdate_Sharedv4MountOptSpec)(nil),
		(*VolumeSpecUpdate_ProxyWrite)(nil),
		(*VolumeSpecUpdate_ProxySpec)(nil),
		(*VolumeSpecUpdate_Sharedv4ServiceSpec)(nil),
		(*VolumeSpecUpdate_Sharedv4Spec)(nil),
		(*VolumeSpecUpdate_AutoFstrim)(nil),
		(*VolumeSpecUpdate_IoThrottle)(nil),
		(*VolumeSpecUpdate_Readahead)(nil),
		(*VolumeSpecUpdate_Winshare)(nil),
	}
	file_api_api_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*VolumeSpecPolicy_Size)(nil),
		(*VolumeSpecPolicy_HaLevel)(nil),
		(*VolumeSpecPolicy_Cos)(nil),
		(*VolumeSpecPolicy_IoProfile)(nil),
		(*VolumeSpecPolicy_Dedupe)(nil),
		(*VolumeSpecPolicy_SnapshotInterval)(nil),
		(*VolumeSpecPolicy_Shared)(nil),
		(*VolumeSpecPolicy_Passphrase)(nil),
		(*VolumeSpecPolicy_SnapshotSchedule)(nil),
		(*VolumeSpecPolicy_Scale)(nil),
		(*VolumeSpecPolicy_Sticky)(nil),
		(*VolumeSpecPolicy_Group)(nil),
		(*VolumeSpecPolicy_Journal)(nil),
		(*VolumeSpecPolicy_Sharedv4)(nil),
		(*VolumeSpecPolicy_QueueDepth)(nil),
		(*VolumeSpecPolicy_Encrypted)(nil),
		(*VolumeSpecPolicy_AggregationLevel)(nil),
		(*VolumeSpecPolicy_Nodiscard)(nil),
		(*VolumeSpecPolicy_ExportSpec)(nil),
		(*VolumeSpecPolicy_ScanPolicy)(nil),
		(*VolumeSpecPolicy_MountOptSpec)(nil),
		(*VolumeSpecPolicy_Sharedv4MountOptSpec)(nil),
		(*VolumeSpecPolicy_ProxyWrite)(nil),
		(*VolumeSpecPolicy_ProxySpec)(nil),
		(*VolumeSpecPolicy_Fastpath)(nil),
		(*VolumeSpecPolicy_Sharedv4ServiceSpec)(nil),
		(*VolumeSpecPolicy_Sharedv4Spec)(nil),
		(*VolumeSpecPolicy_AutoFstrim)(nil),
		(*VolumeSpecPolicy_IoThrottle)(nil),
		(*VolumeSpecPolicy_Readahead)(nil),
		(*VolumeSpecPolicy_Winshare)(nil),
	}
	file_api_api_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*SdkAlertsOption_MinSeverityType)(nil),
		(*SdkAlertsOption_IsCleared)(nil),
		(*SdkAlertsOption_TimeSpan)(nil),
		(*SdkAlertsOption_CountSpan)(nil),
	}
	file_api_api_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*SdkAlertsQuery_ResourceTypeQuery)(nil),
		(*SdkAlertsQuery_AlertTypeQuery)(nil),
		(*SdkAlertsQuery_ResourceIdQuery)(nil),
	}
	file_api_api_proto_msgTypes[114].OneofWrappers = []interface{}{
		(*SdkSchedulePolicyInterval_Daily)(nil),
		(*SdkSchedulePolicyInterval_Weekly)(nil),
		(*SdkSchedulePolicyInterval_Monthly)(nil),
		(*SdkSchedulePolicyInterval_Periodic)(nil),
	}
	file_api_api_proto_msgTypes[116].OneofWrappers = []interface{}{
		(*SdkCredentialCreateRequest_AwsCredential)(nil),
		(*SdkCredentialCreateRequest_AzureCredential)(nil),
		(*SdkCredentialCreateRequest_GoogleCredential)(nil),
	}
	file_api_api_proto_msgTypes[129].OneofWrappers = []interface{}{
		(*SdkCredentialInspectResponse_AwsCredential)(nil),
		(*SdkCredentialInspectResponse_AzureCredential)(nil),
		(*SdkCredentialInspectResponse_GoogleCredential)(nil),
	}
	file_api_api_proto_msgTypes[192].OneofWrappers = []interface{}{
		(*Job_DrainAttachments)(nil),
		(*Job_ClouddriveTransfer)(nil),
		(*Job_CollectDiags)(nil),
	}
	file_api_api_proto_msgTypes[210].OneofWrappers = []interface{}{
		(*JobWorkSummary_DrainAttachmentsSummary)(nil),
	}
	file_api_api_proto_msgTypes[218].OneofWrappers = []interface{}{
		(*SdkStoragePoolResizeRequest_Size)(nil),
		(*SdkStoragePoolResizeRequest_Percentage)(nil),
	}
	file_api_api_proto_msgTypes[317].OneofWrappers = []interface{}{
		(*SdkServiceCapability_Service)(nil),
	}
	file_api_api_proto_msgTypes[322].OneofWrappers = []interface{}{
		(*SdkCloudMigrateStartRequest_Volume)(nil),
		(*SdkCloudMigrateStartRequest_VolumeGroup)(nil),
		(*SdkCloudMigrateStartRequest_AllVolumes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_api_proto_rawDesc,
			NumEnums:      57,
			NumMessages:   421,
			NumExtensions: 0,
			NumServices:   21,
		},
		GoTypes:           file_api_api_proto_goTypes,
		DependencyIndexes: file_api_api_proto_depIdxs,
		EnumInfos:         file_api_api_proto_enumTypes,
		MessageInfos:      file_api_api_proto_msgTypes,
	}.Build()
	File_api_api_proto = out.File
	file_api_api_proto_rawDesc = nil
	file_api_api_proto_goTypes = nil
	file_api_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OpenStorageAlertsClient is the client API for OpenStorageAlerts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageAlertsClient interface {
	// Allows querying alerts.
	//
	// EnumerateWithFilters allows 3 different types of queries as defined below:
	//
	// * Query that takes only resource type as input
	// * Query that takes resource type and alert type as input and
	// * Query that takes resource id, alert type and resource type as input.
	//
	// #### Input
	// SdkAlertsEnumerateRequest takes a list of such queries and the returned
	// output is a collective output from each of these queries. In that sense,
	// the filtering of these queries has a behavior of OR operation.
	// Each query also has a list of optional options. These options allow
	// narrowing down the scope of alerts search. These options have a
	// behavior of an AND operation.
	//
	// #### Examples
	// To search by a resource type in a given time window would require
	// initializing SdkAlertsResourceTypeQuery query and pass in
	// SdkAlertsTimeSpan option into SdkAlertsQuery struct and finally
	// packing any other such queries into SdkAlertsEnumerateRequest object.
	// Alternatively, to search by both resource type and alert type, use
	// SdkAlertsAlertTypeQuery as query builder.
	// Finally to search all alerts of a given resource type and some
	// alerts of another resource type but with specific alert type,
	// use two queries, first initialized with SdkAlertsResourceTypeQuery
	// and second initialized with SdkAlertsAlertTypeQuery and both
	// eventually packed as list in SdkAlertsEnumerateRequest.
	EnumerateWithFilters(ctx context.Context, in *SdkAlertsEnumerateWithFiltersRequest, opts ...grpc.CallOption) (OpenStorageAlerts_EnumerateWithFiltersClient, error)
	// Delete alerts
	//
	// #### Delete
	// Delete allows 3 different types of queries as defined below:
	//
	// * Query that takes only resource type as input
	// * Query that takes resource type and alert type as input and
	// * Query that takes resource id, alert type and resource type as input.
	//
	// #### Input
	// SdkAlertsDeleteRequest takes a list of such queries and all alerts
	// that match at least one of the queries are deleted.
	Delete(ctx context.Context, in *SdkAlertsDeleteRequest, opts ...grpc.CallOption) (*SdkAlertsDeleteResponse, error)
}

type openStorageAlertsClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageAlertsClient(cc grpc.ClientConnInterface) OpenStorageAlertsClient {
	return &openStorageAlertsClient{cc}
}

func (c *openStorageAlertsClient) EnumerateWithFilters(ctx context.Context, in *SdkAlertsEnumerateWithFiltersRequest, opts ...grpc.CallOption) (OpenStorageAlerts_EnumerateWithFiltersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OpenStorageAlerts_serviceDesc.Streams[0], "/openstorage.api.OpenStorageAlerts/EnumerateWithFilters", opts...)
	if err != nil {
		return nil, err
	}
	x := &openStorageAlertsEnumerateWithFiltersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpenStorageAlerts_EnumerateWithFiltersClient interface {
	Recv() (*SdkAlertsEnumerateWithFiltersResponse, error)
	grpc.ClientStream
}

type openStorageAlertsEnumerateWithFiltersClient struct {
	grpc.ClientStream
}

func (x *openStorageAlertsEnumerateWithFiltersClient) Recv() (*SdkAlertsEnumerateWithFiltersResponse, error) {
	m := new(SdkAlertsEnumerateWithFiltersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *openStorageAlertsClient) Delete(ctx context.Context, in *SdkAlertsDeleteRequest, opts ...grpc.CallOption) (*SdkAlertsDeleteResponse, error) {
	out := new(SdkAlertsDeleteResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageAlerts/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageAlertsServer is the server API for OpenStorageAlerts service.
type OpenStorageAlertsServer interface {
	// Allows querying alerts.
	//
	// EnumerateWithFilters allows 3 different types of queries as defined below:
	//
	// * Query that takes only resource type as input
	// * Query that takes resource type and alert type as input and
	// * Query that takes resource id, alert type and resource type as input.
	//
	// #### Input
	// SdkAlertsEnumerateRequest takes a list of such queries and the returned
	// output is a collective output from each of these queries. In that sense,
	// the filtering of these queries has a behavior of OR operation.
	// Each query also has a list of optional options. These options allow
	// narrowing down the scope of alerts search. These options have a
	// behavior of an AND operation.
	//
	// #### Examples
	// To search by a resource type in a given time window would require
	// initializing SdkAlertsResourceTypeQuery query and pass in
	// SdkAlertsTimeSpan option into SdkAlertsQuery struct and finally
	// packing any other such queries into SdkAlertsEnumerateRequest object.
	// Alternatively, to search by both resource type and alert type, use
	// SdkAlertsAlertTypeQuery as query builder.
	// Finally to search all alerts of a given resource type and some
	// alerts of another resource type but with specific alert type,
	// use two queries, first initialized with SdkAlertsResourceTypeQuery
	// and second initialized with SdkAlertsAlertTypeQuery and both
	// eventually packed as list in SdkAlertsEnumerateRequest.
	EnumerateWithFilters(*SdkAlertsEnumerateWithFiltersRequest, OpenStorageAlerts_EnumerateWithFiltersServer) error
	// Delete alerts
	//
	// #### Delete
	// Delete allows 3 different types of queries as defined below:
	//
	// * Query that takes only resource type as input
	// * Query that takes resource type and alert type as input and
	// * Query that takes resource id, alert type and resource type as input.
	//
	// #### Input
	// SdkAlertsDeleteRequest takes a list of such queries and all alerts
	// that match at least one of the queries are deleted.
	Delete(context.Context, *SdkAlertsDeleteRequest) (*SdkAlertsDeleteResponse, error)
}

// UnimplementedOpenStorageAlertsServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageAlertsServer struct {
}

func (*UnimplementedOpenStorageAlertsServer) EnumerateWithFilters(*SdkAlertsEnumerateWithFiltersRequest, OpenStorageAlerts_EnumerateWithFiltersServer) error {
	return status.Errorf(codes.Unimplemented, "method EnumerateWithFilters not implemented")
}
func (*UnimplementedOpenStorageAlertsServer) Delete(context.Context, *SdkAlertsDeleteRequest) (*SdkAlertsDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterOpenStorageAlertsServer(s *grpc.Server, srv OpenStorageAlertsServer) {
	s.RegisterService(&_OpenStorageAlerts_serviceDesc, srv)
}

func _OpenStorageAlerts_EnumerateWithFilters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SdkAlertsEnumerateWithFiltersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenStorageAlertsServer).EnumerateWithFilters(m, &openStorageAlertsEnumerateWithFiltersServer{stream})
}

type OpenStorageAlerts_EnumerateWithFiltersServer interface {
	Send(*SdkAlertsEnumerateWithFiltersResponse) error
	grpc.ServerStream
}

type openStorageAlertsEnumerateWithFiltersServer struct {
	grpc.ServerStream
}

func (x *openStorageAlertsEnumerateWithFiltersServer) Send(m *SdkAlertsEnumerateWithFiltersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OpenStorageAlerts_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkAlertsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageAlertsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageAlerts/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageAlertsServer).Delete(ctx, req.(*SdkAlertsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageAlerts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageAlerts",
	HandlerType: (*OpenStorageAlertsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _OpenStorageAlerts_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnumerateWithFilters",
			Handler:       _OpenStorageAlerts_EnumerateWithFilters_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/api.proto",
}

// OpenStorageRoleClient is the client API for OpenStorageRole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageRoleClient interface {
	// Create a role for users in the system
	Create(ctx context.Context, in *SdkRoleCreateRequest, opts ...grpc.CallOption) (*SdkRoleCreateResponse, error)
	// List all roles
	Enumerate(ctx context.Context, in *SdkRoleEnumerateRequest, opts ...grpc.CallOption) (*SdkRoleEnumerateResponse, error)
	// Get information about a role
	Inspect(ctx context.Context, in *SdkRoleInspectRequest, opts ...grpc.CallOption) (*SdkRoleInspectResponse, error)
	// Delete an existing role
	Delete(ctx context.Context, in *SdkRoleDeleteRequest, opts ...grpc.CallOption) (*SdkRoleDeleteResponse, error)
	// Update an existing role
	Update(ctx context.Context, in *SdkRoleUpdateRequest, opts ...grpc.CallOption) (*SdkRoleUpdateResponse, error)
}

type openStorageRoleClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageRoleClient(cc grpc.ClientConnInterface) OpenStorageRoleClient {
	return &openStorageRoleClient{cc}
}

func (c *openStorageRoleClient) Create(ctx context.Context, in *SdkRoleCreateRequest, opts ...grpc.CallOption) (*SdkRoleCreateResponse, error) {
	out := new(SdkRoleCreateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageRole/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageRoleClient) Enumerate(ctx context.Context, in *SdkRoleEnumerateRequest, opts ...grpc.CallOption) (*SdkRoleEnumerateResponse, error) {
	out := new(SdkRoleEnumerateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageRole/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageRoleClient) Inspect(ctx context.Context, in *SdkRoleInspectRequest, opts ...grpc.CallOption) (*SdkRoleInspectResponse, error) {
	out := new(SdkRoleInspectResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageRole/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageRoleClient) Delete(ctx context.Context, in *SdkRoleDeleteRequest, opts ...grpc.CallOption) (*SdkRoleDeleteResponse, error) {
	out := new(SdkRoleDeleteResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageRole/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageRoleClient) Update(ctx context.Context, in *SdkRoleUpdateRequest, opts ...grpc.CallOption) (*SdkRoleUpdateResponse, error) {
	out := new(SdkRoleUpdateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageRole/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageRoleServer is the server API for OpenStorageRole service.
type OpenStorageRoleServer interface {
	// Create a role for users in the system
	Create(context.Context, *SdkRoleCreateRequest) (*SdkRoleCreateResponse, error)
	// List all roles
	Enumerate(context.Context, *SdkRoleEnumerateRequest) (*SdkRoleEnumerateResponse, error)
	// Get information about a role
	Inspect(context.Context, *SdkRoleInspectRequest) (*SdkRoleInspectResponse, error)
	// Delete an existing role
	Delete(context.Context, *SdkRoleDeleteRequest) (*SdkRoleDeleteResponse, error)
	// Update an existing role
	Update(context.Context, *SdkRoleUpdateRequest) (*SdkRoleUpdateResponse, error)
}

// UnimplementedOpenStorageRoleServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageRoleServer struct {
}

func (*UnimplementedOpenStorageRoleServer) Create(context.Context, *SdkRoleCreateRequest) (*SdkRoleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedOpenStorageRoleServer) Enumerate(context.Context, *SdkRoleEnumerateRequest) (*SdkRoleEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedOpenStorageRoleServer) Inspect(context.Context, *SdkRoleInspectRequest) (*SdkRoleInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedOpenStorageRoleServer) Delete(context.Context, *SdkRoleDeleteRequest) (*SdkRoleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedOpenStorageRoleServer) Update(context.Context, *SdkRoleUpdateRequest) (*SdkRoleUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterOpenStorageRoleServer(s *grpc.Server, srv OpenStorageRoleServer) {
	s.RegisterService(&_OpenStorageRole_serviceDesc, srv)
}

func _OpenStorageRole_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkRoleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageRoleServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageRole/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageRoleServer).Create(ctx, req.(*SdkRoleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageRole_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkRoleEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageRoleServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageRole/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageRoleServer).Enumerate(ctx, req.(*SdkRoleEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageRole_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkRoleInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageRoleServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageRole/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageRoleServer).Inspect(ctx, req.(*SdkRoleInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageRole_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkRoleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageRoleServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageRole/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageRoleServer).Delete(ctx, req.(*SdkRoleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageRole_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkRoleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageRoleServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageRole/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageRoleServer).Update(ctx, req.(*SdkRoleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageRole_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageRole",
	HandlerType: (*OpenStorageRoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OpenStorageRole_Create_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _OpenStorageRole_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _OpenStorageRole_Inspect_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OpenStorageRole_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OpenStorageRole_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageFilesystemTrimClient is the client API for OpenStorageFilesystemTrim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageFilesystemTrimClient interface {
	// Start a filesystem Trim background operation on a mounted volume
	Start(ctx context.Context, in *SdkFilesystemTrimStartRequest, opts ...grpc.CallOption) (*SdkFilesystemTrimStartResponse, error)
	// Status of a filesystem Trim background operation on a mounted
	// volume, if any
	Status(ctx context.Context, in *SdkFilesystemTrimStatusRequest, opts ...grpc.CallOption) (*SdkFilesystemTrimStatusResponse, error)
	AutoFSTrimStatus(ctx context.Context, in *SdkAutoFSTrimStatusRequest, opts ...grpc.CallOption) (*SdkAutoFSTrimStatusResponse, error)
	// Usage of a filesystem Trim background operation on all locally mounted
	// volume
	AutoFSTrimUsage(ctx context.Context, in *SdkAutoFSTrimUsageRequest, opts ...grpc.CallOption) (*SdkAutoFSTrimUsageResponse, error)
	// Stop a filesystem Trim background operation on a mounted volume, if any
	Stop(ctx context.Context, in *SdkFilesystemTrimStopRequest, opts ...grpc.CallOption) (*SdkFilesystemTrimStopResponse, error)
}

type openStorageFilesystemTrimClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageFilesystemTrimClient(cc grpc.ClientConnInterface) OpenStorageFilesystemTrimClient {
	return &openStorageFilesystemTrimClient{cc}
}

func (c *openStorageFilesystemTrimClient) Start(ctx context.Context, in *SdkFilesystemTrimStartRequest, opts ...grpc.CallOption) (*SdkFilesystemTrimStartResponse, error) {
	out := new(SdkFilesystemTrimStartResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageFilesystemTrim/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageFilesystemTrimClient) Status(ctx context.Context, in *SdkFilesystemTrimStatusRequest, opts ...grpc.CallOption) (*SdkFilesystemTrimStatusResponse, error) {
	out := new(SdkFilesystemTrimStatusResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageFilesystemTrim/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageFilesystemTrimClient) AutoFSTrimStatus(ctx context.Context, in *SdkAutoFSTrimStatusRequest, opts ...grpc.CallOption) (*SdkAutoFSTrimStatusResponse, error) {
	out := new(SdkAutoFSTrimStatusResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageFilesystemTrim/AutoFSTrimStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageFilesystemTrimClient) AutoFSTrimUsage(ctx context.Context, in *SdkAutoFSTrimUsageRequest, opts ...grpc.CallOption) (*SdkAutoFSTrimUsageResponse, error) {
	out := new(SdkAutoFSTrimUsageResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageFilesystemTrim/AutoFSTrimUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageFilesystemTrimClient) Stop(ctx context.Context, in *SdkFilesystemTrimStopRequest, opts ...grpc.CallOption) (*SdkFilesystemTrimStopResponse, error) {
	out := new(SdkFilesystemTrimStopResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageFilesystemTrim/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageFilesystemTrimServer is the server API for OpenStorageFilesystemTrim service.
type OpenStorageFilesystemTrimServer interface {
	// Start a filesystem Trim background operation on a mounted volume
	Start(context.Context, *SdkFilesystemTrimStartRequest) (*SdkFilesystemTrimStartResponse, error)
	// Status of a filesystem Trim background operation on a mounted
	// volume, if any
	Status(context.Context, *SdkFilesystemTrimStatusRequest) (*SdkFilesystemTrimStatusResponse, error)
	AutoFSTrimStatus(context.Context, *SdkAutoFSTrimStatusRequest) (*SdkAutoFSTrimStatusResponse, error)
	// Usage of a filesystem Trim background operation on all locally mounted
	// volume
	AutoFSTrimUsage(context.Context, *SdkAutoFSTrimUsageRequest) (*SdkAutoFSTrimUsageResponse, error)
	// Stop a filesystem Trim background operation on a mounted volume, if any
	Stop(context.Context, *SdkFilesystemTrimStopRequest) (*SdkFilesystemTrimStopResponse, error)
}

// UnimplementedOpenStorageFilesystemTrimServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageFilesystemTrimServer struct {
}

func (*UnimplementedOpenStorageFilesystemTrimServer) Start(context.Context, *SdkFilesystemTrimStartRequest) (*SdkFilesystemTrimStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedOpenStorageFilesystemTrimServer) Status(context.Context, *SdkFilesystemTrimStatusRequest) (*SdkFilesystemTrimStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedOpenStorageFilesystemTrimServer) AutoFSTrimStatus(context.Context, *SdkAutoFSTrimStatusRequest) (*SdkAutoFSTrimStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoFSTrimStatus not implemented")
}
func (*UnimplementedOpenStorageFilesystemTrimServer) AutoFSTrimUsage(context.Context, *SdkAutoFSTrimUsageRequest) (*SdkAutoFSTrimUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoFSTrimUsage not implemented")
}
func (*UnimplementedOpenStorageFilesystemTrimServer) Stop(context.Context, *SdkFilesystemTrimStopRequest) (*SdkFilesystemTrimStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func RegisterOpenStorageFilesystemTrimServer(s *grpc.Server, srv OpenStorageFilesystemTrimServer) {
	s.RegisterService(&_OpenStorageFilesystemTrim_serviceDesc, srv)
}

func _OpenStorageFilesystemTrim_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkFilesystemTrimStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageFilesystemTrimServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageFilesystemTrim/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageFilesystemTrimServer).Start(ctx, req.(*SdkFilesystemTrimStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageFilesystemTrim_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkFilesystemTrimStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageFilesystemTrimServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageFilesystemTrim/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageFilesystemTrimServer).Status(ctx, req.(*SdkFilesystemTrimStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageFilesystemTrim_AutoFSTrimStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkAutoFSTrimStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageFilesystemTrimServer).AutoFSTrimStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageFilesystemTrim/AutoFSTrimStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageFilesystemTrimServer).AutoFSTrimStatus(ctx, req.(*SdkAutoFSTrimStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageFilesystemTrim_AutoFSTrimUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkAutoFSTrimUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageFilesystemTrimServer).AutoFSTrimUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageFilesystemTrim/AutoFSTrimUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageFilesystemTrimServer).AutoFSTrimUsage(ctx, req.(*SdkAutoFSTrimUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageFilesystemTrim_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkFilesystemTrimStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageFilesystemTrimServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageFilesystemTrim/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageFilesystemTrimServer).Stop(ctx, req.(*SdkFilesystemTrimStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageFilesystemTrim_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageFilesystemTrim",
	HandlerType: (*OpenStorageFilesystemTrimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _OpenStorageFilesystemTrim_Start_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _OpenStorageFilesystemTrim_Status_Handler,
		},
		{
			MethodName: "AutoFSTrimStatus",
			Handler:    _OpenStorageFilesystemTrim_AutoFSTrimStatus_Handler,
		},
		{
			MethodName: "AutoFSTrimUsage",
			Handler:    _OpenStorageFilesystemTrim_AutoFSTrimUsage_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _OpenStorageFilesystemTrim_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageFilesystemCheckClient is the client API for OpenStorageFilesystemCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageFilesystemCheckClient interface {
	// Start a filesystem-check background operation on a unmounted volume.
	Start(ctx context.Context, in *SdkFilesystemCheckStartRequest, opts ...grpc.CallOption) (*SdkFilesystemCheckStartResponse, error)
	// Get Status of a filesystem-check background operation on an unmounted
	// volume, if any
	Status(ctx context.Context, in *SdkFilesystemCheckStatusRequest, opts ...grpc.CallOption) (*SdkFilesystemCheckStatusResponse, error)
	// Stop a filesystem check background operation on an unmounted volume, if any
	Stop(ctx context.Context, in *SdkFilesystemCheckStopRequest, opts ...grpc.CallOption) (*SdkFilesystemCheckStopResponse, error)
}

type openStorageFilesystemCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageFilesystemCheckClient(cc grpc.ClientConnInterface) OpenStorageFilesystemCheckClient {
	return &openStorageFilesystemCheckClient{cc}
}

func (c *openStorageFilesystemCheckClient) Start(ctx context.Context, in *SdkFilesystemCheckStartRequest, opts ...grpc.CallOption) (*SdkFilesystemCheckStartResponse, error) {
	out := new(SdkFilesystemCheckStartResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageFilesystemCheck/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageFilesystemCheckClient) Status(ctx context.Context, in *SdkFilesystemCheckStatusRequest, opts ...grpc.CallOption) (*SdkFilesystemCheckStatusResponse, error) {
	out := new(SdkFilesystemCheckStatusResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageFilesystemCheck/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageFilesystemCheckClient) Stop(ctx context.Context, in *SdkFilesystemCheckStopRequest, opts ...grpc.CallOption) (*SdkFilesystemCheckStopResponse, error) {
	out := new(SdkFilesystemCheckStopResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageFilesystemCheck/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageFilesystemCheckServer is the server API for OpenStorageFilesystemCheck service.
type OpenStorageFilesystemCheckServer interface {
	// Start a filesystem-check background operation on a unmounted volume.
	Start(context.Context, *SdkFilesystemCheckStartRequest) (*SdkFilesystemCheckStartResponse, error)
	// Get Status of a filesystem-check background operation on an unmounted
	// volume, if any
	Status(context.Context, *SdkFilesystemCheckStatusRequest) (*SdkFilesystemCheckStatusResponse, error)
	// Stop a filesystem check background operation on an unmounted volume, if any
	Stop(context.Context, *SdkFilesystemCheckStopRequest) (*SdkFilesystemCheckStopResponse, error)
}

// UnimplementedOpenStorageFilesystemCheckServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageFilesystemCheckServer struct {
}

func (*UnimplementedOpenStorageFilesystemCheckServer) Start(context.Context, *SdkFilesystemCheckStartRequest) (*SdkFilesystemCheckStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedOpenStorageFilesystemCheckServer) Status(context.Context, *SdkFilesystemCheckStatusRequest) (*SdkFilesystemCheckStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedOpenStorageFilesystemCheckServer) Stop(context.Context, *SdkFilesystemCheckStopRequest) (*SdkFilesystemCheckStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func RegisterOpenStorageFilesystemCheckServer(s *grpc.Server, srv OpenStorageFilesystemCheckServer) {
	s.RegisterService(&_OpenStorageFilesystemCheck_serviceDesc, srv)
}

func _OpenStorageFilesystemCheck_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkFilesystemCheckStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageFilesystemCheckServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageFilesystemCheck/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageFilesystemCheckServer).Start(ctx, req.(*SdkFilesystemCheckStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageFilesystemCheck_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkFilesystemCheckStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageFilesystemCheckServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageFilesystemCheck/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageFilesystemCheckServer).Status(ctx, req.(*SdkFilesystemCheckStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageFilesystemCheck_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkFilesystemCheckStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageFilesystemCheckServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageFilesystemCheck/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageFilesystemCheckServer).Stop(ctx, req.(*SdkFilesystemCheckStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageFilesystemCheck_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageFilesystemCheck",
	HandlerType: (*OpenStorageFilesystemCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _OpenStorageFilesystemCheck_Start_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _OpenStorageFilesystemCheck_Status_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _OpenStorageFilesystemCheck_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageIdentityClient is the client API for OpenStorageIdentity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageIdentityClient interface {
	// Capabilities returns the supported services by the cluster.
	// This allows SDK implementations to advertise their supported
	// services as the API matures. With this information, clients
	// can determine supported services from storage clusters at
	// different versions.
	Capabilities(ctx context.Context, in *SdkIdentityCapabilitiesRequest, opts ...grpc.CallOption) (*SdkIdentityCapabilitiesResponse, error)
	// Version returns version information about the system.
	Version(ctx context.Context, in *SdkIdentityVersionRequest, opts ...grpc.CallOption) (*SdkIdentityVersionResponse, error)
}

type openStorageIdentityClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageIdentityClient(cc grpc.ClientConnInterface) OpenStorageIdentityClient {
	return &openStorageIdentityClient{cc}
}

func (c *openStorageIdentityClient) Capabilities(ctx context.Context, in *SdkIdentityCapabilitiesRequest, opts ...grpc.CallOption) (*SdkIdentityCapabilitiesResponse, error) {
	out := new(SdkIdentityCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageIdentity/Capabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageIdentityClient) Version(ctx context.Context, in *SdkIdentityVersionRequest, opts ...grpc.CallOption) (*SdkIdentityVersionResponse, error) {
	out := new(SdkIdentityVersionResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageIdentity/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageIdentityServer is the server API for OpenStorageIdentity service.
type OpenStorageIdentityServer interface {
	// Capabilities returns the supported services by the cluster.
	// This allows SDK implementations to advertise their supported
	// services as the API matures. With this information, clients
	// can determine supported services from storage clusters at
	// different versions.
	Capabilities(context.Context, *SdkIdentityCapabilitiesRequest) (*SdkIdentityCapabilitiesResponse, error)
	// Version returns version information about the system.
	Version(context.Context, *SdkIdentityVersionRequest) (*SdkIdentityVersionResponse, error)
}

// UnimplementedOpenStorageIdentityServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageIdentityServer struct {
}

func (*UnimplementedOpenStorageIdentityServer) Capabilities(context.Context, *SdkIdentityCapabilitiesRequest) (*SdkIdentityCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Capabilities not implemented")
}
func (*UnimplementedOpenStorageIdentityServer) Version(context.Context, *SdkIdentityVersionRequest) (*SdkIdentityVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}

func RegisterOpenStorageIdentityServer(s *grpc.Server, srv OpenStorageIdentityServer) {
	s.RegisterService(&_OpenStorageIdentity_serviceDesc, srv)
}

func _OpenStorageIdentity_Capabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkIdentityCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageIdentityServer).Capabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageIdentity/Capabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageIdentityServer).Capabilities(ctx, req.(*SdkIdentityCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageIdentity_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkIdentityVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageIdentityServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageIdentity/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageIdentityServer).Version(ctx, req.(*SdkIdentityVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageIdentity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageIdentity",
	HandlerType: (*OpenStorageIdentityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Capabilities",
			Handler:    _OpenStorageIdentity_Capabilities_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _OpenStorageIdentity_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageClusterClient is the client API for OpenStorageCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageClusterClient interface {
	// InspectCurrent returns information about the current cluster
	InspectCurrent(ctx context.Context, in *SdkClusterInspectCurrentRequest, opts ...grpc.CallOption) (*SdkClusterInspectCurrentResponse, error)
}

type openStorageClusterClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageClusterClient(cc grpc.ClientConnInterface) OpenStorageClusterClient {
	return &openStorageClusterClient{cc}
}

func (c *openStorageClusterClient) InspectCurrent(ctx context.Context, in *SdkClusterInspectCurrentRequest, opts ...grpc.CallOption) (*SdkClusterInspectCurrentResponse, error) {
	out := new(SdkClusterInspectCurrentResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCluster/InspectCurrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageClusterServer is the server API for OpenStorageCluster service.
type OpenStorageClusterServer interface {
	// InspectCurrent returns information about the current cluster
	InspectCurrent(context.Context, *SdkClusterInspectCurrentRequest) (*SdkClusterInspectCurrentResponse, error)
}

// UnimplementedOpenStorageClusterServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageClusterServer struct {
}

func (*UnimplementedOpenStorageClusterServer) InspectCurrent(context.Context, *SdkClusterInspectCurrentRequest) (*SdkClusterInspectCurrentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectCurrent not implemented")
}

func RegisterOpenStorageClusterServer(s *grpc.Server, srv OpenStorageClusterServer) {
	s.RegisterService(&_OpenStorageCluster_serviceDesc, srv)
}

func _OpenStorageCluster_InspectCurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkClusterInspectCurrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterServer).InspectCurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCluster/InspectCurrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterServer).InspectCurrent(ctx, req.(*SdkClusterInspectCurrentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageCluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageCluster",
	HandlerType: (*OpenStorageClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InspectCurrent",
			Handler:    _OpenStorageCluster_InspectCurrent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageClusterPairClient is the client API for OpenStorageClusterPair service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageClusterPairClient interface {
	// Creates Pair with a remote cluster and returns details about the remote cluster
	//
	// ##### Example
	// {% codetabs name="Golang", type="go" -%}
	// id, err := client.Create(context.Background(), &api.SdkClusterPairCreateRequest {
	//   Request : &api.ClusterPairCreateRequest {
	//                  RemoteClusterIp: "127.0.0.1",
	//                  RemoteClusterPort: 12345,
	//                  RemoteClusterToken: "<Auth-Token>",
	//                  SetDefault: true,
	//              }
	//        })
	// {%- endcodetabs %}
	Create(ctx context.Context, in *SdkClusterPairCreateRequest, opts ...grpc.CallOption) (*SdkClusterPairCreateResponse, error)
	// Inspect information about a cluster pair
	Inspect(ctx context.Context, in *SdkClusterPairInspectRequest, opts ...grpc.CallOption) (*SdkClusterPairInspectResponse, error)
	// Enumerate returns list of cluster pairs
	Enumerate(ctx context.Context, in *SdkClusterPairEnumerateRequest, opts ...grpc.CallOption) (*SdkClusterPairEnumerateResponse, error)
	// GetToken returns a auth token
	GetToken(ctx context.Context, in *SdkClusterPairGetTokenRequest, opts ...grpc.CallOption) (*SdkClusterPairGetTokenResponse, error)
	// ResetToken returns a auth token
	ResetToken(ctx context.Context, in *SdkClusterPairResetTokenRequest, opts ...grpc.CallOption) (*SdkClusterPairResetTokenResponse, error)
	// Delete a cluster pair
	Delete(ctx context.Context, in *SdkClusterPairDeleteRequest, opts ...grpc.CallOption) (*SdkClusterPairDeleteResponse, error)
}

type openStorageClusterPairClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageClusterPairClient(cc grpc.ClientConnInterface) OpenStorageClusterPairClient {
	return &openStorageClusterPairClient{cc}
}

func (c *openStorageClusterPairClient) Create(ctx context.Context, in *SdkClusterPairCreateRequest, opts ...grpc.CallOption) (*SdkClusterPairCreateResponse, error) {
	out := new(SdkClusterPairCreateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageClusterPair/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterPairClient) Inspect(ctx context.Context, in *SdkClusterPairInspectRequest, opts ...grpc.CallOption) (*SdkClusterPairInspectResponse, error) {
	out := new(SdkClusterPairInspectResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageClusterPair/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterPairClient) Enumerate(ctx context.Context, in *SdkClusterPairEnumerateRequest, opts ...grpc.CallOption) (*SdkClusterPairEnumerateResponse, error) {
	out := new(SdkClusterPairEnumerateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageClusterPair/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterPairClient) GetToken(ctx context.Context, in *SdkClusterPairGetTokenRequest, opts ...grpc.CallOption) (*SdkClusterPairGetTokenResponse, error) {
	out := new(SdkClusterPairGetTokenResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageClusterPair/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterPairClient) ResetToken(ctx context.Context, in *SdkClusterPairResetTokenRequest, opts ...grpc.CallOption) (*SdkClusterPairResetTokenResponse, error) {
	out := new(SdkClusterPairResetTokenResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageClusterPair/ResetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterPairClient) Delete(ctx context.Context, in *SdkClusterPairDeleteRequest, opts ...grpc.CallOption) (*SdkClusterPairDeleteResponse, error) {
	out := new(SdkClusterPairDeleteResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageClusterPair/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageClusterPairServer is the server API for OpenStorageClusterPair service.
type OpenStorageClusterPairServer interface {
	// Creates Pair with a remote cluster and returns details about the remote cluster
	//
	// ##### Example
	// {% codetabs name="Golang", type="go" -%}
	// id, err := client.Create(context.Background(), &api.SdkClusterPairCreateRequest {
	//   Request : &api.ClusterPairCreateRequest {
	//                  RemoteClusterIp: "127.0.0.1",
	//                  RemoteClusterPort: 12345,
	//                  RemoteClusterToken: "<Auth-Token>",
	//                  SetDefault: true,
	//              }
	//        })
	// {%- endcodetabs %}
	Create(context.Context, *SdkClusterPairCreateRequest) (*SdkClusterPairCreateResponse, error)
	// Inspect information about a cluster pair
	Inspect(context.Context, *SdkClusterPairInspectRequest) (*SdkClusterPairInspectResponse, error)
	// Enumerate returns list of cluster pairs
	Enumerate(context.Context, *SdkClusterPairEnumerateRequest) (*SdkClusterPairEnumerateResponse, error)
	// GetToken returns a auth token
	GetToken(context.Context, *SdkClusterPairGetTokenRequest) (*SdkClusterPairGetTokenResponse, error)
	// ResetToken returns a auth token
	ResetToken(context.Context, *SdkClusterPairResetTokenRequest) (*SdkClusterPairResetTokenResponse, error)
	// Delete a cluster pair
	Delete(context.Context, *SdkClusterPairDeleteRequest) (*SdkClusterPairDeleteResponse, error)
}

// UnimplementedOpenStorageClusterPairServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageClusterPairServer struct {
}

func (*UnimplementedOpenStorageClusterPairServer) Create(context.Context, *SdkClusterPairCreateRequest) (*SdkClusterPairCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedOpenStorageClusterPairServer) Inspect(context.Context, *SdkClusterPairInspectRequest) (*SdkClusterPairInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedOpenStorageClusterPairServer) Enumerate(context.Context, *SdkClusterPairEnumerateRequest) (*SdkClusterPairEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedOpenStorageClusterPairServer) GetToken(context.Context, *SdkClusterPairGetTokenRequest) (*SdkClusterPairGetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedOpenStorageClusterPairServer) ResetToken(context.Context, *SdkClusterPairResetTokenRequest) (*SdkClusterPairResetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetToken not implemented")
}
func (*UnimplementedOpenStorageClusterPairServer) Delete(context.Context, *SdkClusterPairDeleteRequest) (*SdkClusterPairDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterOpenStorageClusterPairServer(s *grpc.Server, srv OpenStorageClusterPairServer) {
	s.RegisterService(&_OpenStorageClusterPair_serviceDesc, srv)
}

func _OpenStorageClusterPair_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkClusterPairCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterPairServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageClusterPair/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterPairServer).Create(ctx, req.(*SdkClusterPairCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageClusterPair_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkClusterPairInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterPairServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageClusterPair/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterPairServer).Inspect(ctx, req.(*SdkClusterPairInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageClusterPair_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkClusterPairEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterPairServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageClusterPair/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterPairServer).Enumerate(ctx, req.(*SdkClusterPairEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageClusterPair_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkClusterPairGetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterPairServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageClusterPair/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterPairServer).GetToken(ctx, req.(*SdkClusterPairGetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageClusterPair_ResetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkClusterPairResetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterPairServer).ResetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageClusterPair/ResetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterPairServer).ResetToken(ctx, req.(*SdkClusterPairResetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageClusterPair_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkClusterPairDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterPairServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageClusterPair/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterPairServer).Delete(ctx, req.(*SdkClusterPairDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageClusterPair_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageClusterPair",
	HandlerType: (*OpenStorageClusterPairServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OpenStorageClusterPair_Create_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _OpenStorageClusterPair_Inspect_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _OpenStorageClusterPair_Enumerate_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _OpenStorageClusterPair_GetToken_Handler,
		},
		{
			MethodName: "ResetToken",
			Handler:    _OpenStorageClusterPair_ResetToken_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OpenStorageClusterPair_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageClusterDomainsClient is the client API for OpenStorageClusterDomains service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageClusterDomainsClient interface {
	// Enumerate returns names of all the cluster domains in the cluster
	Enumerate(ctx context.Context, in *SdkClusterDomainsEnumerateRequest, opts ...grpc.CallOption) (*SdkClusterDomainsEnumerateResponse, error)
	// Inspect returns information about a cluster domain and a
	// status indicating whether the cluster domain is active
	Inspect(ctx context.Context, in *SdkClusterDomainInspectRequest, opts ...grpc.CallOption) (*SdkClusterDomainInspectResponse, error)
	// Activates a cluster domain in the cluster.
	// All the nodes which are part of an active cluster domain
	// will participate in cluster quorum calculation
	Activate(ctx context.Context, in *SdkClusterDomainActivateRequest, opts ...grpc.CallOption) (*SdkClusterDomainActivateResponse, error)
	// Deactivates a cluster domain in the cluster.
	// All the nodes which are part of a deactivated cluster domain.
	// will not participate in cluster quorum calculation
	Deactivate(ctx context.Context, in *SdkClusterDomainDeactivateRequest, opts ...grpc.CallOption) (*SdkClusterDomainDeactivateResponse, error)
}

type openStorageClusterDomainsClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageClusterDomainsClient(cc grpc.ClientConnInterface) OpenStorageClusterDomainsClient {
	return &openStorageClusterDomainsClient{cc}
}

func (c *openStorageClusterDomainsClient) Enumerate(ctx context.Context, in *SdkClusterDomainsEnumerateRequest, opts ...grpc.CallOption) (*SdkClusterDomainsEnumerateResponse, error) {
	out := new(SdkClusterDomainsEnumerateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageClusterDomains/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterDomainsClient) Inspect(ctx context.Context, in *SdkClusterDomainInspectRequest, opts ...grpc.CallOption) (*SdkClusterDomainInspectResponse, error) {
	out := new(SdkClusterDomainInspectResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageClusterDomains/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterDomainsClient) Activate(ctx context.Context, in *SdkClusterDomainActivateRequest, opts ...grpc.CallOption) (*SdkClusterDomainActivateResponse, error) {
	out := new(SdkClusterDomainActivateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageClusterDomains/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterDomainsClient) Deactivate(ctx context.Context, in *SdkClusterDomainDeactivateRequest, opts ...grpc.CallOption) (*SdkClusterDomainDeactivateResponse, error) {
	out := new(SdkClusterDomainDeactivateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageClusterDomains/Deactivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageClusterDomainsServer is the server API for OpenStorageClusterDomains service.
type OpenStorageClusterDomainsServer interface {
	// Enumerate returns names of all the cluster domains in the cluster
	Enumerate(context.Context, *SdkClusterDomainsEnumerateRequest) (*SdkClusterDomainsEnumerateResponse, error)
	// Inspect returns information about a cluster domain and a
	// status indicating whether the cluster domain is active
	Inspect(context.Context, *SdkClusterDomainInspectRequest) (*SdkClusterDomainInspectResponse, error)
	// Activates a cluster domain in the cluster.
	// All the nodes which are part of an active cluster domain
	// will participate in cluster quorum calculation
	Activate(context.Context, *SdkClusterDomainActivateRequest) (*SdkClusterDomainActivateResponse, error)
	// Deactivates a cluster domain in the cluster.
	// All the nodes which are part of a deactivated cluster domain.
	// will not participate in cluster quorum calculation
	Deactivate(context.Context, *SdkClusterDomainDeactivateRequest) (*SdkClusterDomainDeactivateResponse, error)
}

// UnimplementedOpenStorageClusterDomainsServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageClusterDomainsServer struct {
}

func (*UnimplementedOpenStorageClusterDomainsServer) Enumerate(context.Context, *SdkClusterDomainsEnumerateRequest) (*SdkClusterDomainsEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedOpenStorageClusterDomainsServer) Inspect(context.Context, *SdkClusterDomainInspectRequest) (*SdkClusterDomainInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedOpenStorageClusterDomainsServer) Activate(context.Context, *SdkClusterDomainActivateRequest) (*SdkClusterDomainActivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (*UnimplementedOpenStorageClusterDomainsServer) Deactivate(context.Context, *SdkClusterDomainDeactivateRequest) (*SdkClusterDomainDeactivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}

func RegisterOpenStorageClusterDomainsServer(s *grpc.Server, srv OpenStorageClusterDomainsServer) {
	s.RegisterService(&_OpenStorageClusterDomains_serviceDesc, srv)
}

func _OpenStorageClusterDomains_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkClusterDomainsEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterDomainsServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageClusterDomains/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterDomainsServer).Enumerate(ctx, req.(*SdkClusterDomainsEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageClusterDomains_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkClusterDomainInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterDomainsServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageClusterDomains/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterDomainsServer).Inspect(ctx, req.(*SdkClusterDomainInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageClusterDomains_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkClusterDomainActivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterDomainsServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageClusterDomains/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterDomainsServer).Activate(ctx, req.(*SdkClusterDomainActivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageClusterDomains_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkClusterDomainDeactivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterDomainsServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageClusterDomains/Deactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterDomainsServer).Deactivate(ctx, req.(*SdkClusterDomainDeactivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageClusterDomains_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageClusterDomains",
	HandlerType: (*OpenStorageClusterDomainsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enumerate",
			Handler:    _OpenStorageClusterDomains_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _OpenStorageClusterDomains_Inspect_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _OpenStorageClusterDomains_Activate_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _OpenStorageClusterDomains_Deactivate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStoragePoolClient is the client API for OpenStoragePool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStoragePoolClient interface {
	// Resize expands the specified storage pool based on the request parameters
	Resize(ctx context.Context, in *SdkStoragePoolResizeRequest, opts ...grpc.CallOption) (*SdkStoragePoolResizeResponse, error)
	// Rebalance creates a new rebalance task
	Rebalance(ctx context.Context, in *SdkStorageRebalanceRequest, opts ...grpc.CallOption) (*SdkStorageRebalanceResponse, error)
	// UpdateRebalanceJobState updates existing rebalance task state.
	// Only acceptable values are
	// StorageRebalanceJobState_PAUSED - acceptable only from running state
	// StorageRebalanceJobState_CANCELLED - acceptable only from running/pause state
	// StorageRebalanceJobState_RUNNING - acceptable only from pause state
	UpdateRebalanceJobState(ctx context.Context, in *SdkUpdateRebalanceJobRequest, opts ...grpc.CallOption) (*SdkUpdateRebalanceJobResponse, error)
	// GetRebalanceJobStatus returns rebalance status for specified job
	GetRebalanceJobStatus(ctx context.Context, in *SdkGetRebalanceJobStatusRequest, opts ...grpc.CallOption) (*SdkGetRebalanceJobStatusResponse, error)
	// EnumerateRebalanceJobs returns all rebalance jobs currently known to the system
	EnumerateRebalanceJobs(ctx context.Context, in *SdkEnumerateRebalanceJobsRequest, opts ...grpc.CallOption) (*SdkEnumerateRebalanceJobsResponse, error)
}

type openStoragePoolClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStoragePoolClient(cc grpc.ClientConnInterface) OpenStoragePoolClient {
	return &openStoragePoolClient{cc}
}

func (c *openStoragePoolClient) Resize(ctx context.Context, in *SdkStoragePoolResizeRequest, opts ...grpc.CallOption) (*SdkStoragePoolResizeResponse, error) {
	out := new(SdkStoragePoolResizeResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStoragePool/Resize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStoragePoolClient) Rebalance(ctx context.Context, in *SdkStorageRebalanceRequest, opts ...grpc.CallOption) (*SdkStorageRebalanceResponse, error) {
	out := new(SdkStorageRebalanceResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStoragePool/Rebalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStoragePoolClient) UpdateRebalanceJobState(ctx context.Context, in *SdkUpdateRebalanceJobRequest, opts ...grpc.CallOption) (*SdkUpdateRebalanceJobResponse, error) {
	out := new(SdkUpdateRebalanceJobResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStoragePool/UpdateRebalanceJobState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStoragePoolClient) GetRebalanceJobStatus(ctx context.Context, in *SdkGetRebalanceJobStatusRequest, opts ...grpc.CallOption) (*SdkGetRebalanceJobStatusResponse, error) {
	out := new(SdkGetRebalanceJobStatusResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStoragePool/GetRebalanceJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStoragePoolClient) EnumerateRebalanceJobs(ctx context.Context, in *SdkEnumerateRebalanceJobsRequest, opts ...grpc.CallOption) (*SdkEnumerateRebalanceJobsResponse, error) {
	out := new(SdkEnumerateRebalanceJobsResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStoragePool/EnumerateRebalanceJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStoragePoolServer is the server API for OpenStoragePool service.
type OpenStoragePoolServer interface {
	// Resize expands the specified storage pool based on the request parameters
	Resize(context.Context, *SdkStoragePoolResizeRequest) (*SdkStoragePoolResizeResponse, error)
	// Rebalance creates a new rebalance task
	Rebalance(context.Context, *SdkStorageRebalanceRequest) (*SdkStorageRebalanceResponse, error)
	// UpdateRebalanceJobState updates existing rebalance task state.
	// Only acceptable values are
	// StorageRebalanceJobState_PAUSED - acceptable only from running state
	// StorageRebalanceJobState_CANCELLED - acceptable only from running/pause state
	// StorageRebalanceJobState_RUNNING - acceptable only from pause state
	UpdateRebalanceJobState(context.Context, *SdkUpdateRebalanceJobRequest) (*SdkUpdateRebalanceJobResponse, error)
	// GetRebalanceJobStatus returns rebalance status for specified job
	GetRebalanceJobStatus(context.Context, *SdkGetRebalanceJobStatusRequest) (*SdkGetRebalanceJobStatusResponse, error)
	// EnumerateRebalanceJobs returns all rebalance jobs currently known to the system
	EnumerateRebalanceJobs(context.Context, *SdkEnumerateRebalanceJobsRequest) (*SdkEnumerateRebalanceJobsResponse, error)
}

// UnimplementedOpenStoragePoolServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStoragePoolServer struct {
}

func (*UnimplementedOpenStoragePoolServer) Resize(context.Context, *SdkStoragePoolResizeRequest) (*SdkStoragePoolResizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resize not implemented")
}
func (*UnimplementedOpenStoragePoolServer) Rebalance(context.Context, *SdkStorageRebalanceRequest) (*SdkStorageRebalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rebalance not implemented")
}
func (*UnimplementedOpenStoragePoolServer) UpdateRebalanceJobState(context.Context, *SdkUpdateRebalanceJobRequest) (*SdkUpdateRebalanceJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRebalanceJobState not implemented")
}
func (*UnimplementedOpenStoragePoolServer) GetRebalanceJobStatus(context.Context, *SdkGetRebalanceJobStatusRequest) (*SdkGetRebalanceJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRebalanceJobStatus not implemented")
}
func (*UnimplementedOpenStoragePoolServer) EnumerateRebalanceJobs(context.Context, *SdkEnumerateRebalanceJobsRequest) (*SdkEnumerateRebalanceJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnumerateRebalanceJobs not implemented")
}

func RegisterOpenStoragePoolServer(s *grpc.Server, srv OpenStoragePoolServer) {
	s.RegisterService(&_OpenStoragePool_serviceDesc, srv)
}

func _OpenStoragePool_Resize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkStoragePoolResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStoragePoolServer).Resize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStoragePool/Resize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStoragePoolServer).Resize(ctx, req.(*SdkStoragePoolResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStoragePool_Rebalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkStorageRebalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStoragePoolServer).Rebalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStoragePool/Rebalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStoragePoolServer).Rebalance(ctx, req.(*SdkStorageRebalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStoragePool_UpdateRebalanceJobState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkUpdateRebalanceJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStoragePoolServer).UpdateRebalanceJobState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStoragePool/UpdateRebalanceJobState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStoragePoolServer).UpdateRebalanceJobState(ctx, req.(*SdkUpdateRebalanceJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStoragePool_GetRebalanceJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkGetRebalanceJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStoragePoolServer).GetRebalanceJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStoragePool/GetRebalanceJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStoragePoolServer).GetRebalanceJobStatus(ctx, req.(*SdkGetRebalanceJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStoragePool_EnumerateRebalanceJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkEnumerateRebalanceJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStoragePoolServer).EnumerateRebalanceJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStoragePool/EnumerateRebalanceJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStoragePoolServer).EnumerateRebalanceJobs(ctx, req.(*SdkEnumerateRebalanceJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStoragePool_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStoragePool",
	HandlerType: (*OpenStoragePoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resize",
			Handler:    _OpenStoragePool_Resize_Handler,
		},
		{
			MethodName: "Rebalance",
			Handler:    _OpenStoragePool_Rebalance_Handler,
		},
		{
			MethodName: "UpdateRebalanceJobState",
			Handler:    _OpenStoragePool_UpdateRebalanceJobState_Handler,
		},
		{
			MethodName: "GetRebalanceJobStatus",
			Handler:    _OpenStoragePool_GetRebalanceJobStatus_Handler,
		},
		{
			MethodName: "EnumerateRebalanceJobs",
			Handler:    _OpenStoragePool_EnumerateRebalanceJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageDiagsClient is the client API for OpenStorageDiags service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageDiagsClient interface {
	// Collect starts a job to collect diagnostics from set of nodes that are selected based on the selectors provided
	// in the SdkDiagsCollectRequest. See SdkDiagsCollectRequest for more details on how to select the nodes
	// Returns SdkDiagsCollectResponse which has the job that is responsible for collecting the diags.
	Collect(ctx context.Context, in *SdkDiagsCollectRequest, opts ...grpc.CallOption) (*SdkDiagsCollectResponse, error)
}

type openStorageDiagsClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageDiagsClient(cc grpc.ClientConnInterface) OpenStorageDiagsClient {
	return &openStorageDiagsClient{cc}
}

func (c *openStorageDiagsClient) Collect(ctx context.Context, in *SdkDiagsCollectRequest, opts ...grpc.CallOption) (*SdkDiagsCollectResponse, error) {
	out := new(SdkDiagsCollectResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageDiags/Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageDiagsServer is the server API for OpenStorageDiags service.
type OpenStorageDiagsServer interface {
	// Collect starts a job to collect diagnostics from set of nodes that are selected based on the selectors provided
	// in the SdkDiagsCollectRequest. See SdkDiagsCollectRequest for more details on how to select the nodes
	// Returns SdkDiagsCollectResponse which has the job that is responsible for collecting the diags.
	Collect(context.Context, *SdkDiagsCollectRequest) (*SdkDiagsCollectResponse, error)
}

// UnimplementedOpenStorageDiagsServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageDiagsServer struct {
}

func (*UnimplementedOpenStorageDiagsServer) Collect(context.Context, *SdkDiagsCollectRequest) (*SdkDiagsCollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}

func RegisterOpenStorageDiagsServer(s *grpc.Server, srv OpenStorageDiagsServer) {
	s.RegisterService(&_OpenStorageDiags_serviceDesc, srv)
}

func _OpenStorageDiags_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkDiagsCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageDiagsServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageDiags/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageDiagsServer).Collect(ctx, req.(*SdkDiagsCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageDiags_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageDiags",
	HandlerType: (*OpenStorageDiagsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collect",
			Handler:    _OpenStorageDiags_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageJobClient is the client API for OpenStorageJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageJobClient interface {
	// Update updates an existing job's state
	// Only acceptable state values are
	// JobState_PAUSED - acceptable only from running state
	// JobState_CANCELLED - acceptable only from running/pause state
	// JobState_RUNNING - acceptable only from pause state
	Update(ctx context.Context, in *SdkUpdateJobRequest, opts ...grpc.CallOption) (*SdkUpdateJobResponse, error)
	// GetStatus gets the status of a job
	GetStatus(ctx context.Context, in *SdkGetJobStatusRequest, opts ...grpc.CallOption) (*SdkGetJobStatusResponse, error)
	// Enumerate returns all the jobs currently known to the system
	Enumerate(ctx context.Context, in *SdkEnumerateJobsRequest, opts ...grpc.CallOption) (*SdkEnumerateJobsResponse, error)
}

type openStorageJobClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageJobClient(cc grpc.ClientConnInterface) OpenStorageJobClient {
	return &openStorageJobClient{cc}
}

func (c *openStorageJobClient) Update(ctx context.Context, in *SdkUpdateJobRequest, opts ...grpc.CallOption) (*SdkUpdateJobResponse, error) {
	out := new(SdkUpdateJobResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageJob/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageJobClient) GetStatus(ctx context.Context, in *SdkGetJobStatusRequest, opts ...grpc.CallOption) (*SdkGetJobStatusResponse, error) {
	out := new(SdkGetJobStatusResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageJob/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageJobClient) Enumerate(ctx context.Context, in *SdkEnumerateJobsRequest, opts ...grpc.CallOption) (*SdkEnumerateJobsResponse, error) {
	out := new(SdkEnumerateJobsResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageJob/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageJobServer is the server API for OpenStorageJob service.
type OpenStorageJobServer interface {
	// Update updates an existing job's state
	// Only acceptable state values are
	// JobState_PAUSED - acceptable only from running state
	// JobState_CANCELLED - acceptable only from running/pause state
	// JobState_RUNNING - acceptable only from pause state
	Update(context.Context, *SdkUpdateJobRequest) (*SdkUpdateJobResponse, error)
	// GetStatus gets the status of a job
	GetStatus(context.Context, *SdkGetJobStatusRequest) (*SdkGetJobStatusResponse, error)
	// Enumerate returns all the jobs currently known to the system
	Enumerate(context.Context, *SdkEnumerateJobsRequest) (*SdkEnumerateJobsResponse, error)
}

// UnimplementedOpenStorageJobServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageJobServer struct {
}

func (*UnimplementedOpenStorageJobServer) Update(context.Context, *SdkUpdateJobRequest) (*SdkUpdateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedOpenStorageJobServer) GetStatus(context.Context, *SdkGetJobStatusRequest) (*SdkGetJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedOpenStorageJobServer) Enumerate(context.Context, *SdkEnumerateJobsRequest) (*SdkEnumerateJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}

func RegisterOpenStorageJobServer(s *grpc.Server, srv OpenStorageJobServer) {
	s.RegisterService(&_OpenStorageJob_serviceDesc, srv)
}

func _OpenStorageJob_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkUpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageJobServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageJob/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageJobServer).Update(ctx, req.(*SdkUpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageJob_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkGetJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageJobServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageJob/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageJobServer).GetStatus(ctx, req.(*SdkGetJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageJob_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkEnumerateJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageJobServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageJob/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageJobServer).Enumerate(ctx, req.(*SdkEnumerateJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageJob_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageJob",
	HandlerType: (*OpenStorageJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _OpenStorageJob_Update_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _OpenStorageJob_GetStatus_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _OpenStorageJob_Enumerate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageNodeClient is the client API for OpenStorageNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageNodeClient interface {
	// Inspect returns information about the specified node
	Inspect(ctx context.Context, in *SdkNodeInspectRequest, opts ...grpc.CallOption) (*SdkNodeInspectResponse, error)
	// InspectCurrent returns information about the storage node
	// where the client is currently connected to.
	InspectCurrent(ctx context.Context, in *SdkNodeInspectCurrentRequest, opts ...grpc.CallOption) (*SdkNodeInspectCurrentResponse, error)
	// Enumerate returns the ids of all the nodes in the current cluster
	Enumerate(ctx context.Context, in *SdkNodeEnumerateRequest, opts ...grpc.CallOption) (*SdkNodeEnumerateResponse, error)
	// EnumerateWithFilters returns all the nodes in the current cluster
	EnumerateWithFilters(ctx context.Context, in *SdkNodeEnumerateWithFiltersRequest, opts ...grpc.CallOption) (*SdkNodeEnumerateWithFiltersResponse, error)
	// Returns capacity usage of all volumes/snaps for a give node
	VolumeUsageByNode(ctx context.Context, in *SdkNodeVolumeUsageByNodeRequest, opts ...grpc.CallOption) (*SdkNodeVolumeUsageByNodeResponse, error)
	// Triggers RelaxedReclaim purge for a give node
	RelaxedReclaimPurge(ctx context.Context, in *SdkNodeRelaxedReclaimPurgeRequest, opts ...grpc.CallOption) (*SdkNodeRelaxedReclaimPurgeResponse, error)
	// DrainAttachments creates a task to drain volume attachments
	// from the provided node in the cluster.
	DrainAttachments(ctx context.Context, in *SdkNodeDrainAttachmentsRequest, opts ...grpc.CallOption) (*SdkJobResponse, error)
	// CordonAttachments disables any new volume attachments
	// from the provided node in the cluster. Existing volume attachments
	// will stay on the node.
	CordonAttachments(ctx context.Context, in *SdkNodeCordonAttachmentsRequest, opts ...grpc.CallOption) (*SdkNodeCordonAttachmentsResponse, error)
	// UncordonAttachments re-enables volume attachments
	// on the provided node in the cluster.
	UncordonAttachments(ctx context.Context, in *SdkNodeUncordonAttachmentsRequest, opts ...grpc.CallOption) (*SdkNodeUncordonAttachmentsResponse, error)
}

type openStorageNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageNodeClient(cc grpc.ClientConnInterface) OpenStorageNodeClient {
	return &openStorageNodeClient{cc}
}

func (c *openStorageNodeClient) Inspect(ctx context.Context, in *SdkNodeInspectRequest, opts ...grpc.CallOption) (*SdkNodeInspectResponse, error) {
	out := new(SdkNodeInspectResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageNode/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageNodeClient) InspectCurrent(ctx context.Context, in *SdkNodeInspectCurrentRequest, opts ...grpc.CallOption) (*SdkNodeInspectCurrentResponse, error) {
	out := new(SdkNodeInspectCurrentResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageNode/InspectCurrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageNodeClient) Enumerate(ctx context.Context, in *SdkNodeEnumerateRequest, opts ...grpc.CallOption) (*SdkNodeEnumerateResponse, error) {
	out := new(SdkNodeEnumerateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageNode/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageNodeClient) EnumerateWithFilters(ctx context.Context, in *SdkNodeEnumerateWithFiltersRequest, opts ...grpc.CallOption) (*SdkNodeEnumerateWithFiltersResponse, error) {
	out := new(SdkNodeEnumerateWithFiltersResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageNode/EnumerateWithFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageNodeClient) VolumeUsageByNode(ctx context.Context, in *SdkNodeVolumeUsageByNodeRequest, opts ...grpc.CallOption) (*SdkNodeVolumeUsageByNodeResponse, error) {
	out := new(SdkNodeVolumeUsageByNodeResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageNode/VolumeUsageByNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageNodeClient) RelaxedReclaimPurge(ctx context.Context, in *SdkNodeRelaxedReclaimPurgeRequest, opts ...grpc.CallOption) (*SdkNodeRelaxedReclaimPurgeResponse, error) {
	out := new(SdkNodeRelaxedReclaimPurgeResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageNode/RelaxedReclaimPurge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageNodeClient) DrainAttachments(ctx context.Context, in *SdkNodeDrainAttachmentsRequest, opts ...grpc.CallOption) (*SdkJobResponse, error) {
	out := new(SdkJobResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageNode/DrainAttachments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageNodeClient) CordonAttachments(ctx context.Context, in *SdkNodeCordonAttachmentsRequest, opts ...grpc.CallOption) (*SdkNodeCordonAttachmentsResponse, error) {
	out := new(SdkNodeCordonAttachmentsResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageNode/CordonAttachments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageNodeClient) UncordonAttachments(ctx context.Context, in *SdkNodeUncordonAttachmentsRequest, opts ...grpc.CallOption) (*SdkNodeUncordonAttachmentsResponse, error) {
	out := new(SdkNodeUncordonAttachmentsResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageNode/UncordonAttachments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageNodeServer is the server API for OpenStorageNode service.
type OpenStorageNodeServer interface {
	// Inspect returns information about the specified node
	Inspect(context.Context, *SdkNodeInspectRequest) (*SdkNodeInspectResponse, error)
	// InspectCurrent returns information about the storage node
	// where the client is currently connected to.
	InspectCurrent(context.Context, *SdkNodeInspectCurrentRequest) (*SdkNodeInspectCurrentResponse, error)
	// Enumerate returns the ids of all the nodes in the current cluster
	Enumerate(context.Context, *SdkNodeEnumerateRequest) (*SdkNodeEnumerateResponse, error)
	// EnumerateWithFilters returns all the nodes in the current cluster
	EnumerateWithFilters(context.Context, *SdkNodeEnumerateWithFiltersRequest) (*SdkNodeEnumerateWithFiltersResponse, error)
	// Returns capacity usage of all volumes/snaps for a give node
	VolumeUsageByNode(context.Context, *SdkNodeVolumeUsageByNodeRequest) (*SdkNodeVolumeUsageByNodeResponse, error)
	// Triggers RelaxedReclaim purge for a give node
	RelaxedReclaimPurge(context.Context, *SdkNodeRelaxedReclaimPurgeRequest) (*SdkNodeRelaxedReclaimPurgeResponse, error)
	// DrainAttachments creates a task to drain volume attachments
	// from the provided node in the cluster.
	DrainAttachments(context.Context, *SdkNodeDrainAttachmentsRequest) (*SdkJobResponse, error)
	// CordonAttachments disables any new volume attachments
	// from the provided node in the cluster. Existing volume attachments
	// will stay on the node.
	CordonAttachments(context.Context, *SdkNodeCordonAttachmentsRequest) (*SdkNodeCordonAttachmentsResponse, error)
	// UncordonAttachments re-enables volume attachments
	// on the provided node in the cluster.
	UncordonAttachments(context.Context, *SdkNodeUncordonAttachmentsRequest) (*SdkNodeUncordonAttachmentsResponse, error)
}

// UnimplementedOpenStorageNodeServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageNodeServer struct {
}

func (*UnimplementedOpenStorageNodeServer) Inspect(context.Context, *SdkNodeInspectRequest) (*SdkNodeInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedOpenStorageNodeServer) InspectCurrent(context.Context, *SdkNodeInspectCurrentRequest) (*SdkNodeInspectCurrentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectCurrent not implemented")
}
func (*UnimplementedOpenStorageNodeServer) Enumerate(context.Context, *SdkNodeEnumerateRequest) (*SdkNodeEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedOpenStorageNodeServer) EnumerateWithFilters(context.Context, *SdkNodeEnumerateWithFiltersRequest) (*SdkNodeEnumerateWithFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnumerateWithFilters not implemented")
}
func (*UnimplementedOpenStorageNodeServer) VolumeUsageByNode(context.Context, *SdkNodeVolumeUsageByNodeRequest) (*SdkNodeVolumeUsageByNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeUsageByNode not implemented")
}
func (*UnimplementedOpenStorageNodeServer) RelaxedReclaimPurge(context.Context, *SdkNodeRelaxedReclaimPurgeRequest) (*SdkNodeRelaxedReclaimPurgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelaxedReclaimPurge not implemented")
}
func (*UnimplementedOpenStorageNodeServer) DrainAttachments(context.Context, *SdkNodeDrainAttachmentsRequest) (*SdkJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrainAttachments not implemented")
}
func (*UnimplementedOpenStorageNodeServer) CordonAttachments(context.Context, *SdkNodeCordonAttachmentsRequest) (*SdkNodeCordonAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CordonAttachments not implemented")
}
func (*UnimplementedOpenStorageNodeServer) UncordonAttachments(context.Context, *SdkNodeUncordonAttachmentsRequest) (*SdkNodeUncordonAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UncordonAttachments not implemented")
}

func RegisterOpenStorageNodeServer(s *grpc.Server, srv OpenStorageNodeServer) {
	s.RegisterService(&_OpenStorageNode_serviceDesc, srv)
}

func _OpenStorageNode_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkNodeInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageNodeServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageNode/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageNodeServer).Inspect(ctx, req.(*SdkNodeInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageNode_InspectCurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkNodeInspectCurrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageNodeServer).InspectCurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageNode/InspectCurrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageNodeServer).InspectCurrent(ctx, req.(*SdkNodeInspectCurrentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageNode_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkNodeEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageNodeServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageNode/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageNodeServer).Enumerate(ctx, req.(*SdkNodeEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageNode_EnumerateWithFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkNodeEnumerateWithFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageNodeServer).EnumerateWithFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageNode/EnumerateWithFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageNodeServer).EnumerateWithFilters(ctx, req.(*SdkNodeEnumerateWithFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageNode_VolumeUsageByNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkNodeVolumeUsageByNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageNodeServer).VolumeUsageByNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageNode/VolumeUsageByNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageNodeServer).VolumeUsageByNode(ctx, req.(*SdkNodeVolumeUsageByNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageNode_RelaxedReclaimPurge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkNodeRelaxedReclaimPurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageNodeServer).RelaxedReclaimPurge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageNode/RelaxedReclaimPurge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageNodeServer).RelaxedReclaimPurge(ctx, req.(*SdkNodeRelaxedReclaimPurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageNode_DrainAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkNodeDrainAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageNodeServer).DrainAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageNode/DrainAttachments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageNodeServer).DrainAttachments(ctx, req.(*SdkNodeDrainAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageNode_CordonAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkNodeCordonAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageNodeServer).CordonAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageNode/CordonAttachments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageNodeServer).CordonAttachments(ctx, req.(*SdkNodeCordonAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageNode_UncordonAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkNodeUncordonAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageNodeServer).UncordonAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageNode/UncordonAttachments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageNodeServer).UncordonAttachments(ctx, req.(*SdkNodeUncordonAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageNode",
	HandlerType: (*OpenStorageNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Inspect",
			Handler:    _OpenStorageNode_Inspect_Handler,
		},
		{
			MethodName: "InspectCurrent",
			Handler:    _OpenStorageNode_InspectCurrent_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _OpenStorageNode_Enumerate_Handler,
		},
		{
			MethodName: "EnumerateWithFilters",
			Handler:    _OpenStorageNode_EnumerateWithFilters_Handler,
		},
		{
			MethodName: "VolumeUsageByNode",
			Handler:    _OpenStorageNode_VolumeUsageByNode_Handler,
		},
		{
			MethodName: "RelaxedReclaimPurge",
			Handler:    _OpenStorageNode_RelaxedReclaimPurge_Handler,
		},
		{
			MethodName: "DrainAttachments",
			Handler:    _OpenStorageNode_DrainAttachments_Handler,
		},
		{
			MethodName: "CordonAttachments",
			Handler:    _OpenStorageNode_CordonAttachments_Handler,
		},
		{
			MethodName: "UncordonAttachments",
			Handler:    _OpenStorageNode_UncordonAttachments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageBucketClient is the client API for OpenStorageBucket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageBucketClient interface {
	Create(ctx context.Context, in *BucketCreateRequest, opts ...grpc.CallOption) (*BucketCreateResponse, error)
	Delete(ctx context.Context, in *BucketDeleteRequest, opts ...grpc.CallOption) (*BucketDeleteResponse, error)
	GrantAccess(ctx context.Context, in *BucketGrantAccessRequest, opts ...grpc.CallOption) (*BucketGrantAccessResponse, error)
	RevokeAccess(ctx context.Context, in *BucketRevokeAccessRequest, opts ...grpc.CallOption) (*BucketRevokeAccessResponse, error)
}

type openStorageBucketClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageBucketClient(cc grpc.ClientConnInterface) OpenStorageBucketClient {
	return &openStorageBucketClient{cc}
}

func (c *openStorageBucketClient) Create(ctx context.Context, in *BucketCreateRequest, opts ...grpc.CallOption) (*BucketCreateResponse, error) {
	out := new(BucketCreateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageBucket/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageBucketClient) Delete(ctx context.Context, in *BucketDeleteRequest, opts ...grpc.CallOption) (*BucketDeleteResponse, error) {
	out := new(BucketDeleteResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageBucket/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageBucketClient) GrantAccess(ctx context.Context, in *BucketGrantAccessRequest, opts ...grpc.CallOption) (*BucketGrantAccessResponse, error) {
	out := new(BucketGrantAccessResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageBucket/GrantAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageBucketClient) RevokeAccess(ctx context.Context, in *BucketRevokeAccessRequest, opts ...grpc.CallOption) (*BucketRevokeAccessResponse, error) {
	out := new(BucketRevokeAccessResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageBucket/RevokeAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageBucketServer is the server API for OpenStorageBucket service.
type OpenStorageBucketServer interface {
	Create(context.Context, *BucketCreateRequest) (*BucketCreateResponse, error)
	Delete(context.Context, *BucketDeleteRequest) (*BucketDeleteResponse, error)
	GrantAccess(context.Context, *BucketGrantAccessRequest) (*BucketGrantAccessResponse, error)
	RevokeAccess(context.Context, *BucketRevokeAccessRequest) (*BucketRevokeAccessResponse, error)
}

// UnimplementedOpenStorageBucketServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageBucketServer struct {
}

func (*UnimplementedOpenStorageBucketServer) Create(context.Context, *BucketCreateRequest) (*BucketCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedOpenStorageBucketServer) Delete(context.Context, *BucketDeleteRequest) (*BucketDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedOpenStorageBucketServer) GrantAccess(context.Context, *BucketGrantAccessRequest) (*BucketGrantAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAccess not implemented")
}
func (*UnimplementedOpenStorageBucketServer) RevokeAccess(context.Context, *BucketRevokeAccessRequest) (*BucketRevokeAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAccess not implemented")
}

func RegisterOpenStorageBucketServer(s *grpc.Server, srv OpenStorageBucketServer) {
	s.RegisterService(&_OpenStorageBucket_serviceDesc, srv)
}

func _OpenStorageBucket_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageBucketServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageBucket/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageBucketServer).Create(ctx, req.(*BucketCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageBucket_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageBucketServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageBucket/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageBucketServer).Delete(ctx, req.(*BucketDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageBucket_GrantAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketGrantAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageBucketServer).GrantAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageBucket/GrantAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageBucketServer).GrantAccess(ctx, req.(*BucketGrantAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageBucket_RevokeAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketRevokeAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageBucketServer).RevokeAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageBucket/RevokeAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageBucketServer).RevokeAccess(ctx, req.(*BucketRevokeAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageBucket_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageBucket",
	HandlerType: (*OpenStorageBucketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OpenStorageBucket_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OpenStorageBucket_Delete_Handler,
		},
		{
			MethodName: "GrantAccess",
			Handler:    _OpenStorageBucket_GrantAccess_Handler,
		},
		{
			MethodName: "RevokeAccess",
			Handler:    _OpenStorageBucket_RevokeAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageVolumeClient is the client API for OpenStorageVolume service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageVolumeClient interface {
	// Create creates a volume according to the specification provided
	//
	// Requires access AccessType.Read when cloning from a parent volume.
	//
	// ##### Example
	// {% codetabs name="Golang", type="go" -%}
	// id, err := client.Create(context.Background(), &api.SdkVolumeCreateRequest{
	//   Name: "volume-12345-east",
	//   Spec: &api.VolumeSpec {
	//     Size: 1234567,
	//   },
	// })
	// {%- language name="Python", type="py" -%}
	// en_resp = client.Create(api_pb2.SdkVolumeCreateRequest(
	//   name="volume-12345-east",
	//   spec=api_pb2.VolumeSpec(size=1234567)))
	// {%- endcodetabs %}
	Create(ctx context.Context, in *SdkVolumeCreateRequest, opts ...grpc.CallOption) (*SdkVolumeCreateResponse, error)
	// Clone creates a new writable volume cloned from an existing volume
	//
	// Requires access AccessType.Read of volume
	Clone(ctx context.Context, in *SdkVolumeCloneRequest, opts ...grpc.CallOption) (*SdkVolumeCloneResponse, error)
	// Delete deletes the provided volume
	//
	// Requires access AccessType.Admin of volume
	Delete(ctx context.Context, in *SdkVolumeDeleteRequest, opts ...grpc.CallOption) (*SdkVolumeDeleteResponse, error)
	// Inspect returns information about a volume
	//
	// Requires access AccessType.Read of volume
	Inspect(ctx context.Context, in *SdkVolumeInspectRequest, opts ...grpc.CallOption) (*SdkVolumeInspectResponse, error)
	// Returns information for a list of volumes that match a filter.
	// This call is a helper function like calling
	// `OpenStorageVolume.EnumerateWithFilters` then having it
	// return the contents of each of those volumes
	// `OpenStorageVolume.Inspect()`. Take care in using this call
	// when requesting large number of volumes because it will
	// block until it has all the information requested before
	// returning.
	InspectWithFilters(ctx context.Context, in *SdkVolumeInspectWithFiltersRequest, opts ...grpc.CallOption) (*SdkVolumeInspectWithFiltersResponse, error)
	// Update provides a method for manipulating the specification and attributes of a volume.
	// Set can be used to resize a volume, update labels, change replica count, and much more.
	//
	// Requires access AccessType.Write of volume
	Update(ctx context.Context, in *SdkVolumeUpdateRequest, opts ...grpc.CallOption) (*SdkVolumeUpdateResponse, error)
	// Stats returns the statistics for the requested volume
	//
	// Requires access AccessType.Read of volume
	Stats(ctx context.Context, in *SdkVolumeStatsRequest, opts ...grpc.CallOption) (*SdkVolumeStatsResponse, error)
	// CapacityUsage returns volume/snapshot's capacity usage details
	//
	// Requires access AccessType.Read of volume
	//
	// ##### Error codes:
	//
	// * codes.Aborted : Command was aborted and only total_bytes field is valid
	// * code.Unimmplemented : Command is not suported this kernel.Only total_bytes
	// field is valid;
	CapacityUsage(ctx context.Context, in *SdkVolumeCapacityUsageRequest, opts ...grpc.CallOption) (*SdkVolumeCapacityUsageResponse, error)
	// Enumerate returns a list of volume ids
	Enumerate(ctx context.Context, in *SdkVolumeEnumerateRequest, opts ...grpc.CallOption) (*SdkVolumeEnumerateResponse, error)
	// Enumerate returns a list of volume ids that match the labels if any are provided.
	EnumerateWithFilters(ctx context.Context, in *SdkVolumeEnumerateWithFiltersRequest, opts ...grpc.CallOption) (*SdkVolumeEnumerateWithFiltersResponse, error)
	// SnapshotCreate creates a snapshot of a volume. This creates an immutable (read-only),
	// point-in-time snapshot of a volume. To create a new writable volume from
	// a snapshot, please use OpenStorageVolume.Clone().
	//
	// Requires access AccessType.Read of volume
	SnapshotCreate(ctx context.Context, in *SdkVolumeSnapshotCreateRequest, opts ...grpc.CallOption) (*SdkVolumeSnapshotCreateResponse, error)
	// SnapshotRestore restores a volume to a specified snapshot
	//
	// Requires access AccessType.Write of volume
	SnapshotRestore(ctx context.Context, in *SdkVolumeSnapshotRestoreRequest, opts ...grpc.CallOption) (*SdkVolumeSnapshotRestoreResponse, error)
	// SnapshotEnumerate returns a list of snapshots for a specific volume
	SnapshotEnumerate(ctx context.Context, in *SdkVolumeSnapshotEnumerateRequest, opts ...grpc.CallOption) (*SdkVolumeSnapshotEnumerateResponse, error)
	// SnapshotEnumerate returns a list of snapshots.
	// To filter all the snapshots for a specific volume which may no longer exist,
	// specify a volume id.
	// Labels can also be used to filter the snapshot list.
	// If neither are provided all snapshots will be returned.
	SnapshotEnumerateWithFilters(ctx context.Context, in *SdkVolumeSnapshotEnumerateWithFiltersRequest, opts ...grpc.CallOption) (*SdkVolumeSnapshotEnumerateWithFiltersResponse, error)
	// Sets the snapshot schedules. This information is saved in the VolumeSpec.snapshot_schedule
	// as `policy=<name>,...`. This function will overwrite any policy values
	// in the volume. To delete the policies in the volume send no policies.
	//
	// Requires access AccessType.Write of volume
	SnapshotScheduleUpdate(ctx context.Context, in *SdkVolumeSnapshotScheduleUpdateRequest, opts ...grpc.CallOption) (*SdkVolumeSnapshotScheduleUpdateResponse, error)
	// Gets the volume catalog of an attached and mounted volume.
	// Returns the entire tree up to "n"  depth (default is all of it)
	// Takes a path that can be used as the new root for the catalog request.
	VolumeCatalog(ctx context.Context, in *SdkVolumeCatalogRequest, opts ...grpc.CallOption) (*SdkVolumeCatalogResponse, error)
}

type openStorageVolumeClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageVolumeClient(cc grpc.ClientConnInterface) OpenStorageVolumeClient {
	return &openStorageVolumeClient{cc}
}

func (c *openStorageVolumeClient) Create(ctx context.Context, in *SdkVolumeCreateRequest, opts ...grpc.CallOption) (*SdkVolumeCreateResponse, error) {
	out := new(SdkVolumeCreateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) Clone(ctx context.Context, in *SdkVolumeCloneRequest, opts ...grpc.CallOption) (*SdkVolumeCloneResponse, error) {
	out := new(SdkVolumeCloneResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/Clone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) Delete(ctx context.Context, in *SdkVolumeDeleteRequest, opts ...grpc.CallOption) (*SdkVolumeDeleteResponse, error) {
	out := new(SdkVolumeDeleteResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) Inspect(ctx context.Context, in *SdkVolumeInspectRequest, opts ...grpc.CallOption) (*SdkVolumeInspectResponse, error) {
	out := new(SdkVolumeInspectResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) InspectWithFilters(ctx context.Context, in *SdkVolumeInspectWithFiltersRequest, opts ...grpc.CallOption) (*SdkVolumeInspectWithFiltersResponse, error) {
	out := new(SdkVolumeInspectWithFiltersResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/InspectWithFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) Update(ctx context.Context, in *SdkVolumeUpdateRequest, opts ...grpc.CallOption) (*SdkVolumeUpdateResponse, error) {
	out := new(SdkVolumeUpdateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) Stats(ctx context.Context, in *SdkVolumeStatsRequest, opts ...grpc.CallOption) (*SdkVolumeStatsResponse, error) {
	out := new(SdkVolumeStatsResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) CapacityUsage(ctx context.Context, in *SdkVolumeCapacityUsageRequest, opts ...grpc.CallOption) (*SdkVolumeCapacityUsageResponse, error) {
	out := new(SdkVolumeCapacityUsageResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/CapacityUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) Enumerate(ctx context.Context, in *SdkVolumeEnumerateRequest, opts ...grpc.CallOption) (*SdkVolumeEnumerateResponse, error) {
	out := new(SdkVolumeEnumerateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) EnumerateWithFilters(ctx context.Context, in *SdkVolumeEnumerateWithFiltersRequest, opts ...grpc.CallOption) (*SdkVolumeEnumerateWithFiltersResponse, error) {
	out := new(SdkVolumeEnumerateWithFiltersResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/EnumerateWithFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) SnapshotCreate(ctx context.Context, in *SdkVolumeSnapshotCreateRequest, opts ...grpc.CallOption) (*SdkVolumeSnapshotCreateResponse, error) {
	out := new(SdkVolumeSnapshotCreateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/SnapshotCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) SnapshotRestore(ctx context.Context, in *SdkVolumeSnapshotRestoreRequest, opts ...grpc.CallOption) (*SdkVolumeSnapshotRestoreResponse, error) {
	out := new(SdkVolumeSnapshotRestoreResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/SnapshotRestore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) SnapshotEnumerate(ctx context.Context, in *SdkVolumeSnapshotEnumerateRequest, opts ...grpc.CallOption) (*SdkVolumeSnapshotEnumerateResponse, error) {
	out := new(SdkVolumeSnapshotEnumerateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/SnapshotEnumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) SnapshotEnumerateWithFilters(ctx context.Context, in *SdkVolumeSnapshotEnumerateWithFiltersRequest, opts ...grpc.CallOption) (*SdkVolumeSnapshotEnumerateWithFiltersResponse, error) {
	out := new(SdkVolumeSnapshotEnumerateWithFiltersResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/SnapshotEnumerateWithFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) SnapshotScheduleUpdate(ctx context.Context, in *SdkVolumeSnapshotScheduleUpdateRequest, opts ...grpc.CallOption) (*SdkVolumeSnapshotScheduleUpdateResponse, error) {
	out := new(SdkVolumeSnapshotScheduleUpdateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/SnapshotScheduleUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageVolumeClient) VolumeCatalog(ctx context.Context, in *SdkVolumeCatalogRequest, opts ...grpc.CallOption) (*SdkVolumeCatalogResponse, error) {
	out := new(SdkVolumeCatalogResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageVolume/VolumeCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageVolumeServer is the server API for OpenStorageVolume service.
type OpenStorageVolumeServer interface {
	// Create creates a volume according to the specification provided
	//
	// Requires access AccessType.Read when cloning from a parent volume.
	//
	// ##### Example
	// {% codetabs name="Golang", type="go" -%}
	// id, err := client.Create(context.Background(), &api.SdkVolumeCreateRequest{
	//   Name: "volume-12345-east",
	//   Spec: &api.VolumeSpec {
	//     Size: 1234567,
	//   },
	// })
	// {%- language name="Python", type="py" -%}
	// en_resp = client.Create(api_pb2.SdkVolumeCreateRequest(
	//   name="volume-12345-east",
	//   spec=api_pb2.VolumeSpec(size=1234567)))
	// {%- endcodetabs %}
	Create(context.Context, *SdkVolumeCreateRequest) (*SdkVolumeCreateResponse, error)
	// Clone creates a new writable volume cloned from an existing volume
	//
	// Requires access AccessType.Read of volume
	Clone(context.Context, *SdkVolumeCloneRequest) (*SdkVolumeCloneResponse, error)
	// Delete deletes the provided volume
	//
	// Requires access AccessType.Admin of volume
	Delete(context.Context, *SdkVolumeDeleteRequest) (*SdkVolumeDeleteResponse, error)
	// Inspect returns information about a volume
	//
	// Requires access AccessType.Read of volume
	Inspect(context.Context, *SdkVolumeInspectRequest) (*SdkVolumeInspectResponse, error)
	// Returns information for a list of volumes that match a filter.
	// This call is a helper function like calling
	// `OpenStorageVolume.EnumerateWithFilters` then having it
	// return the contents of each of those volumes
	// `OpenStorageVolume.Inspect()`. Take care in using this call
	// when requesting large number of volumes because it will
	// block until it has all the information requested before
	// returning.
	InspectWithFilters(context.Context, *SdkVolumeInspectWithFiltersRequest) (*SdkVolumeInspectWithFiltersResponse, error)
	// Update provides a method for manipulating the specification and attributes of a volume.
	// Set can be used to resize a volume, update labels, change replica count, and much more.
	//
	// Requires access AccessType.Write of volume
	Update(context.Context, *SdkVolumeUpdateRequest) (*SdkVolumeUpdateResponse, error)
	// Stats returns the statistics for the requested volume
	//
	// Requires access AccessType.Read of volume
	Stats(context.Context, *SdkVolumeStatsRequest) (*SdkVolumeStatsResponse, error)
	// CapacityUsage returns volume/snapshot's capacity usage details
	//
	// Requires access AccessType.Read of volume
	//
	// ##### Error codes:
	//
	// * codes.Aborted : Command was aborted and only total_bytes field is valid
	// * code.Unimmplemented : Command is not suported this kernel.Only total_bytes
	// field is valid;
	CapacityUsage(context.Context, *SdkVolumeCapacityUsageRequest) (*SdkVolumeCapacityUsageResponse, error)
	// Enumerate returns a list of volume ids
	Enumerate(context.Context, *SdkVolumeEnumerateRequest) (*SdkVolumeEnumerateResponse, error)
	// Enumerate returns a list of volume ids that match the labels if any are provided.
	EnumerateWithFilters(context.Context, *SdkVolumeEnumerateWithFiltersRequest) (*SdkVolumeEnumerateWithFiltersResponse, error)
	// SnapshotCreate creates a snapshot of a volume. This creates an immutable (read-only),
	// point-in-time snapshot of a volume. To create a new writable volume from
	// a snapshot, please use OpenStorageVolume.Clone().
	//
	// Requires access AccessType.Read of volume
	SnapshotCreate(context.Context, *SdkVolumeSnapshotCreateRequest) (*SdkVolumeSnapshotCreateResponse, error)
	// SnapshotRestore restores a volume to a specified snapshot
	//
	// Requires access AccessType.Write of volume
	SnapshotRestore(context.Context, *SdkVolumeSnapshotRestoreRequest) (*SdkVolumeSnapshotRestoreResponse, error)
	// SnapshotEnumerate returns a list of snapshots for a specific volume
	SnapshotEnumerate(context.Context, *SdkVolumeSnapshotEnumerateRequest) (*SdkVolumeSnapshotEnumerateResponse, error)
	// SnapshotEnumerate returns a list of snapshots.
	// To filter all the snapshots for a specific volume which may no longer exist,
	// specify a volume id.
	// Labels can also be used to filter the snapshot list.
	// If neither are provided all snapshots will be returned.
	SnapshotEnumerateWithFilters(context.Context, *SdkVolumeSnapshotEnumerateWithFiltersRequest) (*SdkVolumeSnapshotEnumerateWithFiltersResponse, error)
	// Sets the snapshot schedules. This information is saved in the VolumeSpec.snapshot_schedule
	// as `policy=<name>,...`. This function will overwrite any policy values
	// in the volume. To delete the policies in the volume send no policies.
	//
	// Requires access AccessType.Write of volume
	SnapshotScheduleUpdate(context.Context, *SdkVolumeSnapshotScheduleUpdateRequest) (*SdkVolumeSnapshotScheduleUpdateResponse, error)
	// Gets the volume catalog of an attached and mounted volume.
	// Returns the entire tree up to "n"  depth (default is all of it)
	// Takes a path that can be used as the new root for the catalog request.
	VolumeCatalog(context.Context, *SdkVolumeCatalogRequest) (*SdkVolumeCatalogResponse, error)
}

// UnimplementedOpenStorageVolumeServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageVolumeServer struct {
}

func (*UnimplementedOpenStorageVolumeServer) Create(context.Context, *SdkVolumeCreateRequest) (*SdkVolumeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) Clone(context.Context, *SdkVolumeCloneRequest) (*SdkVolumeCloneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) Delete(context.Context, *SdkVolumeDeleteRequest) (*SdkVolumeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) Inspect(context.Context, *SdkVolumeInspectRequest) (*SdkVolumeInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) InspectWithFilters(context.Context, *SdkVolumeInspectWithFiltersRequest) (*SdkVolumeInspectWithFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectWithFilters not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) Update(context.Context, *SdkVolumeUpdateRequest) (*SdkVolumeUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) Stats(context.Context, *SdkVolumeStatsRequest) (*SdkVolumeStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) CapacityUsage(context.Context, *SdkVolumeCapacityUsageRequest) (*SdkVolumeCapacityUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CapacityUsage not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) Enumerate(context.Context, *SdkVolumeEnumerateRequest) (*SdkVolumeEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) EnumerateWithFilters(context.Context, *SdkVolumeEnumerateWithFiltersRequest) (*SdkVolumeEnumerateWithFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnumerateWithFilters not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) SnapshotCreate(context.Context, *SdkVolumeSnapshotCreateRequest) (*SdkVolumeSnapshotCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotCreate not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) SnapshotRestore(context.Context, *SdkVolumeSnapshotRestoreRequest) (*SdkVolumeSnapshotRestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotRestore not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) SnapshotEnumerate(context.Context, *SdkVolumeSnapshotEnumerateRequest) (*SdkVolumeSnapshotEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotEnumerate not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) SnapshotEnumerateWithFilters(context.Context, *SdkVolumeSnapshotEnumerateWithFiltersRequest) (*SdkVolumeSnapshotEnumerateWithFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotEnumerateWithFilters not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) SnapshotScheduleUpdate(context.Context, *SdkVolumeSnapshotScheduleUpdateRequest) (*SdkVolumeSnapshotScheduleUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotScheduleUpdate not implemented")
}
func (*UnimplementedOpenStorageVolumeServer) VolumeCatalog(context.Context, *SdkVolumeCatalogRequest) (*SdkVolumeCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeCatalog not implemented")
}

func RegisterOpenStorageVolumeServer(s *grpc.Server, srv OpenStorageVolumeServer) {
	s.RegisterService(&_OpenStorageVolume_serviceDesc, srv)
}

func _OpenStorageVolume_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).Create(ctx, req.(*SdkVolumeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeCloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/Clone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).Clone(ctx, req.(*SdkVolumeCloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).Delete(ctx, req.(*SdkVolumeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).Inspect(ctx, req.(*SdkVolumeInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_InspectWithFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeInspectWithFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).InspectWithFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/InspectWithFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).InspectWithFilters(ctx, req.(*SdkVolumeInspectWithFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).Update(ctx, req.(*SdkVolumeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).Stats(ctx, req.(*SdkVolumeStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_CapacityUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeCapacityUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).CapacityUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/CapacityUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).CapacityUsage(ctx, req.(*SdkVolumeCapacityUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).Enumerate(ctx, req.(*SdkVolumeEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_EnumerateWithFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeEnumerateWithFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).EnumerateWithFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/EnumerateWithFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).EnumerateWithFilters(ctx, req.(*SdkVolumeEnumerateWithFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_SnapshotCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeSnapshotCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).SnapshotCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/SnapshotCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).SnapshotCreate(ctx, req.(*SdkVolumeSnapshotCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_SnapshotRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeSnapshotRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).SnapshotRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/SnapshotRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).SnapshotRestore(ctx, req.(*SdkVolumeSnapshotRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_SnapshotEnumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeSnapshotEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).SnapshotEnumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/SnapshotEnumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).SnapshotEnumerate(ctx, req.(*SdkVolumeSnapshotEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_SnapshotEnumerateWithFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeSnapshotEnumerateWithFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).SnapshotEnumerateWithFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/SnapshotEnumerateWithFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).SnapshotEnumerateWithFilters(ctx, req.(*SdkVolumeSnapshotEnumerateWithFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_SnapshotScheduleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeSnapshotScheduleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).SnapshotScheduleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/SnapshotScheduleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).SnapshotScheduleUpdate(ctx, req.(*SdkVolumeSnapshotScheduleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageVolume_VolumeCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageVolumeServer).VolumeCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageVolume/VolumeCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageVolumeServer).VolumeCatalog(ctx, req.(*SdkVolumeCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageVolume_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageVolume",
	HandlerType: (*OpenStorageVolumeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OpenStorageVolume_Create_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _OpenStorageVolume_Clone_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OpenStorageVolume_Delete_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _OpenStorageVolume_Inspect_Handler,
		},
		{
			MethodName: "InspectWithFilters",
			Handler:    _OpenStorageVolume_InspectWithFilters_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OpenStorageVolume_Update_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _OpenStorageVolume_Stats_Handler,
		},
		{
			MethodName: "CapacityUsage",
			Handler:    _OpenStorageVolume_CapacityUsage_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _OpenStorageVolume_Enumerate_Handler,
		},
		{
			MethodName: "EnumerateWithFilters",
			Handler:    _OpenStorageVolume_EnumerateWithFilters_Handler,
		},
		{
			MethodName: "SnapshotCreate",
			Handler:    _OpenStorageVolume_SnapshotCreate_Handler,
		},
		{
			MethodName: "SnapshotRestore",
			Handler:    _OpenStorageVolume_SnapshotRestore_Handler,
		},
		{
			MethodName: "SnapshotEnumerate",
			Handler:    _OpenStorageVolume_SnapshotEnumerate_Handler,
		},
		{
			MethodName: "SnapshotEnumerateWithFilters",
			Handler:    _OpenStorageVolume_SnapshotEnumerateWithFilters_Handler,
		},
		{
			MethodName: "SnapshotScheduleUpdate",
			Handler:    _OpenStorageVolume_SnapshotScheduleUpdate_Handler,
		},
		{
			MethodName: "VolumeCatalog",
			Handler:    _OpenStorageVolume_VolumeCatalog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageMountAttachClient is the client API for OpenStorageMountAttach service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageMountAttachClient interface {
	// Attach attaches device to the host that the client is communicating with.
	//
	// Requires access AccessType.Write of volume
	Attach(ctx context.Context, in *SdkVolumeAttachRequest, opts ...grpc.CallOption) (*SdkVolumeAttachResponse, error)
	// Detaches a the volume from the host
	//
	// Requires access AccessType.Write of volume
	Detach(ctx context.Context, in *SdkVolumeDetachRequest, opts ...grpc.CallOption) (*SdkVolumeDetachResponse, error)
	// Mount mounts an attached volume in the host that the client is communicating with
	//
	// Requires access AccessType.Write of volume
	Mount(ctx context.Context, in *SdkVolumeMountRequest, opts ...grpc.CallOption) (*SdkVolumeMountResponse, error)
	// Unmount unmounts a mounted volume in the host that the client is communicating with
	//
	// Requires access AccessType.Write of volume
	Unmount(ctx context.Context, in *SdkVolumeUnmountRequest, opts ...grpc.CallOption) (*SdkVolumeUnmountResponse, error)
}

type openStorageMountAttachClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageMountAttachClient(cc grpc.ClientConnInterface) OpenStorageMountAttachClient {
	return &openStorageMountAttachClient{cc}
}

func (c *openStorageMountAttachClient) Attach(ctx context.Context, in *SdkVolumeAttachRequest, opts ...grpc.CallOption) (*SdkVolumeAttachResponse, error) {
	out := new(SdkVolumeAttachResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageMountAttach/Attach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageMountAttachClient) Detach(ctx context.Context, in *SdkVolumeDetachRequest, opts ...grpc.CallOption) (*SdkVolumeDetachResponse, error) {
	out := new(SdkVolumeDetachResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageMountAttach/Detach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageMountAttachClient) Mount(ctx context.Context, in *SdkVolumeMountRequest, opts ...grpc.CallOption) (*SdkVolumeMountResponse, error) {
	out := new(SdkVolumeMountResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageMountAttach/Mount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageMountAttachClient) Unmount(ctx context.Context, in *SdkVolumeUnmountRequest, opts ...grpc.CallOption) (*SdkVolumeUnmountResponse, error) {
	out := new(SdkVolumeUnmountResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageMountAttach/Unmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageMountAttachServer is the server API for OpenStorageMountAttach service.
type OpenStorageMountAttachServer interface {
	// Attach attaches device to the host that the client is communicating with.
	//
	// Requires access AccessType.Write of volume
	Attach(context.Context, *SdkVolumeAttachRequest) (*SdkVolumeAttachResponse, error)
	// Detaches a the volume from the host
	//
	// Requires access AccessType.Write of volume
	Detach(context.Context, *SdkVolumeDetachRequest) (*SdkVolumeDetachResponse, error)
	// Mount mounts an attached volume in the host that the client is communicating with
	//
	// Requires access AccessType.Write of volume
	Mount(context.Context, *SdkVolumeMountRequest) (*SdkVolumeMountResponse, error)
	// Unmount unmounts a mounted volume in the host that the client is communicating with
	//
	// Requires access AccessType.Write of volume
	Unmount(context.Context, *SdkVolumeUnmountRequest) (*SdkVolumeUnmountResponse, error)
}

// UnimplementedOpenStorageMountAttachServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageMountAttachServer struct {
}

func (*UnimplementedOpenStorageMountAttachServer) Attach(context.Context, *SdkVolumeAttachRequest) (*SdkVolumeAttachResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attach not implemented")
}
func (*UnimplementedOpenStorageMountAttachServer) Detach(context.Context, *SdkVolumeDetachRequest) (*SdkVolumeDetachResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detach not implemented")
}
func (*UnimplementedOpenStorageMountAttachServer) Mount(context.Context, *SdkVolumeMountRequest) (*SdkVolumeMountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (*UnimplementedOpenStorageMountAttachServer) Unmount(context.Context, *SdkVolumeUnmountRequest) (*SdkVolumeUnmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unmount not implemented")
}

func RegisterOpenStorageMountAttachServer(s *grpc.Server, srv OpenStorageMountAttachServer) {
	s.RegisterService(&_OpenStorageMountAttach_serviceDesc, srv)
}

func _OpenStorageMountAttach_Attach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeAttachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageMountAttachServer).Attach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageMountAttach/Attach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageMountAttachServer).Attach(ctx, req.(*SdkVolumeAttachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageMountAttach_Detach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeDetachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageMountAttachServer).Detach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageMountAttach/Detach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageMountAttachServer).Detach(ctx, req.(*SdkVolumeDetachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageMountAttach_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeMountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageMountAttachServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageMountAttach/Mount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageMountAttachServer).Mount(ctx, req.(*SdkVolumeMountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageMountAttach_Unmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkVolumeUnmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageMountAttachServer).Unmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageMountAttach/Unmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageMountAttachServer).Unmount(ctx, req.(*SdkVolumeUnmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageMountAttach_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageMountAttach",
	HandlerType: (*OpenStorageMountAttachServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attach",
			Handler:    _OpenStorageMountAttach_Attach_Handler,
		},
		{
			MethodName: "Detach",
			Handler:    _OpenStorageMountAttach_Detach_Handler,
		},
		{
			MethodName: "Mount",
			Handler:    _OpenStorageMountAttach_Mount_Handler,
		},
		{
			MethodName: "Unmount",
			Handler:    _OpenStorageMountAttach_Unmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageMigrateClient is the client API for OpenStorageMigrate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageMigrateClient interface {
	// Start a migration operation
	Start(ctx context.Context, in *SdkCloudMigrateStartRequest, opts ...grpc.CallOption) (*SdkCloudMigrateStartResponse, error)
	// Cancel a migration operation
	Cancel(ctx context.Context, in *SdkCloudMigrateCancelRequest, opts ...grpc.CallOption) (*SdkCloudMigrateCancelResponse, error)
	// Status for migration operation.
	// If status request is empty, status for all migration operation will be returned.
	Status(ctx context.Context, in *SdkCloudMigrateStatusRequest, opts ...grpc.CallOption) (*SdkCloudMigrateStatusResponse, error)
}

type openStorageMigrateClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageMigrateClient(cc grpc.ClientConnInterface) OpenStorageMigrateClient {
	return &openStorageMigrateClient{cc}
}

func (c *openStorageMigrateClient) Start(ctx context.Context, in *SdkCloudMigrateStartRequest, opts ...grpc.CallOption) (*SdkCloudMigrateStartResponse, error) {
	out := new(SdkCloudMigrateStartResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageMigrate/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageMigrateClient) Cancel(ctx context.Context, in *SdkCloudMigrateCancelRequest, opts ...grpc.CallOption) (*SdkCloudMigrateCancelResponse, error) {
	out := new(SdkCloudMigrateCancelResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageMigrate/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageMigrateClient) Status(ctx context.Context, in *SdkCloudMigrateStatusRequest, opts ...grpc.CallOption) (*SdkCloudMigrateStatusResponse, error) {
	out := new(SdkCloudMigrateStatusResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageMigrate/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageMigrateServer is the server API for OpenStorageMigrate service.
type OpenStorageMigrateServer interface {
	// Start a migration operation
	Start(context.Context, *SdkCloudMigrateStartRequest) (*SdkCloudMigrateStartResponse, error)
	// Cancel a migration operation
	Cancel(context.Context, *SdkCloudMigrateCancelRequest) (*SdkCloudMigrateCancelResponse, error)
	// Status for migration operation.
	// If status request is empty, status for all migration operation will be returned.
	Status(context.Context, *SdkCloudMigrateStatusRequest) (*SdkCloudMigrateStatusResponse, error)
}

// UnimplementedOpenStorageMigrateServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageMigrateServer struct {
}

func (*UnimplementedOpenStorageMigrateServer) Start(context.Context, *SdkCloudMigrateStartRequest) (*SdkCloudMigrateStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedOpenStorageMigrateServer) Cancel(context.Context, *SdkCloudMigrateCancelRequest) (*SdkCloudMigrateCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (*UnimplementedOpenStorageMigrateServer) Status(context.Context, *SdkCloudMigrateStatusRequest) (*SdkCloudMigrateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterOpenStorageMigrateServer(s *grpc.Server, srv OpenStorageMigrateServer) {
	s.RegisterService(&_OpenStorageMigrate_serviceDesc, srv)
}

func _OpenStorageMigrate_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudMigrateStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageMigrateServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageMigrate/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageMigrateServer).Start(ctx, req.(*SdkCloudMigrateStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageMigrate_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudMigrateCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageMigrateServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageMigrate/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageMigrateServer).Cancel(ctx, req.(*SdkCloudMigrateCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageMigrate_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudMigrateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageMigrateServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageMigrate/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageMigrateServer).Status(ctx, req.(*SdkCloudMigrateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageMigrate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageMigrate",
	HandlerType: (*OpenStorageMigrateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _OpenStorageMigrate_Start_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _OpenStorageMigrate_Cancel_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _OpenStorageMigrate_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageObjectstoreClient is the client API for OpenStorageObjectstore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageObjectstoreClient interface {
	// Inspect returns information about the object store endpoint
	Inspect(ctx context.Context, in *SdkObjectstoreInspectRequest, opts ...grpc.CallOption) (*SdkObjectstoreInspectResponse, error)
	// Creates creates an object store endpoint on specified volume
	Create(ctx context.Context, in *SdkObjectstoreCreateRequest, opts ...grpc.CallOption) (*SdkObjectstoreCreateResponse, error)
	// Delete destroys the object store endpoint on the volume
	Delete(ctx context.Context, in *SdkObjectstoreDeleteRequest, opts ...grpc.CallOption) (*SdkObjectstoreDeleteResponse, error)
	// Updates provided objectstore status.
	// This call can be used to stop and start the server while maintaining the same
	// object storage id.
	Update(ctx context.Context, in *SdkObjectstoreUpdateRequest, opts ...grpc.CallOption) (*SdkObjectstoreUpdateResponse, error)
}

type openStorageObjectstoreClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageObjectstoreClient(cc grpc.ClientConnInterface) OpenStorageObjectstoreClient {
	return &openStorageObjectstoreClient{cc}
}

func (c *openStorageObjectstoreClient) Inspect(ctx context.Context, in *SdkObjectstoreInspectRequest, opts ...grpc.CallOption) (*SdkObjectstoreInspectResponse, error) {
	out := new(SdkObjectstoreInspectResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageObjectstore/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageObjectstoreClient) Create(ctx context.Context, in *SdkObjectstoreCreateRequest, opts ...grpc.CallOption) (*SdkObjectstoreCreateResponse, error) {
	out := new(SdkObjectstoreCreateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageObjectstore/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageObjectstoreClient) Delete(ctx context.Context, in *SdkObjectstoreDeleteRequest, opts ...grpc.CallOption) (*SdkObjectstoreDeleteResponse, error) {
	out := new(SdkObjectstoreDeleteResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageObjectstore/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageObjectstoreClient) Update(ctx context.Context, in *SdkObjectstoreUpdateRequest, opts ...grpc.CallOption) (*SdkObjectstoreUpdateResponse, error) {
	out := new(SdkObjectstoreUpdateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageObjectstore/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageObjectstoreServer is the server API for OpenStorageObjectstore service.
type OpenStorageObjectstoreServer interface {
	// Inspect returns information about the object store endpoint
	Inspect(context.Context, *SdkObjectstoreInspectRequest) (*SdkObjectstoreInspectResponse, error)
	// Creates creates an object store endpoint on specified volume
	Create(context.Context, *SdkObjectstoreCreateRequest) (*SdkObjectstoreCreateResponse, error)
	// Delete destroys the object store endpoint on the volume
	Delete(context.Context, *SdkObjectstoreDeleteRequest) (*SdkObjectstoreDeleteResponse, error)
	// Updates provided objectstore status.
	// This call can be used to stop and start the server while maintaining the same
	// object storage id.
	Update(context.Context, *SdkObjectstoreUpdateRequest) (*SdkObjectstoreUpdateResponse, error)
}

// UnimplementedOpenStorageObjectstoreServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageObjectstoreServer struct {
}

func (*UnimplementedOpenStorageObjectstoreServer) Inspect(context.Context, *SdkObjectstoreInspectRequest) (*SdkObjectstoreInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedOpenStorageObjectstoreServer) Create(context.Context, *SdkObjectstoreCreateRequest) (*SdkObjectstoreCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedOpenStorageObjectstoreServer) Delete(context.Context, *SdkObjectstoreDeleteRequest) (*SdkObjectstoreDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedOpenStorageObjectstoreServer) Update(context.Context, *SdkObjectstoreUpdateRequest) (*SdkObjectstoreUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterOpenStorageObjectstoreServer(s *grpc.Server, srv OpenStorageObjectstoreServer) {
	s.RegisterService(&_OpenStorageObjectstore_serviceDesc, srv)
}

func _OpenStorageObjectstore_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkObjectstoreInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageObjectstoreServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageObjectstore/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageObjectstoreServer).Inspect(ctx, req.(*SdkObjectstoreInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageObjectstore_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkObjectstoreCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageObjectstoreServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageObjectstore/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageObjectstoreServer).Create(ctx, req.(*SdkObjectstoreCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageObjectstore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkObjectstoreDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageObjectstoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageObjectstore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageObjectstoreServer).Delete(ctx, req.(*SdkObjectstoreDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageObjectstore_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkObjectstoreUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageObjectstoreServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageObjectstore/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageObjectstoreServer).Update(ctx, req.(*SdkObjectstoreUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageObjectstore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageObjectstore",
	HandlerType: (*OpenStorageObjectstoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Inspect",
			Handler:    _OpenStorageObjectstore_Inspect_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _OpenStorageObjectstore_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OpenStorageObjectstore_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OpenStorageObjectstore_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageCredentialsClient is the client API for OpenStorageCredentials service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageCredentialsClient interface {
	// Create is used to submit cloud credentials. It will return an
	// id of the credentials once they are verified to work.
	//
	// ##### Example
	// {% codetabs name="Golang", type="go" -%}
	// id, err := client.Create(context.Background(), &api.SdkCredentialCreateRequest{
	//     Name: "awscred",
	//     UseProxy: false,
	//     CredentialType: &api.SdkCredentialCreateRequest_AwsCredential{
	//       AwsCredential: &api.SdkAwsCredentialRequest{
	//       AccessKey: "dummy-access",
	//       SecretKey: "dummy-secret",
	//       Endpoint:  "dummy-endpoint",
	//       Region:    "dummy-region",
	//     },
	//   },
	// })
	// {%- language name="Python", type="py" -%}
	// en_resp = client.Create(api_pb2.SdkCredentialCreateRequest(
	//   name='awscred',
	//   aws_credential=api_pb2.SdkAwsCredentialRequest(
	//     access_key='dummy-access',
	//     secret_key='dumm-secret',
	//     endpoint='dummy-endpoint',
	//     region='dummy-region')))
	// {%- endcodetabs %}
	Create(ctx context.Context, in *SdkCredentialCreateRequest, opts ...grpc.CallOption) (*SdkCredentialCreateResponse, error)
	// input is very same as credential create
	Update(ctx context.Context, in *SdkCredentialUpdateRequest, opts ...grpc.CallOption) (*SdkCredentialUpdateResponse, error)
	// Enumerate returns a list of credential ids
	Enumerate(ctx context.Context, in *SdkCredentialEnumerateRequest, opts ...grpc.CallOption) (*SdkCredentialEnumerateResponse, error)
	// Inspect returns the information about a credential, but does not return the secret key.
	Inspect(ctx context.Context, in *SdkCredentialInspectRequest, opts ...grpc.CallOption) (*SdkCredentialInspectResponse, error)
	// Delete a specified credential
	Delete(ctx context.Context, in *SdkCredentialDeleteRequest, opts ...grpc.CallOption) (*SdkCredentialDeleteResponse, error)
	// Validate is used to validate credentials
	Validate(ctx context.Context, in *SdkCredentialValidateRequest, opts ...grpc.CallOption) (*SdkCredentialValidateResponse, error)
	// DeleteReferences is used to remove references to credentials
	DeleteReferences(ctx context.Context, in *SdkCredentialDeleteReferencesRequest, opts ...grpc.CallOption) (*SdkCredentialDeleteReferencesResponse, error)
}

type openStorageCredentialsClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageCredentialsClient(cc grpc.ClientConnInterface) OpenStorageCredentialsClient {
	return &openStorageCredentialsClient{cc}
}

func (c *openStorageCredentialsClient) Create(ctx context.Context, in *SdkCredentialCreateRequest, opts ...grpc.CallOption) (*SdkCredentialCreateResponse, error) {
	out := new(SdkCredentialCreateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCredentials/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCredentialsClient) Update(ctx context.Context, in *SdkCredentialUpdateRequest, opts ...grpc.CallOption) (*SdkCredentialUpdateResponse, error) {
	out := new(SdkCredentialUpdateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCredentials/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCredentialsClient) Enumerate(ctx context.Context, in *SdkCredentialEnumerateRequest, opts ...grpc.CallOption) (*SdkCredentialEnumerateResponse, error) {
	out := new(SdkCredentialEnumerateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCredentials/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCredentialsClient) Inspect(ctx context.Context, in *SdkCredentialInspectRequest, opts ...grpc.CallOption) (*SdkCredentialInspectResponse, error) {
	out := new(SdkCredentialInspectResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCredentials/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCredentialsClient) Delete(ctx context.Context, in *SdkCredentialDeleteRequest, opts ...grpc.CallOption) (*SdkCredentialDeleteResponse, error) {
	out := new(SdkCredentialDeleteResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCredentials/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCredentialsClient) Validate(ctx context.Context, in *SdkCredentialValidateRequest, opts ...grpc.CallOption) (*SdkCredentialValidateResponse, error) {
	out := new(SdkCredentialValidateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCredentials/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCredentialsClient) DeleteReferences(ctx context.Context, in *SdkCredentialDeleteReferencesRequest, opts ...grpc.CallOption) (*SdkCredentialDeleteReferencesResponse, error) {
	out := new(SdkCredentialDeleteReferencesResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCredentials/DeleteReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageCredentialsServer is the server API for OpenStorageCredentials service.
type OpenStorageCredentialsServer interface {
	// Create is used to submit cloud credentials. It will return an
	// id of the credentials once they are verified to work.
	//
	// ##### Example
	// {% codetabs name="Golang", type="go" -%}
	// id, err := client.Create(context.Background(), &api.SdkCredentialCreateRequest{
	//     Name: "awscred",
	//     UseProxy: false,
	//     CredentialType: &api.SdkCredentialCreateRequest_AwsCredential{
	//       AwsCredential: &api.SdkAwsCredentialRequest{
	//       AccessKey: "dummy-access",
	//       SecretKey: "dummy-secret",
	//       Endpoint:  "dummy-endpoint",
	//       Region:    "dummy-region",
	//     },
	//   },
	// })
	// {%- language name="Python", type="py" -%}
	// en_resp = client.Create(api_pb2.SdkCredentialCreateRequest(
	//   name='awscred',
	//   aws_credential=api_pb2.SdkAwsCredentialRequest(
	//     access_key='dummy-access',
	//     secret_key='dumm-secret',
	//     endpoint='dummy-endpoint',
	//     region='dummy-region')))
	// {%- endcodetabs %}
	Create(context.Context, *SdkCredentialCreateRequest) (*SdkCredentialCreateResponse, error)
	// input is very same as credential create
	Update(context.Context, *SdkCredentialUpdateRequest) (*SdkCredentialUpdateResponse, error)
	// Enumerate returns a list of credential ids
	Enumerate(context.Context, *SdkCredentialEnumerateRequest) (*SdkCredentialEnumerateResponse, error)
	// Inspect returns the information about a credential, but does not return the secret key.
	Inspect(context.Context, *SdkCredentialInspectRequest) (*SdkCredentialInspectResponse, error)
	// Delete a specified credential
	Delete(context.Context, *SdkCredentialDeleteRequest) (*SdkCredentialDeleteResponse, error)
	// Validate is used to validate credentials
	Validate(context.Context, *SdkCredentialValidateRequest) (*SdkCredentialValidateResponse, error)
	// DeleteReferences is used to remove references to credentials
	DeleteReferences(context.Context, *SdkCredentialDeleteReferencesRequest) (*SdkCredentialDeleteReferencesResponse, error)
}

// UnimplementedOpenStorageCredentialsServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageCredentialsServer struct {
}

func (*UnimplementedOpenStorageCredentialsServer) Create(context.Context, *SdkCredentialCreateRequest) (*SdkCredentialCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedOpenStorageCredentialsServer) Update(context.Context, *SdkCredentialUpdateRequest) (*SdkCredentialUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedOpenStorageCredentialsServer) Enumerate(context.Context, *SdkCredentialEnumerateRequest) (*SdkCredentialEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedOpenStorageCredentialsServer) Inspect(context.Context, *SdkCredentialInspectRequest) (*SdkCredentialInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedOpenStorageCredentialsServer) Delete(context.Context, *SdkCredentialDeleteRequest) (*SdkCredentialDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedOpenStorageCredentialsServer) Validate(context.Context, *SdkCredentialValidateRequest) (*SdkCredentialValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (*UnimplementedOpenStorageCredentialsServer) DeleteReferences(context.Context, *SdkCredentialDeleteReferencesRequest) (*SdkCredentialDeleteReferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReferences not implemented")
}

func RegisterOpenStorageCredentialsServer(s *grpc.Server, srv OpenStorageCredentialsServer) {
	s.RegisterService(&_OpenStorageCredentials_serviceDesc, srv)
}

func _OpenStorageCredentials_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCredentialCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCredentialsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCredentials/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCredentialsServer).Create(ctx, req.(*SdkCredentialCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCredentials_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCredentialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCredentialsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCredentials/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCredentialsServer).Update(ctx, req.(*SdkCredentialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCredentials_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCredentialEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCredentialsServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCredentials/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCredentialsServer).Enumerate(ctx, req.(*SdkCredentialEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCredentials_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCredentialInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCredentialsServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCredentials/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCredentialsServer).Inspect(ctx, req.(*SdkCredentialInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCredentials_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCredentialDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCredentialsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCredentials/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCredentialsServer).Delete(ctx, req.(*SdkCredentialDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCredentials_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCredentialValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCredentialsServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCredentials/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCredentialsServer).Validate(ctx, req.(*SdkCredentialValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCredentials_DeleteReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCredentialDeleteReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCredentialsServer).DeleteReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCredentials/DeleteReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCredentialsServer).DeleteReferences(ctx, req.(*SdkCredentialDeleteReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageCredentials_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageCredentials",
	HandlerType: (*OpenStorageCredentialsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OpenStorageCredentials_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OpenStorageCredentials_Update_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _OpenStorageCredentials_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _OpenStorageCredentials_Inspect_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OpenStorageCredentials_Delete_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _OpenStorageCredentials_Validate_Handler,
		},
		{
			MethodName: "DeleteReferences",
			Handler:    _OpenStorageCredentials_DeleteReferences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageSchedulePolicyClient is the client API for OpenStorageSchedulePolicy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageSchedulePolicyClient interface {
	// Create creates a new snapshot schedule. They can be setup daily,
	// weekly, or monthly.
	Create(ctx context.Context, in *SdkSchedulePolicyCreateRequest, opts ...grpc.CallOption) (*SdkSchedulePolicyCreateResponse, error)
	// Update a snapshot schedule
	Update(ctx context.Context, in *SdkSchedulePolicyUpdateRequest, opts ...grpc.CallOption) (*SdkSchedulePolicyUpdateResponse, error)
	// Enumerate returns a list of schedules
	Enumerate(ctx context.Context, in *SdkSchedulePolicyEnumerateRequest, opts ...grpc.CallOption) (*SdkSchedulePolicyEnumerateResponse, error)
	// Inspect returns information about a specified schedule
	Inspect(ctx context.Context, in *SdkSchedulePolicyInspectRequest, opts ...grpc.CallOption) (*SdkSchedulePolicyInspectResponse, error)
	// Delete removes a snapshot schedule
	Delete(ctx context.Context, in *SdkSchedulePolicyDeleteRequest, opts ...grpc.CallOption) (*SdkSchedulePolicyDeleteResponse, error)
}

type openStorageSchedulePolicyClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageSchedulePolicyClient(cc grpc.ClientConnInterface) OpenStorageSchedulePolicyClient {
	return &openStorageSchedulePolicyClient{cc}
}

func (c *openStorageSchedulePolicyClient) Create(ctx context.Context, in *SdkSchedulePolicyCreateRequest, opts ...grpc.CallOption) (*SdkSchedulePolicyCreateResponse, error) {
	out := new(SdkSchedulePolicyCreateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageSchedulePolicy/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageSchedulePolicyClient) Update(ctx context.Context, in *SdkSchedulePolicyUpdateRequest, opts ...grpc.CallOption) (*SdkSchedulePolicyUpdateResponse, error) {
	out := new(SdkSchedulePolicyUpdateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageSchedulePolicy/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageSchedulePolicyClient) Enumerate(ctx context.Context, in *SdkSchedulePolicyEnumerateRequest, opts ...grpc.CallOption) (*SdkSchedulePolicyEnumerateResponse, error) {
	out := new(SdkSchedulePolicyEnumerateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageSchedulePolicy/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageSchedulePolicyClient) Inspect(ctx context.Context, in *SdkSchedulePolicyInspectRequest, opts ...grpc.CallOption) (*SdkSchedulePolicyInspectResponse, error) {
	out := new(SdkSchedulePolicyInspectResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageSchedulePolicy/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageSchedulePolicyClient) Delete(ctx context.Context, in *SdkSchedulePolicyDeleteRequest, opts ...grpc.CallOption) (*SdkSchedulePolicyDeleteResponse, error) {
	out := new(SdkSchedulePolicyDeleteResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageSchedulePolicy/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageSchedulePolicyServer is the server API for OpenStorageSchedulePolicy service.
type OpenStorageSchedulePolicyServer interface {
	// Create creates a new snapshot schedule. They can be setup daily,
	// weekly, or monthly.
	Create(context.Context, *SdkSchedulePolicyCreateRequest) (*SdkSchedulePolicyCreateResponse, error)
	// Update a snapshot schedule
	Update(context.Context, *SdkSchedulePolicyUpdateRequest) (*SdkSchedulePolicyUpdateResponse, error)
	// Enumerate returns a list of schedules
	Enumerate(context.Context, *SdkSchedulePolicyEnumerateRequest) (*SdkSchedulePolicyEnumerateResponse, error)
	// Inspect returns information about a specified schedule
	Inspect(context.Context, *SdkSchedulePolicyInspectRequest) (*SdkSchedulePolicyInspectResponse, error)
	// Delete removes a snapshot schedule
	Delete(context.Context, *SdkSchedulePolicyDeleteRequest) (*SdkSchedulePolicyDeleteResponse, error)
}

// UnimplementedOpenStorageSchedulePolicyServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageSchedulePolicyServer struct {
}

func (*UnimplementedOpenStorageSchedulePolicyServer) Create(context.Context, *SdkSchedulePolicyCreateRequest) (*SdkSchedulePolicyCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedOpenStorageSchedulePolicyServer) Update(context.Context, *SdkSchedulePolicyUpdateRequest) (*SdkSchedulePolicyUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedOpenStorageSchedulePolicyServer) Enumerate(context.Context, *SdkSchedulePolicyEnumerateRequest) (*SdkSchedulePolicyEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedOpenStorageSchedulePolicyServer) Inspect(context.Context, *SdkSchedulePolicyInspectRequest) (*SdkSchedulePolicyInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedOpenStorageSchedulePolicyServer) Delete(context.Context, *SdkSchedulePolicyDeleteRequest) (*SdkSchedulePolicyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterOpenStorageSchedulePolicyServer(s *grpc.Server, srv OpenStorageSchedulePolicyServer) {
	s.RegisterService(&_OpenStorageSchedulePolicy_serviceDesc, srv)
}

func _OpenStorageSchedulePolicy_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkSchedulePolicyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageSchedulePolicyServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageSchedulePolicy/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageSchedulePolicyServer).Create(ctx, req.(*SdkSchedulePolicyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageSchedulePolicy_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkSchedulePolicyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageSchedulePolicyServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageSchedulePolicy/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageSchedulePolicyServer).Update(ctx, req.(*SdkSchedulePolicyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageSchedulePolicy_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkSchedulePolicyEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageSchedulePolicyServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageSchedulePolicy/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageSchedulePolicyServer).Enumerate(ctx, req.(*SdkSchedulePolicyEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageSchedulePolicy_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkSchedulePolicyInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageSchedulePolicyServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageSchedulePolicy/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageSchedulePolicyServer).Inspect(ctx, req.(*SdkSchedulePolicyInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageSchedulePolicy_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkSchedulePolicyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageSchedulePolicyServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageSchedulePolicy/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageSchedulePolicyServer).Delete(ctx, req.(*SdkSchedulePolicyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageSchedulePolicy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageSchedulePolicy",
	HandlerType: (*OpenStorageSchedulePolicyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OpenStorageSchedulePolicy_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OpenStorageSchedulePolicy_Update_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _OpenStorageSchedulePolicy_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _OpenStorageSchedulePolicy_Inspect_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OpenStorageSchedulePolicy_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStorageCloudBackupClient is the client API for OpenStorageCloudBackup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStorageCloudBackupClient interface {
	// Creates a backup request for a specified volume. Use
	// OpenStorageCloudBackup.Status() to get the current status of the
	// backup request.
	//
	// Requires access AccessType.Read of volume
	Create(ctx context.Context, in *SdkCloudBackupCreateRequest, opts ...grpc.CallOption) (*SdkCloudBackupCreateResponse, error)
	// Creates a group backup request for a specified group. Use
	// OpenStorageCloudBackup.Status() to get the current status of the
	// backup request.
	//
	// This will only backup volumes which the user has read_access to.
	GroupCreate(ctx context.Context, in *SdkCloudBackupGroupCreateRequest, opts ...grpc.CallOption) (*SdkCloudBackupGroupCreateResponse, error)
	// Restore creates a new volume from a backup id. The newly created volume
	// has an ha_level (number of replicas) of only 1. To increase the number of
	// replicas, use OpenStorageVolume.Set() to change the ha_level.
	Restore(ctx context.Context, in *SdkCloudBackupRestoreRequest, opts ...grpc.CallOption) (*SdkCloudBackupRestoreResponse, error)
	// Deletes a backup stored in the cloud. If the backup is an incremental
	// backup and other backups are dependent on it, it will not be able to be deleted.
	Delete(ctx context.Context, in *SdkCloudBackupDeleteRequest, opts ...grpc.CallOption) (*SdkCloudBackupDeleteResponse, error)
	// DeleteAll deletes all the backups in the cloud for the specified volume.
	DeleteAll(ctx context.Context, in *SdkCloudBackupDeleteAllRequest, opts ...grpc.CallOption) (*SdkCloudBackupDeleteAllResponse, error)
	// Return a list of backups for the specified volume
	EnumerateWithFilters(ctx context.Context, in *SdkCloudBackupEnumerateWithFiltersRequest, opts ...grpc.CallOption) (*SdkCloudBackupEnumerateWithFiltersResponse, error)
	// Status returns the status of any cloud backups of a volume
	Status(ctx context.Context, in *SdkCloudBackupStatusRequest, opts ...grpc.CallOption) (*SdkCloudBackupStatusResponse, error)
	// Catalog returns a list of the contents in the backup
	Catalog(ctx context.Context, in *SdkCloudBackupCatalogRequest, opts ...grpc.CallOption) (*SdkCloudBackupCatalogResponse, error)
	// History returns a list of backups for a specified volume
	History(ctx context.Context, in *SdkCloudBackupHistoryRequest, opts ...grpc.CallOption) (*SdkCloudBackupHistoryResponse, error)
	// StateChange can be used to stop, pause, and restart a backup
	StateChange(ctx context.Context, in *SdkCloudBackupStateChangeRequest, opts ...grpc.CallOption) (*SdkCloudBackupStateChangeResponse, error)
	// Create cloud backup schedule
	SchedCreate(ctx context.Context, in *SdkCloudBackupSchedCreateRequest, opts ...grpc.CallOption) (*SdkCloudBackupSchedCreateResponse, error)
	// Update existing cloud backup schedule
	SchedUpdate(ctx context.Context, in *SdkCloudBackupSchedUpdateRequest, opts ...grpc.CallOption) (*SdkCloudBackupSchedUpdateResponse, error)
	// Delete cloud backup schedule
	SchedDelete(ctx context.Context, in *SdkCloudBackupSchedDeleteRequest, opts ...grpc.CallOption) (*SdkCloudBackupSchedDeleteResponse, error)
	// Enumerate cloud backup schedules
	SchedEnumerate(ctx context.Context, in *SdkCloudBackupSchedEnumerateRequest, opts ...grpc.CallOption) (*SdkCloudBackupSchedEnumerateResponse, error)
	// Size returns the size of any cloud backups of a volume
	Size(ctx context.Context, in *SdkCloudBackupSizeRequest, opts ...grpc.CallOption) (*SdkCloudBackupSizeResponse, error)
}

type openStorageCloudBackupClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStorageCloudBackupClient(cc grpc.ClientConnInterface) OpenStorageCloudBackupClient {
	return &openStorageCloudBackupClient{cc}
}

func (c *openStorageCloudBackupClient) Create(ctx context.Context, in *SdkCloudBackupCreateRequest, opts ...grpc.CallOption) (*SdkCloudBackupCreateResponse, error) {
	out := new(SdkCloudBackupCreateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCloudBackupClient) GroupCreate(ctx context.Context, in *SdkCloudBackupGroupCreateRequest, opts ...grpc.CallOption) (*SdkCloudBackupGroupCreateResponse, error) {
	out := new(SdkCloudBackupGroupCreateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/GroupCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCloudBackupClient) Restore(ctx context.Context, in *SdkCloudBackupRestoreRequest, opts ...grpc.CallOption) (*SdkCloudBackupRestoreResponse, error) {
	out := new(SdkCloudBackupRestoreResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCloudBackupClient) Delete(ctx context.Context, in *SdkCloudBackupDeleteRequest, opts ...grpc.CallOption) (*SdkCloudBackupDeleteResponse, error) {
	out := new(SdkCloudBackupDeleteResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCloudBackupClient) DeleteAll(ctx context.Context, in *SdkCloudBackupDeleteAllRequest, opts ...grpc.CallOption) (*SdkCloudBackupDeleteAllResponse, error) {
	out := new(SdkCloudBackupDeleteAllResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/DeleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCloudBackupClient) EnumerateWithFilters(ctx context.Context, in *SdkCloudBackupEnumerateWithFiltersRequest, opts ...grpc.CallOption) (*SdkCloudBackupEnumerateWithFiltersResponse, error) {
	out := new(SdkCloudBackupEnumerateWithFiltersResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/EnumerateWithFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCloudBackupClient) Status(ctx context.Context, in *SdkCloudBackupStatusRequest, opts ...grpc.CallOption) (*SdkCloudBackupStatusResponse, error) {
	out := new(SdkCloudBackupStatusResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCloudBackupClient) Catalog(ctx context.Context, in *SdkCloudBackupCatalogRequest, opts ...grpc.CallOption) (*SdkCloudBackupCatalogResponse, error) {
	out := new(SdkCloudBackupCatalogResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/Catalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCloudBackupClient) History(ctx context.Context, in *SdkCloudBackupHistoryRequest, opts ...grpc.CallOption) (*SdkCloudBackupHistoryResponse, error) {
	out := new(SdkCloudBackupHistoryResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/History", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCloudBackupClient) StateChange(ctx context.Context, in *SdkCloudBackupStateChangeRequest, opts ...grpc.CallOption) (*SdkCloudBackupStateChangeResponse, error) {
	out := new(SdkCloudBackupStateChangeResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/StateChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCloudBackupClient) SchedCreate(ctx context.Context, in *SdkCloudBackupSchedCreateRequest, opts ...grpc.CallOption) (*SdkCloudBackupSchedCreateResponse, error) {
	out := new(SdkCloudBackupSchedCreateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/SchedCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCloudBackupClient) SchedUpdate(ctx context.Context, in *SdkCloudBackupSchedUpdateRequest, opts ...grpc.CallOption) (*SdkCloudBackupSchedUpdateResponse, error) {
	out := new(SdkCloudBackupSchedUpdateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/SchedUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCloudBackupClient) SchedDelete(ctx context.Context, in *SdkCloudBackupSchedDeleteRequest, opts ...grpc.CallOption) (*SdkCloudBackupSchedDeleteResponse, error) {
	out := new(SdkCloudBackupSchedDeleteResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/SchedDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCloudBackupClient) SchedEnumerate(ctx context.Context, in *SdkCloudBackupSchedEnumerateRequest, opts ...grpc.CallOption) (*SdkCloudBackupSchedEnumerateResponse, error) {
	out := new(SdkCloudBackupSchedEnumerateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/SchedEnumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageCloudBackupClient) Size(ctx context.Context, in *SdkCloudBackupSizeRequest, opts ...grpc.CallOption) (*SdkCloudBackupSizeResponse, error) {
	out := new(SdkCloudBackupSizeResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStorageCloudBackup/Size", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStorageCloudBackupServer is the server API for OpenStorageCloudBackup service.
type OpenStorageCloudBackupServer interface {
	// Creates a backup request for a specified volume. Use
	// OpenStorageCloudBackup.Status() to get the current status of the
	// backup request.
	//
	// Requires access AccessType.Read of volume
	Create(context.Context, *SdkCloudBackupCreateRequest) (*SdkCloudBackupCreateResponse, error)
	// Creates a group backup request for a specified group. Use
	// OpenStorageCloudBackup.Status() to get the current status of the
	// backup request.
	//
	// This will only backup volumes which the user has read_access to.
	GroupCreate(context.Context, *SdkCloudBackupGroupCreateRequest) (*SdkCloudBackupGroupCreateResponse, error)
	// Restore creates a new volume from a backup id. The newly created volume
	// has an ha_level (number of replicas) of only 1. To increase the number of
	// replicas, use OpenStorageVolume.Set() to change the ha_level.
	Restore(context.Context, *SdkCloudBackupRestoreRequest) (*SdkCloudBackupRestoreResponse, error)
	// Deletes a backup stored in the cloud. If the backup is an incremental
	// backup and other backups are dependent on it, it will not be able to be deleted.
	Delete(context.Context, *SdkCloudBackupDeleteRequest) (*SdkCloudBackupDeleteResponse, error)
	// DeleteAll deletes all the backups in the cloud for the specified volume.
	DeleteAll(context.Context, *SdkCloudBackupDeleteAllRequest) (*SdkCloudBackupDeleteAllResponse, error)
	// Return a list of backups for the specified volume
	EnumerateWithFilters(context.Context, *SdkCloudBackupEnumerateWithFiltersRequest) (*SdkCloudBackupEnumerateWithFiltersResponse, error)
	// Status returns the status of any cloud backups of a volume
	Status(context.Context, *SdkCloudBackupStatusRequest) (*SdkCloudBackupStatusResponse, error)
	// Catalog returns a list of the contents in the backup
	Catalog(context.Context, *SdkCloudBackupCatalogRequest) (*SdkCloudBackupCatalogResponse, error)
	// History returns a list of backups for a specified volume
	History(context.Context, *SdkCloudBackupHistoryRequest) (*SdkCloudBackupHistoryResponse, error)
	// StateChange can be used to stop, pause, and restart a backup
	StateChange(context.Context, *SdkCloudBackupStateChangeRequest) (*SdkCloudBackupStateChangeResponse, error)
	// Create cloud backup schedule
	SchedCreate(context.Context, *SdkCloudBackupSchedCreateRequest) (*SdkCloudBackupSchedCreateResponse, error)
	// Update existing cloud backup schedule
	SchedUpdate(context.Context, *SdkCloudBackupSchedUpdateRequest) (*SdkCloudBackupSchedUpdateResponse, error)
	// Delete cloud backup schedule
	SchedDelete(context.Context, *SdkCloudBackupSchedDeleteRequest) (*SdkCloudBackupSchedDeleteResponse, error)
	// Enumerate cloud backup schedules
	SchedEnumerate(context.Context, *SdkCloudBackupSchedEnumerateRequest) (*SdkCloudBackupSchedEnumerateResponse, error)
	// Size returns the size of any cloud backups of a volume
	Size(context.Context, *SdkCloudBackupSizeRequest) (*SdkCloudBackupSizeResponse, error)
}

// UnimplementedOpenStorageCloudBackupServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStorageCloudBackupServer struct {
}

func (*UnimplementedOpenStorageCloudBackupServer) Create(context.Context, *SdkCloudBackupCreateRequest) (*SdkCloudBackupCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedOpenStorageCloudBackupServer) GroupCreate(context.Context, *SdkCloudBackupGroupCreateRequest) (*SdkCloudBackupGroupCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupCreate not implemented")
}
func (*UnimplementedOpenStorageCloudBackupServer) Restore(context.Context, *SdkCloudBackupRestoreRequest) (*SdkCloudBackupRestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (*UnimplementedOpenStorageCloudBackupServer) Delete(context.Context, *SdkCloudBackupDeleteRequest) (*SdkCloudBackupDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedOpenStorageCloudBackupServer) DeleteAll(context.Context, *SdkCloudBackupDeleteAllRequest) (*SdkCloudBackupDeleteAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (*UnimplementedOpenStorageCloudBackupServer) EnumerateWithFilters(context.Context, *SdkCloudBackupEnumerateWithFiltersRequest) (*SdkCloudBackupEnumerateWithFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnumerateWithFilters not implemented")
}
func (*UnimplementedOpenStorageCloudBackupServer) Status(context.Context, *SdkCloudBackupStatusRequest) (*SdkCloudBackupStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedOpenStorageCloudBackupServer) Catalog(context.Context, *SdkCloudBackupCatalogRequest) (*SdkCloudBackupCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Catalog not implemented")
}
func (*UnimplementedOpenStorageCloudBackupServer) History(context.Context, *SdkCloudBackupHistoryRequest) (*SdkCloudBackupHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (*UnimplementedOpenStorageCloudBackupServer) StateChange(context.Context, *SdkCloudBackupStateChangeRequest) (*SdkCloudBackupStateChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateChange not implemented")
}
func (*UnimplementedOpenStorageCloudBackupServer) SchedCreate(context.Context, *SdkCloudBackupSchedCreateRequest) (*SdkCloudBackupSchedCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedCreate not implemented")
}
func (*UnimplementedOpenStorageCloudBackupServer) SchedUpdate(context.Context, *SdkCloudBackupSchedUpdateRequest) (*SdkCloudBackupSchedUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedUpdate not implemented")
}
func (*UnimplementedOpenStorageCloudBackupServer) SchedDelete(context.Context, *SdkCloudBackupSchedDeleteRequest) (*SdkCloudBackupSchedDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedDelete not implemented")
}
func (*UnimplementedOpenStorageCloudBackupServer) SchedEnumerate(context.Context, *SdkCloudBackupSchedEnumerateRequest) (*SdkCloudBackupSchedEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedEnumerate not implemented")
}
func (*UnimplementedOpenStorageCloudBackupServer) Size(context.Context, *SdkCloudBackupSizeRequest) (*SdkCloudBackupSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Size not implemented")
}

func RegisterOpenStorageCloudBackupServer(s *grpc.Server, srv OpenStorageCloudBackupServer) {
	s.RegisterService(&_OpenStorageCloudBackup_serviceDesc, srv)
}

func _OpenStorageCloudBackup_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).Create(ctx, req.(*SdkCloudBackupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCloudBackup_GroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupGroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).GroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/GroupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).GroupCreate(ctx, req.(*SdkCloudBackupGroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCloudBackup_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).Restore(ctx, req.(*SdkCloudBackupRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCloudBackup_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).Delete(ctx, req.(*SdkCloudBackupDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCloudBackup_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupDeleteAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).DeleteAll(ctx, req.(*SdkCloudBackupDeleteAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCloudBackup_EnumerateWithFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupEnumerateWithFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).EnumerateWithFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/EnumerateWithFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).EnumerateWithFilters(ctx, req.(*SdkCloudBackupEnumerateWithFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCloudBackup_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).Status(ctx, req.(*SdkCloudBackupStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCloudBackup_Catalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).Catalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/Catalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).Catalog(ctx, req.(*SdkCloudBackupCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCloudBackup_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).History(ctx, req.(*SdkCloudBackupHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCloudBackup_StateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupStateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).StateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/StateChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).StateChange(ctx, req.(*SdkCloudBackupStateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCloudBackup_SchedCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupSchedCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).SchedCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/SchedCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).SchedCreate(ctx, req.(*SdkCloudBackupSchedCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCloudBackup_SchedUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupSchedUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).SchedUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/SchedUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).SchedUpdate(ctx, req.(*SdkCloudBackupSchedUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCloudBackup_SchedDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupSchedDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).SchedDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/SchedDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).SchedDelete(ctx, req.(*SdkCloudBackupSchedDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCloudBackup_SchedEnumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupSchedEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).SchedEnumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/SchedEnumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).SchedEnumerate(ctx, req.(*SdkCloudBackupSchedEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCloudBackup_Size_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkCloudBackupSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageCloudBackupServer).Size(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStorageCloudBackup/Size",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageCloudBackupServer).Size(ctx, req.(*SdkCloudBackupSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageCloudBackup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStorageCloudBackup",
	HandlerType: (*OpenStorageCloudBackupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OpenStorageCloudBackup_Create_Handler,
		},
		{
			MethodName: "GroupCreate",
			Handler:    _OpenStorageCloudBackup_GroupCreate_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _OpenStorageCloudBackup_Restore_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OpenStorageCloudBackup_Delete_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _OpenStorageCloudBackup_DeleteAll_Handler,
		},
		{
			MethodName: "EnumerateWithFilters",
			Handler:    _OpenStorageCloudBackup_EnumerateWithFilters_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _OpenStorageCloudBackup_Status_Handler,
		},
		{
			MethodName: "Catalog",
			Handler:    _OpenStorageCloudBackup_Catalog_Handler,
		},
		{
			MethodName: "History",
			Handler:    _OpenStorageCloudBackup_History_Handler,
		},
		{
			MethodName: "StateChange",
			Handler:    _OpenStorageCloudBackup_StateChange_Handler,
		},
		{
			MethodName: "SchedCreate",
			Handler:    _OpenStorageCloudBackup_SchedCreate_Handler,
		},
		{
			MethodName: "SchedUpdate",
			Handler:    _OpenStorageCloudBackup_SchedUpdate_Handler,
		},
		{
			MethodName: "SchedDelete",
			Handler:    _OpenStorageCloudBackup_SchedDelete_Handler,
		},
		{
			MethodName: "SchedEnumerate",
			Handler:    _OpenStorageCloudBackup_SchedEnumerate_Handler,
		},
		{
			MethodName: "Size",
			Handler:    _OpenStorageCloudBackup_Size_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// OpenStoragePolicyClient is the client API for OpenStoragePolicy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenStoragePolicyClient interface {
	// Creates a storage policy
	Create(ctx context.Context, in *SdkOpenStoragePolicyCreateRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicyCreateResponse, error)
	// Enumerate returns a list of storage policies
	Enumerate(ctx context.Context, in *SdkOpenStoragePolicyEnumerateRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicyEnumerateResponse, error)
	// Inspect returns information about a specified storage policy
	Inspect(ctx context.Context, in *SdkOpenStoragePolicyInspectRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicyInspectResponse, error)
	// Updates specified storage policy
	Update(ctx context.Context, in *SdkOpenStoragePolicyUpdateRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicyUpdateResponse, error)
	// Deletes specified storage policy
	Delete(ctx context.Context, in *SdkOpenStoragePolicyDeleteRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicyDeleteResponse, error)
	// Set specified storage policy as default policy
	SetDefault(ctx context.Context, in *SdkOpenStoragePolicySetDefaultRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicySetDefaultResponse, error)
	// DefaultInspect return default storage policy if any, otherwise
	// empty response
	DefaultInspect(ctx context.Context, in *SdkOpenStoragePolicyDefaultInspectRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicyDefaultInspectResponse, error)
	// Release specified storage policy constraint for volume
	// creation
	Release(ctx context.Context, in *SdkOpenStoragePolicyReleaseRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicyReleaseResponse, error)
}

type openStoragePolicyClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenStoragePolicyClient(cc grpc.ClientConnInterface) OpenStoragePolicyClient {
	return &openStoragePolicyClient{cc}
}

func (c *openStoragePolicyClient) Create(ctx context.Context, in *SdkOpenStoragePolicyCreateRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicyCreateResponse, error) {
	out := new(SdkOpenStoragePolicyCreateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStoragePolicy/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStoragePolicyClient) Enumerate(ctx context.Context, in *SdkOpenStoragePolicyEnumerateRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicyEnumerateResponse, error) {
	out := new(SdkOpenStoragePolicyEnumerateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStoragePolicy/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStoragePolicyClient) Inspect(ctx context.Context, in *SdkOpenStoragePolicyInspectRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicyInspectResponse, error) {
	out := new(SdkOpenStoragePolicyInspectResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStoragePolicy/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStoragePolicyClient) Update(ctx context.Context, in *SdkOpenStoragePolicyUpdateRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicyUpdateResponse, error) {
	out := new(SdkOpenStoragePolicyUpdateResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStoragePolicy/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStoragePolicyClient) Delete(ctx context.Context, in *SdkOpenStoragePolicyDeleteRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicyDeleteResponse, error) {
	out := new(SdkOpenStoragePolicyDeleteResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStoragePolicy/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStoragePolicyClient) SetDefault(ctx context.Context, in *SdkOpenStoragePolicySetDefaultRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicySetDefaultResponse, error) {
	out := new(SdkOpenStoragePolicySetDefaultResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStoragePolicy/SetDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStoragePolicyClient) DefaultInspect(ctx context.Context, in *SdkOpenStoragePolicyDefaultInspectRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicyDefaultInspectResponse, error) {
	out := new(SdkOpenStoragePolicyDefaultInspectResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStoragePolicy/DefaultInspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStoragePolicyClient) Release(ctx context.Context, in *SdkOpenStoragePolicyReleaseRequest, opts ...grpc.CallOption) (*SdkOpenStoragePolicyReleaseResponse, error) {
	out := new(SdkOpenStoragePolicyReleaseResponse)
	err := c.cc.Invoke(ctx, "/openstorage.api.OpenStoragePolicy/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenStoragePolicyServer is the server API for OpenStoragePolicy service.
type OpenStoragePolicyServer interface {
	// Creates a storage policy
	Create(context.Context, *SdkOpenStoragePolicyCreateRequest) (*SdkOpenStoragePolicyCreateResponse, error)
	// Enumerate returns a list of storage policies
	Enumerate(context.Context, *SdkOpenStoragePolicyEnumerateRequest) (*SdkOpenStoragePolicyEnumerateResponse, error)
	// Inspect returns information about a specified storage policy
	Inspect(context.Context, *SdkOpenStoragePolicyInspectRequest) (*SdkOpenStoragePolicyInspectResponse, error)
	// Updates specified storage policy
	Update(context.Context, *SdkOpenStoragePolicyUpdateRequest) (*SdkOpenStoragePolicyUpdateResponse, error)
	// Deletes specified storage policy
	Delete(context.Context, *SdkOpenStoragePolicyDeleteRequest) (*SdkOpenStoragePolicyDeleteResponse, error)
	// Set specified storage policy as default policy
	SetDefault(context.Context, *SdkOpenStoragePolicySetDefaultRequest) (*SdkOpenStoragePolicySetDefaultResponse, error)
	// DefaultInspect return default storage policy if any, otherwise
	// empty response
	DefaultInspect(context.Context, *SdkOpenStoragePolicyDefaultInspectRequest) (*SdkOpenStoragePolicyDefaultInspectResponse, error)
	// Release specified storage policy constraint for volume
	// creation
	Release(context.Context, *SdkOpenStoragePolicyReleaseRequest) (*SdkOpenStoragePolicyReleaseResponse, error)
}

// UnimplementedOpenStoragePolicyServer can be embedded to have forward compatible implementations.
type UnimplementedOpenStoragePolicyServer struct {
}

func (*UnimplementedOpenStoragePolicyServer) Create(context.Context, *SdkOpenStoragePolicyCreateRequest) (*SdkOpenStoragePolicyCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedOpenStoragePolicyServer) Enumerate(context.Context, *SdkOpenStoragePolicyEnumerateRequest) (*SdkOpenStoragePolicyEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedOpenStoragePolicyServer) Inspect(context.Context, *SdkOpenStoragePolicyInspectRequest) (*SdkOpenStoragePolicyInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedOpenStoragePolicyServer) Update(context.Context, *SdkOpenStoragePolicyUpdateRequest) (*SdkOpenStoragePolicyUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedOpenStoragePolicyServer) Delete(context.Context, *SdkOpenStoragePolicyDeleteRequest) (*SdkOpenStoragePolicyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedOpenStoragePolicyServer) SetDefault(context.Context, *SdkOpenStoragePolicySetDefaultRequest) (*SdkOpenStoragePolicySetDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefault not implemented")
}
func (*UnimplementedOpenStoragePolicyServer) DefaultInspect(context.Context, *SdkOpenStoragePolicyDefaultInspectRequest) (*SdkOpenStoragePolicyDefaultInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultInspect not implemented")
}
func (*UnimplementedOpenStoragePolicyServer) Release(context.Context, *SdkOpenStoragePolicyReleaseRequest) (*SdkOpenStoragePolicyReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}

func RegisterOpenStoragePolicyServer(s *grpc.Server, srv OpenStoragePolicyServer) {
	s.RegisterService(&_OpenStoragePolicy_serviceDesc, srv)
}

func _OpenStoragePolicy_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkOpenStoragePolicyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStoragePolicyServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStoragePolicy/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStoragePolicyServer).Create(ctx, req.(*SdkOpenStoragePolicyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStoragePolicy_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkOpenStoragePolicyEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStoragePolicyServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStoragePolicy/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStoragePolicyServer).Enumerate(ctx, req.(*SdkOpenStoragePolicyEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStoragePolicy_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkOpenStoragePolicyInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStoragePolicyServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStoragePolicy/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStoragePolicyServer).Inspect(ctx, req.(*SdkOpenStoragePolicyInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStoragePolicy_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkOpenStoragePolicyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStoragePolicyServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStoragePolicy/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStoragePolicyServer).Update(ctx, req.(*SdkOpenStoragePolicyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStoragePolicy_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkOpenStoragePolicyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStoragePolicyServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStoragePolicy/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStoragePolicyServer).Delete(ctx, req.(*SdkOpenStoragePolicyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStoragePolicy_SetDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkOpenStoragePolicySetDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStoragePolicyServer).SetDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStoragePolicy/SetDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStoragePolicyServer).SetDefault(ctx, req.(*SdkOpenStoragePolicySetDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStoragePolicy_DefaultInspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkOpenStoragePolicyDefaultInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStoragePolicyServer).DefaultInspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStoragePolicy/DefaultInspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStoragePolicyServer).DefaultInspect(ctx, req.(*SdkOpenStoragePolicyDefaultInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStoragePolicy_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkOpenStoragePolicyReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStoragePolicyServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.OpenStoragePolicy/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStoragePolicyServer).Release(ctx, req.(*SdkOpenStoragePolicyReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStoragePolicy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.OpenStoragePolicy",
	HandlerType: (*OpenStoragePolicyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OpenStoragePolicy_Create_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _OpenStoragePolicy_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _OpenStoragePolicy_Inspect_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OpenStoragePolicy_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OpenStoragePolicy_Delete_Handler,
		},
		{
			MethodName: "SetDefault",
			Handler:    _OpenStoragePolicy_SetDefault_Handler,
		},
		{
			MethodName: "DefaultInspect",
			Handler:    _OpenStoragePolicy_DefaultInspect_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _OpenStoragePolicy_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
