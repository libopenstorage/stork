// Code generated by protoc-gen-go. DO NOT EDIT.
// source: px/api/api.proto

package api

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	timestamp "github.com/golang/protobuf/ptypes/timestamp"

	wrappers "github.com/golang/protobuf/ptypes/wrappers"

	api "github.com/libopenstorage/openstorage/api"

	_ "google.golang.org/genproto/googleapis/api/annotations"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// PoolPriority defines storage pool priorities
type PoolPriority int32

const (
	PoolPriority_Unknown PoolPriority = 0
	PoolPriority_Low     PoolPriority = 1
	PoolPriority_Medium  PoolPriority = 2
	PoolPriority_High    PoolPriority = 3
)

var PoolPriority_name = map[int32]string{
	0: "Unknown",
	1: "Low",
	2: "Medium",
	3: "High",
}
var PoolPriority_value = map[string]int32{
	"Unknown": 0,
	"Low":     1,
	"Medium":  2,
	"High":    3,
}

func (x PoolPriority) String() string {
	return proto.EnumName(PoolPriority_name, int32(x))
}
func (PoolPriority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{0}
}

// Defines times of day
type Weekday int32

const (
	// Sunday
	Weekday_Sunday Weekday = 0
	// Monday
	Weekday_Monday Weekday = 1
	// Tuesday
	Weekday_Tuesday Weekday = 2
	// Wednesday
	Weekday_Wednesday Weekday = 3
	// Thursday
	Weekday_Thursday Weekday = 4
	// Friday
	Weekday_Friday Weekday = 5
	// Saturday
	Weekday_Saturday Weekday = 6
)

var Weekday_name = map[int32]string{
	0: "Sunday",
	1: "Monday",
	2: "Tuesday",
	3: "Wednesday",
	4: "Thursday",
	5: "Friday",
	6: "Saturday",
}
var Weekday_value = map[string]int32{
	"Sunday":    0,
	"Monday":    1,
	"Tuesday":   2,
	"Wednesday": 3,
	"Thursday":  4,
	"Friday":    5,
	"Saturday":  6,
}

func (x Weekday) String() string {
	return proto.EnumName(Weekday_name, int32(x))
}
func (Weekday) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{1}
}

type BootstrapNodeState int32

const (
	BootstrapNodeState_UnknownNodeState BootstrapNodeState = 0
	BootstrapNodeState_InProgress       BootstrapNodeState = 1
	BootstrapNodeState_Operational      BootstrapNodeState = 2
	BootstrapNodeState_SuspectDown      BootstrapNodeState = 3
)

var BootstrapNodeState_name = map[int32]string{
	0: "UnknownNodeState",
	1: "InProgress",
	2: "Operational",
	3: "SuspectDown",
}
var BootstrapNodeState_value = map[string]int32{
	"UnknownNodeState": 0,
	"InProgress":       1,
	"Operational":      2,
	"SuspectDown":      3,
}

func (x BootstrapNodeState) String() string {
	return proto.EnumName(BootstrapNodeState_name, int32(x))
}
func (BootstrapNodeState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{2}
}

type BootstrapNodeType int32

const (
	BootstrapNodeType_UnknownNodeType BootstrapNodeType = 0
	BootstrapNodeType_Leader          BootstrapNodeType = 1
	BootstrapNodeType_Member          BootstrapNodeType = 2
)

var BootstrapNodeType_name = map[int32]string{
	0: "UnknownNodeType",
	1: "Leader",
	2: "Member",
}
var BootstrapNodeType_value = map[string]int32{
	"UnknownNodeType": 0,
	"Leader":          1,
	"Member":          2,
}

func (x BootstrapNodeType) String() string {
	return proto.EnumName(BootstrapNodeType_name, int32(x))
}
func (BootstrapNodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{3}
}

type DataDirType int32

const (
	DataDirType_UnknownDataDirType DataDirType = 0
	DataDirType_MetadataDevice     DataDirType = 1
	DataDirType_KvdbDevice         DataDirType = 2
	DataDirType_BtrfsSubvolume     DataDirType = 3
)

var DataDirType_name = map[int32]string{
	0: "UnknownDataDirType",
	1: "MetadataDevice",
	2: "KvdbDevice",
	3: "BtrfsSubvolume",
}
var DataDirType_value = map[string]int32{
	"UnknownDataDirType": 0,
	"MetadataDevice":     1,
	"KvdbDevice":         2,
	"BtrfsSubvolume":     3,
}

func (x DataDirType) String() string {
	return proto.EnumName(DataDirType_name, int32(x))
}
func (DataDirType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{4}
}

type BlockDriverType int32

const (
	BlockDriverType_UnknownBlockDriverType BlockDriverType = 0
	BlockDriverType_Native                 BlockDriverType = 1
	BlockDriverType_External               BlockDriverType = 2
	BlockDriverType_Nbd                    BlockDriverType = 3
)

var BlockDriverType_name = map[int32]string{
	0: "UnknownBlockDriverType",
	1: "Native",
	2: "External",
	3: "Nbd",
}
var BlockDriverType_value = map[string]int32{
	"UnknownBlockDriverType": 0,
	"Native":                 1,
	"External":               2,
	"Nbd":                    3,
}

func (x BlockDriverType) String() string {
	return proto.EnumName(BlockDriverType_name, int32(x))
}
func (BlockDriverType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{5}
}

// TargetDsType type of target data store
type TargetDsType int32

const (
	TargetDsType_UnknownTargetDsType TargetDsType = 0
	TargetDsType_ExternalFs          TargetDsType = 1
	TargetDsType_PXV                 TargetDsType = 2
)

var TargetDsType_name = map[int32]string{
	0: "UnknownTargetDsType",
	1: "ExternalFs",
	2: "PXV",
}
var TargetDsType_value = map[string]int32{
	"UnknownTargetDsType": 0,
	"ExternalFs":          1,
	"PXV":                 2,
}

func (x TargetDsType) String() string {
	return proto.EnumName(TargetDsType_name, int32(x))
}
func (TargetDsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{6}
}

// PoolType storage pool type
type PoolType int32

const (
	PoolType_UnknownPoolType PoolType = 0
	PoolType_Btrfs           PoolType = 1
	PoolType_Dmthin          PoolType = 2
	PoolType_Mdraid          PoolType = 3
	PoolType_Ext4            PoolType = 4
	PoolType_Nocow           PoolType = 5
	PoolType_Lvm             PoolType = 6
)

var PoolType_name = map[int32]string{
	0: "UnknownPoolType",
	1: "Btrfs",
	2: "Dmthin",
	3: "Mdraid",
	4: "Ext4",
	5: "Nocow",
	6: "Lvm",
}
var PoolType_value = map[string]int32{
	"UnknownPoolType": 0,
	"Btrfs":           1,
	"Dmthin":          2,
	"Mdraid":          3,
	"Ext4":            4,
	"Nocow":           5,
	"Lvm":             6,
}

func (x PoolType) String() string {
	return proto.EnumName(PoolType_name, int32(x))
}
func (PoolType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{7}
}

// StatusCode is an enum that holds all the Telemetry error codes.
type Telemetry_StatusCode int32

const (
	// No errorrs detected. Troubleshooter was able to succesfully upload a test file to arcus
	Telemetry_Unknown Telemetry_StatusCode = 0
	//  Telemetry has a valid appliance certificate and can communicate with Arcus. However,
	//  some other failure occurred when trying to upload a test file. There may be an issue on the cloud side.
	Telemetry_LogUploadFailed Telemetry_StatusCode = 1
	// Telemetry has an appliance certificate, but it is either not yet valid (highly unlikely) or already expired.
	// It is likely that something went wrong during the automated certificate renewal process.
	Telemetry_AppCertInvalid Telemetry_StatusCode = 2
	// Telemetry thinks it has an appliance certificate, but there was an error in trying to read it.
	Telemetry_AppCertUnknown Telemetry_StatusCode = 3
	// When Telemetry sends a certificate signing request, it is signed by an on-array activation keyif one exists.
	// Otherwise, it is signed by the default release key. Arcus Auth validates the signature against the public
	// key that is stored in the Arcus Keybox. If there is a mismatch, registration will fail with this error.
	Telemetry_RegInvalidJwt Telemetry_StatusCode = 4
	// This appliance id has already been used/registered in the past. We cannot register duplicate appliance ids.
	Telemetry_RegAlreadyRegistered Telemetry_StatusCode = 5
	// This appliance is one that requires pre-registration (e.g. VM collector, CBS), but it has not been preregistered yet.
	Telemetry_RegNotRegistered Telemetry_StatusCode = 6
	// Telemetry ran into some other error during the registration process.
	Telemetry_RegUnkown Telemetry_StatusCode = 7
	// Telemetry timed out while trying to hit restricted-rest.cloud-support.purestorage.com/ping.
	// The troubleshooter was unable to find more specific errors.
	Telemetry_RestrictedPingTimeout Telemetry_StatusCode = 8
	// Telemetry hit a "Network is unreachable" error while trying to hit restricted-rest.cloud-support.purestorage.com/ping.
	// The troubleshooter was unable to find more specific errors.
	Telemetry_RestrictedPingUnreachable Telemetry_StatusCode = 9
	// Telemetry received some other error while trying to hit restricted-rest.cloud-support.purestorage.com/ping.
	// The troubleshooter was unable to find more specific errors.
	Telemetry_RestrictedPingUnknown Telemetry_StatusCode = 10
	// The proxy url provided to Telemetry is in an invalid url format. The internal regex for parsing is:
	// ^(?<protocol>https?)://((?<username>.+):(?<password>.+)@)?
	// ((?<ipv6hostname>\\[.+\\])|(?<hostname>[A-Za-z0-9-.]+))(:(?<port>\\d+))?
	Telemetry_ProxyUrlParse Telemetry_StatusCode = 11
	// Telemetry received a timeout when trying to perform a DNS lookup on rest.cloud-support.purestorage.com, restricted-rest.cloud-support.purestorage.com, or the provided proxy url, if it exists.
	Telemetry_DnsTimeout Telemetry_StatusCode = 12
	// Telemetry received some other error when trying to perform a DNS lookup on rest.cloud-support.purestorage.com, restricted-rest.cloud-support.purestorage.com, or the provided proxy url, if it exists.
	Telemetry_DnsUnkown Telemetry_StatusCode = 13
	// Telemetry was unable to establish a socket connection to the provided proxy.
	Telemetry_ProxyConnection Telemetry_StatusCode = 14
	//  SDK threw an error.
	Telemetry_SdkError Telemetry_StatusCode = 15
	// Success
	Telemetry_Success Telemetry_StatusCode = 100
)

var Telemetry_StatusCode_name = map[int32]string{
	0:   "Unknown",
	1:   "LogUploadFailed",
	2:   "AppCertInvalid",
	3:   "AppCertUnknown",
	4:   "RegInvalidJwt",
	5:   "RegAlreadyRegistered",
	6:   "RegNotRegistered",
	7:   "RegUnkown",
	8:   "RestrictedPingTimeout",
	9:   "RestrictedPingUnreachable",
	10:  "RestrictedPingUnknown",
	11:  "ProxyUrlParse",
	12:  "DnsTimeout",
	13:  "DnsUnkown",
	14:  "ProxyConnection",
	15:  "SdkError",
	100: "Success",
}
var Telemetry_StatusCode_value = map[string]int32{
	"Unknown":                   0,
	"LogUploadFailed":           1,
	"AppCertInvalid":            2,
	"AppCertUnknown":            3,
	"RegInvalidJwt":             4,
	"RegAlreadyRegistered":      5,
	"RegNotRegistered":          6,
	"RegUnkown":                 7,
	"RestrictedPingTimeout":     8,
	"RestrictedPingUnreachable": 9,
	"RestrictedPingUnknown":     10,
	"ProxyUrlParse":             11,
	"DnsTimeout":                12,
	"DnsUnkown":                 13,
	"ProxyConnection":           14,
	"SdkError":                  15,
	"Success":                   100,
}

func (x Telemetry_StatusCode) String() string {
	return proto.EnumName(Telemetry_StatusCode_name, int32(x))
}
func (Telemetry_StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{2, 0}
}

// Maintenance operation Enum
type Maintenance_OperationType int32

const (
	// Do not use.
	Maintenance_Unknown Maintenance_OperationType = 0
	// Enter maintenance mode
	Maintenance_Enter Maintenance_OperationType = 1
	// Exit maintenance mode
	Maintenance_Exit Maintenance_OperationType = 2
	// Repair Node
	Maintenance_Repair Maintenance_OperationType = 3
)

var Maintenance_OperationType_name = map[int32]string{
	0: "Unknown",
	1: "Enter",
	2: "Exit",
	3: "Repair",
}
var Maintenance_OperationType_value = map[string]int32{
	"Unknown": 0,
	"Enter":   1,
	"Exit":    2,
	"Repair":  3,
}

func (x Maintenance_OperationType) String() string {
	return proto.EnumName(Maintenance_OperationType_name, int32(x))
}
func (Maintenance_OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{13, 0}
}

// CallHome operation Enum
type CallHome_OperationType int32

const (
	// Do not use.
	CallHome_Unknown CallHome_OperationType = 0
	// Enable callhome
	CallHome_Enable CallHome_OperationType = 1
	// Disbale callhome
	CallHome_Disable CallHome_OperationType = 2
)

var CallHome_OperationType_name = map[int32]string{
	0: "Unknown",
	1: "Enable",
	2: "Disable",
}
var CallHome_OperationType_value = map[string]int32{
	"Unknown": 0,
	"Enable":  1,
	"Disable": 2,
}

func (x CallHome_OperationType) String() string {
	return proto.EnumName(CallHome_OperationType_name, int32(x))
}
func (CallHome_OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{14, 0}
}

// CacheFlush operation Enum
type CacheFlush_OperationType int32

const (
	// Do not use.
	CacheFlush_Unknown CacheFlush_OperationType = 0
	// Start flushing
	CacheFlush_Start CacheFlush_OperationType = 1
	// Show status of in progress cache flushing
	CacheFlush_Status CacheFlush_OperationType = 2
)

var CacheFlush_OperationType_name = map[int32]string{
	0: "Unknown",
	1: "Start",
	2: "Status",
}
var CacheFlush_OperationType_value = map[string]int32{
	"Unknown": 0,
	"Start":   1,
	"Status":  2,
}

func (x CacheFlush_OperationType) String() string {
	return proto.EnumName(CacheFlush_OperationType_name, int32(x))
}
func (CacheFlush_OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{52, 0}
}

type DeviceScan_OperationType int32

const (
	// Do not use.
	DeviceScan_UnknownOperation DeviceScan_OperationType = 0
	// Start device bad block scan
	DeviceScan_Start DeviceScan_OperationType = 1
	// Resume device bad block scan
	DeviceScan_Resume DeviceScan_OperationType = 2
	// Stop device bad block scan
	DeviceScan_Stop DeviceScan_OperationType = 3
	// Pause device bad block scan
	DeviceScan_Pause DeviceScan_OperationType = 4
)

var DeviceScan_OperationType_name = map[int32]string{
	0: "UnknownOperation",
	1: "Start",
	2: "Resume",
	3: "Stop",
	4: "Pause",
}
var DeviceScan_OperationType_value = map[string]int32{
	"UnknownOperation": 0,
	"Start":            1,
	"Resume":           2,
	"Stop":             3,
	"Pause":            4,
}

func (x DeviceScan_OperationType) String() string {
	return proto.EnumName(DeviceScan_OperationType_name, int32(x))
}
func (DeviceScan_OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{57, 0}
}

type DeviceScan_ResponseType int32

const (
	// Do not use.
	DeviceScan_UnknownResponse DeviceScan_ResponseType = 0
	// Device scan started, stopped, paused or resumed successfully
	DeviceScan_Ok DeviceScan_ResponseType = 1
	// device scan is already in progress
	DeviceScan_InProgress DeviceScan_ResponseType = 2
	// no device scan is running to resume or to stop
	DeviceScan_NotFound DeviceScan_ResponseType = 3
	// already exists paused device scan, need to resume or cancel incomplete scan to start
	DeviceScan_AlreadyExists DeviceScan_ResponseType = 4
)

var DeviceScan_ResponseType_name = map[int32]string{
	0: "UnknownResponse",
	1: "Ok",
	2: "InProgress",
	3: "NotFound",
	4: "AlreadyExists",
}
var DeviceScan_ResponseType_value = map[string]int32{
	"UnknownResponse": 0,
	"Ok":              1,
	"InProgress":      2,
	"NotFound":        3,
	"AlreadyExists":   4,
}

func (x DeviceScan_ResponseType) String() string {
	return proto.EnumName(DeviceScan_ResponseType_name, int32(x))
}
func (DeviceScan_ResponseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{57, 1}
}

type Storage_Status int32

const (
	Storage_UnknownStorageStatus Storage_Status = 0
	// NotPresent empty storage spec.
	Storage_NotPresent Storage_Status = 1
	// Init storage is intializing.
	Storage_Initializing Storage_Status = 2
	// Up status healthy
	Storage_Up Storage_Status = 3
	// Down status failure.
	Storage_Down Storage_Status = 4
	// StrorageRebalance operation in progress.
	Storage_StorageRebalance Storage_Status = 5
	// DriveReplace operation in progress.
	Storage_DriveReplace Storage_Status = 6
	// StorageDown module is up but storage devices are down.
	Storage_StorageDown Storage_Status = 7
	// Degraded status up but with degraded performance.
	// In a RAID group, this may indicate a problem with one or more drives
	Storage_Degraded Storage_Status = 8
	// Maintenance status
	Storage_Maintenance Storage_Status = 9
	// NeedsReboot
	Storage_NeedsReboot Storage_Status = 10
	// Error state
	Storage_Error Storage_Status = 11
	// Initialization Error state
	Storage_InitializationError Storage_Status = 12
	// KernelDriverError error communicating with kernel driver.
	Storage_KernelDriverError Storage_Status = 13
	// ResyncStatus means volume is resyncing.
	Storage_Resync Storage_Status = 14
	// StorageFull indicates no free space.
	Storage_StorageFull Storage_Status = 15
	// StorageResize pool resize in progress.
	Storage_StorageResize Storage_Status = 16
	// Decommissioned indicates node is marked for decommissioning.
	Storage_Decommissioned Storage_Status = 17
	// StorageCacheFlush indicates cache flush is in progress
	Storage_CacheFlush Storage_Status = 18
)

var Storage_Status_name = map[int32]string{
	0:  "UnknownStorageStatus",
	1:  "NotPresent",
	2:  "Initializing",
	3:  "Up",
	4:  "Down",
	5:  "StorageRebalance",
	6:  "DriveReplace",
	7:  "StorageDown",
	8:  "Degraded",
	9:  "Maintenance",
	10: "NeedsReboot",
	11: "Error",
	12: "InitializationError",
	13: "KernelDriverError",
	14: "Resync",
	15: "StorageFull",
	16: "StorageResize",
	17: "Decommissioned",
	18: "CacheFlush",
}
var Storage_Status_value = map[string]int32{
	"UnknownStorageStatus": 0,
	"NotPresent":           1,
	"Initializing":         2,
	"Up":                   3,
	"Down":                 4,
	"StorageRebalance":     5,
	"DriveReplace":         6,
	"StorageDown":          7,
	"Degraded":             8,
	"Maintenance":          9,
	"NeedsReboot":          10,
	"Error":                11,
	"InitializationError":  12,
	"KernelDriverError":    13,
	"Resync":               14,
	"StorageFull":          15,
	"StorageResize":        16,
	"Decommissioned":       17,
	"CacheFlush":           18,
}

func (x Storage_Status) String() string {
	return proto.EnumName(Storage_Status_name, int32(x))
}
func (Storage_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{78, 0}
}

// DriveRebalance operation Enum
type DriveRebalance_OperationType int32

const (
	// Do not use.
	DriveRebalance_Unknown DriveRebalance_OperationType = 0
	// Start drive rebalance
	DriveRebalance_Start DriveRebalance_OperationType = 1
	// Show status of in progress operation
	DriveRebalance_Status DriveRebalance_OperationType = 2
	// Cancel rebalance process
	DriveRebalance_Cancel DriveRebalance_OperationType = 3
)

var DriveRebalance_OperationType_name = map[int32]string{
	0: "Unknown",
	1: "Start",
	2: "Status",
	3: "Cancel",
}
var DriveRebalance_OperationType_value = map[string]int32{
	"Unknown": 0,
	"Start":   1,
	"Status":  2,
	"Cancel":  3,
}

func (x DriveRebalance_OperationType) String() string {
	return proto.EnumName(DriveRebalance_OperationType_name, int32(x))
}
func (DriveRebalance_OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{89, 0}
}

// DriveReplace operation Enum
type DriveReplace_OperationType int32

const (
	// Do not use.
	DriveReplace_Unknown DriveReplace_OperationType = 0
	// Start replace adding
	DriveReplace_Start DriveReplace_OperationType = 1
	// Show status of in progress operation
	DriveReplace_Status DriveReplace_OperationType = 2
	// Cancel replace process
	DriveReplace_Cancel DriveReplace_OperationType = 3
)

var DriveReplace_OperationType_name = map[int32]string{
	0: "Unknown",
	1: "Start",
	2: "Status",
	3: "Cancel",
}
var DriveReplace_OperationType_value = map[string]int32{
	"Unknown": 0,
	"Start":   1,
	"Status":  2,
	"Cancel":  3,
}

func (x DriveReplace_OperationType) String() string {
	return proto.EnumName(DriveReplace_OperationType_name, int32(x))
}
func (DriveReplace_OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{91, 0}
}

// Severity Enum
type LicenseCondition_Severity int32

const (
	// Do not use.
	LicenseCondition_UNSPECIFIED LicenseCondition_Severity = 0
	// Used for an informational message
	LicenseCondition_INFO LicenseCondition_Severity = 1
	// Used for a warning message
	LicenseCondition_WARNING LicenseCondition_Severity = 2
	// Used for an error message
	LicenseCondition_ERROR LicenseCondition_Severity = 3
)

var LicenseCondition_Severity_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "INFO",
	2: "WARNING",
	3: "ERROR",
}
var LicenseCondition_Severity_value = map[string]int32{
	"UNSPECIFIED": 0,
	"INFO":        1,
	"WARNING":     2,
	"ERROR":       3,
}

func (x LicenseCondition_Severity) String() string {
	return proto.EnumName(LicenseCondition_Severity_name, int32(x))
}
func (LicenseCondition_Severity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{112, 0}
}

// PxTelemetryCheck
type PxTelemetryCheck struct {
	Name                 string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Status               string                   `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Description          string                   `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Message              string                   `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Details              *PxTelemetryCheckDetails `protobuf:"bytes,5,opt,name=details" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *PxTelemetryCheck) Reset()         { *m = PxTelemetryCheck{} }
func (m *PxTelemetryCheck) String() string { return proto.CompactTextString(m) }
func (*PxTelemetryCheck) ProtoMessage()    {}
func (*PxTelemetryCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{0}
}
func (m *PxTelemetryCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxTelemetryCheck.Unmarshal(m, b)
}
func (m *PxTelemetryCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxTelemetryCheck.Marshal(b, m, deterministic)
}
func (dst *PxTelemetryCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxTelemetryCheck.Merge(dst, src)
}
func (m *PxTelemetryCheck) XXX_Size() int {
	return xxx_messageInfo_PxTelemetryCheck.Size(m)
}
func (m *PxTelemetryCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_PxTelemetryCheck.DiscardUnknown(m)
}

var xxx_messageInfo_PxTelemetryCheck proto.InternalMessageInfo

func (m *PxTelemetryCheck) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PxTelemetryCheck) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PxTelemetryCheck) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PxTelemetryCheck) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PxTelemetryCheck) GetDetails() *PxTelemetryCheckDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

// PxTelemetryCheckDetails
type PxTelemetryCheckDetails struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	ActivationPubKey     string   `protobuf:"bytes,2,opt,name=activation_pub_key,json=activationPubKey" json:"activation_pub_key,omitempty"`
	ProxyUrl             string   `protobuf:"bytes,3,opt,name=proxy_url,json=proxyUrl" json:"proxy_url,omitempty"`
	Port                 int64    `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxTelemetryCheckDetails) Reset()         { *m = PxTelemetryCheckDetails{} }
func (m *PxTelemetryCheckDetails) String() string { return proto.CompactTextString(m) }
func (*PxTelemetryCheckDetails) ProtoMessage()    {}
func (*PxTelemetryCheckDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{1}
}
func (m *PxTelemetryCheckDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxTelemetryCheckDetails.Unmarshal(m, b)
}
func (m *PxTelemetryCheckDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxTelemetryCheckDetails.Marshal(b, m, deterministic)
}
func (dst *PxTelemetryCheckDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxTelemetryCheckDetails.Merge(dst, src)
}
func (m *PxTelemetryCheckDetails) XXX_Size() int {
	return xxx_messageInfo_PxTelemetryCheckDetails.Size(m)
}
func (m *PxTelemetryCheckDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_PxTelemetryCheckDetails.DiscardUnknown(m)
}

var xxx_messageInfo_PxTelemetryCheckDetails proto.InternalMessageInfo

func (m *PxTelemetryCheckDetails) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *PxTelemetryCheckDetails) GetActivationPubKey() string {
	if m != nil {
		return m.ActivationPubKey
	}
	return ""
}

func (m *PxTelemetryCheckDetails) GetProxyUrl() string {
	if m != nil {
		return m.ProxyUrl
	}
	return ""
}

func (m *PxTelemetryCheckDetails) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

// Telemetry objects
// https://wiki.purestorage.com/display/psw/CCM+Cloud+Connection+Troubleshooting+Endpoint+Design
type Telemetry struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Telemetry) Reset()         { *m = Telemetry{} }
func (m *Telemetry) String() string { return proto.CompactTextString(m) }
func (*Telemetry) ProtoMessage()    {}
func (*Telemetry) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{2}
}
func (m *Telemetry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Telemetry.Unmarshal(m, b)
}
func (m *Telemetry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Telemetry.Marshal(b, m, deterministic)
}
func (dst *Telemetry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Telemetry.Merge(dst, src)
}
func (m *Telemetry) XXX_Size() int {
	return xxx_messageInfo_Telemetry.Size(m)
}
func (m *Telemetry) XXX_DiscardUnknown() {
	xxx_messageInfo_Telemetry.DiscardUnknown(m)
}

var xxx_messageInfo_Telemetry proto.InternalMessageInfo

// TelemetryStatusResponse is what is returned in response of a CCM status/troubleshoot endpoint request
// Reference: https://github.dev.purestorage.com/CloudConnect/CCM/blob/trunk/status/src/main/java/com/purestorage/status/response/ConnectionInfoResponse.java
type TelemetryStatusResponse struct {
	Response             *TelemetryStatus `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TelemetryStatusResponse) Reset()         { *m = TelemetryStatusResponse{} }
func (m *TelemetryStatusResponse) String() string { return proto.CompactTextString(m) }
func (*TelemetryStatusResponse) ProtoMessage()    {}
func (*TelemetryStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{3}
}
func (m *TelemetryStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryStatusResponse.Unmarshal(m, b)
}
func (m *TelemetryStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryStatusResponse.Marshal(b, m, deterministic)
}
func (dst *TelemetryStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryStatusResponse.Merge(dst, src)
}
func (m *TelemetryStatusResponse) XXX_Size() int {
	return xxx_messageInfo_TelemetryStatusResponse.Size(m)
}
func (m *TelemetryStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryStatusResponse proto.InternalMessageInfo

func (m *TelemetryStatusResponse) GetResponse() *TelemetryStatus {
	if m != nil {
		return m.Response
	}
	return nil
}

type TelemetryStatus struct {
	// Environment variable indicating internal or external (staging vs production)
	Env string `protobuf:"bytes,1,opt,name=env" json:"env,omitempty"`
	// Product Name is the product name of this appliance.
	ProductName string `protobuf:"bytes,2,opt,name=product_name,json=productName" json:"product_name,omitempty"`
	// Appliance Id  is the appliance id.
	ApplianceId string `protobuf:"bytes,3,opt,name=appliance_id,json=applianceId" json:"appliance_id,omitempty"`
	// Component is status of the component as identified by telemetry
	Component *TelemetryStatusComponent `protobuf:"bytes,4,opt,name=component" json:"component,omitempty"`
	// Ping is status of ping to arcus
	Ping *TelemetryCommonStatus `protobuf:"bytes,5,opt,name=ping" json:"ping,omitempty"`
	// Mediator is status of mediator between CCM and arcus
	Mediator *TelemetryCommonStatus `protobuf:"bytes,6,opt,name=mediator" json:"mediator,omitempty"`
	// ApplianceCert is status of the CCM appliance cert
	ApplianceCert *TelemetryCertStatus `protobuf:"bytes,7,opt,name=appliance_cert,json=applianceCert" json:"appliance_cert,omitempty"`
	// ReleaseCert is status of the CCM release cert
	ReleaseCert *TelemetryCertStatus `protobuf:"bytes,8,opt,name=release_cert,json=releaseCert" json:"release_cert,omitempty"`
	// ServerStatus is status of the CCM server itself
	ServerStatus         *TelemetryServerStatus `protobuf:"bytes,9,opt,name=server_status,json=serverStatus" json:"server_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TelemetryStatus) Reset()         { *m = TelemetryStatus{} }
func (m *TelemetryStatus) String() string { return proto.CompactTextString(m) }
func (*TelemetryStatus) ProtoMessage()    {}
func (*TelemetryStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{4}
}
func (m *TelemetryStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryStatus.Unmarshal(m, b)
}
func (m *TelemetryStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryStatus.Marshal(b, m, deterministic)
}
func (dst *TelemetryStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryStatus.Merge(dst, src)
}
func (m *TelemetryStatus) XXX_Size() int {
	return xxx_messageInfo_TelemetryStatus.Size(m)
}
func (m *TelemetryStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryStatus proto.InternalMessageInfo

func (m *TelemetryStatus) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *TelemetryStatus) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *TelemetryStatus) GetApplianceId() string {
	if m != nil {
		return m.ApplianceId
	}
	return ""
}

func (m *TelemetryStatus) GetComponent() *TelemetryStatusComponent {
	if m != nil {
		return m.Component
	}
	return nil
}

func (m *TelemetryStatus) GetPing() *TelemetryCommonStatus {
	if m != nil {
		return m.Ping
	}
	return nil
}

func (m *TelemetryStatus) GetMediator() *TelemetryCommonStatus {
	if m != nil {
		return m.Mediator
	}
	return nil
}

func (m *TelemetryStatus) GetApplianceCert() *TelemetryCertStatus {
	if m != nil {
		return m.ApplianceCert
	}
	return nil
}

func (m *TelemetryStatus) GetReleaseCert() *TelemetryCertStatus {
	if m != nil {
		return m.ReleaseCert
	}
	return nil
}

func (m *TelemetryStatus) GetServerStatus() *TelemetryServerStatus {
	if m != nil {
		return m.ServerStatus
	}
	return nil
}

// TelemetryStatusComponent is data type for status of a telemetry component
// Reference: https://github.dev.purestorage.com/CloudConnect/CCM/blob/trunk/status/src/main/java/com/purestorage/status/response/ComponentDebugResponse.java
type TelemetryStatusComponent struct {
	// Name is name of the component
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Hostname is the hostname of the node where it is running
	Hostname string `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	// LocalAddress of the component
	LocalAddress         string   `protobuf:"bytes,3,opt,name=local_address,json=localAddress" json:"local_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TelemetryStatusComponent) Reset()         { *m = TelemetryStatusComponent{} }
func (m *TelemetryStatusComponent) String() string { return proto.CompactTextString(m) }
func (*TelemetryStatusComponent) ProtoMessage()    {}
func (*TelemetryStatusComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{5}
}
func (m *TelemetryStatusComponent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryStatusComponent.Unmarshal(m, b)
}
func (m *TelemetryStatusComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryStatusComponent.Marshal(b, m, deterministic)
}
func (dst *TelemetryStatusComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryStatusComponent.Merge(dst, src)
}
func (m *TelemetryStatusComponent) XXX_Size() int {
	return xxx_messageInfo_TelemetryStatusComponent.Size(m)
}
func (m *TelemetryStatusComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryStatusComponent.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryStatusComponent proto.InternalMessageInfo

func (m *TelemetryStatusComponent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TelemetryStatusComponent) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *TelemetryStatusComponent) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

// TelemetryCommonStatus is a common data type that is returned for various statuses in the telemetry response
type TelemetryCommonStatus struct {
	// Status is status. Can be "SUCCESS", "ERROR" or "NOT_FOUND"
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Message is user friendly message
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	// Path is an optional location of where the status component is stored
	Path                 string   `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TelemetryCommonStatus) Reset()         { *m = TelemetryCommonStatus{} }
func (m *TelemetryCommonStatus) String() string { return proto.CompactTextString(m) }
func (*TelemetryCommonStatus) ProtoMessage()    {}
func (*TelemetryCommonStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{6}
}
func (m *TelemetryCommonStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryCommonStatus.Unmarshal(m, b)
}
func (m *TelemetryCommonStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryCommonStatus.Marshal(b, m, deterministic)
}
func (dst *TelemetryCommonStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryCommonStatus.Merge(dst, src)
}
func (m *TelemetryCommonStatus) XXX_Size() int {
	return xxx_messageInfo_TelemetryCommonStatus.Size(m)
}
func (m *TelemetryCommonStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryCommonStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryCommonStatus proto.InternalMessageInfo

func (m *TelemetryCommonStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TelemetryCommonStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TelemetryCommonStatus) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// TelemetryCertStatus is response structure for the certificate status
// Reference: https://github.dev.purestorage.com/CloudConnect/CCM/blob/trunk/core/src/main/java/com/purestorage/core/response/CertDebugResponse.java
type TelemetryCertStatus struct {
	Status               string   `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Version              string   `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	SerialNumber         string   `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	Issuer               string   `protobuf:"bytes,5,opt,name=issuer" json:"issuer,omitempty"`
	SignatureAlg         string   `protobuf:"bytes,6,opt,name=signature_alg,json=signatureAlg" json:"signature_alg,omitempty"`
	ExpirationDate       string   `protobuf:"bytes,7,opt,name=expiration_date,json=expirationDate" json:"expiration_date,omitempty"`
	Subject              string   `protobuf:"bytes,8,opt,name=subject" json:"subject,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TelemetryCertStatus) Reset()         { *m = TelemetryCertStatus{} }
func (m *TelemetryCertStatus) String() string { return proto.CompactTextString(m) }
func (*TelemetryCertStatus) ProtoMessage()    {}
func (*TelemetryCertStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{7}
}
func (m *TelemetryCertStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryCertStatus.Unmarshal(m, b)
}
func (m *TelemetryCertStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryCertStatus.Marshal(b, m, deterministic)
}
func (dst *TelemetryCertStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryCertStatus.Merge(dst, src)
}
func (m *TelemetryCertStatus) XXX_Size() int {
	return xxx_messageInfo_TelemetryCertStatus.Size(m)
}
func (m *TelemetryCertStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryCertStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryCertStatus proto.InternalMessageInfo

func (m *TelemetryCertStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TelemetryCertStatus) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TelemetryCertStatus) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *TelemetryCertStatus) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *TelemetryCertStatus) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *TelemetryCertStatus) GetSignatureAlg() string {
	if m != nil {
		return m.SignatureAlg
	}
	return ""
}

func (m *TelemetryCertStatus) GetExpirationDate() string {
	if m != nil {
		return m.ExpirationDate
	}
	return ""
}

func (m *TelemetryCertStatus) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

// TelemetryServerStatus is response structure for status of the CCM telemetry server
// Reference: https://github.dev.purestorage.com/CloudConnect/CCM/blob/trunk/core/src/main/java/com/purestorage/core/response/ServerStatus.java
type TelemetryServerStatus struct {
	ServerReady          bool     `protobuf:"varint,1,opt,name=server_ready,json=serverReady" json:"server_ready,omitempty"`
	LastLogUploadTime    uint64   `protobuf:"varint,2,opt,name=last_log_upload_time,json=lastLogUploadTime" json:"last_log_upload_time,omitempty"`
	StartTime            string   `protobuf:"bytes,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	UptimeInSeconds      uint64   `protobuf:"varint,4,opt,name=uptimeInSeconds" json:"uptimeInSeconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TelemetryServerStatus) Reset()         { *m = TelemetryServerStatus{} }
func (m *TelemetryServerStatus) String() string { return proto.CompactTextString(m) }
func (*TelemetryServerStatus) ProtoMessage()    {}
func (*TelemetryServerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{8}
}
func (m *TelemetryServerStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryServerStatus.Unmarshal(m, b)
}
func (m *TelemetryServerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryServerStatus.Marshal(b, m, deterministic)
}
func (dst *TelemetryServerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryServerStatus.Merge(dst, src)
}
func (m *TelemetryServerStatus) XXX_Size() int {
	return xxx_messageInfo_TelemetryServerStatus.Size(m)
}
func (m *TelemetryServerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryServerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryServerStatus proto.InternalMessageInfo

func (m *TelemetryServerStatus) GetServerReady() bool {
	if m != nil {
		return m.ServerReady
	}
	return false
}

func (m *TelemetryServerStatus) GetLastLogUploadTime() uint64 {
	if m != nil {
		return m.LastLogUploadTime
	}
	return 0
}

func (m *TelemetryServerStatus) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *TelemetryServerStatus) GetUptimeInSeconds() uint64 {
	if m != nil {
		return m.UptimeInSeconds
	}
	return 0
}

// TelemetryConnectionStatusResponse is what is returned in response of a CCM status/troubleshoot-cloud-connection endpoint
// request
// Reference: https://wiki.purestorage.com/display/psw/CCM+Cloud+Connection+Troubleshooting+Endpoint+Design
type TelemetryConnectionStatusResponse struct {
	Response             *TelemetryConnectionStatus `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TelemetryConnectionStatusResponse) Reset()         { *m = TelemetryConnectionStatusResponse{} }
func (m *TelemetryConnectionStatusResponse) String() string { return proto.CompactTextString(m) }
func (*TelemetryConnectionStatusResponse) ProtoMessage()    {}
func (*TelemetryConnectionStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{9}
}
func (m *TelemetryConnectionStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryConnectionStatusResponse.Unmarshal(m, b)
}
func (m *TelemetryConnectionStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryConnectionStatusResponse.Marshal(b, m, deterministic)
}
func (dst *TelemetryConnectionStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryConnectionStatusResponse.Merge(dst, src)
}
func (m *TelemetryConnectionStatusResponse) XXX_Size() int {
	return xxx_messageInfo_TelemetryConnectionStatusResponse.Size(m)
}
func (m *TelemetryConnectionStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryConnectionStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryConnectionStatusResponse proto.InternalMessageInfo

func (m *TelemetryConnectionStatusResponse) GetResponse() *TelemetryConnectionStatus {
	if m != nil {
		return m.Response
	}
	return nil
}

type TelemetryConnectionStatus struct {
	// TelemetryVersion is the version of the ccm client.
	CcmVersion string `protobuf:"bytes,1,opt,name=ccm_version,json=ccmVersion" json:"ccm_version,omitempty"`
	// Environment variable indicating internal or external (staging vs production)
	Env string `protobuf:"bytes,2,opt,name=env" json:"env,omitempty"`
	// Product Name is the product name of this appliance.
	ProductName string `protobuf:"bytes,3,opt,name=product_name,json=productName" json:"product_name,omitempty"`
	// Appliance Id  is the appliance id.
	ApplianceId string `protobuf:"bytes,4,opt,name=appliance_id,json=applianceId" json:"appliance_id,omitempty"`
	// CertTypeInUse is either appliance or release
	CertTypeInUse string `protobuf:"bytes,5,opt,name=cert_type_in_use,json=certTypeInUse" json:"cert_type_in_use,omitempty"`
	// Checks is an array of checks that were performed during the test.
	Checks []*PxTelemetryCheck `protobuf:"bytes,6,rep,name=checks" json:"checks,omitempty"`
	// Errorcode is the overal error code
	ErrorCode            Telemetry_StatusCode `protobuf:"varint,7,opt,name=error_code,json=errorCode,enum=portworx.api.Telemetry_StatusCode" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TelemetryConnectionStatus) Reset()         { *m = TelemetryConnectionStatus{} }
func (m *TelemetryConnectionStatus) String() string { return proto.CompactTextString(m) }
func (*TelemetryConnectionStatus) ProtoMessage()    {}
func (*TelemetryConnectionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{10}
}
func (m *TelemetryConnectionStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryConnectionStatus.Unmarshal(m, b)
}
func (m *TelemetryConnectionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryConnectionStatus.Marshal(b, m, deterministic)
}
func (dst *TelemetryConnectionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryConnectionStatus.Merge(dst, src)
}
func (m *TelemetryConnectionStatus) XXX_Size() int {
	return xxx_messageInfo_TelemetryConnectionStatus.Size(m)
}
func (m *TelemetryConnectionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryConnectionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryConnectionStatus proto.InternalMessageInfo

func (m *TelemetryConnectionStatus) GetCcmVersion() string {
	if m != nil {
		return m.CcmVersion
	}
	return ""
}

func (m *TelemetryConnectionStatus) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *TelemetryConnectionStatus) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *TelemetryConnectionStatus) GetApplianceId() string {
	if m != nil {
		return m.ApplianceId
	}
	return ""
}

func (m *TelemetryConnectionStatus) GetCertTypeInUse() string {
	if m != nil {
		return m.CertTypeInUse
	}
	return ""
}

func (m *TelemetryConnectionStatus) GetChecks() []*PxTelemetryCheck {
	if m != nil {
		return m.Checks
	}
	return nil
}

func (m *TelemetryConnectionStatus) GetErrorCode() Telemetry_StatusCode {
	if m != nil {
		return m.ErrorCode
	}
	return Telemetry_Unknown
}

// Empty Request
type PxTelemetryStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxTelemetryStatusRequest) Reset()         { *m = PxTelemetryStatusRequest{} }
func (m *PxTelemetryStatusRequest) String() string { return proto.CompactTextString(m) }
func (*PxTelemetryStatusRequest) ProtoMessage()    {}
func (*PxTelemetryStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{11}
}
func (m *PxTelemetryStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxTelemetryStatusRequest.Unmarshal(m, b)
}
func (m *PxTelemetryStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxTelemetryStatusRequest.Marshal(b, m, deterministic)
}
func (dst *PxTelemetryStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxTelemetryStatusRequest.Merge(dst, src)
}
func (m *PxTelemetryStatusRequest) XXX_Size() int {
	return xxx_messageInfo_PxTelemetryStatusRequest.Size(m)
}
func (m *PxTelemetryStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxTelemetryStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxTelemetryStatusRequest proto.InternalMessageInfo

// Response containing the status of the Telemetry server
type PxTelemetryStatusResponse struct {
	// Status is the high level status of telemetry
	Status *TelemetryStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// ConnectionStatus is additional status regarding the connection of telemetry to remote arcus endpoint
	ConnectionStatus     *TelemetryConnectionStatus `protobuf:"bytes,2,opt,name=connection_status,json=connectionStatus" json:"connection_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PxTelemetryStatusResponse) Reset()         { *m = PxTelemetryStatusResponse{} }
func (m *PxTelemetryStatusResponse) String() string { return proto.CompactTextString(m) }
func (*PxTelemetryStatusResponse) ProtoMessage()    {}
func (*PxTelemetryStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{12}
}
func (m *PxTelemetryStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxTelemetryStatusResponse.Unmarshal(m, b)
}
func (m *PxTelemetryStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxTelemetryStatusResponse.Marshal(b, m, deterministic)
}
func (dst *PxTelemetryStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxTelemetryStatusResponse.Merge(dst, src)
}
func (m *PxTelemetryStatusResponse) XXX_Size() int {
	return xxx_messageInfo_PxTelemetryStatusResponse.Size(m)
}
func (m *PxTelemetryStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxTelemetryStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxTelemetryStatusResponse proto.InternalMessageInfo

func (m *PxTelemetryStatusResponse) GetStatus() *TelemetryStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PxTelemetryStatusResponse) GetConnectionStatus() *TelemetryConnectionStatus {
	if m != nil {
		return m.ConnectionStatus
	}
	return nil
}

// Maintenance objects
type Maintenance struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Maintenance) Reset()         { *m = Maintenance{} }
func (m *Maintenance) String() string { return proto.CompactTextString(m) }
func (*Maintenance) ProtoMessage()    {}
func (*Maintenance) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{13}
}
func (m *Maintenance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Maintenance.Unmarshal(m, b)
}
func (m *Maintenance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Maintenance.Marshal(b, m, deterministic)
}
func (dst *Maintenance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Maintenance.Merge(dst, src)
}
func (m *Maintenance) XXX_Size() int {
	return xxx_messageInfo_Maintenance.Size(m)
}
func (m *Maintenance) XXX_DiscardUnknown() {
	xxx_messageInfo_Maintenance.DiscardUnknown(m)
}

var xxx_messageInfo_Maintenance proto.InternalMessageInfo

type CallHome struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CallHome) Reset()         { *m = CallHome{} }
func (m *CallHome) String() string { return proto.CompactTextString(m) }
func (*CallHome) ProtoMessage()    {}
func (*CallHome) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{14}
}
func (m *CallHome) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CallHome.Unmarshal(m, b)
}
func (m *CallHome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CallHome.Marshal(b, m, deterministic)
}
func (dst *CallHome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallHome.Merge(dst, src)
}
func (m *CallHome) XXX_Size() int {
	return xxx_messageInfo_CallHome.Size(m)
}
func (m *CallHome) XXX_DiscardUnknown() {
	xxx_messageInfo_CallHome.DiscardUnknown(m)
}

var xxx_messageInfo_CallHome proto.InternalMessageInfo

// Request to Update Maintenance Ops
type PxMaintenanceOpsUpdateRequest struct {
	// The type of maintenance operation
	Operation            Maintenance_OperationType `protobuf:"varint,1,opt,name=operation,enum=portworx.api.Maintenance_OperationType" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *PxMaintenanceOpsUpdateRequest) Reset()         { *m = PxMaintenanceOpsUpdateRequest{} }
func (m *PxMaintenanceOpsUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*PxMaintenanceOpsUpdateRequest) ProtoMessage()    {}
func (*PxMaintenanceOpsUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{15}
}
func (m *PxMaintenanceOpsUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxMaintenanceOpsUpdateRequest.Unmarshal(m, b)
}
func (m *PxMaintenanceOpsUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxMaintenanceOpsUpdateRequest.Marshal(b, m, deterministic)
}
func (dst *PxMaintenanceOpsUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxMaintenanceOpsUpdateRequest.Merge(dst, src)
}
func (m *PxMaintenanceOpsUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_PxMaintenanceOpsUpdateRequest.Size(m)
}
func (m *PxMaintenanceOpsUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxMaintenanceOpsUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxMaintenanceOpsUpdateRequest proto.InternalMessageInfo

func (m *PxMaintenanceOpsUpdateRequest) GetOperation() Maintenance_OperationType {
	if m != nil {
		return m.Operation
	}
	return Maintenance_Unknown
}

// Response to Update Maintenance Ops
type PxMaintenanceOpsUpdateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxMaintenanceOpsUpdateResponse) Reset()         { *m = PxMaintenanceOpsUpdateResponse{} }
func (m *PxMaintenanceOpsUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*PxMaintenanceOpsUpdateResponse) ProtoMessage()    {}
func (*PxMaintenanceOpsUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{16}
}
func (m *PxMaintenanceOpsUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxMaintenanceOpsUpdateResponse.Unmarshal(m, b)
}
func (m *PxMaintenanceOpsUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxMaintenanceOpsUpdateResponse.Marshal(b, m, deterministic)
}
func (dst *PxMaintenanceOpsUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxMaintenanceOpsUpdateResponse.Merge(dst, src)
}
func (m *PxMaintenanceOpsUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_PxMaintenanceOpsUpdateResponse.Size(m)
}
func (m *PxMaintenanceOpsUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxMaintenanceOpsUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxMaintenanceOpsUpdateResponse proto.InternalMessageInfo

// Request to Update CallHome feature
type PxCallHomeUpdateRequest struct {
	// The type of CallHome operation
	Operation            CallHome_OperationType `protobuf:"varint,1,opt,name=operation,enum=portworx.api.CallHome_OperationType" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PxCallHomeUpdateRequest) Reset()         { *m = PxCallHomeUpdateRequest{} }
func (m *PxCallHomeUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*PxCallHomeUpdateRequest) ProtoMessage()    {}
func (*PxCallHomeUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{17}
}
func (m *PxCallHomeUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxCallHomeUpdateRequest.Unmarshal(m, b)
}
func (m *PxCallHomeUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxCallHomeUpdateRequest.Marshal(b, m, deterministic)
}
func (dst *PxCallHomeUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxCallHomeUpdateRequest.Merge(dst, src)
}
func (m *PxCallHomeUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_PxCallHomeUpdateRequest.Size(m)
}
func (m *PxCallHomeUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxCallHomeUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxCallHomeUpdateRequest proto.InternalMessageInfo

func (m *PxCallHomeUpdateRequest) GetOperation() CallHome_OperationType {
	if m != nil {
		return m.Operation
	}
	return CallHome_Unknown
}

// Response to Update CallHome mode
type PxCallHomeUpdateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxCallHomeUpdateResponse) Reset()         { *m = PxCallHomeUpdateResponse{} }
func (m *PxCallHomeUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*PxCallHomeUpdateResponse) ProtoMessage()    {}
func (*PxCallHomeUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{18}
}
func (m *PxCallHomeUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxCallHomeUpdateResponse.Unmarshal(m, b)
}
func (m *PxCallHomeUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxCallHomeUpdateResponse.Marshal(b, m, deterministic)
}
func (dst *PxCallHomeUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxCallHomeUpdateResponse.Merge(dst, src)
}
func (m *PxCallHomeUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_PxCallHomeUpdateResponse.Size(m)
}
func (m *PxCallHomeUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxCallHomeUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxCallHomeUpdateResponse proto.InternalMessageInfo

// Request for audit method.
type PxAuditRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxAuditRequest) Reset()         { *m = PxAuditRequest{} }
func (m *PxAuditRequest) String() string { return proto.CompactTextString(m) }
func (*PxAuditRequest) ProtoMessage()    {}
func (*PxAuditRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{19}
}
func (m *PxAuditRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxAuditRequest.Unmarshal(m, b)
}
func (m *PxAuditRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxAuditRequest.Marshal(b, m, deterministic)
}
func (dst *PxAuditRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxAuditRequest.Merge(dst, src)
}
func (m *PxAuditRequest) XXX_Size() int {
	return xxx_messageInfo_PxAuditRequest.Size(m)
}
func (m *PxAuditRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxAuditRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxAuditRequest proto.InternalMessageInfo

// Audit result object.
type AuditResult struct {
	// Error String while getting audit result.
	Err string `protobuf:"bytes,1,opt,name=Err" json:"Err,omitempty"`
	// source of the audit.
	AuditSource string `protobuf:"bytes,2,opt,name=AuditSource" json:"AuditSource,omitempty"`
	// status of the audit.
	// AuditStatus will be one of the value from ["green", "yellow", "red"].
	AuditStatus string `protobuf:"bytes,3,opt,name=AuditStatus" json:"AuditStatus,omitempty"`
	// Audit message.
	AuditMessage         string   `protobuf:"bytes,4,opt,name=AuditMessage" json:"AuditMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuditResult) Reset()         { *m = AuditResult{} }
func (m *AuditResult) String() string { return proto.CompactTextString(m) }
func (*AuditResult) ProtoMessage()    {}
func (*AuditResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{20}
}
func (m *AuditResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuditResult.Unmarshal(m, b)
}
func (m *AuditResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuditResult.Marshal(b, m, deterministic)
}
func (dst *AuditResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditResult.Merge(dst, src)
}
func (m *AuditResult) XXX_Size() int {
	return xxx_messageInfo_AuditResult.Size(m)
}
func (m *AuditResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditResult.DiscardUnknown(m)
}

var xxx_messageInfo_AuditResult proto.InternalMessageInfo

func (m *AuditResult) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *AuditResult) GetAuditSource() string {
	if m != nil {
		return m.AuditSource
	}
	return ""
}

func (m *AuditResult) GetAuditStatus() string {
	if m != nil {
		return m.AuditStatus
	}
	return ""
}

func (m *AuditResult) GetAuditMessage() string {
	if m != nil {
		return m.AuditMessage
	}
	return ""
}

// Response message for audit method.
type PxAuditResponse struct {
	Results              []*AuditResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PxAuditResponse) Reset()         { *m = PxAuditResponse{} }
func (m *PxAuditResponse) String() string { return proto.CompactTextString(m) }
func (*PxAuditResponse) ProtoMessage()    {}
func (*PxAuditResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{21}
}
func (m *PxAuditResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxAuditResponse.Unmarshal(m, b)
}
func (m *PxAuditResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxAuditResponse.Marshal(b, m, deterministic)
}
func (dst *PxAuditResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxAuditResponse.Merge(dst, src)
}
func (m *PxAuditResponse) XXX_Size() int {
	return xxx_messageInfo_PxAuditResponse.Size(m)
}
func (m *PxAuditResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxAuditResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxAuditResponse proto.InternalMessageInfo

func (m *PxAuditResponse) GetResults() []*AuditResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// emailconfig object for alert.
type EmailConfig struct {
	// username to authenticate with smtp-server
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// password to authenticate with smtp-server
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	// ip or dns name for smtp server
	ServerHost string `protobuf:"bytes,3,opt,name=server_host,json=serverHost" json:"server_host,omitempty"`
	// port for smtp server
	ServerPort string `protobuf:"bytes,4,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	// recipient of alert emails
	Recipient string `protobuf:"bytes,5,opt,name=recipient" json:"recipient,omitempty"`
	// notify status
	Notify bool `protobuf:"varint,6,opt,name=notify" json:"notify,omitempty"`
	// minimum severity for email trigger
	// it can be one of severity_type_alarm and severity_type_warning
	// from openstorage.api.severitytype enum values.
	Severity api.SeverityType `protobuf:"varint,7,opt,name=severity,enum=openstorage.api.SeverityType" json:"severity,omitempty"`
	// version string to help implement encryption when upgrading
	Version string `protobuf:"bytes,8,opt,name=version" json:"version,omitempty"`
	//  sender of alert emails
	Sender               string   `protobuf:"bytes,9,opt,name=sender" json:"sender,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmailConfig) Reset()         { *m = EmailConfig{} }
func (m *EmailConfig) String() string { return proto.CompactTextString(m) }
func (*EmailConfig) ProtoMessage()    {}
func (*EmailConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{22}
}
func (m *EmailConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmailConfig.Unmarshal(m, b)
}
func (m *EmailConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmailConfig.Marshal(b, m, deterministic)
}
func (dst *EmailConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmailConfig.Merge(dst, src)
}
func (m *EmailConfig) XXX_Size() int {
	return xxx_messageInfo_EmailConfig.Size(m)
}
func (m *EmailConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EmailConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EmailConfig proto.InternalMessageInfo

func (m *EmailConfig) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *EmailConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *EmailConfig) GetServerHost() string {
	if m != nil {
		return m.ServerHost
	}
	return ""
}

func (m *EmailConfig) GetServerPort() string {
	if m != nil {
		return m.ServerPort
	}
	return ""
}

func (m *EmailConfig) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *EmailConfig) GetNotify() bool {
	if m != nil {
		return m.Notify
	}
	return false
}

func (m *EmailConfig) GetSeverity() api.SeverityType {
	if m != nil {
		return m.Severity
	}
	return api.SeverityType_SEVERITY_TYPE_NONE
}

func (m *EmailConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *EmailConfig) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// response message
type KvdbEndPoints struct {
	EndPoint             string   `protobuf:"bytes,1,opt,name=end_point,json=endPoint" json:"end_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KvdbEndPoints) Reset()         { *m = KvdbEndPoints{} }
func (m *KvdbEndPoints) String() string { return proto.CompactTextString(m) }
func (*KvdbEndPoints) ProtoMessage()    {}
func (*KvdbEndPoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{23}
}
func (m *KvdbEndPoints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KvdbEndPoints.Unmarshal(m, b)
}
func (m *KvdbEndPoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KvdbEndPoints.Marshal(b, m, deterministic)
}
func (dst *KvdbEndPoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvdbEndPoints.Merge(dst, src)
}
func (m *KvdbEndPoints) XXX_Size() int {
	return xxx_messageInfo_KvdbEndPoints.Size(m)
}
func (m *KvdbEndPoints) XXX_DiscardUnknown() {
	xxx_messageInfo_KvdbEndPoints.DiscardUnknown(m)
}

var xxx_messageInfo_KvdbEndPoints proto.InternalMessageInfo

func (m *KvdbEndPoints) GetEndPoint() string {
	if m != nil {
		return m.EndPoint
	}
	return ""
}

// kvdb member info
type KvdbMemberInfo struct {
	PeerUrls             []string `protobuf:"bytes,1,rep,name=peer_urls,json=peerUrls" json:"peer_urls,omitempty"`
	ClientUrls           []string `protobuf:"bytes,2,rep,name=client_urls,json=clientUrls" json:"client_urls,omitempty"`
	Leader               bool     `protobuf:"varint,3,opt,name=leader" json:"leader,omitempty"`
	DbSize               int64    `protobuf:"varint,4,opt,name=db_size,json=dbSize" json:"db_size,omitempty"`
	IsHealthy            bool     `protobuf:"varint,5,opt,name=is_healthy,json=isHealthy" json:"is_healthy,omitempty"`
	Id                   string   `protobuf:"bytes,6,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KvdbMemberInfo) Reset()         { *m = KvdbMemberInfo{} }
func (m *KvdbMemberInfo) String() string { return proto.CompactTextString(m) }
func (*KvdbMemberInfo) ProtoMessage()    {}
func (*KvdbMemberInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{24}
}
func (m *KvdbMemberInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KvdbMemberInfo.Unmarshal(m, b)
}
func (m *KvdbMemberInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KvdbMemberInfo.Marshal(b, m, deterministic)
}
func (dst *KvdbMemberInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvdbMemberInfo.Merge(dst, src)
}
func (m *KvdbMemberInfo) XXX_Size() int {
	return xxx_messageInfo_KvdbMemberInfo.Size(m)
}
func (m *KvdbMemberInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_KvdbMemberInfo.DiscardUnknown(m)
}

var xxx_messageInfo_KvdbMemberInfo proto.InternalMessageInfo

func (m *KvdbMemberInfo) GetPeerUrls() []string {
	if m != nil {
		return m.PeerUrls
	}
	return nil
}

func (m *KvdbMemberInfo) GetClientUrls() []string {
	if m != nil {
		return m.ClientUrls
	}
	return nil
}

func (m *KvdbMemberInfo) GetLeader() bool {
	if m != nil {
		return m.Leader
	}
	return false
}

func (m *KvdbMemberInfo) GetDbSize() int64 {
	if m != nil {
		return m.DbSize
	}
	return 0
}

func (m *KvdbMemberInfo) GetIsHealthy() bool {
	if m != nil {
		return m.IsHealthy
	}
	return false
}

func (m *KvdbMemberInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// request message to set email config for alert
type PxSetEmailConfigRequest struct {
	EmailConfig          *EmailConfig `protobuf:"bytes,1,opt,name=email_config,json=emailConfig" json:"email_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PxSetEmailConfigRequest) Reset()         { *m = PxSetEmailConfigRequest{} }
func (m *PxSetEmailConfigRequest) String() string { return proto.CompactTextString(m) }
func (*PxSetEmailConfigRequest) ProtoMessage()    {}
func (*PxSetEmailConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{25}
}
func (m *PxSetEmailConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxSetEmailConfigRequest.Unmarshal(m, b)
}
func (m *PxSetEmailConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxSetEmailConfigRequest.Marshal(b, m, deterministic)
}
func (dst *PxSetEmailConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxSetEmailConfigRequest.Merge(dst, src)
}
func (m *PxSetEmailConfigRequest) XXX_Size() int {
	return xxx_messageInfo_PxSetEmailConfigRequest.Size(m)
}
func (m *PxSetEmailConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxSetEmailConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxSetEmailConfigRequest proto.InternalMessageInfo

func (m *PxSetEmailConfigRequest) GetEmailConfig() *EmailConfig {
	if m != nil {
		return m.EmailConfig
	}
	return nil
}

// response message to set email config for alert
type PxSetEmailConfigResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxSetEmailConfigResponse) Reset()         { *m = PxSetEmailConfigResponse{} }
func (m *PxSetEmailConfigResponse) String() string { return proto.CompactTextString(m) }
func (*PxSetEmailConfigResponse) ProtoMessage()    {}
func (*PxSetEmailConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{26}
}
func (m *PxSetEmailConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxSetEmailConfigResponse.Unmarshal(m, b)
}
func (m *PxSetEmailConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxSetEmailConfigResponse.Marshal(b, m, deterministic)
}
func (dst *PxSetEmailConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxSetEmailConfigResponse.Merge(dst, src)
}
func (m *PxSetEmailConfigResponse) XXX_Size() int {
	return xxx_messageInfo_PxSetEmailConfigResponse.Size(m)
}
func (m *PxSetEmailConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxSetEmailConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxSetEmailConfigResponse proto.InternalMessageInfo

// request message to get email config for alert
type PxGetEmailConfigRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxGetEmailConfigRequest) Reset()         { *m = PxGetEmailConfigRequest{} }
func (m *PxGetEmailConfigRequest) String() string { return proto.CompactTextString(m) }
func (*PxGetEmailConfigRequest) ProtoMessage()    {}
func (*PxGetEmailConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{27}
}
func (m *PxGetEmailConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxGetEmailConfigRequest.Unmarshal(m, b)
}
func (m *PxGetEmailConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxGetEmailConfigRequest.Marshal(b, m, deterministic)
}
func (dst *PxGetEmailConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxGetEmailConfigRequest.Merge(dst, src)
}
func (m *PxGetEmailConfigRequest) XXX_Size() int {
	return xxx_messageInfo_PxGetEmailConfigRequest.Size(m)
}
func (m *PxGetEmailConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxGetEmailConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxGetEmailConfigRequest proto.InternalMessageInfo

// response message to get email config for alert
type PxGetEmailConfigResponse struct {
	EmailConfig          *EmailConfig `protobuf:"bytes,1,opt,name=email_config,json=emailConfig" json:"email_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PxGetEmailConfigResponse) Reset()         { *m = PxGetEmailConfigResponse{} }
func (m *PxGetEmailConfigResponse) String() string { return proto.CompactTextString(m) }
func (*PxGetEmailConfigResponse) ProtoMessage()    {}
func (*PxGetEmailConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{28}
}
func (m *PxGetEmailConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxGetEmailConfigResponse.Unmarshal(m, b)
}
func (m *PxGetEmailConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxGetEmailConfigResponse.Marshal(b, m, deterministic)
}
func (dst *PxGetEmailConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxGetEmailConfigResponse.Merge(dst, src)
}
func (m *PxGetEmailConfigResponse) XXX_Size() int {
	return xxx_messageInfo_PxGetEmailConfigResponse.Size(m)
}
func (m *PxGetEmailConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxGetEmailConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxGetEmailConfigResponse proto.InternalMessageInfo

func (m *PxGetEmailConfigResponse) GetEmailConfig() *EmailConfig {
	if m != nil {
		return m.EmailConfig
	}
	return nil
}

// request message to delete email config for alert
type PxDeleteEmailConfigRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxDeleteEmailConfigRequest) Reset()         { *m = PxDeleteEmailConfigRequest{} }
func (m *PxDeleteEmailConfigRequest) String() string { return proto.CompactTextString(m) }
func (*PxDeleteEmailConfigRequest) ProtoMessage()    {}
func (*PxDeleteEmailConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{29}
}
func (m *PxDeleteEmailConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDeleteEmailConfigRequest.Unmarshal(m, b)
}
func (m *PxDeleteEmailConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDeleteEmailConfigRequest.Marshal(b, m, deterministic)
}
func (dst *PxDeleteEmailConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDeleteEmailConfigRequest.Merge(dst, src)
}
func (m *PxDeleteEmailConfigRequest) XXX_Size() int {
	return xxx_messageInfo_PxDeleteEmailConfigRequest.Size(m)
}
func (m *PxDeleteEmailConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDeleteEmailConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxDeleteEmailConfigRequest proto.InternalMessageInfo

// response message to delete email config for alert
type PxDeleteEmailConfigResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxDeleteEmailConfigResponse) Reset()         { *m = PxDeleteEmailConfigResponse{} }
func (m *PxDeleteEmailConfigResponse) String() string { return proto.CompactTextString(m) }
func (*PxDeleteEmailConfigResponse) ProtoMessage()    {}
func (*PxDeleteEmailConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{30}
}
func (m *PxDeleteEmailConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDeleteEmailConfigResponse.Unmarshal(m, b)
}
func (m *PxDeleteEmailConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDeleteEmailConfigResponse.Marshal(b, m, deterministic)
}
func (dst *PxDeleteEmailConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDeleteEmailConfigResponse.Merge(dst, src)
}
func (m *PxDeleteEmailConfigResponse) XXX_Size() int {
	return xxx_messageInfo_PxDeleteEmailConfigResponse.Size(m)
}
func (m *PxDeleteEmailConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDeleteEmailConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxDeleteEmailConfigResponse proto.InternalMessageInfo

// slackconfig object for alert.
type SlackConfig struct {
	// webhook to talk to
	Webhookurl string `protobuf:"bytes,1,opt,name=webhookurl" json:"webhookurl,omitempty"`
	// minimum severity for slack trigger
	// it can be one of severity_type_alarm and severity_type_warning
	// from openstorage.api.severitytype enum values.
	Severity             api.SeverityType `protobuf:"varint,7,opt,name=severity,enum=openstorage.api.SeverityType" json:"severity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SlackConfig) Reset()         { *m = SlackConfig{} }
func (m *SlackConfig) String() string { return proto.CompactTextString(m) }
func (*SlackConfig) ProtoMessage()    {}
func (*SlackConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{31}
}
func (m *SlackConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SlackConfig.Unmarshal(m, b)
}
func (m *SlackConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SlackConfig.Marshal(b, m, deterministic)
}
func (dst *SlackConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlackConfig.Merge(dst, src)
}
func (m *SlackConfig) XXX_Size() int {
	return xxx_messageInfo_SlackConfig.Size(m)
}
func (m *SlackConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SlackConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SlackConfig proto.InternalMessageInfo

func (m *SlackConfig) GetWebhookurl() string {
	if m != nil {
		return m.Webhookurl
	}
	return ""
}

func (m *SlackConfig) GetSeverity() api.SeverityType {
	if m != nil {
		return m.Severity
	}
	return api.SeverityType_SEVERITY_TYPE_NONE
}

// request message to set slack config for alert
type PxSetSlackConfigRequest struct {
	SlackConfig          *SlackConfig `protobuf:"bytes,1,opt,name=slack_config,json=slackConfig" json:"slack_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PxSetSlackConfigRequest) Reset()         { *m = PxSetSlackConfigRequest{} }
func (m *PxSetSlackConfigRequest) String() string { return proto.CompactTextString(m) }
func (*PxSetSlackConfigRequest) ProtoMessage()    {}
func (*PxSetSlackConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{32}
}
func (m *PxSetSlackConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxSetSlackConfigRequest.Unmarshal(m, b)
}
func (m *PxSetSlackConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxSetSlackConfigRequest.Marshal(b, m, deterministic)
}
func (dst *PxSetSlackConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxSetSlackConfigRequest.Merge(dst, src)
}
func (m *PxSetSlackConfigRequest) XXX_Size() int {
	return xxx_messageInfo_PxSetSlackConfigRequest.Size(m)
}
func (m *PxSetSlackConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxSetSlackConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxSetSlackConfigRequest proto.InternalMessageInfo

func (m *PxSetSlackConfigRequest) GetSlackConfig() *SlackConfig {
	if m != nil {
		return m.SlackConfig
	}
	return nil
}

// response message to set slack config for alert
type PxSetSlackConfigResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxSetSlackConfigResponse) Reset()         { *m = PxSetSlackConfigResponse{} }
func (m *PxSetSlackConfigResponse) String() string { return proto.CompactTextString(m) }
func (*PxSetSlackConfigResponse) ProtoMessage()    {}
func (*PxSetSlackConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{33}
}
func (m *PxSetSlackConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxSetSlackConfigResponse.Unmarshal(m, b)
}
func (m *PxSetSlackConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxSetSlackConfigResponse.Marshal(b, m, deterministic)
}
func (dst *PxSetSlackConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxSetSlackConfigResponse.Merge(dst, src)
}
func (m *PxSetSlackConfigResponse) XXX_Size() int {
	return xxx_messageInfo_PxSetSlackConfigResponse.Size(m)
}
func (m *PxSetSlackConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxSetSlackConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxSetSlackConfigResponse proto.InternalMessageInfo

// request message to delete slack config for alert
type PxDeleteSlackConfigRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxDeleteSlackConfigRequest) Reset()         { *m = PxDeleteSlackConfigRequest{} }
func (m *PxDeleteSlackConfigRequest) String() string { return proto.CompactTextString(m) }
func (*PxDeleteSlackConfigRequest) ProtoMessage()    {}
func (*PxDeleteSlackConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{34}
}
func (m *PxDeleteSlackConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDeleteSlackConfigRequest.Unmarshal(m, b)
}
func (m *PxDeleteSlackConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDeleteSlackConfigRequest.Marshal(b, m, deterministic)
}
func (dst *PxDeleteSlackConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDeleteSlackConfigRequest.Merge(dst, src)
}
func (m *PxDeleteSlackConfigRequest) XXX_Size() int {
	return xxx_messageInfo_PxDeleteSlackConfigRequest.Size(m)
}
func (m *PxDeleteSlackConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDeleteSlackConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxDeleteSlackConfigRequest proto.InternalMessageInfo

// response message to delete slack config for alert
type PxDeleteSlackConfigResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxDeleteSlackConfigResponse) Reset()         { *m = PxDeleteSlackConfigResponse{} }
func (m *PxDeleteSlackConfigResponse) String() string { return proto.CompactTextString(m) }
func (*PxDeleteSlackConfigResponse) ProtoMessage()    {}
func (*PxDeleteSlackConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{35}
}
func (m *PxDeleteSlackConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDeleteSlackConfigResponse.Unmarshal(m, b)
}
func (m *PxDeleteSlackConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDeleteSlackConfigResponse.Marshal(b, m, deterministic)
}
func (dst *PxDeleteSlackConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDeleteSlackConfigResponse.Merge(dst, src)
}
func (m *PxDeleteSlackConfigResponse) XXX_Size() int {
	return xxx_messageInfo_PxDeleteSlackConfigResponse.Size(m)
}
func (m *PxDeleteSlackConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDeleteSlackConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxDeleteSlackConfigResponse proto.InternalMessageInfo

// request message to get slack config for alert
type PxGetSlackConfigRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxGetSlackConfigRequest) Reset()         { *m = PxGetSlackConfigRequest{} }
func (m *PxGetSlackConfigRequest) String() string { return proto.CompactTextString(m) }
func (*PxGetSlackConfigRequest) ProtoMessage()    {}
func (*PxGetSlackConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{36}
}
func (m *PxGetSlackConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxGetSlackConfigRequest.Unmarshal(m, b)
}
func (m *PxGetSlackConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxGetSlackConfigRequest.Marshal(b, m, deterministic)
}
func (dst *PxGetSlackConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxGetSlackConfigRequest.Merge(dst, src)
}
func (m *PxGetSlackConfigRequest) XXX_Size() int {
	return xxx_messageInfo_PxGetSlackConfigRequest.Size(m)
}
func (m *PxGetSlackConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxGetSlackConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxGetSlackConfigRequest proto.InternalMessageInfo

// response message to get slack config for alert
type PxGetSlackConfigResponse struct {
	SlackConfig          *SlackConfig `protobuf:"bytes,1,opt,name=slack_config,json=slackConfig" json:"slack_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PxGetSlackConfigResponse) Reset()         { *m = PxGetSlackConfigResponse{} }
func (m *PxGetSlackConfigResponse) String() string { return proto.CompactTextString(m) }
func (*PxGetSlackConfigResponse) ProtoMessage()    {}
func (*PxGetSlackConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{37}
}
func (m *PxGetSlackConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxGetSlackConfigResponse.Unmarshal(m, b)
}
func (m *PxGetSlackConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxGetSlackConfigResponse.Marshal(b, m, deterministic)
}
func (dst *PxGetSlackConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxGetSlackConfigResponse.Merge(dst, src)
}
func (m *PxGetSlackConfigResponse) XXX_Size() int {
	return xxx_messageInfo_PxGetSlackConfigResponse.Size(m)
}
func (m *PxGetSlackConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxGetSlackConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxGetSlackConfigResponse proto.InternalMessageInfo

func (m *PxGetSlackConfigResponse) GetSlackConfig() *SlackConfig {
	if m != nil {
		return m.SlackConfig
	}
	return nil
}

// Request message to exit or stop Px daemon.
type PxExitDaemonRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxExitDaemonRequest) Reset()         { *m = PxExitDaemonRequest{} }
func (m *PxExitDaemonRequest) String() string { return proto.CompactTextString(m) }
func (*PxExitDaemonRequest) ProtoMessage()    {}
func (*PxExitDaemonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{38}
}
func (m *PxExitDaemonRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxExitDaemonRequest.Unmarshal(m, b)
}
func (m *PxExitDaemonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxExitDaemonRequest.Marshal(b, m, deterministic)
}
func (dst *PxExitDaemonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxExitDaemonRequest.Merge(dst, src)
}
func (m *PxExitDaemonRequest) XXX_Size() int {
	return xxx_messageInfo_PxExitDaemonRequest.Size(m)
}
func (m *PxExitDaemonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxExitDaemonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxExitDaemonRequest proto.InternalMessageInfo

// Response message to exit or stop Px daemon.
type PxExitDaemonResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxExitDaemonResponse) Reset()         { *m = PxExitDaemonResponse{} }
func (m *PxExitDaemonResponse) String() string { return proto.CompactTextString(m) }
func (*PxExitDaemonResponse) ProtoMessage()    {}
func (*PxExitDaemonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{39}
}
func (m *PxExitDaemonResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxExitDaemonResponse.Unmarshal(m, b)
}
func (m *PxExitDaemonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxExitDaemonResponse.Marshal(b, m, deterministic)
}
func (dst *PxExitDaemonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxExitDaemonResponse.Merge(dst, src)
}
func (m *PxExitDaemonResponse) XXX_Size() int {
	return xxx_messageInfo_PxExitDaemonResponse.Size(m)
}
func (m *PxExitDaemonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxExitDaemonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxExitDaemonResponse proto.InternalMessageInfo

// Request message for fetching kvdb endpoints
type PxKvdbEndpointRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxKvdbEndpointRequest) Reset()         { *m = PxKvdbEndpointRequest{} }
func (m *PxKvdbEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*PxKvdbEndpointRequest) ProtoMessage()    {}
func (*PxKvdbEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{40}
}
func (m *PxKvdbEndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxKvdbEndpointRequest.Unmarshal(m, b)
}
func (m *PxKvdbEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxKvdbEndpointRequest.Marshal(b, m, deterministic)
}
func (dst *PxKvdbEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxKvdbEndpointRequest.Merge(dst, src)
}
func (m *PxKvdbEndpointRequest) XXX_Size() int {
	return xxx_messageInfo_PxKvdbEndpointRequest.Size(m)
}
func (m *PxKvdbEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxKvdbEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxKvdbEndpointRequest proto.InternalMessageInfo

// Response message for fetching kvdb endpoints
type PxKvdbEndpointResponse struct {
	KvdbEndPoints        []*KvdbEndPoints `protobuf:"bytes,1,rep,name=kvdb_end_points,json=kvdbEndPoints" json:"kvdb_end_points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PxKvdbEndpointResponse) Reset()         { *m = PxKvdbEndpointResponse{} }
func (m *PxKvdbEndpointResponse) String() string { return proto.CompactTextString(m) }
func (*PxKvdbEndpointResponse) ProtoMessage()    {}
func (*PxKvdbEndpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{41}
}
func (m *PxKvdbEndpointResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxKvdbEndpointResponse.Unmarshal(m, b)
}
func (m *PxKvdbEndpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxKvdbEndpointResponse.Marshal(b, m, deterministic)
}
func (dst *PxKvdbEndpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxKvdbEndpointResponse.Merge(dst, src)
}
func (m *PxKvdbEndpointResponse) XXX_Size() int {
	return xxx_messageInfo_PxKvdbEndpointResponse.Size(m)
}
func (m *PxKvdbEndpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxKvdbEndpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxKvdbEndpointResponse proto.InternalMessageInfo

func (m *PxKvdbEndpointResponse) GetKvdbEndPoints() []*KvdbEndPoints {
	if m != nil {
		return m.KvdbEndPoints
	}
	return nil
}

// Pool cache enable/disable request.
type PxToggleStatusRequest struct {
	// Pool ID
	PoolId int64 `protobuf:"varint,1,opt,name=pool_id,json=poolId" json:"pool_id,omitempty"`
	// defines Storage Pool Cache status
	Enable               bool     `protobuf:"varint,2,opt,name=enable" json:"enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxToggleStatusRequest) Reset()         { *m = PxToggleStatusRequest{} }
func (m *PxToggleStatusRequest) String() string { return proto.CompactTextString(m) }
func (*PxToggleStatusRequest) ProtoMessage()    {}
func (*PxToggleStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{42}
}
func (m *PxToggleStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxToggleStatusRequest.Unmarshal(m, b)
}
func (m *PxToggleStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxToggleStatusRequest.Marshal(b, m, deterministic)
}
func (dst *PxToggleStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxToggleStatusRequest.Merge(dst, src)
}
func (m *PxToggleStatusRequest) XXX_Size() int {
	return xxx_messageInfo_PxToggleStatusRequest.Size(m)
}
func (m *PxToggleStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxToggleStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxToggleStatusRequest proto.InternalMessageInfo

func (m *PxToggleStatusRequest) GetPoolId() int64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *PxToggleStatusRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

// Pool cache enable/disable response.
type PxToggleStatusResponse struct {
	// TODO: should we carry this message?
	// cache is supported only by lvm driver and in case of successful cache attachment
	// it just returns "successful" string, we can just generate it if there is no error
	Message              string   `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxToggleStatusResponse) Reset()         { *m = PxToggleStatusResponse{} }
func (m *PxToggleStatusResponse) String() string { return proto.CompactTextString(m) }
func (*PxToggleStatusResponse) ProtoMessage()    {}
func (*PxToggleStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{43}
}
func (m *PxToggleStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxToggleStatusResponse.Unmarshal(m, b)
}
func (m *PxToggleStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxToggleStatusResponse.Marshal(b, m, deterministic)
}
func (dst *PxToggleStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxToggleStatusResponse.Merge(dst, src)
}
func (m *PxToggleStatusResponse) XXX_Size() int {
	return xxx_messageInfo_PxToggleStatusResponse.Size(m)
}
func (m *PxToggleStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxToggleStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxToggleStatusResponse proto.InternalMessageInfo

func (m *PxToggleStatusResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Pool cache info request.
type PxCacheInfoRequest struct {
	// Pool ID
	PoolId               int64    `protobuf:"varint,1,opt,name=pool_id,json=poolId" json:"pool_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxCacheInfoRequest) Reset()         { *m = PxCacheInfoRequest{} }
func (m *PxCacheInfoRequest) String() string { return proto.CompactTextString(m) }
func (*PxCacheInfoRequest) ProtoMessage()    {}
func (*PxCacheInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{44}
}
func (m *PxCacheInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxCacheInfoRequest.Unmarshal(m, b)
}
func (m *PxCacheInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxCacheInfoRequest.Marshal(b, m, deterministic)
}
func (dst *PxCacheInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxCacheInfoRequest.Merge(dst, src)
}
func (m *PxCacheInfoRequest) XXX_Size() int {
	return xxx_messageInfo_PxCacheInfoRequest.Size(m)
}
func (m *PxCacheInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxCacheInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxCacheInfoRequest proto.InternalMessageInfo

func (m *PxCacheInfoRequest) GetPoolId() int64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

// Pool cache info response.
type PxCacheInfoResponse struct {
	Result               *CacheInfo `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PxCacheInfoResponse) Reset()         { *m = PxCacheInfoResponse{} }
func (m *PxCacheInfoResponse) String() string { return proto.CompactTextString(m) }
func (*PxCacheInfoResponse) ProtoMessage()    {}
func (*PxCacheInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{45}
}
func (m *PxCacheInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxCacheInfoResponse.Unmarshal(m, b)
}
func (m *PxCacheInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxCacheInfoResponse.Marshal(b, m, deterministic)
}
func (dst *PxCacheInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxCacheInfoResponse.Merge(dst, src)
}
func (m *PxCacheInfoResponse) XXX_Size() int {
	return xxx_messageInfo_PxCacheInfoResponse.Size(m)
}
func (m *PxCacheInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxCacheInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxCacheInfoResponse proto.InternalMessageInfo

func (m *PxCacheInfoResponse) GetResult() *CacheInfo {
	if m != nil {
		return m.Result
	}
	return nil
}

// CacheInfo provides statistics and config params of a cached lvm lv
type CacheInfo struct {
	// pool is the pool id for which caching is attached to
	// TODO: it is better to name it pool_id but it is remained unchanged
	Pool int64 `protobuf:"varint,1,opt,name=pool" json:"pool,omitempty"`
	// members lists all the cache devices used for caching
	Members []string `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	// enabled flags whether the cache is attached and active or detached
	Enabled bool `protobuf:"varint,3,opt,name=enabled" json:"enabled,omitempty"`
	// cache_total_blocks total cache blocks
	CacheTotalBlocks uint64 `protobuf:"varint,4,opt,name=cache_total_blocks,json=cacheTotalBlocks" json:"cache_total_blocks,omitempty"`
	// cache_used_blocks used cache blocks
	CacheUsedBlocks uint64 `protobuf:"varint,5,opt,name=cache_used_blocks,json=cacheUsedBlocks" json:"cache_used_blocks,omitempty"`
	// cache_dirty_blocks dirty cache blocks
	CacheDirtyBlocks uint64 `protobuf:"varint,6,opt,name=cache_dirty_blocks,json=cacheDirtyBlocks" json:"cache_dirty_blocks,omitempty"`
	// cache_read_hits read hits
	CacheReadHits uint64 `protobuf:"varint,7,opt,name=cache_read_hits,json=cacheReadHits" json:"cache_read_hits,omitempty"`
	// cache_read_misses read misses
	CacheReadMisses uint64 `protobuf:"varint,8,opt,name=cache_read_misses,json=cacheReadMisses" json:"cache_read_misses,omitempty"`
	// cache_write_hits write hits
	CacheWriteHits uint64 `protobuf:"varint,9,opt,name=cache_write_hits,json=cacheWriteHits" json:"cache_write_hits,omitempty"`
	// cache_write_misses write miss
	CacheWriteMisses uint64 `protobuf:"varint,10,opt,name=cache_write_misses,json=cacheWriteMisses" json:"cache_write_misses,omitempty"`
	// cache_chunk_size is the configured cache block size
	CacheChunkSize uint64 `protobuf:"varint,11,opt,name=cache_chunk_size,json=cacheChunkSize" json:"cache_chunk_size,omitempty"`
	// cache_mode is writeback, writethrough etc
	Cachemode string `protobuf:"bytes,12,opt,name=cachemode" json:"cachemode,omitempty"`
	// cache_policy is more internal config param, mq, smq etc
	CachePolicy string `protobuf:"bytes,13,opt,name=cache_policy,json=cachePolicy" json:"cache_policy,omitempty"`
	// cache_settings is additional config param, for the assigned policy
	CacheSettings string `protobuf:"bytes,14,opt,name=cache_settings,json=cacheSettings" json:"cache_settings,omitempty"`
	// migration stats
	// migrate_promote is count of blocks promoted to cache
	CachePromotion uint64 `protobuf:"varint,15,opt,name=cache_promotion,json=cachePromotion" json:"cache_promotion,omitempty"`
	// migrate_demote is count of blocks demoted from cache
	CacheDemotion uint64 `protobuf:"varint,16,opt,name=cache_demotion,json=cacheDemotion" json:"cache_demotion,omitempty"`
	// cache approx internal IO bandwidth
	CacheIoMbps          uint64   `protobuf:"varint,17,opt,name=cache_io_mbps,json=cacheIoMbps" json:"cache_io_mbps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheInfo) Reset()         { *m = CacheInfo{} }
func (m *CacheInfo) String() string { return proto.CompactTextString(m) }
func (*CacheInfo) ProtoMessage()    {}
func (*CacheInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{46}
}
func (m *CacheInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CacheInfo.Unmarshal(m, b)
}
func (m *CacheInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CacheInfo.Marshal(b, m, deterministic)
}
func (dst *CacheInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheInfo.Merge(dst, src)
}
func (m *CacheInfo) XXX_Size() int {
	return xxx_messageInfo_CacheInfo.Size(m)
}
func (m *CacheInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CacheInfo proto.InternalMessageInfo

func (m *CacheInfo) GetPool() int64 {
	if m != nil {
		return m.Pool
	}
	return 0
}

func (m *CacheInfo) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CacheInfo) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *CacheInfo) GetCacheTotalBlocks() uint64 {
	if m != nil {
		return m.CacheTotalBlocks
	}
	return 0
}

func (m *CacheInfo) GetCacheUsedBlocks() uint64 {
	if m != nil {
		return m.CacheUsedBlocks
	}
	return 0
}

func (m *CacheInfo) GetCacheDirtyBlocks() uint64 {
	if m != nil {
		return m.CacheDirtyBlocks
	}
	return 0
}

func (m *CacheInfo) GetCacheReadHits() uint64 {
	if m != nil {
		return m.CacheReadHits
	}
	return 0
}

func (m *CacheInfo) GetCacheReadMisses() uint64 {
	if m != nil {
		return m.CacheReadMisses
	}
	return 0
}

func (m *CacheInfo) GetCacheWriteHits() uint64 {
	if m != nil {
		return m.CacheWriteHits
	}
	return 0
}

func (m *CacheInfo) GetCacheWriteMisses() uint64 {
	if m != nil {
		return m.CacheWriteMisses
	}
	return 0
}

func (m *CacheInfo) GetCacheChunkSize() uint64 {
	if m != nil {
		return m.CacheChunkSize
	}
	return 0
}

func (m *CacheInfo) GetCachemode() string {
	if m != nil {
		return m.Cachemode
	}
	return ""
}

func (m *CacheInfo) GetCachePolicy() string {
	if m != nil {
		return m.CachePolicy
	}
	return ""
}

func (m *CacheInfo) GetCacheSettings() string {
	if m != nil {
		return m.CacheSettings
	}
	return ""
}

func (m *CacheInfo) GetCachePromotion() uint64 {
	if m != nil {
		return m.CachePromotion
	}
	return 0
}

func (m *CacheInfo) GetCacheDemotion() uint64 {
	if m != nil {
		return m.CacheDemotion
	}
	return 0
}

func (m *CacheInfo) GetCacheIoMbps() uint64 {
	if m != nil {
		return m.CacheIoMbps
	}
	return 0
}

// Request message for ferching kvdb member info
type PxKvdbMemberRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxKvdbMemberRequest) Reset()         { *m = PxKvdbMemberRequest{} }
func (m *PxKvdbMemberRequest) String() string { return proto.CompactTextString(m) }
func (*PxKvdbMemberRequest) ProtoMessage()    {}
func (*PxKvdbMemberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{47}
}
func (m *PxKvdbMemberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxKvdbMemberRequest.Unmarshal(m, b)
}
func (m *PxKvdbMemberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxKvdbMemberRequest.Marshal(b, m, deterministic)
}
func (dst *PxKvdbMemberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxKvdbMemberRequest.Merge(dst, src)
}
func (m *PxKvdbMemberRequest) XXX_Size() int {
	return xxx_messageInfo_PxKvdbMemberRequest.Size(m)
}
func (m *PxKvdbMemberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxKvdbMemberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxKvdbMemberRequest proto.InternalMessageInfo

// Response message for ferching kvdb member info
type PxKvdbMemberResponse struct {
	// Here string is the node id.
	KvdbMemberInfo       map[string]*KvdbMemberInfo `protobuf:"bytes,1,rep,name=kvdb_member_info,json=kvdbMemberInfo" json:"kvdb_member_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PxKvdbMemberResponse) Reset()         { *m = PxKvdbMemberResponse{} }
func (m *PxKvdbMemberResponse) String() string { return proto.CompactTextString(m) }
func (*PxKvdbMemberResponse) ProtoMessage()    {}
func (*PxKvdbMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{48}
}
func (m *PxKvdbMemberResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxKvdbMemberResponse.Unmarshal(m, b)
}
func (m *PxKvdbMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxKvdbMemberResponse.Marshal(b, m, deterministic)
}
func (dst *PxKvdbMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxKvdbMemberResponse.Merge(dst, src)
}
func (m *PxKvdbMemberResponse) XXX_Size() int {
	return xxx_messageInfo_PxKvdbMemberResponse.Size(m)
}
func (m *PxKvdbMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxKvdbMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxKvdbMemberResponse proto.InternalMessageInfo

func (m *PxKvdbMemberResponse) GetKvdbMemberInfo() map[string]*KvdbMemberInfo {
	if m != nil {
		return m.KvdbMemberInfo
	}
	return nil
}

// PxCacheConfigRequest carries cache parameters to set
type PxCacheConfigRequest struct {
	Config               *CacheConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PxCacheConfigRequest) Reset()         { *m = PxCacheConfigRequest{} }
func (m *PxCacheConfigRequest) String() string { return proto.CompactTextString(m) }
func (*PxCacheConfigRequest) ProtoMessage()    {}
func (*PxCacheConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{49}
}
func (m *PxCacheConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxCacheConfigRequest.Unmarshal(m, b)
}
func (m *PxCacheConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxCacheConfigRequest.Marshal(b, m, deterministic)
}
func (dst *PxCacheConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxCacheConfigRequest.Merge(dst, src)
}
func (m *PxCacheConfigRequest) XXX_Size() int {
	return xxx_messageInfo_PxCacheConfigRequest.Size(m)
}
func (m *PxCacheConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxCacheConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxCacheConfigRequest proto.InternalMessageInfo

func (m *PxCacheConfigRequest) GetConfig() *CacheConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// PxCacheConfigResponse returns current CacheInfo entity which was updated by PxCacheConfigRequest
type PxCacheConfigResponse struct {
	Result               *CacheInfo `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PxCacheConfigResponse) Reset()         { *m = PxCacheConfigResponse{} }
func (m *PxCacheConfigResponse) String() string { return proto.CompactTextString(m) }
func (*PxCacheConfigResponse) ProtoMessage()    {}
func (*PxCacheConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{50}
}
func (m *PxCacheConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxCacheConfigResponse.Unmarshal(m, b)
}
func (m *PxCacheConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxCacheConfigResponse.Marshal(b, m, deterministic)
}
func (dst *PxCacheConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxCacheConfigResponse.Merge(dst, src)
}
func (m *PxCacheConfigResponse) XXX_Size() int {
	return xxx_messageInfo_PxCacheConfigResponse.Size(m)
}
func (m *PxCacheConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxCacheConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxCacheConfigResponse proto.InternalMessageInfo

func (m *PxCacheConfigResponse) GetResult() *CacheInfo {
	if m != nil {
		return m.Result
	}
	return nil
}

// CacheConfig represents modifiable cache config parameters
// TODO: try to think over option of embedding CacheConfig into CacheInfo
type CacheConfig struct {
	// pool is the pool id for which caching is attached to
	PoolId int64 `protobuf:"varint,1,opt,name=pool_id,json=poolId" json:"pool_id,omitempty"`
	// cache_mode is writeback, writethrough etc
	Cachemode string `protobuf:"bytes,2,opt,name=cachemode" json:"cachemode,omitempty"`
	// cache_chunk_size is the configured cache block size
	CacheChunkSize uint64 `protobuf:"varint,3,opt,name=cache_chunk_size,json=cacheChunkSize" json:"cache_chunk_size,omitempty"`
	// cache_policy is more internal config param, mq, smq etc
	CachePolicy string `protobuf:"bytes,4,opt,name=cache_policy,json=cachePolicy" json:"cache_policy,omitempty"`
	// cache_settings is additional config param, for the assigned policy
	CacheSettings        string   `protobuf:"bytes,5,opt,name=cache_settings,json=cacheSettings" json:"cache_settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheConfig) Reset()         { *m = CacheConfig{} }
func (m *CacheConfig) String() string { return proto.CompactTextString(m) }
func (*CacheConfig) ProtoMessage()    {}
func (*CacheConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{51}
}
func (m *CacheConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CacheConfig.Unmarshal(m, b)
}
func (m *CacheConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CacheConfig.Marshal(b, m, deterministic)
}
func (dst *CacheConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheConfig.Merge(dst, src)
}
func (m *CacheConfig) XXX_Size() int {
	return xxx_messageInfo_CacheConfig.Size(m)
}
func (m *CacheConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CacheConfig proto.InternalMessageInfo

func (m *CacheConfig) GetPoolId() int64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *CacheConfig) GetCachemode() string {
	if m != nil {
		return m.Cachemode
	}
	return ""
}

func (m *CacheConfig) GetCacheChunkSize() uint64 {
	if m != nil {
		return m.CacheChunkSize
	}
	return 0
}

func (m *CacheConfig) GetCachePolicy() string {
	if m != nil {
		return m.CachePolicy
	}
	return ""
}

func (m *CacheConfig) GetCacheSettings() string {
	if m != nil {
		return m.CacheSettings
	}
	return ""
}

type CacheFlush struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheFlush) Reset()         { *m = CacheFlush{} }
func (m *CacheFlush) String() string { return proto.CompactTextString(m) }
func (*CacheFlush) ProtoMessage()    {}
func (*CacheFlush) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{52}
}
func (m *CacheFlush) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CacheFlush.Unmarshal(m, b)
}
func (m *CacheFlush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CacheFlush.Marshal(b, m, deterministic)
}
func (dst *CacheFlush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheFlush.Merge(dst, src)
}
func (m *CacheFlush) XXX_Size() int {
	return xxx_messageInfo_CacheFlush.Size(m)
}
func (m *CacheFlush) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheFlush.DiscardUnknown(m)
}

var xxx_messageInfo_CacheFlush proto.InternalMessageInfo

// PxCacheFlushRequest message to carry cache flush operation
type PxCacheFlushRequest struct {
	// Pool ID
	PoolId int64 `protobuf:"varint,1,opt,name=pool_id,json=poolId" json:"pool_id,omitempty"`
	// CacheFlush operation
	Operation            CacheFlush_OperationType `protobuf:"varint,2,opt,name=operation,enum=portworx.api.CacheFlush_OperationType" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *PxCacheFlushRequest) Reset()         { *m = PxCacheFlushRequest{} }
func (m *PxCacheFlushRequest) String() string { return proto.CompactTextString(m) }
func (*PxCacheFlushRequest) ProtoMessage()    {}
func (*PxCacheFlushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{53}
}
func (m *PxCacheFlushRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxCacheFlushRequest.Unmarshal(m, b)
}
func (m *PxCacheFlushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxCacheFlushRequest.Marshal(b, m, deterministic)
}
func (dst *PxCacheFlushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxCacheFlushRequest.Merge(dst, src)
}
func (m *PxCacheFlushRequest) XXX_Size() int {
	return xxx_messageInfo_PxCacheFlushRequest.Size(m)
}
func (m *PxCacheFlushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxCacheFlushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxCacheFlushRequest proto.InternalMessageInfo

func (m *PxCacheFlushRequest) GetPoolId() int64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *PxCacheFlushRequest) GetOperation() CacheFlush_OperationType {
	if m != nil {
		return m.Operation
	}
	return CacheFlush_Unknown
}

// PxCacheFlushResponse returns message
type PxCacheFlushResponse struct {
	// driver message
	Message              string   `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxCacheFlushResponse) Reset()         { *m = PxCacheFlushResponse{} }
func (m *PxCacheFlushResponse) String() string { return proto.CompactTextString(m) }
func (*PxCacheFlushResponse) ProtoMessage()    {}
func (*PxCacheFlushResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{54}
}
func (m *PxCacheFlushResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxCacheFlushResponse.Unmarshal(m, b)
}
func (m *PxCacheFlushResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxCacheFlushResponse.Marshal(b, m, deterministic)
}
func (dst *PxCacheFlushResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxCacheFlushResponse.Merge(dst, src)
}
func (m *PxCacheFlushResponse) XXX_Size() int {
	return xxx_messageInfo_PxCacheFlushResponse.Size(m)
}
func (m *PxCacheFlushResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxCacheFlushResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxCacheFlushResponse proto.InternalMessageInfo

func (m *PxCacheFlushResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// PxPoolUpdateRequest contains Storage Pool parameters to set
type PxPoolUpdateRequest struct {
	// ID of Pool to update
	PoolId int64 `protobuf:"varint,1,opt,name=pool_id,json=poolId" json:"pool_id,omitempty"`
	// pool priority to set
	Priority PoolPriority `protobuf:"varint,2,opt,name=priority,enum=portworx.api.PoolPriority" json:"priority,omitempty"`
	// pool labels to update
	Labels *wrappers.StringValue `protobuf:"bytes,3,opt,name=labels" json:"labels,omitempty"`
	// if true it resizes a pool to the max possible size
	Resize bool `protobuf:"varint,4,opt,name=resize" json:"resize,omitempty"`
	// removes info about the most recent operation being performed on a storage pool
	ResetLastOperation bool `protobuf:"varint,5,opt,name=reset_last_operation,json=resetLastOperation" json:"reset_last_operation,omitempty"`
	// if true it allows deprecated pool update requests
	SkipDeprecation      bool     `protobuf:"varint,6,opt,name=skip_deprecation,json=skipDeprecation" json:"skip_deprecation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxPoolUpdateRequest) Reset()         { *m = PxPoolUpdateRequest{} }
func (m *PxPoolUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*PxPoolUpdateRequest) ProtoMessage()    {}
func (*PxPoolUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{55}
}
func (m *PxPoolUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxPoolUpdateRequest.Unmarshal(m, b)
}
func (m *PxPoolUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxPoolUpdateRequest.Marshal(b, m, deterministic)
}
func (dst *PxPoolUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxPoolUpdateRequest.Merge(dst, src)
}
func (m *PxPoolUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_PxPoolUpdateRequest.Size(m)
}
func (m *PxPoolUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxPoolUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxPoolUpdateRequest proto.InternalMessageInfo

func (m *PxPoolUpdateRequest) GetPoolId() int64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *PxPoolUpdateRequest) GetPriority() PoolPriority {
	if m != nil {
		return m.Priority
	}
	return PoolPriority_Unknown
}

func (m *PxPoolUpdateRequest) GetLabels() *wrappers.StringValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *PxPoolUpdateRequest) GetResize() bool {
	if m != nil {
		return m.Resize
	}
	return false
}

func (m *PxPoolUpdateRequest) GetResetLastOperation() bool {
	if m != nil {
		return m.ResetLastOperation
	}
	return false
}

func (m *PxPoolUpdateRequest) GetSkipDeprecation() bool {
	if m != nil {
		return m.SkipDeprecation
	}
	return false
}

type PxPoolUpdateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxPoolUpdateResponse) Reset()         { *m = PxPoolUpdateResponse{} }
func (m *PxPoolUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*PxPoolUpdateResponse) ProtoMessage()    {}
func (*PxPoolUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{56}
}
func (m *PxPoolUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxPoolUpdateResponse.Unmarshal(m, b)
}
func (m *PxPoolUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxPoolUpdateResponse.Marshal(b, m, deterministic)
}
func (dst *PxPoolUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxPoolUpdateResponse.Merge(dst, src)
}
func (m *PxPoolUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_PxPoolUpdateResponse.Size(m)
}
func (m *PxPoolUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxPoolUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxPoolUpdateResponse proto.InternalMessageInfo

type DeviceScan struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceScan) Reset()         { *m = DeviceScan{} }
func (m *DeviceScan) String() string { return proto.CompactTextString(m) }
func (*DeviceScan) ProtoMessage()    {}
func (*DeviceScan) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{57}
}
func (m *DeviceScan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceScan.Unmarshal(m, b)
}
func (m *DeviceScan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceScan.Marshal(b, m, deterministic)
}
func (dst *DeviceScan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceScan.Merge(dst, src)
}
func (m *DeviceScan) XXX_Size() int {
	return xxx_messageInfo_DeviceScan.Size(m)
}
func (m *DeviceScan) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceScan.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceScan proto.InternalMessageInfo

type PxDeviceScanRequest struct {
	Operation            DeviceScan_OperationType `protobuf:"varint,1,opt,name=operation,enum=portworx.api.DeviceScan_OperationType" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *PxDeviceScanRequest) Reset()         { *m = PxDeviceScanRequest{} }
func (m *PxDeviceScanRequest) String() string { return proto.CompactTextString(m) }
func (*PxDeviceScanRequest) ProtoMessage()    {}
func (*PxDeviceScanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{58}
}
func (m *PxDeviceScanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDeviceScanRequest.Unmarshal(m, b)
}
func (m *PxDeviceScanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDeviceScanRequest.Marshal(b, m, deterministic)
}
func (dst *PxDeviceScanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDeviceScanRequest.Merge(dst, src)
}
func (m *PxDeviceScanRequest) XXX_Size() int {
	return xxx_messageInfo_PxDeviceScanRequest.Size(m)
}
func (m *PxDeviceScanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDeviceScanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxDeviceScanRequest proto.InternalMessageInfo

func (m *PxDeviceScanRequest) GetOperation() DeviceScan_OperationType {
	if m != nil {
		return m.Operation
	}
	return DeviceScan_UnknownOperation
}

// PxScanStatus message carries scan results
type PxScanStatus struct {
	// result of last completed device scan
	LastScan string `protobuf:"bytes,1,opt,name=last_scan,json=lastScan" json:"last_scan,omitempty"`
	// status of currently running scan, if any
	RunningScan          string   `protobuf:"bytes,2,opt,name=running_scan,json=runningScan" json:"running_scan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxScanStatus) Reset()         { *m = PxScanStatus{} }
func (m *PxScanStatus) String() string { return proto.CompactTextString(m) }
func (*PxScanStatus) ProtoMessage()    {}
func (*PxScanStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{59}
}
func (m *PxScanStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxScanStatus.Unmarshal(m, b)
}
func (m *PxScanStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxScanStatus.Marshal(b, m, deterministic)
}
func (dst *PxScanStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxScanStatus.Merge(dst, src)
}
func (m *PxScanStatus) XXX_Size() int {
	return xxx_messageInfo_PxScanStatus.Size(m)
}
func (m *PxScanStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PxScanStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PxScanStatus proto.InternalMessageInfo

func (m *PxScanStatus) GetLastScan() string {
	if m != nil {
		return m.LastScan
	}
	return ""
}

func (m *PxScanStatus) GetRunningScan() string {
	if m != nil {
		return m.RunningScan
	}
	return ""
}

type PxDeviceScanResponse struct {
	Result               DeviceScan_ResponseType `protobuf:"varint,1,opt,name=result,enum=portworx.api.DeviceScan_ResponseType" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PxDeviceScanResponse) Reset()         { *m = PxDeviceScanResponse{} }
func (m *PxDeviceScanResponse) String() string { return proto.CompactTextString(m) }
func (*PxDeviceScanResponse) ProtoMessage()    {}
func (*PxDeviceScanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{60}
}
func (m *PxDeviceScanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDeviceScanResponse.Unmarshal(m, b)
}
func (m *PxDeviceScanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDeviceScanResponse.Marshal(b, m, deterministic)
}
func (dst *PxDeviceScanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDeviceScanResponse.Merge(dst, src)
}
func (m *PxDeviceScanResponse) XXX_Size() int {
	return xxx_messageInfo_PxDeviceScanResponse.Size(m)
}
func (m *PxDeviceScanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDeviceScanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxDeviceScanResponse proto.InternalMessageInfo

func (m *PxDeviceScanResponse) GetResult() DeviceScan_ResponseType {
	if m != nil {
		return m.Result
	}
	return DeviceScan_UnknownResponse
}

type PxDeviceScanStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxDeviceScanStatusRequest) Reset()         { *m = PxDeviceScanStatusRequest{} }
func (m *PxDeviceScanStatusRequest) String() string { return proto.CompactTextString(m) }
func (*PxDeviceScanStatusRequest) ProtoMessage()    {}
func (*PxDeviceScanStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{61}
}
func (m *PxDeviceScanStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDeviceScanStatusRequest.Unmarshal(m, b)
}
func (m *PxDeviceScanStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDeviceScanStatusRequest.Marshal(b, m, deterministic)
}
func (dst *PxDeviceScanStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDeviceScanStatusRequest.Merge(dst, src)
}
func (m *PxDeviceScanStatusRequest) XXX_Size() int {
	return xxx_messageInfo_PxDeviceScanStatusRequest.Size(m)
}
func (m *PxDeviceScanStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDeviceScanStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxDeviceScanStatusRequest proto.InternalMessageInfo

type PxDeviceScanStatusResponse struct {
	Status               *PxScanStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PxDeviceScanStatusResponse) Reset()         { *m = PxDeviceScanStatusResponse{} }
func (m *PxDeviceScanStatusResponse) String() string { return proto.CompactTextString(m) }
func (*PxDeviceScanStatusResponse) ProtoMessage()    {}
func (*PxDeviceScanStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{62}
}
func (m *PxDeviceScanStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDeviceScanStatusResponse.Unmarshal(m, b)
}
func (m *PxDeviceScanStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDeviceScanStatusResponse.Marshal(b, m, deterministic)
}
func (dst *PxDeviceScanStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDeviceScanStatusResponse.Merge(dst, src)
}
func (m *PxDeviceScanStatusResponse) XXX_Size() int {
	return xxx_messageInfo_PxDeviceScanStatusResponse.Size(m)
}
func (m *PxDeviceScanStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDeviceScanStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxDeviceScanStatusResponse proto.InternalMessageInfo

func (m *PxDeviceScanStatusResponse) GetStatus() *PxScanStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Defines a daily schedule
type ScheduleIntervalDaily struct {
	// Range: 0-23
	Hour int32 `protobuf:"varint,1,opt,name=hour" json:"hour,omitempty"`
	// Range: 0-59
	Minute               int32    `protobuf:"varint,2,opt,name=minute" json:"minute,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScheduleIntervalDaily) Reset()         { *m = ScheduleIntervalDaily{} }
func (m *ScheduleIntervalDaily) String() string { return proto.CompactTextString(m) }
func (*ScheduleIntervalDaily) ProtoMessage()    {}
func (*ScheduleIntervalDaily) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{63}
}
func (m *ScheduleIntervalDaily) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleIntervalDaily.Unmarshal(m, b)
}
func (m *ScheduleIntervalDaily) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleIntervalDaily.Marshal(b, m, deterministic)
}
func (dst *ScheduleIntervalDaily) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleIntervalDaily.Merge(dst, src)
}
func (m *ScheduleIntervalDaily) XXX_Size() int {
	return xxx_messageInfo_ScheduleIntervalDaily.Size(m)
}
func (m *ScheduleIntervalDaily) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleIntervalDaily.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleIntervalDaily proto.InternalMessageInfo

func (m *ScheduleIntervalDaily) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *ScheduleIntervalDaily) GetMinute() int32 {
	if m != nil {
		return m.Minute
	}
	return 0
}

// Defines a weekly schedule
type ScheduleIntervalWeekly struct {
	Day Weekday `protobuf:"varint,1,opt,name=day,enum=portworx.api.Weekday" json:"day,omitempty"`
	// Range: 0-23
	Hour int32 `protobuf:"varint,2,opt,name=hour" json:"hour,omitempty"`
	// Range: 0-59
	Minute               int32    `protobuf:"varint,3,opt,name=minute" json:"minute,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScheduleIntervalWeekly) Reset()         { *m = ScheduleIntervalWeekly{} }
func (m *ScheduleIntervalWeekly) String() string { return proto.CompactTextString(m) }
func (*ScheduleIntervalWeekly) ProtoMessage()    {}
func (*ScheduleIntervalWeekly) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{64}
}
func (m *ScheduleIntervalWeekly) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleIntervalWeekly.Unmarshal(m, b)
}
func (m *ScheduleIntervalWeekly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleIntervalWeekly.Marshal(b, m, deterministic)
}
func (dst *ScheduleIntervalWeekly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleIntervalWeekly.Merge(dst, src)
}
func (m *ScheduleIntervalWeekly) XXX_Size() int {
	return xxx_messageInfo_ScheduleIntervalWeekly.Size(m)
}
func (m *ScheduleIntervalWeekly) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleIntervalWeekly.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleIntervalWeekly proto.InternalMessageInfo

func (m *ScheduleIntervalWeekly) GetDay() Weekday {
	if m != nil {
		return m.Day
	}
	return Weekday_Sunday
}

func (m *ScheduleIntervalWeekly) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *ScheduleIntervalWeekly) GetMinute() int32 {
	if m != nil {
		return m.Minute
	}
	return 0
}

// Defines a monthly schedule
type ScheduleIntervalMonthly struct {
	// Range: 1-28
	Day int32 `protobuf:"varint,1,opt,name=day" json:"day,omitempty"`
	// Range: 0-59
	Hour int32 `protobuf:"varint,2,opt,name=hour" json:"hour,omitempty"`
	// Range: 0-59
	Minute               int32    `protobuf:"varint,3,opt,name=minute" json:"minute,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScheduleIntervalMonthly) Reset()         { *m = ScheduleIntervalMonthly{} }
func (m *ScheduleIntervalMonthly) String() string { return proto.CompactTextString(m) }
func (*ScheduleIntervalMonthly) ProtoMessage()    {}
func (*ScheduleIntervalMonthly) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{65}
}
func (m *ScheduleIntervalMonthly) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleIntervalMonthly.Unmarshal(m, b)
}
func (m *ScheduleIntervalMonthly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleIntervalMonthly.Marshal(b, m, deterministic)
}
func (dst *ScheduleIntervalMonthly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleIntervalMonthly.Merge(dst, src)
}
func (m *ScheduleIntervalMonthly) XXX_Size() int {
	return xxx_messageInfo_ScheduleIntervalMonthly.Size(m)
}
func (m *ScheduleIntervalMonthly) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleIntervalMonthly.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleIntervalMonthly proto.InternalMessageInfo

func (m *ScheduleIntervalMonthly) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *ScheduleIntervalMonthly) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *ScheduleIntervalMonthly) GetMinute() int32 {
	if m != nil {
		return m.Minute
	}
	return 0
}

// Defines a schedule interval
type ScheduleInterval struct {
	// Types that are valid to be assigned to PeriodType:
	//	*ScheduleInterval_Daily
	//	*ScheduleInterval_Weekly
	//	*ScheduleInterval_Monthly
	PeriodType           isScheduleInterval_PeriodType `protobuf_oneof:"period_type"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ScheduleInterval) Reset()         { *m = ScheduleInterval{} }
func (m *ScheduleInterval) String() string { return proto.CompactTextString(m) }
func (*ScheduleInterval) ProtoMessage()    {}
func (*ScheduleInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{66}
}
func (m *ScheduleInterval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleInterval.Unmarshal(m, b)
}
func (m *ScheduleInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleInterval.Marshal(b, m, deterministic)
}
func (dst *ScheduleInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleInterval.Merge(dst, src)
}
func (m *ScheduleInterval) XXX_Size() int {
	return xxx_messageInfo_ScheduleInterval.Size(m)
}
func (m *ScheduleInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleInterval.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleInterval proto.InternalMessageInfo

type isScheduleInterval_PeriodType interface {
	isScheduleInterval_PeriodType()
}

type ScheduleInterval_Daily struct {
	Daily *ScheduleIntervalDaily `protobuf:"bytes,1,opt,name=daily,oneof"`
}
type ScheduleInterval_Weekly struct {
	Weekly *ScheduleIntervalWeekly `protobuf:"bytes,2,opt,name=weekly,oneof"`
}
type ScheduleInterval_Monthly struct {
	Monthly *ScheduleIntervalMonthly `protobuf:"bytes,3,opt,name=monthly,oneof"`
}

func (*ScheduleInterval_Daily) isScheduleInterval_PeriodType()   {}
func (*ScheduleInterval_Weekly) isScheduleInterval_PeriodType()  {}
func (*ScheduleInterval_Monthly) isScheduleInterval_PeriodType() {}

func (m *ScheduleInterval) GetPeriodType() isScheduleInterval_PeriodType {
	if m != nil {
		return m.PeriodType
	}
	return nil
}

func (m *ScheduleInterval) GetDaily() *ScheduleIntervalDaily {
	if x, ok := m.GetPeriodType().(*ScheduleInterval_Daily); ok {
		return x.Daily
	}
	return nil
}

func (m *ScheduleInterval) GetWeekly() *ScheduleIntervalWeekly {
	if x, ok := m.GetPeriodType().(*ScheduleInterval_Weekly); ok {
		return x.Weekly
	}
	return nil
}

func (m *ScheduleInterval) GetMonthly() *ScheduleIntervalMonthly {
	if x, ok := m.GetPeriodType().(*ScheduleInterval_Monthly); ok {
		return x.Monthly
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ScheduleInterval) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ScheduleInterval_OneofMarshaler, _ScheduleInterval_OneofUnmarshaler, _ScheduleInterval_OneofSizer, []interface{}{
		(*ScheduleInterval_Daily)(nil),
		(*ScheduleInterval_Weekly)(nil),
		(*ScheduleInterval_Monthly)(nil),
	}
}

func _ScheduleInterval_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ScheduleInterval)
	// period_type
	switch x := m.PeriodType.(type) {
	case *ScheduleInterval_Daily:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Daily); err != nil {
			return err
		}
	case *ScheduleInterval_Weekly:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Weekly); err != nil {
			return err
		}
	case *ScheduleInterval_Monthly:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Monthly); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ScheduleInterval.PeriodType has unexpected type %T", x)
	}
	return nil
}

func _ScheduleInterval_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ScheduleInterval)
	switch tag {
	case 1: // period_type.daily
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScheduleIntervalDaily)
		err := b.DecodeMessage(msg)
		m.PeriodType = &ScheduleInterval_Daily{msg}
		return true, err
	case 2: // period_type.weekly
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScheduleIntervalWeekly)
		err := b.DecodeMessage(msg)
		m.PeriodType = &ScheduleInterval_Weekly{msg}
		return true, err
	case 3: // period_type.monthly
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScheduleIntervalMonthly)
		err := b.DecodeMessage(msg)
		m.PeriodType = &ScheduleInterval_Monthly{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ScheduleInterval_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ScheduleInterval)
	// period_type
	switch x := m.PeriodType.(type) {
	case *ScheduleInterval_Daily:
		s := proto.Size(x.Daily)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ScheduleInterval_Weekly:
		s := proto.Size(x.Weekly)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ScheduleInterval_Monthly:
		s := proto.Size(x.Monthly)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PxDeviceScanScheduleGetRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxDeviceScanScheduleGetRequest) Reset()         { *m = PxDeviceScanScheduleGetRequest{} }
func (m *PxDeviceScanScheduleGetRequest) String() string { return proto.CompactTextString(m) }
func (*PxDeviceScanScheduleGetRequest) ProtoMessage()    {}
func (*PxDeviceScanScheduleGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{67}
}
func (m *PxDeviceScanScheduleGetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDeviceScanScheduleGetRequest.Unmarshal(m, b)
}
func (m *PxDeviceScanScheduleGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDeviceScanScheduleGetRequest.Marshal(b, m, deterministic)
}
func (dst *PxDeviceScanScheduleGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDeviceScanScheduleGetRequest.Merge(dst, src)
}
func (m *PxDeviceScanScheduleGetRequest) XXX_Size() int {
	return xxx_messageInfo_PxDeviceScanScheduleGetRequest.Size(m)
}
func (m *PxDeviceScanScheduleGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDeviceScanScheduleGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxDeviceScanScheduleGetRequest proto.InternalMessageInfo

type PxDeviceScanScheduleClearRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxDeviceScanScheduleClearRequest) Reset()         { *m = PxDeviceScanScheduleClearRequest{} }
func (m *PxDeviceScanScheduleClearRequest) String() string { return proto.CompactTextString(m) }
func (*PxDeviceScanScheduleClearRequest) ProtoMessage()    {}
func (*PxDeviceScanScheduleClearRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{68}
}
func (m *PxDeviceScanScheduleClearRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDeviceScanScheduleClearRequest.Unmarshal(m, b)
}
func (m *PxDeviceScanScheduleClearRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDeviceScanScheduleClearRequest.Marshal(b, m, deterministic)
}
func (dst *PxDeviceScanScheduleClearRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDeviceScanScheduleClearRequest.Merge(dst, src)
}
func (m *PxDeviceScanScheduleClearRequest) XXX_Size() int {
	return xxx_messageInfo_PxDeviceScanScheduleClearRequest.Size(m)
}
func (m *PxDeviceScanScheduleClearRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDeviceScanScheduleClearRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxDeviceScanScheduleClearRequest proto.InternalMessageInfo

type PxDeviceScanScheduleSetRequest struct {
	ScheduleIntervals    []*ScheduleInterval `protobuf:"bytes,1,rep,name=schedule_intervals,json=scheduleIntervals" json:"schedule_intervals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PxDeviceScanScheduleSetRequest) Reset()         { *m = PxDeviceScanScheduleSetRequest{} }
func (m *PxDeviceScanScheduleSetRequest) String() string { return proto.CompactTextString(m) }
func (*PxDeviceScanScheduleSetRequest) ProtoMessage()    {}
func (*PxDeviceScanScheduleSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{69}
}
func (m *PxDeviceScanScheduleSetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDeviceScanScheduleSetRequest.Unmarshal(m, b)
}
func (m *PxDeviceScanScheduleSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDeviceScanScheduleSetRequest.Marshal(b, m, deterministic)
}
func (dst *PxDeviceScanScheduleSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDeviceScanScheduleSetRequest.Merge(dst, src)
}
func (m *PxDeviceScanScheduleSetRequest) XXX_Size() int {
	return xxx_messageInfo_PxDeviceScanScheduleSetRequest.Size(m)
}
func (m *PxDeviceScanScheduleSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDeviceScanScheduleSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxDeviceScanScheduleSetRequest proto.InternalMessageInfo

func (m *PxDeviceScanScheduleSetRequest) GetScheduleIntervals() []*ScheduleInterval {
	if m != nil {
		return m.ScheduleIntervals
	}
	return nil
}

type PxDeviceScanScheduleResponse struct {
	ScheduleIntervals    []*ScheduleInterval `protobuf:"bytes,1,rep,name=schedule_intervals,json=scheduleIntervals" json:"schedule_intervals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PxDeviceScanScheduleResponse) Reset()         { *m = PxDeviceScanScheduleResponse{} }
func (m *PxDeviceScanScheduleResponse) String() string { return proto.CompactTextString(m) }
func (*PxDeviceScanScheduleResponse) ProtoMessage()    {}
func (*PxDeviceScanScheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{70}
}
func (m *PxDeviceScanScheduleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDeviceScanScheduleResponse.Unmarshal(m, b)
}
func (m *PxDeviceScanScheduleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDeviceScanScheduleResponse.Marshal(b, m, deterministic)
}
func (dst *PxDeviceScanScheduleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDeviceScanScheduleResponse.Merge(dst, src)
}
func (m *PxDeviceScanScheduleResponse) XXX_Size() int {
	return xxx_messageInfo_PxDeviceScanScheduleResponse.Size(m)
}
func (m *PxDeviceScanScheduleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDeviceScanScheduleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxDeviceScanScheduleResponse proto.InternalMessageInfo

func (m *PxDeviceScanScheduleResponse) GetScheduleIntervals() []*ScheduleInterval {
	if m != nil {
		return m.ScheduleIntervals
	}
	return nil
}

// BootstrapEntry identifies a node with its IP and ID which is part of a kvdb cluster
type BootstrapEntry struct {
	// ID of the kvdb node
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// IP of the kvdb node
	Ip string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	// Index of the kvdb node
	Index int64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	// State indicates the state of the Node in the bootstrap state machine
	State BootstrapNodeState `protobuf:"varint,4,opt,name=state,enum=portworx.api.BootstrapNodeState" json:"state,omitempty"`
	// Type indicates the type of kvdb node
	Type BootstrapNodeType `protobuf:"varint,5,opt,name=type,enum=portworx.api.BootstrapNodeType" json:"type,omitempty"`
	// Ts is the last updated timestamp of this bootstrap entry
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	// Version is the bootstrap entry version
	Version string `protobuf:"bytes,7,opt,name=version" json:"version,omitempty"`
	// ClientPort is the client port for kvdb node
	ClientPort string `protobuf:"bytes,8,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	// Domain is the domain name advertised in the peer urls for this kvdb node
	// The DomainName is only used for kvdb's peer urls.
	// This enables us to change the actual peer IP being used by the nodes while keeping the domain
	// name the same. The client url is always based of an IP.
	Domain string `protobuf:"bytes,9,opt,name=domain" json:"domain,omitempty"`
	// DataDirType is the type of data directory being used by internal kvdb on
	// this node
	Datadir              DataDirType `protobuf:"varint,10,opt,name=datadir,enum=portworx.api.DataDirType" json:"datadir,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BootstrapEntry) Reset()         { *m = BootstrapEntry{} }
func (m *BootstrapEntry) String() string { return proto.CompactTextString(m) }
func (*BootstrapEntry) ProtoMessage()    {}
func (*BootstrapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{71}
}
func (m *BootstrapEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BootstrapEntry.Unmarshal(m, b)
}
func (m *BootstrapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BootstrapEntry.Marshal(b, m, deterministic)
}
func (dst *BootstrapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapEntry.Merge(dst, src)
}
func (m *BootstrapEntry) XXX_Size() int {
	return xxx_messageInfo_BootstrapEntry.Size(m)
}
func (m *BootstrapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapEntry proto.InternalMessageInfo

func (m *BootstrapEntry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BootstrapEntry) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BootstrapEntry) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BootstrapEntry) GetState() BootstrapNodeState {
	if m != nil {
		return m.State
	}
	return BootstrapNodeState_UnknownNodeState
}

func (m *BootstrapEntry) GetType() BootstrapNodeType {
	if m != nil {
		return m.Type
	}
	return BootstrapNodeType_UnknownNodeType
}

func (m *BootstrapEntry) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *BootstrapEntry) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *BootstrapEntry) GetClientPort() string {
	if m != nil {
		return m.ClientPort
	}
	return ""
}

func (m *BootstrapEntry) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *BootstrapEntry) GetDatadir() DataDirType {
	if m != nil {
		return m.Datadir
	}
	return DataDirType_UnknownDataDirType
}

type PxKvdbGetBootstrapEntriesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxKvdbGetBootstrapEntriesRequest) Reset()         { *m = PxKvdbGetBootstrapEntriesRequest{} }
func (m *PxKvdbGetBootstrapEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*PxKvdbGetBootstrapEntriesRequest) ProtoMessage()    {}
func (*PxKvdbGetBootstrapEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{72}
}
func (m *PxKvdbGetBootstrapEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxKvdbGetBootstrapEntriesRequest.Unmarshal(m, b)
}
func (m *PxKvdbGetBootstrapEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxKvdbGetBootstrapEntriesRequest.Marshal(b, m, deterministic)
}
func (dst *PxKvdbGetBootstrapEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxKvdbGetBootstrapEntriesRequest.Merge(dst, src)
}
func (m *PxKvdbGetBootstrapEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_PxKvdbGetBootstrapEntriesRequest.Size(m)
}
func (m *PxKvdbGetBootstrapEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxKvdbGetBootstrapEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxKvdbGetBootstrapEntriesRequest proto.InternalMessageInfo

type PxKvdbGetBootstrapEntriesResponse struct {
	Entries              []*BootstrapEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PxKvdbGetBootstrapEntriesResponse) Reset()         { *m = PxKvdbGetBootstrapEntriesResponse{} }
func (m *PxKvdbGetBootstrapEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*PxKvdbGetBootstrapEntriesResponse) ProtoMessage()    {}
func (*PxKvdbGetBootstrapEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{73}
}
func (m *PxKvdbGetBootstrapEntriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxKvdbGetBootstrapEntriesResponse.Unmarshal(m, b)
}
func (m *PxKvdbGetBootstrapEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxKvdbGetBootstrapEntriesResponse.Marshal(b, m, deterministic)
}
func (dst *PxKvdbGetBootstrapEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxKvdbGetBootstrapEntriesResponse.Merge(dst, src)
}
func (m *PxKvdbGetBootstrapEntriesResponse) XXX_Size() int {
	return xxx_messageInfo_PxKvdbGetBootstrapEntriesResponse.Size(m)
}
func (m *PxKvdbGetBootstrapEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxKvdbGetBootstrapEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxKvdbGetBootstrapEntriesResponse proto.InternalMessageInfo

func (m *PxKvdbGetBootstrapEntriesResponse) GetEntries() []*BootstrapEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type PxKvdbGetDeviceInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxKvdbGetDeviceInfoRequest) Reset()         { *m = PxKvdbGetDeviceInfoRequest{} }
func (m *PxKvdbGetDeviceInfoRequest) String() string { return proto.CompactTextString(m) }
func (*PxKvdbGetDeviceInfoRequest) ProtoMessage()    {}
func (*PxKvdbGetDeviceInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{74}
}
func (m *PxKvdbGetDeviceInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxKvdbGetDeviceInfoRequest.Unmarshal(m, b)
}
func (m *PxKvdbGetDeviceInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxKvdbGetDeviceInfoRequest.Marshal(b, m, deterministic)
}
func (dst *PxKvdbGetDeviceInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxKvdbGetDeviceInfoRequest.Merge(dst, src)
}
func (m *PxKvdbGetDeviceInfoRequest) XXX_Size() int {
	return xxx_messageInfo_PxKvdbGetDeviceInfoRequest.Size(m)
}
func (m *PxKvdbGetDeviceInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxKvdbGetDeviceInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxKvdbGetDeviceInfoRequest proto.InternalMessageInfo

type PxKvdbGetDeviceInfoResponse struct {
	// name of the device
	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	// size of the device
	DeviceSize int64 `protobuf:"varint,2,opt,name=device_size,json=deviceSize" json:"device_size,omitempty"`
	// type of kvdb device
	Type DataDirType `protobuf:"varint,3,opt,name=type,enum=portworx.api.DataDirType" json:"type,omitempty"`
	// err is set when failed to get device info
	Err                  string   `protobuf:"bytes,4,opt,name=err" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxKvdbGetDeviceInfoResponse) Reset()         { *m = PxKvdbGetDeviceInfoResponse{} }
func (m *PxKvdbGetDeviceInfoResponse) String() string { return proto.CompactTextString(m) }
func (*PxKvdbGetDeviceInfoResponse) ProtoMessage()    {}
func (*PxKvdbGetDeviceInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{75}
}
func (m *PxKvdbGetDeviceInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxKvdbGetDeviceInfoResponse.Unmarshal(m, b)
}
func (m *PxKvdbGetDeviceInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxKvdbGetDeviceInfoResponse.Marshal(b, m, deterministic)
}
func (dst *PxKvdbGetDeviceInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxKvdbGetDeviceInfoResponse.Merge(dst, src)
}
func (m *PxKvdbGetDeviceInfoResponse) XXX_Size() int {
	return xxx_messageInfo_PxKvdbGetDeviceInfoResponse.Size(m)
}
func (m *PxKvdbGetDeviceInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxKvdbGetDeviceInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxKvdbGetDeviceInfoResponse proto.InternalMessageInfo

func (m *PxKvdbGetDeviceInfoResponse) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *PxKvdbGetDeviceInfoResponse) GetDeviceSize() int64 {
	if m != nil {
		return m.DeviceSize
	}
	return 0
}

func (m *PxKvdbGetDeviceInfoResponse) GetType() DataDirType {
	if m != nil {
		return m.Type
	}
	return DataDirType_UnknownDataDirType
}

func (m *PxKvdbGetDeviceInfoResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type PxDefragmentKvdbNodeRequest struct {
	// kvdb cluster node endpoint
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	// timeout in seconds
	Timeout int64 `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
	// if true defragmentaion will be started without check that all kvdb cluster nodes are healthy
	Force                bool     `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxDefragmentKvdbNodeRequest) Reset()         { *m = PxDefragmentKvdbNodeRequest{} }
func (m *PxDefragmentKvdbNodeRequest) String() string { return proto.CompactTextString(m) }
func (*PxDefragmentKvdbNodeRequest) ProtoMessage()    {}
func (*PxDefragmentKvdbNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{76}
}
func (m *PxDefragmentKvdbNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDefragmentKvdbNodeRequest.Unmarshal(m, b)
}
func (m *PxDefragmentKvdbNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDefragmentKvdbNodeRequest.Marshal(b, m, deterministic)
}
func (dst *PxDefragmentKvdbNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDefragmentKvdbNodeRequest.Merge(dst, src)
}
func (m *PxDefragmentKvdbNodeRequest) XXX_Size() int {
	return xxx_messageInfo_PxDefragmentKvdbNodeRequest.Size(m)
}
func (m *PxDefragmentKvdbNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDefragmentKvdbNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxDefragmentKvdbNodeRequest proto.InternalMessageInfo

func (m *PxDefragmentKvdbNodeRequest) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *PxDefragmentKvdbNodeRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *PxDefragmentKvdbNodeRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type PxDefragmentKvdbNodeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxDefragmentKvdbNodeResponse) Reset()         { *m = PxDefragmentKvdbNodeResponse{} }
func (m *PxDefragmentKvdbNodeResponse) String() string { return proto.CompactTextString(m) }
func (*PxDefragmentKvdbNodeResponse) ProtoMessage()    {}
func (*PxDefragmentKvdbNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{77}
}
func (m *PxDefragmentKvdbNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDefragmentKvdbNodeResponse.Unmarshal(m, b)
}
func (m *PxDefragmentKvdbNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDefragmentKvdbNodeResponse.Marshal(b, m, deterministic)
}
func (dst *PxDefragmentKvdbNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDefragmentKvdbNodeResponse.Merge(dst, src)
}
func (m *PxDefragmentKvdbNodeResponse) XXX_Size() int {
	return xxx_messageInfo_PxDefragmentKvdbNodeResponse.Size(m)
}
func (m *PxDefragmentKvdbNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDefragmentKvdbNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxDefragmentKvdbNodeResponse proto.InternalMessageInfo

type Storage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Storage) Reset()         { *m = Storage{} }
func (m *Storage) String() string { return proto.CompactTextString(m) }
func (*Storage) ProtoMessage()    {}
func (*Storage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{78}
}
func (m *Storage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Storage.Unmarshal(m, b)
}
func (m *Storage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Storage.Marshal(b, m, deterministic)
}
func (dst *Storage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Storage.Merge(dst, src)
}
func (m *Storage) XXX_Size() int {
	return xxx_messageInfo_Storage.Size(m)
}
func (m *Storage) XXX_DiscardUnknown() {
	xxx_messageInfo_Storage.DiscardUnknown(m)
}

var xxx_messageInfo_Storage proto.InternalMessageInfo

type StorageInfo struct {
	// Physical LUNs/Storage Resources
	Resources         map[string]*api.StorageResource `protobuf:"bytes,1,rep,name=resources" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ResourcesLastScan string                          `protobuf:"bytes,2,opt,name=resources_last_scan,json=resourcesLastScan" json:"resources_last_scan,omitempty"`
	ResourcesCount    int64                           `protobuf:"varint,3,opt,name=resources_count,json=resourcesCount" json:"resources_count,omitempty"`
	// Local storage volume UUID
	ResourceUuid string `protobuf:"bytes,4,opt,name=resource_uuid,json=resourceUuid" json:"resource_uuid,omitempty"`
	// ResourceJournal represents the journal device.
	ResourceJournal *api.StorageResource `protobuf:"bytes,5,opt,name=resource_journal,json=resourceJournal" json:"resource_journal,omitempty"`
	// ResourceJournalUUID is the journal device UUID
	ResourceJournalUuid string `protobuf:"bytes,6,opt,name=resource_journal_uuid,json=resourceJournalUuid" json:"resource_journal_uuid,omitempty"`
	// ResourceSystemMetadata represents the device for metatdata.
	ResourceSystemMetadata *api.StorageResource `protobuf:"bytes,7,opt,name=resource_system_metadata,json=resourceSystemMetadata" json:"resource_system_metadata,omitempty"`
	// ResourceSystemMetadataUUID is the filesystem UUID on the metadata device.
	ResourceSystemMetadataUuid string `protobuf:"bytes,8,opt,name=resource_system_metadata_uuid,json=resourceSystemMetadataUuid" json:"resource_system_metadata_uuid,omitempty"`
	// Aggregated measurements across the luns.
	ReadThroughput  float64 `protobuf:"fixed64,9,opt,name=read_throughput,json=readThroughput" json:"read_throughput,omitempty"`
	WriteThroughput float64 `protobuf:"fixed64,10,opt,name=write_throughput,json=writeThroughput" json:"write_throughput,omitempty"`
	Random_4KIops   float64 `protobuf:"fixed64,11,opt,name=random_4k_iops,json=random4kIops" json:"random_4k_iops,omitempty"`
	// Status storage status.
	Status Storage_Status `protobuf:"varint,12,opt,name=status,enum=portworx.api.Storage_Status" json:"status,omitempty"`
	// Btrfs raided sizes.
	TotalSize uint64 `protobuf:"varint,13,opt,name=total_size,json=totalSize" json:"total_size,omitempty"`
	Used      uint64 `protobuf:"varint,14,opt,name=used" json:"used,omitempty"`
	LastError string `protobuf:"bytes,15,opt,name=last_error,json=lastError" json:"last_error,omitempty"`
	// CacheInfo retrieves cache status/stats for this pool
	Cache                *CacheInfo `protobuf:"bytes,16,opt,name=cache" json:"cache,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *StorageInfo) Reset()         { *m = StorageInfo{} }
func (m *StorageInfo) String() string { return proto.CompactTextString(m) }
func (*StorageInfo) ProtoMessage()    {}
func (*StorageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{79}
}
func (m *StorageInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageInfo.Unmarshal(m, b)
}
func (m *StorageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageInfo.Marshal(b, m, deterministic)
}
func (dst *StorageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageInfo.Merge(dst, src)
}
func (m *StorageInfo) XXX_Size() int {
	return xxx_messageInfo_StorageInfo.Size(m)
}
func (m *StorageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StorageInfo proto.InternalMessageInfo

func (m *StorageInfo) GetResources() map[string]*api.StorageResource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *StorageInfo) GetResourcesLastScan() string {
	if m != nil {
		return m.ResourcesLastScan
	}
	return ""
}

func (m *StorageInfo) GetResourcesCount() int64 {
	if m != nil {
		return m.ResourcesCount
	}
	return 0
}

func (m *StorageInfo) GetResourceUuid() string {
	if m != nil {
		return m.ResourceUuid
	}
	return ""
}

func (m *StorageInfo) GetResourceJournal() *api.StorageResource {
	if m != nil {
		return m.ResourceJournal
	}
	return nil
}

func (m *StorageInfo) GetResourceJournalUuid() string {
	if m != nil {
		return m.ResourceJournalUuid
	}
	return ""
}

func (m *StorageInfo) GetResourceSystemMetadata() *api.StorageResource {
	if m != nil {
		return m.ResourceSystemMetadata
	}
	return nil
}

func (m *StorageInfo) GetResourceSystemMetadataUuid() string {
	if m != nil {
		return m.ResourceSystemMetadataUuid
	}
	return ""
}

func (m *StorageInfo) GetReadThroughput() float64 {
	if m != nil {
		return m.ReadThroughput
	}
	return 0
}

func (m *StorageInfo) GetWriteThroughput() float64 {
	if m != nil {
		return m.WriteThroughput
	}
	return 0
}

func (m *StorageInfo) GetRandom_4KIops() float64 {
	if m != nil {
		return m.Random_4KIops
	}
	return 0
}

func (m *StorageInfo) GetStatus() Storage_Status {
	if m != nil {
		return m.Status
	}
	return Storage_UnknownStorageStatus
}

func (m *StorageInfo) GetTotalSize() uint64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func (m *StorageInfo) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *StorageInfo) GetLastError() string {
	if m != nil {
		return m.LastError
	}
	return ""
}

func (m *StorageInfo) GetCache() *CacheInfo {
	if m != nil {
		return m.Cache
	}
	return nil
}

// CloudResourceInfo provides metadata information on a cloud resource.
type CloudResourceInfo struct {
	// Name of the cloud resource.
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	// ID of the cloud resource.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// Labels on the cloud resource.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Zone where the resource exists.
	Zone string `protobuf:"bytes,4,opt,name=zone" json:"zone,omitempty"`
	// Region where the resource exists.
	Region               string   `protobuf:"bytes,5,opt,name=region" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloudResourceInfo) Reset()         { *m = CloudResourceInfo{} }
func (m *CloudResourceInfo) String() string { return proto.CompactTextString(m) }
func (*CloudResourceInfo) ProtoMessage()    {}
func (*CloudResourceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{80}
}
func (m *CloudResourceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudResourceInfo.Unmarshal(m, b)
}
func (m *CloudResourceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudResourceInfo.Marshal(b, m, deterministic)
}
func (dst *CloudResourceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudResourceInfo.Merge(dst, src)
}
func (m *CloudResourceInfo) XXX_Size() int {
	return xxx_messageInfo_CloudResourceInfo.Size(m)
}
func (m *CloudResourceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudResourceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CloudResourceInfo proto.InternalMessageInfo

func (m *CloudResourceInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CloudResourceInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CloudResourceInfo) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CloudResourceInfo) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *CloudResourceInfo) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

// InstanceGroupInfo encapsulates info for a cloud instance group. In AWS this
// maps to ASG.
type InstanceGroupInfo struct {
	CloudResourceInfo *CloudResourceInfo `protobuf:"bytes,1,opt,name=cloud_resource_info,json=cloudResourceInfo" json:"cloud_resource_info,omitempty"`
	// AutoscalingEnabled is true if auto scaling is turned on
	AutoscalingEnabled bool `protobuf:"varint,2,opt,name=autoscaling_enabled,json=autoscalingEnabled" json:"autoscaling_enabled,omitempty"`
	// Min number of nodes in the instance group
	Min *wrappers.Int64Value `protobuf:"bytes,3,opt,name=min" json:"min,omitempty"`
	// Max number of nodes in the instance group
	Max *wrappers.Int64Value `protobuf:"bytes,4,opt,name=max" json:"max,omitempty"`
	// Zones that the instance group is part of
	Zones                []string `protobuf:"bytes,5,rep,name=zones" json:"zones,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceGroupInfo) Reset()         { *m = InstanceGroupInfo{} }
func (m *InstanceGroupInfo) String() string { return proto.CompactTextString(m) }
func (*InstanceGroupInfo) ProtoMessage()    {}
func (*InstanceGroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{81}
}
func (m *InstanceGroupInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceGroupInfo.Unmarshal(m, b)
}
func (m *InstanceGroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceGroupInfo.Marshal(b, m, deterministic)
}
func (dst *InstanceGroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceGroupInfo.Merge(dst, src)
}
func (m *InstanceGroupInfo) XXX_Size() int {
	return xxx_messageInfo_InstanceGroupInfo.Size(m)
}
func (m *InstanceGroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceGroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceGroupInfo proto.InternalMessageInfo

func (m *InstanceGroupInfo) GetCloudResourceInfo() *CloudResourceInfo {
	if m != nil {
		return m.CloudResourceInfo
	}
	return nil
}

func (m *InstanceGroupInfo) GetAutoscalingEnabled() bool {
	if m != nil {
		return m.AutoscalingEnabled
	}
	return false
}

func (m *InstanceGroupInfo) GetMin() *wrappers.Int64Value {
	if m != nil {
		return m.Min
	}
	return nil
}

func (m *InstanceGroupInfo) GetMax() *wrappers.Int64Value {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *InstanceGroupInfo) GetZones() []string {
	if m != nil {
		return m.Zones
	}
	return nil
}

type Geography struct {
	// Provider represents the cloud provider
	Provider string `protobuf:"bytes,1,opt,name=provider" json:"provider,omitempty"`
	// Region represents large geographical location, like
	// North East America, North West America etc.
	Region string `protobuf:"bytes,2,opt,name=region" json:"region,omitempty"`
	// Zone represents a data center within a Region.
	// Zones within a Region are connected via low-latency links.
	Zone string `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	// Datacenter specifies large geographical location
	DataCenter string `protobuf:"bytes,4,opt,name=data_center,json=dataCenter" json:"data_center,omitempty"`
	// Row specifies the row within the data center which hosts the node
	Row string `protobuf:"bytes,5,opt,name=row" json:"row,omitempty"`
	// Rack specifies the rack within the data center which hosts the node
	Rack string `protobuf:"bytes,6,opt,name=rack" json:"rack,omitempty"`
	// Chassis specifies the chassis within the data center which hosts the hypervisor or node
	Chassis string `protobuf:"bytes,7,opt,name=chassis" json:"chassis,omitempty"`
	// Hypervisor specifies the hypervisor (if any) within the chassis which hosts the node
	Hypervisor string `protobuf:"bytes,8,opt,name=hypervisor" json:"hypervisor,omitempty"`
	// Node specifies the node in chassis or rack on which px runs
	Node string `protobuf:"bytes,9,opt,name=node" json:"node,omitempty"`
	// InstanceGroup is the autoscaling instance group controller the instance
	InstanceGroup        *InstanceGroupInfo `protobuf:"bytes,10,opt,name=instance_group,json=instanceGroup" json:"instance_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Geography) Reset()         { *m = Geography{} }
func (m *Geography) String() string { return proto.CompactTextString(m) }
func (*Geography) ProtoMessage()    {}
func (*Geography) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{82}
}
func (m *Geography) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Geography.Unmarshal(m, b)
}
func (m *Geography) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Geography.Marshal(b, m, deterministic)
}
func (dst *Geography) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Geography.Merge(dst, src)
}
func (m *Geography) XXX_Size() int {
	return xxx_messageInfo_Geography.Size(m)
}
func (m *Geography) XXX_DiscardUnknown() {
	xxx_messageInfo_Geography.DiscardUnknown(m)
}

var xxx_messageInfo_Geography proto.InternalMessageInfo

func (m *Geography) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *Geography) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Geography) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Geography) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

func (m *Geography) GetRow() string {
	if m != nil {
		return m.Row
	}
	return ""
}

func (m *Geography) GetRack() string {
	if m != nil {
		return m.Rack
	}
	return ""
}

func (m *Geography) GetChassis() string {
	if m != nil {
		return m.Chassis
	}
	return ""
}

func (m *Geography) GetHypervisor() string {
	if m != nil {
		return m.Hypervisor
	}
	return ""
}

func (m *Geography) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *Geography) GetInstanceGroup() *InstanceGroupInfo {
	if m != nil {
		return m.InstanceGroup
	}
	return nil
}

type StoragePool struct {
	Pool *api.StoragePool `protobuf:"bytes,1,opt,name=pool" json:"pool,omitempty"`
	// CosAdmin is the configured Cos for this pool.
	CosAdmin api.CosType `protobuf:"varint,2,opt,name=cos_admin,json=cosAdmin,enum=openstorage.api.CosType" json:"cos_admin,omitempty"`
	// Info contains storage drives for this pool.
	Info *StorageInfo `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
	// Status Current operational status
	Status Storage_Status `protobuf:"varint,4,opt,name=status,enum=portworx.api.Storage_Status" json:"status,omitempty"`
	// ReserveFactor decides how much space to reserve for provisioned volumes.
	// It is a number between 0 and 100. Deprecated.
	ReserveFactor int64 `protobuf:"varint,5,opt,name=reserve_factor,json=reserveFactor" json:"reserve_factor,omitempty"`
	// SnapReserveFactor controls reservation for snapshot volumes. Deprecated.
	SnapReserveFactor    int64    `protobuf:"varint,6,opt,name=snap_reserve_factor,json=snapReserveFactor" json:"snap_reserve_factor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoragePool) Reset()         { *m = StoragePool{} }
func (m *StoragePool) String() string { return proto.CompactTextString(m) }
func (*StoragePool) ProtoMessage()    {}
func (*StoragePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{83}
}
func (m *StoragePool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoragePool.Unmarshal(m, b)
}
func (m *StoragePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoragePool.Marshal(b, m, deterministic)
}
func (dst *StoragePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoragePool.Merge(dst, src)
}
func (m *StoragePool) XXX_Size() int {
	return xxx_messageInfo_StoragePool.Size(m)
}
func (m *StoragePool) XXX_DiscardUnknown() {
	xxx_messageInfo_StoragePool.DiscardUnknown(m)
}

var xxx_messageInfo_StoragePool proto.InternalMessageInfo

func (m *StoragePool) GetPool() *api.StoragePool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *StoragePool) GetCosAdmin() api.CosType {
	if m != nil {
		return m.CosAdmin
	}
	return api.CosType_NONE
}

func (m *StoragePool) GetInfo() *StorageInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *StoragePool) GetStatus() Storage_Status {
	if m != nil {
		return m.Status
	}
	return Storage_UnknownStorageStatus
}

func (m *StoragePool) GetReserveFactor() int64 {
	if m != nil {
		return m.ReserveFactor
	}
	return 0
}

func (m *StoragePool) GetSnapReserveFactor() int64 {
	if m != nil {
		return m.SnapReserveFactor
	}
	return 0
}

type StorageSpec struct {
	// DriverName backing storage driver.
	DriverName string `protobuf:"bytes,1,opt,name=driver_name,json=driverName" json:"driver_name,omitempty"`
	// SwVersion
	SwVersion string `protobuf:"bytes,2,opt,name=sw_version,json=swVersion" json:"sw_version,omitempty"`
	// BlockDriverType defines the source of block device.
	BlockDriver BlockDriverType `protobuf:"varint,3,opt,name=block_driver,json=blockDriver,enum=portworx.api.BlockDriverType" json:"block_driver,omitempty"`
	// TargetDsType defines type of target data store
	TargetDsType TargetDsType `protobuf:"varint,4,opt,name=target_ds_type,json=targetDsType,enum=portworx.api.TargetDsType" json:"target_ds_type,omitempty"`
	// Version
	Version string `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
	// NID Node ID
	Nid int32 `protobuf:"varint,6,opt,name=nid" json:"nid,omitempty"`
	// MID Machine ID
	Mid string `protobuf:"bytes,7,opt,name=mid" json:"mid,omitempty"`
	// PeerAddr is the advertised URL for peer communication
	PeerAddr string `protobuf:"bytes,8,opt,name=peer_addr,json=peerAddr" json:"peer_addr,omitempty"`
	// ClientAddr is the advertised URL for client communication
	ClientAddr string `protobuf:"bytes,9,opt,name=client_addr,json=clientAddr" json:"client_addr,omitempty"`
	// StorageVol is the path to the root data partition.
	StorageVol string `protobuf:"bytes,10,opt,name=storage_vol,json=storageVol" json:"storage_vol,omitempty"`
	// StorageVolMD is the path to root metadata partition.
	StorageVolMd string `protobuf:"bytes,11,opt,name=storage_vol_md,json=storageVolMd" json:"storage_vol_md,omitempty"`
	// JournalDev is the path to the journal block device
	JournalDev string `protobuf:"bytes,12,opt,name=journal_dev,json=journalDev" json:"journal_dev,omitempty"`
	// SystemMetadataDev is the path to the metadata block device
	SystemMetadataDev string `protobuf:"bytes,13,opt,name=system_metadata_dev,json=systemMetadataDev" json:"system_metadata_dev,omitempty"`
	// Info has data storage drives for this node
	Info *StorageInfo `protobuf:"bytes,14,opt,name=info" json:"info,omitempty"`
	// MdInfo has metadata storage drives for this node
	MdInfo *StorageInfo `protobuf:"bytes,15,opt,name=md_info,json=mdInfo" json:"md_info,omitempty"`
	// Geo specified node Geography
	Geo *Geography `protobuf:"bytes,16,opt,name=geo" json:"geo,omitempty"`
	// DebugLevel controls the checks and fences set in storage.
	DebugLevel string `protobuf:"bytes,17,opt,name=debug_level,json=debugLevel" json:"debug_level,omitempty"`
	// Labels name value pairs.
	Labels map[string]string `protobuf:"bytes,18,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// OpStatus Current operational status
	OpStatus Storage_Status `protobuf:"varint,19,opt,name=op_status,json=opStatus,enum=portworx.api.Storage_Status" json:"op_status,omitempty"`
	// ErrStatus is the Current err status
	ErrStatus int64 `protobuf:"varint,20,opt,name=err_status,json=errStatus" json:"err_status,omitempty"`
	// HAOpStatus  is the current HA Operation status
	HaOpStatus int64 `protobuf:"varint,21,opt,name=ha_op_status,json=haOpStatus" json:"ha_op_status,omitempty"`
	// Decommissioned is true if this node has been removed..
	Decommissioned bool `protobuf:"varint,22,opt,name=decommissioned" json:"decommissioned,omitempty"`
	// DataPools set of disk pools.
	DataPools []*StoragePool `protobuf:"bytes,23,rep,name=data_pools,json=dataPools" json:"data_pools,omitempty"`
	// DataPoolType backing storage pool type.
	DataPoolType PoolType `protobuf:"varint,24,opt,name=data_pool_type,json=dataPoolType,enum=portworx.api.PoolType" json:"data_pool_type,omitempty"`
	// MdPool backing storage pool for metadata.
	MdPoolId int64 `protobuf:"varint,25,opt,name=md_pool_id,json=mdPoolId" json:"md_pool_id,omitempty"`
	// RaidLevel user desired raid level.
	RaidLevel string `protobuf:"bytes,26,opt,name=raid_level,json=raidLevel" json:"raid_level,omitempty"`
	// ScanSchedule contains the device scan schedule in YAML format
	ScanSchedule string `protobuf:"bytes,27,opt,name=scan_schedule,json=scanSchedule" json:"scan_schedule,omitempty"`
	// AsyncIO if true enables async i/o for backing storage
	AsyncIo bool `protobuf:"varint,28,opt,name=async_io,json=asyncIo" json:"async_io,omitempty"`
	// NumThreads is the number of threads in the thread pool
	NumThreads uint32 `protobuf:"varint,29,opt,name=num_threads,json=numThreads" json:"num_threads,omitempty"`
	// CacheDevices specifies the array of all global cache devices on this node
	CacheDevices []string `protobuf:"bytes,30,rep,name=cache_devices,json=cacheDevices" json:"cache_devices,omitempty"`
	// DedicatedCache Caching attributes - constrain assignment of cache drives from -cache only
	DedicatedCache bool `protobuf:"varint,31,opt,name=dedicated_cache,json=dedicatedCache" json:"dedicated_cache,omitempty"`
	// DomainId of this node
	DomainId string `protobuf:"bytes,32,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// fastpath extensions
	// px-fastpath feature enable flag
	FastpathEnable bool `protobuf:"varint,33,opt,name=fastpath_enable,json=fastpathEnable" json:"fastpath_enable,omitempty"`
	// px-fastpath feature setup in secure communication mode
	FastpathSecure bool `protobuf:"varint,34,opt,name=fastpath_secure,json=fastpathSecure" json:"fastpath_secure,omitempty"`
	// px-fastpath feature setup to fallback to native path
	FastpathFallback bool `protobuf:"varint,35,opt,name=fastpath_fallback,json=fastpathFallback" json:"fastpath_fallback,omitempty"`
	// px-fastpath feature setup to use specified protocol
	FastpathProtocol string `protobuf:"bytes,36,opt,name=fastpath_protocol,json=fastpathProtocol" json:"fastpath_protocol,omitempty"`
	// px-fastpath feature network port configuration
	FastpathPort uint32 `protobuf:"varint,37,opt,name=fastpath_port,json=fastpathPort" json:"fastpath_port,omitempty"`
	// px-cache extension for cache blocksize from config
	CacheBlksize uint64 `protobuf:"varint,38,opt,name=cache_blksize,json=cacheBlksize" json:"cache_blksize,omitempty"`
	// px-fastpath allow volumes with multiple replicas(1+)
	FastpathAllowMultiReplicas bool `protobuf:"varint,39,opt,name=fastpath_allow_multi_replicas,json=fastpathAllowMultiReplicas" json:"fastpath_allow_multi_replicas,omitempty"`
	// enable data integrity module for backing drives
	EnableIntegrity      bool     `protobuf:"varint,40,opt,name=enable_integrity,json=enableIntegrity" json:"enable_integrity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StorageSpec) Reset()         { *m = StorageSpec{} }
func (m *StorageSpec) String() string { return proto.CompactTextString(m) }
func (*StorageSpec) ProtoMessage()    {}
func (*StorageSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{84}
}
func (m *StorageSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageSpec.Unmarshal(m, b)
}
func (m *StorageSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageSpec.Marshal(b, m, deterministic)
}
func (dst *StorageSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageSpec.Merge(dst, src)
}
func (m *StorageSpec) XXX_Size() int {
	return xxx_messageInfo_StorageSpec.Size(m)
}
func (m *StorageSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageSpec.DiscardUnknown(m)
}

var xxx_messageInfo_StorageSpec proto.InternalMessageInfo

func (m *StorageSpec) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *StorageSpec) GetSwVersion() string {
	if m != nil {
		return m.SwVersion
	}
	return ""
}

func (m *StorageSpec) GetBlockDriver() BlockDriverType {
	if m != nil {
		return m.BlockDriver
	}
	return BlockDriverType_UnknownBlockDriverType
}

func (m *StorageSpec) GetTargetDsType() TargetDsType {
	if m != nil {
		return m.TargetDsType
	}
	return TargetDsType_UnknownTargetDsType
}

func (m *StorageSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *StorageSpec) GetNid() int32 {
	if m != nil {
		return m.Nid
	}
	return 0
}

func (m *StorageSpec) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

func (m *StorageSpec) GetPeerAddr() string {
	if m != nil {
		return m.PeerAddr
	}
	return ""
}

func (m *StorageSpec) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

func (m *StorageSpec) GetStorageVol() string {
	if m != nil {
		return m.StorageVol
	}
	return ""
}

func (m *StorageSpec) GetStorageVolMd() string {
	if m != nil {
		return m.StorageVolMd
	}
	return ""
}

func (m *StorageSpec) GetJournalDev() string {
	if m != nil {
		return m.JournalDev
	}
	return ""
}

func (m *StorageSpec) GetSystemMetadataDev() string {
	if m != nil {
		return m.SystemMetadataDev
	}
	return ""
}

func (m *StorageSpec) GetInfo() *StorageInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *StorageSpec) GetMdInfo() *StorageInfo {
	if m != nil {
		return m.MdInfo
	}
	return nil
}

func (m *StorageSpec) GetGeo() *Geography {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *StorageSpec) GetDebugLevel() string {
	if m != nil {
		return m.DebugLevel
	}
	return ""
}

func (m *StorageSpec) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *StorageSpec) GetOpStatus() Storage_Status {
	if m != nil {
		return m.OpStatus
	}
	return Storage_UnknownStorageStatus
}

func (m *StorageSpec) GetErrStatus() int64 {
	if m != nil {
		return m.ErrStatus
	}
	return 0
}

func (m *StorageSpec) GetHaOpStatus() int64 {
	if m != nil {
		return m.HaOpStatus
	}
	return 0
}

func (m *StorageSpec) GetDecommissioned() bool {
	if m != nil {
		return m.Decommissioned
	}
	return false
}

func (m *StorageSpec) GetDataPools() []*StoragePool {
	if m != nil {
		return m.DataPools
	}
	return nil
}

func (m *StorageSpec) GetDataPoolType() PoolType {
	if m != nil {
		return m.DataPoolType
	}
	return PoolType_UnknownPoolType
}

func (m *StorageSpec) GetMdPoolId() int64 {
	if m != nil {
		return m.MdPoolId
	}
	return 0
}

func (m *StorageSpec) GetRaidLevel() string {
	if m != nil {
		return m.RaidLevel
	}
	return ""
}

func (m *StorageSpec) GetScanSchedule() string {
	if m != nil {
		return m.ScanSchedule
	}
	return ""
}

func (m *StorageSpec) GetAsyncIo() bool {
	if m != nil {
		return m.AsyncIo
	}
	return false
}

func (m *StorageSpec) GetNumThreads() uint32 {
	if m != nil {
		return m.NumThreads
	}
	return 0
}

func (m *StorageSpec) GetCacheDevices() []string {
	if m != nil {
		return m.CacheDevices
	}
	return nil
}

func (m *StorageSpec) GetDedicatedCache() bool {
	if m != nil {
		return m.DedicatedCache
	}
	return false
}

func (m *StorageSpec) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *StorageSpec) GetFastpathEnable() bool {
	if m != nil {
		return m.FastpathEnable
	}
	return false
}

func (m *StorageSpec) GetFastpathSecure() bool {
	if m != nil {
		return m.FastpathSecure
	}
	return false
}

func (m *StorageSpec) GetFastpathFallback() bool {
	if m != nil {
		return m.FastpathFallback
	}
	return false
}

func (m *StorageSpec) GetFastpathProtocol() string {
	if m != nil {
		return m.FastpathProtocol
	}
	return ""
}

func (m *StorageSpec) GetFastpathPort() uint32 {
	if m != nil {
		return m.FastpathPort
	}
	return 0
}

func (m *StorageSpec) GetCacheBlksize() uint64 {
	if m != nil {
		return m.CacheBlksize
	}
	return 0
}

func (m *StorageSpec) GetFastpathAllowMultiReplicas() bool {
	if m != nil {
		return m.FastpathAllowMultiReplicas
	}
	return false
}

func (m *StorageSpec) GetEnableIntegrity() bool {
	if m != nil {
		return m.EnableIntegrity
	}
	return false
}

type PxGetStorageSpecRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxGetStorageSpecRequest) Reset()         { *m = PxGetStorageSpecRequest{} }
func (m *PxGetStorageSpecRequest) String() string { return proto.CompactTextString(m) }
func (*PxGetStorageSpecRequest) ProtoMessage()    {}
func (*PxGetStorageSpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{85}
}
func (m *PxGetStorageSpecRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxGetStorageSpecRequest.Unmarshal(m, b)
}
func (m *PxGetStorageSpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxGetStorageSpecRequest.Marshal(b, m, deterministic)
}
func (dst *PxGetStorageSpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxGetStorageSpecRequest.Merge(dst, src)
}
func (m *PxGetStorageSpecRequest) XXX_Size() int {
	return xxx_messageInfo_PxGetStorageSpecRequest.Size(m)
}
func (m *PxGetStorageSpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxGetStorageSpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxGetStorageSpecRequest proto.InternalMessageInfo

type PxGetStorageSpecResponse struct {
	Spec                 *StorageSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PxGetStorageSpecResponse) Reset()         { *m = PxGetStorageSpecResponse{} }
func (m *PxGetStorageSpecResponse) String() string { return proto.CompactTextString(m) }
func (*PxGetStorageSpecResponse) ProtoMessage()    {}
func (*PxGetStorageSpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{86}
}
func (m *PxGetStorageSpecResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxGetStorageSpecResponse.Unmarshal(m, b)
}
func (m *PxGetStorageSpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxGetStorageSpecResponse.Marshal(b, m, deterministic)
}
func (dst *PxGetStorageSpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxGetStorageSpecResponse.Merge(dst, src)
}
func (m *PxGetStorageSpecResponse) XXX_Size() int {
	return xxx_messageInfo_PxGetStorageSpecResponse.Size(m)
}
func (m *PxGetStorageSpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxGetStorageSpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxGetStorageSpecResponse proto.InternalMessageInfo

func (m *PxGetStorageSpecResponse) GetSpec() *StorageSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type PxDriveCheckRequest struct {
	DetailedReport       bool     `protobuf:"varint,1,opt,name=detailed_report,json=detailedReport" json:"detailed_report,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxDriveCheckRequest) Reset()         { *m = PxDriveCheckRequest{} }
func (m *PxDriveCheckRequest) String() string { return proto.CompactTextString(m) }
func (*PxDriveCheckRequest) ProtoMessage()    {}
func (*PxDriveCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{87}
}
func (m *PxDriveCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDriveCheckRequest.Unmarshal(m, b)
}
func (m *PxDriveCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDriveCheckRequest.Marshal(b, m, deterministic)
}
func (dst *PxDriveCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDriveCheckRequest.Merge(dst, src)
}
func (m *PxDriveCheckRequest) XXX_Size() int {
	return xxx_messageInfo_PxDriveCheckRequest.Size(m)
}
func (m *PxDriveCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDriveCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxDriveCheckRequest proto.InternalMessageInfo

func (m *PxDriveCheckRequest) GetDetailedReport() bool {
	if m != nil {
		return m.DetailedReport
	}
	return false
}

type PxDriveCheckResponse struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxDriveCheckResponse) Reset()         { *m = PxDriveCheckResponse{} }
func (m *PxDriveCheckResponse) String() string { return proto.CompactTextString(m) }
func (*PxDriveCheckResponse) ProtoMessage()    {}
func (*PxDriveCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{88}
}
func (m *PxDriveCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDriveCheckResponse.Unmarshal(m, b)
}
func (m *PxDriveCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDriveCheckResponse.Marshal(b, m, deterministic)
}
func (dst *PxDriveCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDriveCheckResponse.Merge(dst, src)
}
func (m *PxDriveCheckResponse) XXX_Size() int {
	return xxx_messageInfo_PxDriveCheckResponse.Size(m)
}
func (m *PxDriveCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDriveCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxDriveCheckResponse proto.InternalMessageInfo

func (m *PxDriveCheckResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type DriveRebalance struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DriveRebalance) Reset()         { *m = DriveRebalance{} }
func (m *DriveRebalance) String() string { return proto.CompactTextString(m) }
func (*DriveRebalance) ProtoMessage()    {}
func (*DriveRebalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{89}
}
func (m *DriveRebalance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DriveRebalance.Unmarshal(m, b)
}
func (m *DriveRebalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DriveRebalance.Marshal(b, m, deterministic)
}
func (dst *DriveRebalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriveRebalance.Merge(dst, src)
}
func (m *DriveRebalance) XXX_Size() int {
	return xxx_messageInfo_DriveRebalance.Size(m)
}
func (m *DriveRebalance) XXX_DiscardUnknown() {
	xxx_messageInfo_DriveRebalance.DiscardUnknown(m)
}

var xxx_messageInfo_DriveRebalance proto.InternalMessageInfo

type PxDriveRebalanceRequest struct {
	Op DriveRebalance_OperationType `protobuf:"varint,1,opt,name=op,enum=portworx.api.DriveRebalance_OperationType" json:"op,omitempty"`
	// pool ID to start rebalance
	PoolId int64 `protobuf:"varint,2,opt,name=pool_id,json=poolId" json:"pool_id,omitempty"`
	// if true balances block groups with usage under 85 percent, only applicable to btrfs drives
	Full                 bool     `protobuf:"varint,3,opt,name=full" json:"full,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxDriveRebalanceRequest) Reset()         { *m = PxDriveRebalanceRequest{} }
func (m *PxDriveRebalanceRequest) String() string { return proto.CompactTextString(m) }
func (*PxDriveRebalanceRequest) ProtoMessage()    {}
func (*PxDriveRebalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{90}
}
func (m *PxDriveRebalanceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDriveRebalanceRequest.Unmarshal(m, b)
}
func (m *PxDriveRebalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDriveRebalanceRequest.Marshal(b, m, deterministic)
}
func (dst *PxDriveRebalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDriveRebalanceRequest.Merge(dst, src)
}
func (m *PxDriveRebalanceRequest) XXX_Size() int {
	return xxx_messageInfo_PxDriveRebalanceRequest.Size(m)
}
func (m *PxDriveRebalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDriveRebalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxDriveRebalanceRequest proto.InternalMessageInfo

func (m *PxDriveRebalanceRequest) GetOp() DriveRebalance_OperationType {
	if m != nil {
		return m.Op
	}
	return DriveRebalance_Unknown
}

func (m *PxDriveRebalanceRequest) GetPoolId() int64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *PxDriveRebalanceRequest) GetFull() bool {
	if m != nil {
		return m.Full
	}
	return false
}

type DriveReplace struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DriveReplace) Reset()         { *m = DriveReplace{} }
func (m *DriveReplace) String() string { return proto.CompactTextString(m) }
func (*DriveReplace) ProtoMessage()    {}
func (*DriveReplace) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{91}
}
func (m *DriveReplace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DriveReplace.Unmarshal(m, b)
}
func (m *DriveReplace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DriveReplace.Marshal(b, m, deterministic)
}
func (dst *DriveReplace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriveReplace.Merge(dst, src)
}
func (m *DriveReplace) XXX_Size() int {
	return xxx_messageInfo_DriveReplace.Size(m)
}
func (m *DriveReplace) XXX_DiscardUnknown() {
	xxx_messageInfo_DriveReplace.DiscardUnknown(m)
}

var xxx_messageInfo_DriveReplace proto.InternalMessageInfo

type PxDriveRebalanceResponse struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxDriveRebalanceResponse) Reset()         { *m = PxDriveRebalanceResponse{} }
func (m *PxDriveRebalanceResponse) String() string { return proto.CompactTextString(m) }
func (*PxDriveRebalanceResponse) ProtoMessage()    {}
func (*PxDriveRebalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{92}
}
func (m *PxDriveRebalanceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDriveRebalanceResponse.Unmarshal(m, b)
}
func (m *PxDriveRebalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDriveRebalanceResponse.Marshal(b, m, deterministic)
}
func (dst *PxDriveRebalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDriveRebalanceResponse.Merge(dst, src)
}
func (m *PxDriveRebalanceResponse) XXX_Size() int {
	return xxx_messageInfo_PxDriveRebalanceResponse.Size(m)
}
func (m *PxDriveRebalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDriveRebalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxDriveRebalanceResponse proto.InternalMessageInfo

func (m *PxDriveRebalanceResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type PxDriveReplaceRequest struct {
	Source               string                     `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Target               string                     `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Op                   DriveReplace_OperationType `protobuf:"varint,3,opt,name=op,enum=portworx.api.DriveReplace_OperationType" json:"op,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PxDriveReplaceRequest) Reset()         { *m = PxDriveReplaceRequest{} }
func (m *PxDriveReplaceRequest) String() string { return proto.CompactTextString(m) }
func (*PxDriveReplaceRequest) ProtoMessage()    {}
func (*PxDriveReplaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{93}
}
func (m *PxDriveReplaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDriveReplaceRequest.Unmarshal(m, b)
}
func (m *PxDriveReplaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDriveReplaceRequest.Marshal(b, m, deterministic)
}
func (dst *PxDriveReplaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDriveReplaceRequest.Merge(dst, src)
}
func (m *PxDriveReplaceRequest) XXX_Size() int {
	return xxx_messageInfo_PxDriveReplaceRequest.Size(m)
}
func (m *PxDriveReplaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDriveReplaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxDriveReplaceRequest proto.InternalMessageInfo

func (m *PxDriveReplaceRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *PxDriveReplaceRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *PxDriveReplaceRequest) GetOp() DriveReplace_OperationType {
	if m != nil {
		return m.Op
	}
	return DriveReplace_Unknown
}

type PxDriveReplaceResponse struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxDriveReplaceResponse) Reset()         { *m = PxDriveReplaceResponse{} }
func (m *PxDriveReplaceResponse) String() string { return proto.CompactTextString(m) }
func (*PxDriveReplaceResponse) ProtoMessage()    {}
func (*PxDriveReplaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{94}
}
func (m *PxDriveReplaceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxDriveReplaceResponse.Unmarshal(m, b)
}
func (m *PxDriveReplaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxDriveReplaceResponse.Marshal(b, m, deterministic)
}
func (dst *PxDriveReplaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxDriveReplaceResponse.Merge(dst, src)
}
func (m *PxDriveReplaceResponse) XXX_Size() int {
	return xxx_messageInfo_PxDriveReplaceResponse.Size(m)
}
func (m *PxDriveReplaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxDriveReplaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxDriveReplaceResponse proto.InternalMessageInfo

func (m *PxDriveReplaceResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// PxPoolDeleteRequest contains Storage Pool ID to delete
type PxPoolDeleteRequest struct {
	// ID of Pool to delete
	PoolId               int64    `protobuf:"varint,1,opt,name=pool_id,json=poolId" json:"pool_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxPoolDeleteRequest) Reset()         { *m = PxPoolDeleteRequest{} }
func (m *PxPoolDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*PxPoolDeleteRequest) ProtoMessage()    {}
func (*PxPoolDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{95}
}
func (m *PxPoolDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxPoolDeleteRequest.Unmarshal(m, b)
}
func (m *PxPoolDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxPoolDeleteRequest.Marshal(b, m, deterministic)
}
func (dst *PxPoolDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxPoolDeleteRequest.Merge(dst, src)
}
func (m *PxPoolDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_PxPoolDeleteRequest.Size(m)
}
func (m *PxPoolDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxPoolDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxPoolDeleteRequest proto.InternalMessageInfo

func (m *PxPoolDeleteRequest) GetPoolId() int64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type PxPoolDeleteResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxPoolDeleteResponse) Reset()         { *m = PxPoolDeleteResponse{} }
func (m *PxPoolDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*PxPoolDeleteResponse) ProtoMessage()    {}
func (*PxPoolDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{96}
}
func (m *PxPoolDeleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxPoolDeleteResponse.Unmarshal(m, b)
}
func (m *PxPoolDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxPoolDeleteResponse.Marshal(b, m, deterministic)
}
func (dst *PxPoolDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxPoolDeleteResponse.Merge(dst, src)
}
func (m *PxPoolDeleteResponse) XXX_Size() int {
	return xxx_messageInfo_PxPoolDeleteResponse.Size(m)
}
func (m *PxPoolDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxPoolDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxPoolDeleteResponse proto.InternalMessageInfo

// PxPoolMaintenanceRequest contains operation
type PxPoolMaintenanceRequest struct {
	// supported operations are: Enter and Exit
	Operation            Maintenance_OperationType `protobuf:"varint,1,opt,name=operation,enum=portworx.api.Maintenance_OperationType" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *PxPoolMaintenanceRequest) Reset()         { *m = PxPoolMaintenanceRequest{} }
func (m *PxPoolMaintenanceRequest) String() string { return proto.CompactTextString(m) }
func (*PxPoolMaintenanceRequest) ProtoMessage()    {}
func (*PxPoolMaintenanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{97}
}
func (m *PxPoolMaintenanceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxPoolMaintenanceRequest.Unmarshal(m, b)
}
func (m *PxPoolMaintenanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxPoolMaintenanceRequest.Marshal(b, m, deterministic)
}
func (dst *PxPoolMaintenanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxPoolMaintenanceRequest.Merge(dst, src)
}
func (m *PxPoolMaintenanceRequest) XXX_Size() int {
	return xxx_messageInfo_PxPoolMaintenanceRequest.Size(m)
}
func (m *PxPoolMaintenanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxPoolMaintenanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxPoolMaintenanceRequest proto.InternalMessageInfo

func (m *PxPoolMaintenanceRequest) GetOperation() Maintenance_OperationType {
	if m != nil {
		return m.Operation
	}
	return Maintenance_Unknown
}

type PxPoolMaintenanceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxPoolMaintenanceResponse) Reset()         { *m = PxPoolMaintenanceResponse{} }
func (m *PxPoolMaintenanceResponse) String() string { return proto.CompactTextString(m) }
func (*PxPoolMaintenanceResponse) ProtoMessage()    {}
func (*PxPoolMaintenanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{98}
}
func (m *PxPoolMaintenanceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxPoolMaintenanceResponse.Unmarshal(m, b)
}
func (m *PxPoolMaintenanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxPoolMaintenanceResponse.Marshal(b, m, deterministic)
}
func (dst *PxPoolMaintenanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxPoolMaintenanceResponse.Merge(dst, src)
}
func (m *PxPoolMaintenanceResponse) XXX_Size() int {
	return xxx_messageInfo_PxPoolMaintenanceResponse.Size(m)
}
func (m *PxPoolMaintenanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxPoolMaintenanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxPoolMaintenanceResponse proto.InternalMessageInfo

// Request to install license by activation ID
type PxLicenseInstallByActivationIDRequest struct {
	// Number of copies to be activated
	Copies int64 `protobuf:"varint,1,opt,name=copies" json:"copies,omitempty"`
	// activation ID
	ActivationId         string   `protobuf:"bytes,2,opt,name=activation_id,json=activationId" json:"activation_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicenseInstallByActivationIDRequest) Reset()         { *m = PxLicenseInstallByActivationIDRequest{} }
func (m *PxLicenseInstallByActivationIDRequest) String() string { return proto.CompactTextString(m) }
func (*PxLicenseInstallByActivationIDRequest) ProtoMessage()    {}
func (*PxLicenseInstallByActivationIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{99}
}
func (m *PxLicenseInstallByActivationIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicenseInstallByActivationIDRequest.Unmarshal(m, b)
}
func (m *PxLicenseInstallByActivationIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicenseInstallByActivationIDRequest.Marshal(b, m, deterministic)
}
func (dst *PxLicenseInstallByActivationIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicenseInstallByActivationIDRequest.Merge(dst, src)
}
func (m *PxLicenseInstallByActivationIDRequest) XXX_Size() int {
	return xxx_messageInfo_PxLicenseInstallByActivationIDRequest.Size(m)
}
func (m *PxLicenseInstallByActivationIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicenseInstallByActivationIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicenseInstallByActivationIDRequest proto.InternalMessageInfo

func (m *PxLicenseInstallByActivationIDRequest) GetCopies() int64 {
	if m != nil {
		return m.Copies
	}
	return 0
}

func (m *PxLicenseInstallByActivationIDRequest) GetActivationId() string {
	if m != nil {
		return m.ActivationId
	}
	return ""
}

// Empty Response
type PxLicenseInstallByActivationIDResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicenseInstallByActivationIDResponse) Reset() {
	*m = PxLicenseInstallByActivationIDResponse{}
}
func (m *PxLicenseInstallByActivationIDResponse) String() string { return proto.CompactTextString(m) }
func (*PxLicenseInstallByActivationIDResponse) ProtoMessage()    {}
func (*PxLicenseInstallByActivationIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{100}
}
func (m *PxLicenseInstallByActivationIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicenseInstallByActivationIDResponse.Unmarshal(m, b)
}
func (m *PxLicenseInstallByActivationIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicenseInstallByActivationIDResponse.Marshal(b, m, deterministic)
}
func (dst *PxLicenseInstallByActivationIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicenseInstallByActivationIDResponse.Merge(dst, src)
}
func (m *PxLicenseInstallByActivationIDResponse) XXX_Size() int {
	return xxx_messageInfo_PxLicenseInstallByActivationIDResponse.Size(m)
}
func (m *PxLicenseInstallByActivationIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicenseInstallByActivationIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicenseInstallByActivationIDResponse proto.InternalMessageInfo

// Request to install license by specifying the license BLOB
type PxLicenseInstallByLicenseRequest struct {
	// license BLOB
	License []byte `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	// cluster ID. If specified, overwrites the identity of the cluster. Used when transferring license from another
	// cluster to this cluster.
	ClusterId            string   `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicenseInstallByLicenseRequest) Reset()         { *m = PxLicenseInstallByLicenseRequest{} }
func (m *PxLicenseInstallByLicenseRequest) String() string { return proto.CompactTextString(m) }
func (*PxLicenseInstallByLicenseRequest) ProtoMessage()    {}
func (*PxLicenseInstallByLicenseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{101}
}
func (m *PxLicenseInstallByLicenseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicenseInstallByLicenseRequest.Unmarshal(m, b)
}
func (m *PxLicenseInstallByLicenseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicenseInstallByLicenseRequest.Marshal(b, m, deterministic)
}
func (dst *PxLicenseInstallByLicenseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicenseInstallByLicenseRequest.Merge(dst, src)
}
func (m *PxLicenseInstallByLicenseRequest) XXX_Size() int {
	return xxx_messageInfo_PxLicenseInstallByLicenseRequest.Size(m)
}
func (m *PxLicenseInstallByLicenseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicenseInstallByLicenseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicenseInstallByLicenseRequest proto.InternalMessageInfo

func (m *PxLicenseInstallByLicenseRequest) GetLicense() []byte {
	if m != nil {
		return m.License
	}
	return nil
}

func (m *PxLicenseInstallByLicenseRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

// Empty Response
type PxLicenseInstallByLicenseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicenseInstallByLicenseResponse) Reset()         { *m = PxLicenseInstallByLicenseResponse{} }
func (m *PxLicenseInstallByLicenseResponse) String() string { return proto.CompactTextString(m) }
func (*PxLicenseInstallByLicenseResponse) ProtoMessage()    {}
func (*PxLicenseInstallByLicenseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{102}
}
func (m *PxLicenseInstallByLicenseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicenseInstallByLicenseResponse.Unmarshal(m, b)
}
func (m *PxLicenseInstallByLicenseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicenseInstallByLicenseResponse.Marshal(b, m, deterministic)
}
func (dst *PxLicenseInstallByLicenseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicenseInstallByLicenseResponse.Merge(dst, src)
}
func (m *PxLicenseInstallByLicenseResponse) XXX_Size() int {
	return xxx_messageInfo_PxLicenseInstallByLicenseResponse.Size(m)
}
func (m *PxLicenseInstallByLicenseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicenseInstallByLicenseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicenseInstallByLicenseResponse proto.InternalMessageInfo

// Request to uninstall the license by specifying the activation id
type PxLicenseUninstallByActivationIDRequest struct {
	// activation ID
	ActivationId         string   `protobuf:"bytes,1,opt,name=activation_id,json=activationId" json:"activation_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicenseUninstallByActivationIDRequest) Reset() {
	*m = PxLicenseUninstallByActivationIDRequest{}
}
func (m *PxLicenseUninstallByActivationIDRequest) String() string { return proto.CompactTextString(m) }
func (*PxLicenseUninstallByActivationIDRequest) ProtoMessage()    {}
func (*PxLicenseUninstallByActivationIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{103}
}
func (m *PxLicenseUninstallByActivationIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicenseUninstallByActivationIDRequest.Unmarshal(m, b)
}
func (m *PxLicenseUninstallByActivationIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicenseUninstallByActivationIDRequest.Marshal(b, m, deterministic)
}
func (dst *PxLicenseUninstallByActivationIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicenseUninstallByActivationIDRequest.Merge(dst, src)
}
func (m *PxLicenseUninstallByActivationIDRequest) XXX_Size() int {
	return xxx_messageInfo_PxLicenseUninstallByActivationIDRequest.Size(m)
}
func (m *PxLicenseUninstallByActivationIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicenseUninstallByActivationIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicenseUninstallByActivationIDRequest proto.InternalMessageInfo

func (m *PxLicenseUninstallByActivationIDRequest) GetActivationId() string {
	if m != nil {
		return m.ActivationId
	}
	return ""
}

// Empty Response
type PxLicenseUninstallByActivationIDResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicenseUninstallByActivationIDResponse) Reset() {
	*m = PxLicenseUninstallByActivationIDResponse{}
}
func (m *PxLicenseUninstallByActivationIDResponse) String() string { return proto.CompactTextString(m) }
func (*PxLicenseUninstallByActivationIDResponse) ProtoMessage()    {}
func (*PxLicenseUninstallByActivationIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{104}
}
func (m *PxLicenseUninstallByActivationIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicenseUninstallByActivationIDResponse.Unmarshal(m, b)
}
func (m *PxLicenseUninstallByActivationIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicenseUninstallByActivationIDResponse.Marshal(b, m, deterministic)
}
func (dst *PxLicenseUninstallByActivationIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicenseUninstallByActivationIDResponse.Merge(dst, src)
}
func (m *PxLicenseUninstallByActivationIDResponse) XXX_Size() int {
	return xxx_messageInfo_PxLicenseUninstallByActivationIDResponse.Size(m)
}
func (m *PxLicenseUninstallByActivationIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicenseUninstallByActivationIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicenseUninstallByActivationIDResponse proto.InternalMessageInfo

// Empty request to release the license from this cluster
type PxLicenseReleaseRequest struct {
	// ID of the cluster to which the license is being transfrred
	DestinationClusterId string   `protobuf:"bytes,1,opt,name=destination_cluster_id,json=destinationClusterId" json:"destination_cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicenseReleaseRequest) Reset()         { *m = PxLicenseReleaseRequest{} }
func (m *PxLicenseReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*PxLicenseReleaseRequest) ProtoMessage()    {}
func (*PxLicenseReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{105}
}
func (m *PxLicenseReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicenseReleaseRequest.Unmarshal(m, b)
}
func (m *PxLicenseReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicenseReleaseRequest.Marshal(b, m, deterministic)
}
func (dst *PxLicenseReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicenseReleaseRequest.Merge(dst, src)
}
func (m *PxLicenseReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_PxLicenseReleaseRequest.Size(m)
}
func (m *PxLicenseReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicenseReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicenseReleaseRequest proto.InternalMessageInfo

func (m *PxLicenseReleaseRequest) GetDestinationClusterId() string {
	if m != nil {
		return m.DestinationClusterId
	}
	return ""
}

// Response to the request to release the license
type PxLicenseReleaseResponse struct {
	// license BLOB
	License []byte `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	// cluster ID associated with the released license blob
	ClusterId            string   `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicenseReleaseResponse) Reset()         { *m = PxLicenseReleaseResponse{} }
func (m *PxLicenseReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*PxLicenseReleaseResponse) ProtoMessage()    {}
func (*PxLicenseReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{106}
}
func (m *PxLicenseReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicenseReleaseResponse.Unmarshal(m, b)
}
func (m *PxLicenseReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicenseReleaseResponse.Marshal(b, m, deterministic)
}
func (dst *PxLicenseReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicenseReleaseResponse.Merge(dst, src)
}
func (m *PxLicenseReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_PxLicenseReleaseResponse.Size(m)
}
func (m *PxLicenseReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicenseReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicenseReleaseResponse proto.InternalMessageInfo

func (m *PxLicenseReleaseResponse) GetLicense() []byte {
	if m != nil {
		return m.License
	}
	return nil
}

func (m *PxLicenseReleaseResponse) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

// Request to set the license server information
type PxLicenseSetServerRequest struct {
	// License server endpoints. Only 2 are allowed. The first one in the list is the primary and the second is the backup.
	Endpoints []string `protobuf:"bytes,1,rep,name=endpoints" json:"endpoints,omitempty"`
	// For how long (in seconds) to lease the floating license. License is automatically refreshed long before
	// the lease expires. Default is 7 days.
	BorrowInterval int32 `protobuf:"varint,2,opt,name=borrow_interval,json=borrowInterval" json:"borrow_interval,omitempty"`
	// How often (in seconds) each node should refresh the license by contacting the license server. It is recommended
	// that this field be left empty in which case it will be set automatically.
	RefreshInterval int32 `protobuf:"varint,3,opt,name=refresh_interval,json=refreshInterval" json:"refresh_interval,omitempty"`
	// Additional licensed features to be activated on all the nodes of this Portworx cluster. When license server
	// has limited seats shared by multiple clusters, this field allows user to select which cluster gets a particular
	// feature.
	AdditionalFeatures []string `protobuf:"bytes,4,rep,name=additional_features,json=additionalFeatures" json:"additional_features,omitempty"`
	// Root and intermediate certificates for license server.
	CaBundle             string   `protobuf:"bytes,5,opt,name=ca_bundle,json=caBundle" json:"ca_bundle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicenseSetServerRequest) Reset()         { *m = PxLicenseSetServerRequest{} }
func (m *PxLicenseSetServerRequest) String() string { return proto.CompactTextString(m) }
func (*PxLicenseSetServerRequest) ProtoMessage()    {}
func (*PxLicenseSetServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{107}
}
func (m *PxLicenseSetServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicenseSetServerRequest.Unmarshal(m, b)
}
func (m *PxLicenseSetServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicenseSetServerRequest.Marshal(b, m, deterministic)
}
func (dst *PxLicenseSetServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicenseSetServerRequest.Merge(dst, src)
}
func (m *PxLicenseSetServerRequest) XXX_Size() int {
	return xxx_messageInfo_PxLicenseSetServerRequest.Size(m)
}
func (m *PxLicenseSetServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicenseSetServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicenseSetServerRequest proto.InternalMessageInfo

func (m *PxLicenseSetServerRequest) GetEndpoints() []string {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *PxLicenseSetServerRequest) GetBorrowInterval() int32 {
	if m != nil {
		return m.BorrowInterval
	}
	return 0
}

func (m *PxLicenseSetServerRequest) GetRefreshInterval() int32 {
	if m != nil {
		return m.RefreshInterval
	}
	return 0
}

func (m *PxLicenseSetServerRequest) GetAdditionalFeatures() []string {
	if m != nil {
		return m.AdditionalFeatures
	}
	return nil
}

func (m *PxLicenseSetServerRequest) GetCaBundle() string {
	if m != nil {
		return m.CaBundle
	}
	return ""
}

// Empty Response
type PxLicenseSetServerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicenseSetServerResponse) Reset()         { *m = PxLicenseSetServerResponse{} }
func (m *PxLicenseSetServerResponse) String() string { return proto.CompactTextString(m) }
func (*PxLicenseSetServerResponse) ProtoMessage()    {}
func (*PxLicenseSetServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{108}
}
func (m *PxLicenseSetServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicenseSetServerResponse.Unmarshal(m, b)
}
func (m *PxLicenseSetServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicenseSetServerResponse.Marshal(b, m, deterministic)
}
func (dst *PxLicenseSetServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicenseSetServerResponse.Merge(dst, src)
}
func (m *PxLicenseSetServerResponse) XXX_Size() int {
	return xxx_messageInfo_PxLicenseSetServerResponse.Size(m)
}
func (m *PxLicenseSetServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicenseSetServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicenseSetServerResponse proto.InternalMessageInfo

// Empty Request
type PxLicenseStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicenseStatusRequest) Reset()         { *m = PxLicenseStatusRequest{} }
func (m *PxLicenseStatusRequest) String() string { return proto.CompactTextString(m) }
func (*PxLicenseStatusRequest) ProtoMessage()    {}
func (*PxLicenseStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{109}
}
func (m *PxLicenseStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicenseStatusRequest.Unmarshal(m, b)
}
func (m *PxLicenseStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicenseStatusRequest.Marshal(b, m, deterministic)
}
func (dst *PxLicenseStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicenseStatusRequest.Merge(dst, src)
}
func (m *PxLicenseStatusRequest) XXX_Size() int {
	return xxx_messageInfo_PxLicenseStatusRequest.Size(m)
}
func (m *PxLicenseStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicenseStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicenseStatusRequest proto.InternalMessageInfo

// Response containing the status of the license
type PxLicenseStatusResponse struct {
	Status               *LicenseStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PxLicenseStatusResponse) Reset()         { *m = PxLicenseStatusResponse{} }
func (m *PxLicenseStatusResponse) String() string { return proto.CompactTextString(m) }
func (*PxLicenseStatusResponse) ProtoMessage()    {}
func (*PxLicenseStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{110}
}
func (m *PxLicenseStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicenseStatusResponse.Unmarshal(m, b)
}
func (m *PxLicenseStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicenseStatusResponse.Marshal(b, m, deterministic)
}
func (dst *PxLicenseStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicenseStatusResponse.Merge(dst, src)
}
func (m *PxLicenseStatusResponse) XXX_Size() int {
	return xxx_messageInfo_PxLicenseStatusResponse.Size(m)
}
func (m *PxLicenseStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicenseStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicenseStatusResponse proto.InternalMessageInfo

func (m *PxLicenseStatusResponse) GetStatus() *LicenseStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// LicenseStatus is the message used to describe status of the license.
type LicenseStatus struct {
	// SKU of the license.
	Sku string `protobuf:"bytes,1,opt,name=sku" json:"sku,omitempty"`
	// License expiry date, if any. If the license is permanent (non-expiring), the "seconds" field is 0.
	// When using a floating license from a license server, each node leases the license
	// for a short time and then renews the lease before it expires. In such case, this field indicates
	// when the current lease expires on the node that is serving the request.
	ExpiresOn *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expires_on,json=expiresOn" json:"expires_on,omitempty"`
	// Endpoints for the license server, if any.
	LicenseServerEndpoints []string `protobuf:"bytes,3,rep,name=licenseServerEndpoints" json:"licenseServerEndpoints,omitempty"`
	// Messages associated with the license indicating any errors, warnings etc.
	Conditions           []*LicenseCondition `protobuf:"bytes,4,rep,name=conditions" json:"conditions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *LicenseStatus) Reset()         { *m = LicenseStatus{} }
func (m *LicenseStatus) String() string { return proto.CompactTextString(m) }
func (*LicenseStatus) ProtoMessage()    {}
func (*LicenseStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{111}
}
func (m *LicenseStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LicenseStatus.Unmarshal(m, b)
}
func (m *LicenseStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LicenseStatus.Marshal(b, m, deterministic)
}
func (dst *LicenseStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseStatus.Merge(dst, src)
}
func (m *LicenseStatus) XXX_Size() int {
	return xxx_messageInfo_LicenseStatus.Size(m)
}
func (m *LicenseStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseStatus.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseStatus proto.InternalMessageInfo

func (m *LicenseStatus) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *LicenseStatus) GetExpiresOn() *timestamp.Timestamp {
	if m != nil {
		return m.ExpiresOn
	}
	return nil
}

func (m *LicenseStatus) GetLicenseServerEndpoints() []string {
	if m != nil {
		return m.LicenseServerEndpoints
	}
	return nil
}

func (m *LicenseStatus) GetConditions() []*LicenseCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

// LicenseCondition has a message associated with the license.
type LicenseCondition struct {
	// Message severity
	Severity LicenseCondition_Severity `protobuf:"varint,1,opt,name=severity,enum=portworx.api.LicenseCondition_Severity" json:"severity,omitempty"`
	// Message
	Message              string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LicenseCondition) Reset()         { *m = LicenseCondition{} }
func (m *LicenseCondition) String() string { return proto.CompactTextString(m) }
func (*LicenseCondition) ProtoMessage()    {}
func (*LicenseCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{112}
}
func (m *LicenseCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LicenseCondition.Unmarshal(m, b)
}
func (m *LicenseCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LicenseCondition.Marshal(b, m, deterministic)
}
func (dst *LicenseCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseCondition.Merge(dst, src)
}
func (m *LicenseCondition) XXX_Size() int {
	return xxx_messageInfo_LicenseCondition.Size(m)
}
func (m *LicenseCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseCondition.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseCondition proto.InternalMessageInfo

func (m *LicenseCondition) GetSeverity() LicenseCondition_Severity {
	if m != nil {
		return m.Severity
	}
	return LicenseCondition_UNSPECIFIED
}

func (m *LicenseCondition) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// LicensedFeature is the message used to describe a licensed feature.
type LicensedFeature struct {
	// The name of the licensed feature.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// SKU of the license.
	Sku string `protobuf:"bytes,2,opt,name=sku" json:"sku,omitempty"`
	// Description of the licensed feature.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Messages associated with the license feature indicating extra information.
	Conditions []*LicenseCondition `protobuf:"bytes,4,rep,name=conditions" json:"conditions,omitempty"`
	// Indicates whether the license is hidden from the user.
	Hidden bool `protobuf:"varint,5,opt,name=hidden" json:"hidden,omitempty"`
	// License expiry date, if any. If the license is permanent (non-expiring), the "seconds" field is 0.
	// When using a floating license from a license server, each node leases the license
	// for a short time and then renews the lease before it expires. In such case, this field indicates
	// when the current lease expires on the node that is serving the request.
	ExpiresOn *timestamp.Timestamp `protobuf:"bytes,6,opt,name=expires_on,json=expiresOn" json:"expires_on,omitempty"`
	// Indicates whether the feature has a valid license.
	Valid bool `protobuf:"varint,7,opt,name=valid" json:"valid,omitempty"`
	// Licensed quantity which can be one of the fields below depending on the feature.
	//
	// Types that are valid to be assigned to Quantity:
	//	*LicensedFeature_Count
	//	*LicensedFeature_CapacityTb
	//	*LicensedFeature_Enabled
	Quantity             isLicensedFeature_Quantity `protobuf_oneof:"quantity"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LicensedFeature) Reset()         { *m = LicensedFeature{} }
func (m *LicensedFeature) String() string { return proto.CompactTextString(m) }
func (*LicensedFeature) ProtoMessage()    {}
func (*LicensedFeature) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{113}
}
func (m *LicensedFeature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LicensedFeature.Unmarshal(m, b)
}
func (m *LicensedFeature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LicensedFeature.Marshal(b, m, deterministic)
}
func (dst *LicensedFeature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicensedFeature.Merge(dst, src)
}
func (m *LicensedFeature) XXX_Size() int {
	return xxx_messageInfo_LicensedFeature.Size(m)
}
func (m *LicensedFeature) XXX_DiscardUnknown() {
	xxx_messageInfo_LicensedFeature.DiscardUnknown(m)
}

var xxx_messageInfo_LicensedFeature proto.InternalMessageInfo

type isLicensedFeature_Quantity interface {
	isLicensedFeature_Quantity()
}

type LicensedFeature_Count struct {
	Count int64 `protobuf:"varint,200,opt,name=count,oneof"`
}
type LicensedFeature_CapacityTb struct {
	CapacityTb int64 `protobuf:"varint,201,opt,name=capacity_tb,json=capacityTb,oneof"`
}
type LicensedFeature_Enabled struct {
	Enabled bool `protobuf:"varint,202,opt,name=enabled,oneof"`
}

func (*LicensedFeature_Count) isLicensedFeature_Quantity()      {}
func (*LicensedFeature_CapacityTb) isLicensedFeature_Quantity() {}
func (*LicensedFeature_Enabled) isLicensedFeature_Quantity()    {}

func (m *LicensedFeature) GetQuantity() isLicensedFeature_Quantity {
	if m != nil {
		return m.Quantity
	}
	return nil
}

func (m *LicensedFeature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LicensedFeature) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *LicensedFeature) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *LicensedFeature) GetConditions() []*LicenseCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *LicensedFeature) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

func (m *LicensedFeature) GetExpiresOn() *timestamp.Timestamp {
	if m != nil {
		return m.ExpiresOn
	}
	return nil
}

func (m *LicensedFeature) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *LicensedFeature) GetCount() int64 {
	if x, ok := m.GetQuantity().(*LicensedFeature_Count); ok {
		return x.Count
	}
	return 0
}

func (m *LicensedFeature) GetCapacityTb() int64 {
	if x, ok := m.GetQuantity().(*LicensedFeature_CapacityTb); ok {
		return x.CapacityTb
	}
	return 0
}

func (m *LicensedFeature) GetEnabled() bool {
	if x, ok := m.GetQuantity().(*LicensedFeature_Enabled); ok {
		return x.Enabled
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LicensedFeature) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LicensedFeature_OneofMarshaler, _LicensedFeature_OneofUnmarshaler, _LicensedFeature_OneofSizer, []interface{}{
		(*LicensedFeature_Count)(nil),
		(*LicensedFeature_CapacityTb)(nil),
		(*LicensedFeature_Enabled)(nil),
	}
}

func _LicensedFeature_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LicensedFeature)
	// quantity
	switch x := m.Quantity.(type) {
	case *LicensedFeature_Count:
		b.EncodeVarint(200<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Count))
	case *LicensedFeature_CapacityTb:
		b.EncodeVarint(201<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.CapacityTb))
	case *LicensedFeature_Enabled:
		t := uint64(0)
		if x.Enabled {
			t = 1
		}
		b.EncodeVarint(202<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("LicensedFeature.Quantity has unexpected type %T", x)
	}
	return nil
}

func _LicensedFeature_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LicensedFeature)
	switch tag {
	case 200: // quantity.count
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Quantity = &LicensedFeature_Count{int64(x)}
		return true, err
	case 201: // quantity.capacity_tb
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Quantity = &LicensedFeature_CapacityTb{int64(x)}
		return true, err
	case 202: // quantity.enabled
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Quantity = &LicensedFeature_Enabled{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _LicensedFeature_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LicensedFeature)
	// quantity
	switch x := m.Quantity.(type) {
	case *LicensedFeature_Count:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(x.Count))
	case *LicensedFeature_CapacityTb:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(x.CapacityTb))
	case *LicensedFeature_Enabled:
		n += 2 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Empty request
type PxLicensedFeatureEnumerateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicensedFeatureEnumerateRequest) Reset()         { *m = PxLicensedFeatureEnumerateRequest{} }
func (m *PxLicensedFeatureEnumerateRequest) String() string { return proto.CompactTextString(m) }
func (*PxLicensedFeatureEnumerateRequest) ProtoMessage()    {}
func (*PxLicensedFeatureEnumerateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{114}
}
func (m *PxLicensedFeatureEnumerateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicensedFeatureEnumerateRequest.Unmarshal(m, b)
}
func (m *PxLicensedFeatureEnumerateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicensedFeatureEnumerateRequest.Marshal(b, m, deterministic)
}
func (dst *PxLicensedFeatureEnumerateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicensedFeatureEnumerateRequest.Merge(dst, src)
}
func (m *PxLicensedFeatureEnumerateRequest) XXX_Size() int {
	return xxx_messageInfo_PxLicensedFeatureEnumerateRequest.Size(m)
}
func (m *PxLicensedFeatureEnumerateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicensedFeatureEnumerateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicensedFeatureEnumerateRequest proto.InternalMessageInfo

// Respose to enumerate all licensed features
type PxLicensedFeatureEnumerateResponse struct {
	// List of licensed features
	Features             []*LicensedFeature `protobuf:"bytes,1,rep,name=features" json:"features,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PxLicensedFeatureEnumerateResponse) Reset()         { *m = PxLicensedFeatureEnumerateResponse{} }
func (m *PxLicensedFeatureEnumerateResponse) String() string { return proto.CompactTextString(m) }
func (*PxLicensedFeatureEnumerateResponse) ProtoMessage()    {}
func (*PxLicensedFeatureEnumerateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{115}
}
func (m *PxLicensedFeatureEnumerateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicensedFeatureEnumerateResponse.Unmarshal(m, b)
}
func (m *PxLicensedFeatureEnumerateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicensedFeatureEnumerateResponse.Marshal(b, m, deterministic)
}
func (dst *PxLicensedFeatureEnumerateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicensedFeatureEnumerateResponse.Merge(dst, src)
}
func (m *PxLicensedFeatureEnumerateResponse) XXX_Size() int {
	return xxx_messageInfo_PxLicensedFeatureEnumerateResponse.Size(m)
}
func (m *PxLicensedFeatureEnumerateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicensedFeatureEnumerateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicensedFeatureEnumerateResponse proto.InternalMessageInfo

func (m *PxLicensedFeatureEnumerateResponse) GetFeatures() []*LicensedFeature {
	if m != nil {
		return m.Features
	}
	return nil
}

// Defines a request to inspect a licensed feature
type PxLicensedFeatureInspectRequest struct {
	// Name of the licensed feature
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicensedFeatureInspectRequest) Reset()         { *m = PxLicensedFeatureInspectRequest{} }
func (m *PxLicensedFeatureInspectRequest) String() string { return proto.CompactTextString(m) }
func (*PxLicensedFeatureInspectRequest) ProtoMessage()    {}
func (*PxLicensedFeatureInspectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{116}
}
func (m *PxLicensedFeatureInspectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicensedFeatureInspectRequest.Unmarshal(m, b)
}
func (m *PxLicensedFeatureInspectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicensedFeatureInspectRequest.Marshal(b, m, deterministic)
}
func (dst *PxLicensedFeatureInspectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicensedFeatureInspectRequest.Merge(dst, src)
}
func (m *PxLicensedFeatureInspectRequest) XXX_Size() int {
	return xxx_messageInfo_PxLicensedFeatureInspectRequest.Size(m)
}
func (m *PxLicensedFeatureInspectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicensedFeatureInspectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicensedFeatureInspectRequest proto.InternalMessageInfo

func (m *PxLicensedFeatureInspectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Response to inspection request
type PxLicensedFeatureInspectResponse struct {
	// Requested licensed feature
	Feature              *LicensedFeature `protobuf:"bytes,1,opt,name=feature" json:"feature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PxLicensedFeatureInspectResponse) Reset()         { *m = PxLicensedFeatureInspectResponse{} }
func (m *PxLicensedFeatureInspectResponse) String() string { return proto.CompactTextString(m) }
func (*PxLicensedFeatureInspectResponse) ProtoMessage()    {}
func (*PxLicensedFeatureInspectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{117}
}
func (m *PxLicensedFeatureInspectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicensedFeatureInspectResponse.Unmarshal(m, b)
}
func (m *PxLicensedFeatureInspectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicensedFeatureInspectResponse.Marshal(b, m, deterministic)
}
func (dst *PxLicensedFeatureInspectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicensedFeatureInspectResponse.Merge(dst, src)
}
func (m *PxLicensedFeatureInspectResponse) XXX_Size() int {
	return xxx_messageInfo_PxLicensedFeatureInspectResponse.Size(m)
}
func (m *PxLicensedFeatureInspectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicensedFeatureInspectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicensedFeatureInspectResponse proto.InternalMessageInfo

func (m *PxLicensedFeatureInspectResponse) GetFeature() *LicensedFeature {
	if m != nil {
		return m.Feature
	}
	return nil
}

// Defines a request to check if a feature is licensed
type PxLicensedFeatureCheckRequest struct {
	// Name of the feature to check
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicensedFeatureCheckRequest) Reset()         { *m = PxLicensedFeatureCheckRequest{} }
func (m *PxLicensedFeatureCheckRequest) String() string { return proto.CompactTextString(m) }
func (*PxLicensedFeatureCheckRequest) ProtoMessage()    {}
func (*PxLicensedFeatureCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{118}
}
func (m *PxLicensedFeatureCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicensedFeatureCheckRequest.Unmarshal(m, b)
}
func (m *PxLicensedFeatureCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicensedFeatureCheckRequest.Marshal(b, m, deterministic)
}
func (dst *PxLicensedFeatureCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicensedFeatureCheckRequest.Merge(dst, src)
}
func (m *PxLicensedFeatureCheckRequest) XXX_Size() int {
	return xxx_messageInfo_PxLicensedFeatureCheckRequest.Size(m)
}
func (m *PxLicensedFeatureCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicensedFeatureCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicensedFeatureCheckRequest proto.InternalMessageInfo

func (m *PxLicensedFeatureCheckRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Response to check request.
type PxLicensedFeatureCheckResponse struct {
	// Set to true if the feature exists and has a valid license. Otherwise, set to false.
	Valid                bool     `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PxLicensedFeatureCheckResponse) Reset()         { *m = PxLicensedFeatureCheckResponse{} }
func (m *PxLicensedFeatureCheckResponse) String() string { return proto.CompactTextString(m) }
func (*PxLicensedFeatureCheckResponse) ProtoMessage()    {}
func (*PxLicensedFeatureCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ade1ad2c02bdcece, []int{119}
}
func (m *PxLicensedFeatureCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PxLicensedFeatureCheckResponse.Unmarshal(m, b)
}
func (m *PxLicensedFeatureCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PxLicensedFeatureCheckResponse.Marshal(b, m, deterministic)
}
func (dst *PxLicensedFeatureCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PxLicensedFeatureCheckResponse.Merge(dst, src)
}
func (m *PxLicensedFeatureCheckResponse) XXX_Size() int {
	return xxx_messageInfo_PxLicensedFeatureCheckResponse.Size(m)
}
func (m *PxLicensedFeatureCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PxLicensedFeatureCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PxLicensedFeatureCheckResponse proto.InternalMessageInfo

func (m *PxLicensedFeatureCheckResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func init() {
	proto.RegisterType((*PxTelemetryCheck)(nil), "portworx.api.PxTelemetryCheck")
	proto.RegisterType((*PxTelemetryCheckDetails)(nil), "portworx.api.PxTelemetryCheckDetails")
	proto.RegisterType((*Telemetry)(nil), "portworx.api.Telemetry")
	proto.RegisterType((*TelemetryStatusResponse)(nil), "portworx.api.TelemetryStatusResponse")
	proto.RegisterType((*TelemetryStatus)(nil), "portworx.api.TelemetryStatus")
	proto.RegisterType((*TelemetryStatusComponent)(nil), "portworx.api.TelemetryStatusComponent")
	proto.RegisterType((*TelemetryCommonStatus)(nil), "portworx.api.TelemetryCommonStatus")
	proto.RegisterType((*TelemetryCertStatus)(nil), "portworx.api.TelemetryCertStatus")
	proto.RegisterType((*TelemetryServerStatus)(nil), "portworx.api.TelemetryServerStatus")
	proto.RegisterType((*TelemetryConnectionStatusResponse)(nil), "portworx.api.TelemetryConnectionStatusResponse")
	proto.RegisterType((*TelemetryConnectionStatus)(nil), "portworx.api.TelemetryConnectionStatus")
	proto.RegisterType((*PxTelemetryStatusRequest)(nil), "portworx.api.PxTelemetryStatusRequest")
	proto.RegisterType((*PxTelemetryStatusResponse)(nil), "portworx.api.PxTelemetryStatusResponse")
	proto.RegisterType((*Maintenance)(nil), "portworx.api.Maintenance")
	proto.RegisterType((*CallHome)(nil), "portworx.api.CallHome")
	proto.RegisterType((*PxMaintenanceOpsUpdateRequest)(nil), "portworx.api.PxMaintenanceOpsUpdateRequest")
	proto.RegisterType((*PxMaintenanceOpsUpdateResponse)(nil), "portworx.api.PxMaintenanceOpsUpdateResponse")
	proto.RegisterType((*PxCallHomeUpdateRequest)(nil), "portworx.api.PxCallHomeUpdateRequest")
	proto.RegisterType((*PxCallHomeUpdateResponse)(nil), "portworx.api.PxCallHomeUpdateResponse")
	proto.RegisterType((*PxAuditRequest)(nil), "portworx.api.PxAuditRequest")
	proto.RegisterType((*AuditResult)(nil), "portworx.api.AuditResult")
	proto.RegisterType((*PxAuditResponse)(nil), "portworx.api.PxAuditResponse")
	proto.RegisterType((*EmailConfig)(nil), "portworx.api.EmailConfig")
	proto.RegisterType((*KvdbEndPoints)(nil), "portworx.api.KvdbEndPoints")
	proto.RegisterType((*KvdbMemberInfo)(nil), "portworx.api.KvdbMemberInfo")
	proto.RegisterType((*PxSetEmailConfigRequest)(nil), "portworx.api.PxSetEmailConfigRequest")
	proto.RegisterType((*PxSetEmailConfigResponse)(nil), "portworx.api.PxSetEmailConfigResponse")
	proto.RegisterType((*PxGetEmailConfigRequest)(nil), "portworx.api.PxGetEmailConfigRequest")
	proto.RegisterType((*PxGetEmailConfigResponse)(nil), "portworx.api.PxGetEmailConfigResponse")
	proto.RegisterType((*PxDeleteEmailConfigRequest)(nil), "portworx.api.PxDeleteEmailConfigRequest")
	proto.RegisterType((*PxDeleteEmailConfigResponse)(nil), "portworx.api.PxDeleteEmailConfigResponse")
	proto.RegisterType((*SlackConfig)(nil), "portworx.api.SlackConfig")
	proto.RegisterType((*PxSetSlackConfigRequest)(nil), "portworx.api.PxSetSlackConfigRequest")
	proto.RegisterType((*PxSetSlackConfigResponse)(nil), "portworx.api.PxSetSlackConfigResponse")
	proto.RegisterType((*PxDeleteSlackConfigRequest)(nil), "portworx.api.PxDeleteSlackConfigRequest")
	proto.RegisterType((*PxDeleteSlackConfigResponse)(nil), "portworx.api.PxDeleteSlackConfigResponse")
	proto.RegisterType((*PxGetSlackConfigRequest)(nil), "portworx.api.PxGetSlackConfigRequest")
	proto.RegisterType((*PxGetSlackConfigResponse)(nil), "portworx.api.PxGetSlackConfigResponse")
	proto.RegisterType((*PxExitDaemonRequest)(nil), "portworx.api.PxExitDaemonRequest")
	proto.RegisterType((*PxExitDaemonResponse)(nil), "portworx.api.PxExitDaemonResponse")
	proto.RegisterType((*PxKvdbEndpointRequest)(nil), "portworx.api.PxKvdbEndpointRequest")
	proto.RegisterType((*PxKvdbEndpointResponse)(nil), "portworx.api.PxKvdbEndpointResponse")
	proto.RegisterType((*PxToggleStatusRequest)(nil), "portworx.api.PxToggleStatusRequest")
	proto.RegisterType((*PxToggleStatusResponse)(nil), "portworx.api.PxToggleStatusResponse")
	proto.RegisterType((*PxCacheInfoRequest)(nil), "portworx.api.PxCacheInfoRequest")
	proto.RegisterType((*PxCacheInfoResponse)(nil), "portworx.api.PxCacheInfoResponse")
	proto.RegisterType((*CacheInfo)(nil), "portworx.api.CacheInfo")
	proto.RegisterType((*PxKvdbMemberRequest)(nil), "portworx.api.PxKvdbMemberRequest")
	proto.RegisterType((*PxKvdbMemberResponse)(nil), "portworx.api.PxKvdbMemberResponse")
	proto.RegisterMapType((map[string]*KvdbMemberInfo)(nil), "portworx.api.PxKvdbMemberResponse.KvdbMemberInfoEntry")
	proto.RegisterType((*PxCacheConfigRequest)(nil), "portworx.api.PxCacheConfigRequest")
	proto.RegisterType((*PxCacheConfigResponse)(nil), "portworx.api.PxCacheConfigResponse")
	proto.RegisterType((*CacheConfig)(nil), "portworx.api.CacheConfig")
	proto.RegisterType((*CacheFlush)(nil), "portworx.api.CacheFlush")
	proto.RegisterType((*PxCacheFlushRequest)(nil), "portworx.api.PxCacheFlushRequest")
	proto.RegisterType((*PxCacheFlushResponse)(nil), "portworx.api.PxCacheFlushResponse")
	proto.RegisterType((*PxPoolUpdateRequest)(nil), "portworx.api.PxPoolUpdateRequest")
	proto.RegisterType((*PxPoolUpdateResponse)(nil), "portworx.api.PxPoolUpdateResponse")
	proto.RegisterType((*DeviceScan)(nil), "portworx.api.DeviceScan")
	proto.RegisterType((*PxDeviceScanRequest)(nil), "portworx.api.PxDeviceScanRequest")
	proto.RegisterType((*PxScanStatus)(nil), "portworx.api.PxScanStatus")
	proto.RegisterType((*PxDeviceScanResponse)(nil), "portworx.api.PxDeviceScanResponse")
	proto.RegisterType((*PxDeviceScanStatusRequest)(nil), "portworx.api.PxDeviceScanStatusRequest")
	proto.RegisterType((*PxDeviceScanStatusResponse)(nil), "portworx.api.PxDeviceScanStatusResponse")
	proto.RegisterType((*ScheduleIntervalDaily)(nil), "portworx.api.ScheduleIntervalDaily")
	proto.RegisterType((*ScheduleIntervalWeekly)(nil), "portworx.api.ScheduleIntervalWeekly")
	proto.RegisterType((*ScheduleIntervalMonthly)(nil), "portworx.api.ScheduleIntervalMonthly")
	proto.RegisterType((*ScheduleInterval)(nil), "portworx.api.ScheduleInterval")
	proto.RegisterType((*PxDeviceScanScheduleGetRequest)(nil), "portworx.api.PxDeviceScanScheduleGetRequest")
	proto.RegisterType((*PxDeviceScanScheduleClearRequest)(nil), "portworx.api.PxDeviceScanScheduleClearRequest")
	proto.RegisterType((*PxDeviceScanScheduleSetRequest)(nil), "portworx.api.PxDeviceScanScheduleSetRequest")
	proto.RegisterType((*PxDeviceScanScheduleResponse)(nil), "portworx.api.PxDeviceScanScheduleResponse")
	proto.RegisterType((*BootstrapEntry)(nil), "portworx.api.BootstrapEntry")
	proto.RegisterType((*PxKvdbGetBootstrapEntriesRequest)(nil), "portworx.api.PxKvdbGetBootstrapEntriesRequest")
	proto.RegisterType((*PxKvdbGetBootstrapEntriesResponse)(nil), "portworx.api.PxKvdbGetBootstrapEntriesResponse")
	proto.RegisterType((*PxKvdbGetDeviceInfoRequest)(nil), "portworx.api.PxKvdbGetDeviceInfoRequest")
	proto.RegisterType((*PxKvdbGetDeviceInfoResponse)(nil), "portworx.api.PxKvdbGetDeviceInfoResponse")
	proto.RegisterType((*PxDefragmentKvdbNodeRequest)(nil), "portworx.api.PxDefragmentKvdbNodeRequest")
	proto.RegisterType((*PxDefragmentKvdbNodeResponse)(nil), "portworx.api.PxDefragmentKvdbNodeResponse")
	proto.RegisterType((*Storage)(nil), "portworx.api.Storage")
	proto.RegisterType((*StorageInfo)(nil), "portworx.api.StorageInfo")
	proto.RegisterMapType((map[string]*api.StorageResource)(nil), "portworx.api.StorageInfo.ResourcesEntry")
	proto.RegisterType((*CloudResourceInfo)(nil), "portworx.api.CloudResourceInfo")
	proto.RegisterMapType((map[string]string)(nil), "portworx.api.CloudResourceInfo.LabelsEntry")
	proto.RegisterType((*InstanceGroupInfo)(nil), "portworx.api.InstanceGroupInfo")
	proto.RegisterType((*Geography)(nil), "portworx.api.Geography")
	proto.RegisterType((*StoragePool)(nil), "portworx.api.StoragePool")
	proto.RegisterType((*StorageSpec)(nil), "portworx.api.StorageSpec")
	proto.RegisterMapType((map[string]string)(nil), "portworx.api.StorageSpec.LabelsEntry")
	proto.RegisterType((*PxGetStorageSpecRequest)(nil), "portworx.api.PxGetStorageSpecRequest")
	proto.RegisterType((*PxGetStorageSpecResponse)(nil), "portworx.api.PxGetStorageSpecResponse")
	proto.RegisterType((*PxDriveCheckRequest)(nil), "portworx.api.PxDriveCheckRequest")
	proto.RegisterType((*PxDriveCheckResponse)(nil), "portworx.api.PxDriveCheckResponse")
	proto.RegisterType((*DriveRebalance)(nil), "portworx.api.DriveRebalance")
	proto.RegisterType((*PxDriveRebalanceRequest)(nil), "portworx.api.PxDriveRebalanceRequest")
	proto.RegisterType((*DriveReplace)(nil), "portworx.api.DriveReplace")
	proto.RegisterType((*PxDriveRebalanceResponse)(nil), "portworx.api.PxDriveRebalanceResponse")
	proto.RegisterType((*PxDriveReplaceRequest)(nil), "portworx.api.PxDriveReplaceRequest")
	proto.RegisterType((*PxDriveReplaceResponse)(nil), "portworx.api.PxDriveReplaceResponse")
	proto.RegisterType((*PxPoolDeleteRequest)(nil), "portworx.api.PxPoolDeleteRequest")
	proto.RegisterType((*PxPoolDeleteResponse)(nil), "portworx.api.PxPoolDeleteResponse")
	proto.RegisterType((*PxPoolMaintenanceRequest)(nil), "portworx.api.PxPoolMaintenanceRequest")
	proto.RegisterType((*PxPoolMaintenanceResponse)(nil), "portworx.api.PxPoolMaintenanceResponse")
	proto.RegisterType((*PxLicenseInstallByActivationIDRequest)(nil), "portworx.api.PxLicenseInstallByActivationIDRequest")
	proto.RegisterType((*PxLicenseInstallByActivationIDResponse)(nil), "portworx.api.PxLicenseInstallByActivationIDResponse")
	proto.RegisterType((*PxLicenseInstallByLicenseRequest)(nil), "portworx.api.PxLicenseInstallByLicenseRequest")
	proto.RegisterType((*PxLicenseInstallByLicenseResponse)(nil), "portworx.api.PxLicenseInstallByLicenseResponse")
	proto.RegisterType((*PxLicenseUninstallByActivationIDRequest)(nil), "portworx.api.PxLicenseUninstallByActivationIDRequest")
	proto.RegisterType((*PxLicenseUninstallByActivationIDResponse)(nil), "portworx.api.PxLicenseUninstallByActivationIDResponse")
	proto.RegisterType((*PxLicenseReleaseRequest)(nil), "portworx.api.PxLicenseReleaseRequest")
	proto.RegisterType((*PxLicenseReleaseResponse)(nil), "portworx.api.PxLicenseReleaseResponse")
	proto.RegisterType((*PxLicenseSetServerRequest)(nil), "portworx.api.PxLicenseSetServerRequest")
	proto.RegisterType((*PxLicenseSetServerResponse)(nil), "portworx.api.PxLicenseSetServerResponse")
	proto.RegisterType((*PxLicenseStatusRequest)(nil), "portworx.api.PxLicenseStatusRequest")
	proto.RegisterType((*PxLicenseStatusResponse)(nil), "portworx.api.PxLicenseStatusResponse")
	proto.RegisterType((*LicenseStatus)(nil), "portworx.api.LicenseStatus")
	proto.RegisterType((*LicenseCondition)(nil), "portworx.api.LicenseCondition")
	proto.RegisterType((*LicensedFeature)(nil), "portworx.api.LicensedFeature")
	proto.RegisterType((*PxLicensedFeatureEnumerateRequest)(nil), "portworx.api.PxLicensedFeatureEnumerateRequest")
	proto.RegisterType((*PxLicensedFeatureEnumerateResponse)(nil), "portworx.api.PxLicensedFeatureEnumerateResponse")
	proto.RegisterType((*PxLicensedFeatureInspectRequest)(nil), "portworx.api.PxLicensedFeatureInspectRequest")
	proto.RegisterType((*PxLicensedFeatureInspectResponse)(nil), "portworx.api.PxLicensedFeatureInspectResponse")
	proto.RegisterType((*PxLicensedFeatureCheckRequest)(nil), "portworx.api.PxLicensedFeatureCheckRequest")
	proto.RegisterType((*PxLicensedFeatureCheckResponse)(nil), "portworx.api.PxLicensedFeatureCheckResponse")
	proto.RegisterEnum("portworx.api.PoolPriority", PoolPriority_name, PoolPriority_value)
	proto.RegisterEnum("portworx.api.Weekday", Weekday_name, Weekday_value)
	proto.RegisterEnum("portworx.api.BootstrapNodeState", BootstrapNodeState_name, BootstrapNodeState_value)
	proto.RegisterEnum("portworx.api.BootstrapNodeType", BootstrapNodeType_name, BootstrapNodeType_value)
	proto.RegisterEnum("portworx.api.DataDirType", DataDirType_name, DataDirType_value)
	proto.RegisterEnum("portworx.api.BlockDriverType", BlockDriverType_name, BlockDriverType_value)
	proto.RegisterEnum("portworx.api.TargetDsType", TargetDsType_name, TargetDsType_value)
	proto.RegisterEnum("portworx.api.PoolType", PoolType_name, PoolType_value)
	proto.RegisterEnum("portworx.api.Telemetry_StatusCode", Telemetry_StatusCode_name, Telemetry_StatusCode_value)
	proto.RegisterEnum("portworx.api.Maintenance_OperationType", Maintenance_OperationType_name, Maintenance_OperationType_value)
	proto.RegisterEnum("portworx.api.CallHome_OperationType", CallHome_OperationType_name, CallHome_OperationType_value)
	proto.RegisterEnum("portworx.api.CacheFlush_OperationType", CacheFlush_OperationType_name, CacheFlush_OperationType_value)
	proto.RegisterEnum("portworx.api.DeviceScan_OperationType", DeviceScan_OperationType_name, DeviceScan_OperationType_value)
	proto.RegisterEnum("portworx.api.DeviceScan_ResponseType", DeviceScan_ResponseType_name, DeviceScan_ResponseType_value)
	proto.RegisterEnum("portworx.api.Storage_Status", Storage_Status_name, Storage_Status_value)
	proto.RegisterEnum("portworx.api.DriveRebalance_OperationType", DriveRebalance_OperationType_name, DriveRebalance_OperationType_value)
	proto.RegisterEnum("portworx.api.DriveReplace_OperationType", DriveReplace_OperationType_name, DriveReplace_OperationType_value)
	proto.RegisterEnum("portworx.api.LicenseCondition_Severity", LicenseCondition_Severity_name, LicenseCondition_Severity_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PortworxTelemetry service

type PortworxTelemetryClient interface {
	// Get information about the installed license.
	Status(ctx context.Context, in *PxTelemetryStatusRequest, opts ...grpc.CallOption) (*PxTelemetryStatusResponse, error)
}

type portworxTelemetryClient struct {
	cc *grpc.ClientConn
}

func NewPortworxTelemetryClient(cc *grpc.ClientConn) PortworxTelemetryClient {
	return &portworxTelemetryClient{cc}
}

func (c *portworxTelemetryClient) Status(ctx context.Context, in *PxTelemetryStatusRequest, opts ...grpc.CallOption) (*PxTelemetryStatusResponse, error) {
	out := new(PxTelemetryStatusResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxTelemetry/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PortworxTelemetry service

type PortworxTelemetryServer interface {
	// Get information about the installed license.
	Status(context.Context, *PxTelemetryStatusRequest) (*PxTelemetryStatusResponse, error)
}

func RegisterPortworxTelemetryServer(s *grpc.Server, srv PortworxTelemetryServer) {
	s.RegisterService(&_PortworxTelemetry_serviceDesc, srv)
}

func _PortworxTelemetry_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxTelemetryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxTelemetryServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxTelemetry/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxTelemetryServer).Status(ctx, req.(*PxTelemetryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortworxTelemetry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portworx.api.PortworxTelemetry",
	HandlerType: (*PortworxTelemetryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _PortworxTelemetry_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "px/api/api.proto",
}

// Client API for PortworxLicense service

type PortworxLicenseClient interface {
	// Install license by providing an activation ID.
	InstallByActivationID(ctx context.Context, in *PxLicenseInstallByActivationIDRequest, opts ...grpc.CallOption) (*PxLicenseInstallByActivationIDResponse, error)
	// Install by providing a license BLOB. Existing license is overwritten. This is used in air-gapped environment
	// where there is no connectivity from the Portworx nodes to the license server.
	InstallByLicense(ctx context.Context, in *PxLicenseInstallByLicenseRequest, opts ...grpc.CallOption) (*PxLicenseInstallByLicenseResponse, error)
	// Uninstall the license by its activation ID.
	UninstallByActivationID(ctx context.Context, in *PxLicenseUninstallByActivationIDRequest, opts ...grpc.CallOption) (*PxLicenseUninstallByActivationIDResponse, error)
	// Release the license from this cluster for use on another cluster.
	Release(ctx context.Context, in *PxLicenseReleaseRequest, opts ...grpc.CallOption) (*PxLicenseReleaseResponse, error)
	// Specify a license server that manages the licenses. When using a license server, install/uninstall of the license
	// is performed on the license server. Portworx cluster requests a floating license from the license server.
	SetServer(ctx context.Context, in *PxLicenseSetServerRequest, opts ...grpc.CallOption) (*PxLicenseSetServerResponse, error)
	// Get information about the installed license.
	Status(ctx context.Context, in *PxLicenseStatusRequest, opts ...grpc.CallOption) (*PxLicenseStatusResponse, error)
}

type portworxLicenseClient struct {
	cc *grpc.ClientConn
}

func NewPortworxLicenseClient(cc *grpc.ClientConn) PortworxLicenseClient {
	return &portworxLicenseClient{cc}
}

func (c *portworxLicenseClient) InstallByActivationID(ctx context.Context, in *PxLicenseInstallByActivationIDRequest, opts ...grpc.CallOption) (*PxLicenseInstallByActivationIDResponse, error) {
	out := new(PxLicenseInstallByActivationIDResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxLicense/InstallByActivationID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxLicenseClient) InstallByLicense(ctx context.Context, in *PxLicenseInstallByLicenseRequest, opts ...grpc.CallOption) (*PxLicenseInstallByLicenseResponse, error) {
	out := new(PxLicenseInstallByLicenseResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxLicense/InstallByLicense", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxLicenseClient) UninstallByActivationID(ctx context.Context, in *PxLicenseUninstallByActivationIDRequest, opts ...grpc.CallOption) (*PxLicenseUninstallByActivationIDResponse, error) {
	out := new(PxLicenseUninstallByActivationIDResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxLicense/UninstallByActivationID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxLicenseClient) Release(ctx context.Context, in *PxLicenseReleaseRequest, opts ...grpc.CallOption) (*PxLicenseReleaseResponse, error) {
	out := new(PxLicenseReleaseResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxLicense/Release", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxLicenseClient) SetServer(ctx context.Context, in *PxLicenseSetServerRequest, opts ...grpc.CallOption) (*PxLicenseSetServerResponse, error) {
	out := new(PxLicenseSetServerResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxLicense/SetServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxLicenseClient) Status(ctx context.Context, in *PxLicenseStatusRequest, opts ...grpc.CallOption) (*PxLicenseStatusResponse, error) {
	out := new(PxLicenseStatusResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxLicense/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PortworxLicense service

type PortworxLicenseServer interface {
	// Install license by providing an activation ID.
	InstallByActivationID(context.Context, *PxLicenseInstallByActivationIDRequest) (*PxLicenseInstallByActivationIDResponse, error)
	// Install by providing a license BLOB. Existing license is overwritten. This is used in air-gapped environment
	// where there is no connectivity from the Portworx nodes to the license server.
	InstallByLicense(context.Context, *PxLicenseInstallByLicenseRequest) (*PxLicenseInstallByLicenseResponse, error)
	// Uninstall the license by its activation ID.
	UninstallByActivationID(context.Context, *PxLicenseUninstallByActivationIDRequest) (*PxLicenseUninstallByActivationIDResponse, error)
	// Release the license from this cluster for use on another cluster.
	Release(context.Context, *PxLicenseReleaseRequest) (*PxLicenseReleaseResponse, error)
	// Specify a license server that manages the licenses. When using a license server, install/uninstall of the license
	// is performed on the license server. Portworx cluster requests a floating license from the license server.
	SetServer(context.Context, *PxLicenseSetServerRequest) (*PxLicenseSetServerResponse, error)
	// Get information about the installed license.
	Status(context.Context, *PxLicenseStatusRequest) (*PxLicenseStatusResponse, error)
}

func RegisterPortworxLicenseServer(s *grpc.Server, srv PortworxLicenseServer) {
	s.RegisterService(&_PortworxLicense_serviceDesc, srv)
}

func _PortworxLicense_InstallByActivationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicenseInstallByActivationIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicenseServer).InstallByActivationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicense/InstallByActivationID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicenseServer).InstallByActivationID(ctx, req.(*PxLicenseInstallByActivationIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxLicense_InstallByLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicenseInstallByLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicenseServer).InstallByLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicense/InstallByLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicenseServer).InstallByLicense(ctx, req.(*PxLicenseInstallByLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxLicense_UninstallByActivationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicenseUninstallByActivationIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicenseServer).UninstallByActivationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicense/UninstallByActivationID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicenseServer).UninstallByActivationID(ctx, req.(*PxLicenseUninstallByActivationIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxLicense_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicenseReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicenseServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicense/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicenseServer).Release(ctx, req.(*PxLicenseReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxLicense_SetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicenseSetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicenseServer).SetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicense/SetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicenseServer).SetServer(ctx, req.(*PxLicenseSetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxLicense_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicenseStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicenseServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicense/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicenseServer).Status(ctx, req.(*PxLicenseStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortworxLicense_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portworx.api.PortworxLicense",
	HandlerType: (*PortworxLicenseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallByActivationID",
			Handler:    _PortworxLicense_InstallByActivationID_Handler,
		},
		{
			MethodName: "InstallByLicense",
			Handler:    _PortworxLicense_InstallByLicense_Handler,
		},
		{
			MethodName: "UninstallByActivationID",
			Handler:    _PortworxLicense_UninstallByActivationID_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _PortworxLicense_Release_Handler,
		},
		{
			MethodName: "SetServer",
			Handler:    _PortworxLicense_SetServer_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _PortworxLicense_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "px/api/api.proto",
}

// Client API for PortworxLicensedFeature service

type PortworxLicensedFeatureClient interface {
	// List all licensed features.
	Enumerate(ctx context.Context, in *PxLicensedFeatureEnumerateRequest, opts ...grpc.CallOption) (*PxLicensedFeatureEnumerateResponse, error)
	// Get information about a licensed feature.
	Inspect(ctx context.Context, in *PxLicensedFeatureInspectRequest, opts ...grpc.CallOption) (*PxLicensedFeatureInspectResponse, error)
	// Check if the license for feature is valid. Unlike `Inspect`, `Check` does not fail even when the specified feature
	// does not exist.
	Check(ctx context.Context, in *PxLicensedFeatureCheckRequest, opts ...grpc.CallOption) (*PxLicensedFeatureCheckResponse, error)
}

type portworxLicensedFeatureClient struct {
	cc *grpc.ClientConn
}

func NewPortworxLicensedFeatureClient(cc *grpc.ClientConn) PortworxLicensedFeatureClient {
	return &portworxLicensedFeatureClient{cc}
}

func (c *portworxLicensedFeatureClient) Enumerate(ctx context.Context, in *PxLicensedFeatureEnumerateRequest, opts ...grpc.CallOption) (*PxLicensedFeatureEnumerateResponse, error) {
	out := new(PxLicensedFeatureEnumerateResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxLicensedFeature/Enumerate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxLicensedFeatureClient) Inspect(ctx context.Context, in *PxLicensedFeatureInspectRequest, opts ...grpc.CallOption) (*PxLicensedFeatureInspectResponse, error) {
	out := new(PxLicensedFeatureInspectResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxLicensedFeature/Inspect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxLicensedFeatureClient) Check(ctx context.Context, in *PxLicensedFeatureCheckRequest, opts ...grpc.CallOption) (*PxLicensedFeatureCheckResponse, error) {
	out := new(PxLicensedFeatureCheckResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxLicensedFeature/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PortworxLicensedFeature service

type PortworxLicensedFeatureServer interface {
	// List all licensed features.
	Enumerate(context.Context, *PxLicensedFeatureEnumerateRequest) (*PxLicensedFeatureEnumerateResponse, error)
	// Get information about a licensed feature.
	Inspect(context.Context, *PxLicensedFeatureInspectRequest) (*PxLicensedFeatureInspectResponse, error)
	// Check if the license for feature is valid. Unlike `Inspect`, `Check` does not fail even when the specified feature
	// does not exist.
	Check(context.Context, *PxLicensedFeatureCheckRequest) (*PxLicensedFeatureCheckResponse, error)
}

func RegisterPortworxLicensedFeatureServer(s *grpc.Server, srv PortworxLicensedFeatureServer) {
	s.RegisterService(&_PortworxLicensedFeature_serviceDesc, srv)
}

func _PortworxLicensedFeature_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicensedFeatureEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicensedFeatureServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicensedFeature/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicensedFeatureServer).Enumerate(ctx, req.(*PxLicensedFeatureEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxLicensedFeature_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicensedFeatureInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicensedFeatureServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicensedFeature/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicensedFeatureServer).Inspect(ctx, req.(*PxLicensedFeatureInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxLicensedFeature_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxLicensedFeatureCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxLicensedFeatureServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxLicensedFeature/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxLicensedFeatureServer).Check(ctx, req.(*PxLicensedFeatureCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortworxLicensedFeature_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portworx.api.PortworxLicensedFeature",
	HandlerType: (*PortworxLicensedFeatureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enumerate",
			Handler:    _PortworxLicensedFeature_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _PortworxLicensedFeature_Inspect_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _PortworxLicensedFeature_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "px/api/api.proto",
}

// Client API for PortworxService service

type PortworxServiceClient interface {
	//  makes the portworx node enter maintenance mode
	MaintenanceOpsUpdate(ctx context.Context, in *PxMaintenanceOpsUpdateRequest, opts ...grpc.CallOption) (*PxMaintenanceOpsUpdateResponse, error)
	// To update the callhome state.
	CallHomeUpdate(ctx context.Context, in *PxCallHomeUpdateRequest, opts ...grpc.CallOption) (*PxCallHomeUpdateResponse, error)
	// To get the audit result from portworx node.
	Audit(ctx context.Context, in *PxAuditRequest, opts ...grpc.CallOption) (*PxAuditResponse, error)
	// To set the email config for alerts
	SetEmailConfig(ctx context.Context, in *PxSetEmailConfigRequest, opts ...grpc.CallOption) (*PxSetEmailConfigResponse, error)
	// To get the email config for alerts
	GetEmailConfig(ctx context.Context, in *PxGetEmailConfigRequest, opts ...grpc.CallOption) (*PxGetEmailConfigResponse, error)
	// To delete the email config for alerts
	DeleteEmailConfig(ctx context.Context, in *PxDeleteEmailConfigRequest, opts ...grpc.CallOption) (*PxDeleteEmailConfigResponse, error)
	// To set the slack config for alerts
	SetSlackConfig(ctx context.Context, in *PxSetSlackConfigRequest, opts ...grpc.CallOption) (*PxSetSlackConfigResponse, error)
	// To delete the slack config for alerts
	DeleteSlackConfig(ctx context.Context, in *PxDeleteSlackConfigRequest, opts ...grpc.CallOption) (*PxDeleteSlackConfigResponse, error)
	// To get the slack config for alerts
	GetSlackConfig(ctx context.Context, in *PxGetSlackConfigRequest, opts ...grpc.CallOption) (*PxGetSlackConfigResponse, error)
	// To stop or exit Px Daemon.
	ExitDaemon(ctx context.Context, in *PxExitDaemonRequest, opts ...grpc.CallOption) (*PxExitDaemonResponse, error)
	// To fetch kvdb endpoints
	GetKvdbEndpoints(ctx context.Context, in *PxKvdbEndpointRequest, opts ...grpc.CallOption) (*PxKvdbEndpointResponse, error)
	// Fetching kvdb member info
	GetKvdbMemberInfo(ctx context.Context, in *PxKvdbMemberRequest, opts ...grpc.CallOption) (*PxKvdbMemberResponse, error)
	// GetKvdbBootstrapEntries enumerates the nodes which are a part of the current kvdb cluster
	GetKvdbBootstrapEntries(ctx context.Context, in *PxKvdbGetBootstrapEntriesRequest, opts ...grpc.CallOption) (*PxKvdbGetBootstrapEntriesResponse, error)
	// Fetch kvdb device for this node
	GetKvdbDeviceInfo(ctx context.Context, in *PxKvdbGetDeviceInfoRequest, opts ...grpc.CallOption) (*PxKvdbGetDeviceInfoResponse, error)
	// start defragmenting of kvdb cluster node for the given endpoint
	// to defragment multiple members in the cluster, user need to call defragment multiple times with different endpoints
	DefragmentKvdbNode(ctx context.Context, in *PxDefragmentKvdbNodeRequest, opts ...grpc.CallOption) (*PxDefragmentKvdbNodeResponse, error)
	// GetStorageSpec returns this node's storage info, including storage pools, drives, etc...
	GetStorageSpec(ctx context.Context, in *PxGetStorageSpecRequest, opts ...grpc.CallOption) (*PxGetStorageSpecResponse, error)
	// PoolUpdate updates mutable storage pool properties
	PoolUpdate(ctx context.Context, in *PxPoolUpdateRequest, opts ...grpc.CallOption) (*PxPoolUpdateResponse, error)
	// PoolDelete deletes storage pool
	PoolDelete(ctx context.Context, in *PxPoolDeleteRequest, opts ...grpc.CallOption) (*PxPoolDeleteResponse, error)
	// PoolMaintenance does transition of all pools to maintenance mode
	PoolMaintenance(ctx context.Context, in *PxPoolMaintenanceRequest, opts ...grpc.CallOption) (*PxPoolMaintenanceResponse, error)
	// DriveCheck run diagnostics on all the in-use drives
	DriveCheck(ctx context.Context, in *PxDriveCheckRequest, opts ...grpc.CallOption) (*PxDriveCheckResponse, error)
	// DriveRebalance rebalance data within a given pool
	DriveRebalance(ctx context.Context, in *PxDriveRebalanceRequest, opts ...grpc.CallOption) (*PxDriveRebalanceResponse, error)
	// DriveReplace replaces source drive with target drive
	DriveReplace(ctx context.Context, in *PxDriveReplaceRequest, opts ...grpc.CallOption) (*PxDriveReplaceResponse, error)
	DeviceScan(ctx context.Context, in *PxDeviceScanRequest, opts ...grpc.CallOption) (*PxDeviceScanResponse, error)
	DeviceScanStatus(ctx context.Context, in *PxDeviceScanStatusRequest, opts ...grpc.CallOption) (*PxDeviceScanStatusResponse, error)
	GetDeviceScanSchedule(ctx context.Context, in *PxDeviceScanScheduleGetRequest, opts ...grpc.CallOption) (*PxDeviceScanScheduleResponse, error)
	SetDeviceScanSchedule(ctx context.Context, in *PxDeviceScanScheduleSetRequest, opts ...grpc.CallOption) (*PxDeviceScanScheduleResponse, error)
	ClearDeviceScanSchedule(ctx context.Context, in *PxDeviceScanScheduleClearRequest, opts ...grpc.CallOption) (*PxDeviceScanScheduleResponse, error)
}

type portworxServiceClient struct {
	cc *grpc.ClientConn
}

func NewPortworxServiceClient(cc *grpc.ClientConn) PortworxServiceClient {
	return &portworxServiceClient{cc}
}

func (c *portworxServiceClient) MaintenanceOpsUpdate(ctx context.Context, in *PxMaintenanceOpsUpdateRequest, opts ...grpc.CallOption) (*PxMaintenanceOpsUpdateResponse, error) {
	out := new(PxMaintenanceOpsUpdateResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/MaintenanceOpsUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) CallHomeUpdate(ctx context.Context, in *PxCallHomeUpdateRequest, opts ...grpc.CallOption) (*PxCallHomeUpdateResponse, error) {
	out := new(PxCallHomeUpdateResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/CallHomeUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) Audit(ctx context.Context, in *PxAuditRequest, opts ...grpc.CallOption) (*PxAuditResponse, error) {
	out := new(PxAuditResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/Audit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) SetEmailConfig(ctx context.Context, in *PxSetEmailConfigRequest, opts ...grpc.CallOption) (*PxSetEmailConfigResponse, error) {
	out := new(PxSetEmailConfigResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/SetEmailConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetEmailConfig(ctx context.Context, in *PxGetEmailConfigRequest, opts ...grpc.CallOption) (*PxGetEmailConfigResponse, error) {
	out := new(PxGetEmailConfigResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/GetEmailConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DeleteEmailConfig(ctx context.Context, in *PxDeleteEmailConfigRequest, opts ...grpc.CallOption) (*PxDeleteEmailConfigResponse, error) {
	out := new(PxDeleteEmailConfigResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/DeleteEmailConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) SetSlackConfig(ctx context.Context, in *PxSetSlackConfigRequest, opts ...grpc.CallOption) (*PxSetSlackConfigResponse, error) {
	out := new(PxSetSlackConfigResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/SetSlackConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DeleteSlackConfig(ctx context.Context, in *PxDeleteSlackConfigRequest, opts ...grpc.CallOption) (*PxDeleteSlackConfigResponse, error) {
	out := new(PxDeleteSlackConfigResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/DeleteSlackConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetSlackConfig(ctx context.Context, in *PxGetSlackConfigRequest, opts ...grpc.CallOption) (*PxGetSlackConfigResponse, error) {
	out := new(PxGetSlackConfigResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/GetSlackConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) ExitDaemon(ctx context.Context, in *PxExitDaemonRequest, opts ...grpc.CallOption) (*PxExitDaemonResponse, error) {
	out := new(PxExitDaemonResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/ExitDaemon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetKvdbEndpoints(ctx context.Context, in *PxKvdbEndpointRequest, opts ...grpc.CallOption) (*PxKvdbEndpointResponse, error) {
	out := new(PxKvdbEndpointResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/GetKvdbEndpoints", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetKvdbMemberInfo(ctx context.Context, in *PxKvdbMemberRequest, opts ...grpc.CallOption) (*PxKvdbMemberResponse, error) {
	out := new(PxKvdbMemberResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/GetKvdbMemberInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetKvdbBootstrapEntries(ctx context.Context, in *PxKvdbGetBootstrapEntriesRequest, opts ...grpc.CallOption) (*PxKvdbGetBootstrapEntriesResponse, error) {
	out := new(PxKvdbGetBootstrapEntriesResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/GetKvdbBootstrapEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetKvdbDeviceInfo(ctx context.Context, in *PxKvdbGetDeviceInfoRequest, opts ...grpc.CallOption) (*PxKvdbGetDeviceInfoResponse, error) {
	out := new(PxKvdbGetDeviceInfoResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/GetKvdbDeviceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DefragmentKvdbNode(ctx context.Context, in *PxDefragmentKvdbNodeRequest, opts ...grpc.CallOption) (*PxDefragmentKvdbNodeResponse, error) {
	out := new(PxDefragmentKvdbNodeResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/DefragmentKvdbNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetStorageSpec(ctx context.Context, in *PxGetStorageSpecRequest, opts ...grpc.CallOption) (*PxGetStorageSpecResponse, error) {
	out := new(PxGetStorageSpecResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/GetStorageSpec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) PoolUpdate(ctx context.Context, in *PxPoolUpdateRequest, opts ...grpc.CallOption) (*PxPoolUpdateResponse, error) {
	out := new(PxPoolUpdateResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/PoolUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) PoolDelete(ctx context.Context, in *PxPoolDeleteRequest, opts ...grpc.CallOption) (*PxPoolDeleteResponse, error) {
	out := new(PxPoolDeleteResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/PoolDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) PoolMaintenance(ctx context.Context, in *PxPoolMaintenanceRequest, opts ...grpc.CallOption) (*PxPoolMaintenanceResponse, error) {
	out := new(PxPoolMaintenanceResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/PoolMaintenance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DriveCheck(ctx context.Context, in *PxDriveCheckRequest, opts ...grpc.CallOption) (*PxDriveCheckResponse, error) {
	out := new(PxDriveCheckResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/DriveCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DriveRebalance(ctx context.Context, in *PxDriveRebalanceRequest, opts ...grpc.CallOption) (*PxDriveRebalanceResponse, error) {
	out := new(PxDriveRebalanceResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/DriveRebalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DriveReplace(ctx context.Context, in *PxDriveReplaceRequest, opts ...grpc.CallOption) (*PxDriveReplaceResponse, error) {
	out := new(PxDriveReplaceResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/DriveReplace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DeviceScan(ctx context.Context, in *PxDeviceScanRequest, opts ...grpc.CallOption) (*PxDeviceScanResponse, error) {
	out := new(PxDeviceScanResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/DeviceScan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) DeviceScanStatus(ctx context.Context, in *PxDeviceScanStatusRequest, opts ...grpc.CallOption) (*PxDeviceScanStatusResponse, error) {
	out := new(PxDeviceScanStatusResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/DeviceScanStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) GetDeviceScanSchedule(ctx context.Context, in *PxDeviceScanScheduleGetRequest, opts ...grpc.CallOption) (*PxDeviceScanScheduleResponse, error) {
	out := new(PxDeviceScanScheduleResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/GetDeviceScanSchedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) SetDeviceScanSchedule(ctx context.Context, in *PxDeviceScanScheduleSetRequest, opts ...grpc.CallOption) (*PxDeviceScanScheduleResponse, error) {
	out := new(PxDeviceScanScheduleResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/SetDeviceScanSchedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxServiceClient) ClearDeviceScanSchedule(ctx context.Context, in *PxDeviceScanScheduleClearRequest, opts ...grpc.CallOption) (*PxDeviceScanScheduleResponse, error) {
	out := new(PxDeviceScanScheduleResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxService/ClearDeviceScanSchedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PortworxService service

type PortworxServiceServer interface {
	//  makes the portworx node enter maintenance mode
	MaintenanceOpsUpdate(context.Context, *PxMaintenanceOpsUpdateRequest) (*PxMaintenanceOpsUpdateResponse, error)
	// To update the callhome state.
	CallHomeUpdate(context.Context, *PxCallHomeUpdateRequest) (*PxCallHomeUpdateResponse, error)
	// To get the audit result from portworx node.
	Audit(context.Context, *PxAuditRequest) (*PxAuditResponse, error)
	// To set the email config for alerts
	SetEmailConfig(context.Context, *PxSetEmailConfigRequest) (*PxSetEmailConfigResponse, error)
	// To get the email config for alerts
	GetEmailConfig(context.Context, *PxGetEmailConfigRequest) (*PxGetEmailConfigResponse, error)
	// To delete the email config for alerts
	DeleteEmailConfig(context.Context, *PxDeleteEmailConfigRequest) (*PxDeleteEmailConfigResponse, error)
	// To set the slack config for alerts
	SetSlackConfig(context.Context, *PxSetSlackConfigRequest) (*PxSetSlackConfigResponse, error)
	// To delete the slack config for alerts
	DeleteSlackConfig(context.Context, *PxDeleteSlackConfigRequest) (*PxDeleteSlackConfigResponse, error)
	// To get the slack config for alerts
	GetSlackConfig(context.Context, *PxGetSlackConfigRequest) (*PxGetSlackConfigResponse, error)
	// To stop or exit Px Daemon.
	ExitDaemon(context.Context, *PxExitDaemonRequest) (*PxExitDaemonResponse, error)
	// To fetch kvdb endpoints
	GetKvdbEndpoints(context.Context, *PxKvdbEndpointRequest) (*PxKvdbEndpointResponse, error)
	// Fetching kvdb member info
	GetKvdbMemberInfo(context.Context, *PxKvdbMemberRequest) (*PxKvdbMemberResponse, error)
	// GetKvdbBootstrapEntries enumerates the nodes which are a part of the current kvdb cluster
	GetKvdbBootstrapEntries(context.Context, *PxKvdbGetBootstrapEntriesRequest) (*PxKvdbGetBootstrapEntriesResponse, error)
	// Fetch kvdb device for this node
	GetKvdbDeviceInfo(context.Context, *PxKvdbGetDeviceInfoRequest) (*PxKvdbGetDeviceInfoResponse, error)
	// start defragmenting of kvdb cluster node for the given endpoint
	// to defragment multiple members in the cluster, user need to call defragment multiple times with different endpoints
	DefragmentKvdbNode(context.Context, *PxDefragmentKvdbNodeRequest) (*PxDefragmentKvdbNodeResponse, error)
	// GetStorageSpec returns this node's storage info, including storage pools, drives, etc...
	GetStorageSpec(context.Context, *PxGetStorageSpecRequest) (*PxGetStorageSpecResponse, error)
	// PoolUpdate updates mutable storage pool properties
	PoolUpdate(context.Context, *PxPoolUpdateRequest) (*PxPoolUpdateResponse, error)
	// PoolDelete deletes storage pool
	PoolDelete(context.Context, *PxPoolDeleteRequest) (*PxPoolDeleteResponse, error)
	// PoolMaintenance does transition of all pools to maintenance mode
	PoolMaintenance(context.Context, *PxPoolMaintenanceRequest) (*PxPoolMaintenanceResponse, error)
	// DriveCheck run diagnostics on all the in-use drives
	DriveCheck(context.Context, *PxDriveCheckRequest) (*PxDriveCheckResponse, error)
	// DriveRebalance rebalance data within a given pool
	DriveRebalance(context.Context, *PxDriveRebalanceRequest) (*PxDriveRebalanceResponse, error)
	// DriveReplace replaces source drive with target drive
	DriveReplace(context.Context, *PxDriveReplaceRequest) (*PxDriveReplaceResponse, error)
	DeviceScan(context.Context, *PxDeviceScanRequest) (*PxDeviceScanResponse, error)
	DeviceScanStatus(context.Context, *PxDeviceScanStatusRequest) (*PxDeviceScanStatusResponse, error)
	GetDeviceScanSchedule(context.Context, *PxDeviceScanScheduleGetRequest) (*PxDeviceScanScheduleResponse, error)
	SetDeviceScanSchedule(context.Context, *PxDeviceScanScheduleSetRequest) (*PxDeviceScanScheduleResponse, error)
	ClearDeviceScanSchedule(context.Context, *PxDeviceScanScheduleClearRequest) (*PxDeviceScanScheduleResponse, error)
}

func RegisterPortworxServiceServer(s *grpc.Server, srv PortworxServiceServer) {
	s.RegisterService(&_PortworxService_serviceDesc, srv)
}

func _PortworxService_MaintenanceOpsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxMaintenanceOpsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).MaintenanceOpsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/MaintenanceOpsUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).MaintenanceOpsUpdate(ctx, req.(*PxMaintenanceOpsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_CallHomeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxCallHomeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).CallHomeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/CallHomeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).CallHomeUpdate(ctx, req.(*PxCallHomeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_Audit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).Audit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/Audit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).Audit(ctx, req.(*PxAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_SetEmailConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxSetEmailConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).SetEmailConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/SetEmailConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).SetEmailConfig(ctx, req.(*PxSetEmailConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetEmailConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxGetEmailConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetEmailConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetEmailConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetEmailConfig(ctx, req.(*PxGetEmailConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DeleteEmailConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDeleteEmailConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DeleteEmailConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DeleteEmailConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DeleteEmailConfig(ctx, req.(*PxDeleteEmailConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_SetSlackConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxSetSlackConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).SetSlackConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/SetSlackConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).SetSlackConfig(ctx, req.(*PxSetSlackConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DeleteSlackConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDeleteSlackConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DeleteSlackConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DeleteSlackConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DeleteSlackConfig(ctx, req.(*PxDeleteSlackConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetSlackConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxGetSlackConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetSlackConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetSlackConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetSlackConfig(ctx, req.(*PxGetSlackConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_ExitDaemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxExitDaemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).ExitDaemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/ExitDaemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).ExitDaemon(ctx, req.(*PxExitDaemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetKvdbEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxKvdbEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetKvdbEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetKvdbEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetKvdbEndpoints(ctx, req.(*PxKvdbEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetKvdbMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxKvdbMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetKvdbMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetKvdbMemberInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetKvdbMemberInfo(ctx, req.(*PxKvdbMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetKvdbBootstrapEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxKvdbGetBootstrapEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetKvdbBootstrapEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetKvdbBootstrapEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetKvdbBootstrapEntries(ctx, req.(*PxKvdbGetBootstrapEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetKvdbDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxKvdbGetDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetKvdbDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetKvdbDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetKvdbDeviceInfo(ctx, req.(*PxKvdbGetDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DefragmentKvdbNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDefragmentKvdbNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DefragmentKvdbNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DefragmentKvdbNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DefragmentKvdbNode(ctx, req.(*PxDefragmentKvdbNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetStorageSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxGetStorageSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetStorageSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetStorageSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetStorageSpec(ctx, req.(*PxGetStorageSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_PoolUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxPoolUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).PoolUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/PoolUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).PoolUpdate(ctx, req.(*PxPoolUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_PoolDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxPoolDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).PoolDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/PoolDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).PoolDelete(ctx, req.(*PxPoolDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_PoolMaintenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxPoolMaintenanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).PoolMaintenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/PoolMaintenance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).PoolMaintenance(ctx, req.(*PxPoolMaintenanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DriveCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDriveCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DriveCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DriveCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DriveCheck(ctx, req.(*PxDriveCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DriveRebalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDriveRebalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DriveRebalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DriveRebalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DriveRebalance(ctx, req.(*PxDriveRebalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DriveReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDriveReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DriveReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DriveReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DriveReplace(ctx, req.(*PxDriveReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DeviceScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDeviceScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DeviceScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DeviceScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DeviceScan(ctx, req.(*PxDeviceScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_DeviceScanStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDeviceScanStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).DeviceScanStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/DeviceScanStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).DeviceScanStatus(ctx, req.(*PxDeviceScanStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_GetDeviceScanSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDeviceScanScheduleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).GetDeviceScanSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/GetDeviceScanSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).GetDeviceScanSchedule(ctx, req.(*PxDeviceScanScheduleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_SetDeviceScanSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDeviceScanScheduleSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).SetDeviceScanSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/SetDeviceScanSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).SetDeviceScanSchedule(ctx, req.(*PxDeviceScanScheduleSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxService_ClearDeviceScanSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxDeviceScanScheduleClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxServiceServer).ClearDeviceScanSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxService/ClearDeviceScanSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxServiceServer).ClearDeviceScanSchedule(ctx, req.(*PxDeviceScanScheduleClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortworxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portworx.api.PortworxService",
	HandlerType: (*PortworxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MaintenanceOpsUpdate",
			Handler:    _PortworxService_MaintenanceOpsUpdate_Handler,
		},
		{
			MethodName: "CallHomeUpdate",
			Handler:    _PortworxService_CallHomeUpdate_Handler,
		},
		{
			MethodName: "Audit",
			Handler:    _PortworxService_Audit_Handler,
		},
		{
			MethodName: "SetEmailConfig",
			Handler:    _PortworxService_SetEmailConfig_Handler,
		},
		{
			MethodName: "GetEmailConfig",
			Handler:    _PortworxService_GetEmailConfig_Handler,
		},
		{
			MethodName: "DeleteEmailConfig",
			Handler:    _PortworxService_DeleteEmailConfig_Handler,
		},
		{
			MethodName: "SetSlackConfig",
			Handler:    _PortworxService_SetSlackConfig_Handler,
		},
		{
			MethodName: "DeleteSlackConfig",
			Handler:    _PortworxService_DeleteSlackConfig_Handler,
		},
		{
			MethodName: "GetSlackConfig",
			Handler:    _PortworxService_GetSlackConfig_Handler,
		},
		{
			MethodName: "ExitDaemon",
			Handler:    _PortworxService_ExitDaemon_Handler,
		},
		{
			MethodName: "GetKvdbEndpoints",
			Handler:    _PortworxService_GetKvdbEndpoints_Handler,
		},
		{
			MethodName: "GetKvdbMemberInfo",
			Handler:    _PortworxService_GetKvdbMemberInfo_Handler,
		},
		{
			MethodName: "GetKvdbBootstrapEntries",
			Handler:    _PortworxService_GetKvdbBootstrapEntries_Handler,
		},
		{
			MethodName: "GetKvdbDeviceInfo",
			Handler:    _PortworxService_GetKvdbDeviceInfo_Handler,
		},
		{
			MethodName: "DefragmentKvdbNode",
			Handler:    _PortworxService_DefragmentKvdbNode_Handler,
		},
		{
			MethodName: "GetStorageSpec",
			Handler:    _PortworxService_GetStorageSpec_Handler,
		},
		{
			MethodName: "PoolUpdate",
			Handler:    _PortworxService_PoolUpdate_Handler,
		},
		{
			MethodName: "PoolDelete",
			Handler:    _PortworxService_PoolDelete_Handler,
		},
		{
			MethodName: "PoolMaintenance",
			Handler:    _PortworxService_PoolMaintenance_Handler,
		},
		{
			MethodName: "DriveCheck",
			Handler:    _PortworxService_DriveCheck_Handler,
		},
		{
			MethodName: "DriveRebalance",
			Handler:    _PortworxService_DriveRebalance_Handler,
		},
		{
			MethodName: "DriveReplace",
			Handler:    _PortworxService_DriveReplace_Handler,
		},
		{
			MethodName: "DeviceScan",
			Handler:    _PortworxService_DeviceScan_Handler,
		},
		{
			MethodName: "DeviceScanStatus",
			Handler:    _PortworxService_DeviceScanStatus_Handler,
		},
		{
			MethodName: "GetDeviceScanSchedule",
			Handler:    _PortworxService_GetDeviceScanSchedule_Handler,
		},
		{
			MethodName: "SetDeviceScanSchedule",
			Handler:    _PortworxService_SetDeviceScanSchedule_Handler,
		},
		{
			MethodName: "ClearDeviceScanSchedule",
			Handler:    _PortworxService_ClearDeviceScanSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "px/api/api.proto",
}

// Client API for PortworxStoragePoolCache service

type PortworxStoragePoolCacheClient interface {
	// ToggleStatus performs status toggle for storage pool cache
	// basically it does cache attachment to or de-attachment from storage pool
	ToggleStatus(ctx context.Context, in *PxToggleStatusRequest, opts ...grpc.CallOption) (*PxToggleStatusResponse, error)
	// GetInfo returns cache info for storage pool cache
	// CacheInfo provides statistics and config params
	GetInfo(ctx context.Context, in *PxCacheInfoRequest, opts ...grpc.CallOption) (*PxCacheInfoResponse, error)
	// Configure sets parameters for storage pool cache
	Configure(ctx context.Context, in *PxCacheConfigRequest, opts ...grpc.CallOption) (*PxCacheConfigResponse, error)
	// Flush initiates cache flush through background cleaner policy on writeback caches
	Flush(ctx context.Context, in *PxCacheFlushRequest, opts ...grpc.CallOption) (*PxCacheFlushResponse, error)
}

type portworxStoragePoolCacheClient struct {
	cc *grpc.ClientConn
}

func NewPortworxStoragePoolCacheClient(cc *grpc.ClientConn) PortworxStoragePoolCacheClient {
	return &portworxStoragePoolCacheClient{cc}
}

func (c *portworxStoragePoolCacheClient) ToggleStatus(ctx context.Context, in *PxToggleStatusRequest, opts ...grpc.CallOption) (*PxToggleStatusResponse, error) {
	out := new(PxToggleStatusResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxStoragePoolCache/ToggleStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxStoragePoolCacheClient) GetInfo(ctx context.Context, in *PxCacheInfoRequest, opts ...grpc.CallOption) (*PxCacheInfoResponse, error) {
	out := new(PxCacheInfoResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxStoragePoolCache/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxStoragePoolCacheClient) Configure(ctx context.Context, in *PxCacheConfigRequest, opts ...grpc.CallOption) (*PxCacheConfigResponse, error) {
	out := new(PxCacheConfigResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxStoragePoolCache/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portworxStoragePoolCacheClient) Flush(ctx context.Context, in *PxCacheFlushRequest, opts ...grpc.CallOption) (*PxCacheFlushResponse, error) {
	out := new(PxCacheFlushResponse)
	err := grpc.Invoke(ctx, "/portworx.api.PortworxStoragePoolCache/Flush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PortworxStoragePoolCache service

type PortworxStoragePoolCacheServer interface {
	// ToggleStatus performs status toggle for storage pool cache
	// basically it does cache attachment to or de-attachment from storage pool
	ToggleStatus(context.Context, *PxToggleStatusRequest) (*PxToggleStatusResponse, error)
	// GetInfo returns cache info for storage pool cache
	// CacheInfo provides statistics and config params
	GetInfo(context.Context, *PxCacheInfoRequest) (*PxCacheInfoResponse, error)
	// Configure sets parameters for storage pool cache
	Configure(context.Context, *PxCacheConfigRequest) (*PxCacheConfigResponse, error)
	// Flush initiates cache flush through background cleaner policy on writeback caches
	Flush(context.Context, *PxCacheFlushRequest) (*PxCacheFlushResponse, error)
}

func RegisterPortworxStoragePoolCacheServer(s *grpc.Server, srv PortworxStoragePoolCacheServer) {
	s.RegisterService(&_PortworxStoragePoolCache_serviceDesc, srv)
}

func _PortworxStoragePoolCache_ToggleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxToggleStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxStoragePoolCacheServer).ToggleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxStoragePoolCache/ToggleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxStoragePoolCacheServer).ToggleStatus(ctx, req.(*PxToggleStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxStoragePoolCache_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxCacheInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxStoragePoolCacheServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxStoragePoolCache/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxStoragePoolCacheServer).GetInfo(ctx, req.(*PxCacheInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxStoragePoolCache_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxCacheConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxStoragePoolCacheServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxStoragePoolCache/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxStoragePoolCacheServer).Configure(ctx, req.(*PxCacheConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortworxStoragePoolCache_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PxCacheFlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortworxStoragePoolCacheServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portworx.api.PortworxStoragePoolCache/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortworxStoragePoolCacheServer).Flush(ctx, req.(*PxCacheFlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortworxStoragePoolCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portworx.api.PortworxStoragePoolCache",
	HandlerType: (*PortworxStoragePoolCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToggleStatus",
			Handler:    _PortworxStoragePoolCache_ToggleStatus_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _PortworxStoragePoolCache_GetInfo_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _PortworxStoragePoolCache_Configure_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _PortworxStoragePoolCache_Flush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "px/api/api.proto",
}

func init() { proto.RegisterFile("px/api/api.proto", fileDescriptor_api_ade1ad2c02bdcece) }

var fileDescriptor_api_ade1ad2c02bdcece = []byte{
	// 7250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x7c, 0x4b, 0x6c, 0x1c, 0x49,
	0x96, 0x98, 0xaa, 0x8a, 0x9f, 0xaa, 0xc7, 0x62, 0x31, 0x19, 0x92, 0xc8, 0x52, 0x49, 0xd4, 0x27,
	0xf5, 0x6d, 0x4e, 0x8b, 0xec, 0xa5, 0xba, 0xb5, 0xd3, 0xed, 0xed, 0x99, 0xa1, 0x48, 0x4a, 0xe2,
	0xb6, 0x44, 0x71, 0x93, 0x52, 0xf7, 0x62, 0x67, 0xdb, 0xb9, 0x59, 0x99, 0xc1, 0x62, 0x2e, 0xb3,
	0x32, 0x72, 0xf2, 0xc3, 0x4f, 0x2f, 0x16, 0x3b, 0x1f, 0x7b, 0x3e, 0xc0, 0x8c, 0x01, 0xdb, 0x63,
	0x0f, 0x60, 0xc0, 0x86, 0x2f, 0x06, 0x8c, 0x39, 0x18, 0x03, 0xdb, 0x87, 0x01, 0x0c, 0xdf, 0x6d,
	0x1f, 0x7c, 0x19, 0x5f, 0x6c, 0x1f, 0x0c, 0xc3, 0x3e, 0xf8, 0xe2, 0xab, 0xcf, 0x46, 0xbc, 0x88,
	0xc8, 0xca, 0x5f, 0x91, 0xea, 0xee, 0x39, 0x14, 0x90, 0xf1, 0xe2, 0xc5, 0x8b, 0x17, 0x2f, 0x5e,
	0xbc, 0x78, 0xf1, 0x5e, 0x44, 0x81, 0x16, 0x9c, 0xac, 0x5a, 0x81, 0xcb, 0x7f, 0x2b, 0x41, 0xc8,
	0x62, 0x46, 0xda, 0x01, 0x0b, 0xe3, 0x63, 0x16, 0x9e, 0xac, 0x58, 0x81, 0xdb, 0xbb, 0x36, 0x60,
	0x6c, 0xe0, 0x51, 0x81, 0xe3, 0xfb, 0x2c, 0xb6, 0x62, 0x97, 0xf9, 0x91, 0xc0, 0xed, 0x5d, 0x97,
	0xb5, 0x58, 0xea, 0x27, 0xfb, 0xab, 0xc7, 0xa1, 0x15, 0x04, 0x34, 0x54, 0xf5, 0x37, 0x8a, 0xf5,
	0xb1, 0x3b, 0xa4, 0x51, 0x6c, 0x0d, 0x03, 0x89, 0xf0, 0x68, 0xe0, 0xc6, 0x07, 0x49, 0x7f, 0xc5,
	0x66, 0xc3, 0x55, 0xcf, 0xed, 0xb3, 0x80, 0xfa, 0x51, 0xcc, 0x42, 0x6b, 0x40, 0x57, 0xb3, 0xdf,
	0x39, 0x0e, 0xf5, 0x7f, 0x57, 0x03, 0x6d, 0xf7, 0xe4, 0x35, 0xf5, 0xe8, 0x90, 0xc6, 0xe1, 0xe9,
	0xc6, 0x01, 0xb5, 0x0f, 0x09, 0x81, 0x09, 0xdf, 0x1a, 0xd2, 0x6e, 0xed, 0x66, 0xed, 0x41, 0xcb,
	0xc0, 0x6f, 0xb2, 0x00, 0x53, 0x51, 0x6c, 0xc5, 0x49, 0xd4, 0xad, 0x23, 0x54, 0x96, 0xc8, 0x4d,
	0x98, 0x71, 0x68, 0x64, 0x87, 0x6e, 0xc0, 0x07, 0xd3, 0x6d, 0x60, 0x65, 0x16, 0x44, 0xba, 0x30,
	0x3d, 0xa4, 0x51, 0x64, 0x0d, 0x68, 0x77, 0x02, 0x6b, 0x55, 0x91, 0x7c, 0x1b, 0xa6, 0x1d, 0x1a,
	0x5b, 0xae, 0x17, 0x75, 0x27, 0x6f, 0xd6, 0x1e, 0xcc, 0xac, 0xdd, 0x5d, 0xc9, 0x0a, 0x6c, 0xa5,
	0xc8, 0xd8, 0xa6, 0x40, 0x36, 0x54, 0x2b, 0xfd, 0x97, 0x35, 0x58, 0x1c, 0x83, 0x44, 0x7a, 0xd0,
	0x3c, 0x60, 0x51, 0x9c, 0x19, 0x48, 0x5a, 0x26, 0xef, 0x02, 0xb1, 0xec, 0xd8, 0x3d, 0xc2, 0x09,
	0x30, 0x83, 0xa4, 0x6f, 0x1e, 0xd2, 0x53, 0x39, 0x30, 0x6d, 0x54, 0xb3, 0x9b, 0xf4, 0x3f, 0xa1,
	0xa7, 0xe4, 0x2a, 0xb4, 0x82, 0x90, 0x9d, 0x9c, 0x9a, 0x49, 0xe8, 0xc9, 0x01, 0x36, 0x11, 0xf0,
	0x26, 0xf4, 0xb8, 0xac, 0x38, 0xcf, 0x38, 0xb4, 0x86, 0x81, 0xdf, 0xfa, 0xff, 0xad, 0x43, 0x2b,
	0x65, 0x4a, 0xff, 0x1f, 0x75, 0x80, 0x3d, 0x14, 0xd6, 0x06, 0x73, 0x28, 0x99, 0x81, 0xe9, 0x37,
	0xfe, 0xa1, 0xcf, 0x8e, 0x7d, 0xed, 0x02, 0xb9, 0x08, 0x73, 0x2f, 0xd8, 0xe0, 0x4d, 0xe0, 0x31,
	0xcb, 0x79, 0x6a, 0xb9, 0x1e, 0x75, 0xb4, 0x1a, 0x21, 0xd0, 0x59, 0x0f, 0x82, 0x0d, 0x1a, 0xc6,
	0xdb, 0xfe, 0x91, 0xe5, 0xb9, 0x8e, 0x56, 0xcf, 0xc0, 0x54, 0xe3, 0x06, 0x99, 0x87, 0x59, 0x83,
	0x0e, 0x24, 0xce, 0x1f, 0x1f, 0xc7, 0xda, 0x04, 0xe9, 0xc2, 0x25, 0x83, 0x0e, 0xd6, 0xbd, 0x90,
	0x5a, 0xce, 0xa9, 0x41, 0x07, 0x6e, 0x14, 0xd3, 0x90, 0x3a, 0xda, 0x24, 0xb9, 0x04, 0x9a, 0x41,
	0x07, 0x3b, 0x2c, 0xce, 0x40, 0xa7, 0xc8, 0x2c, 0xb4, 0x0c, 0x3a, 0x78, 0xe3, 0x1f, 0x72, 0x8a,
	0xd3, 0xe4, 0x0a, 0x5c, 0x36, 0x68, 0x14, 0x87, 0xae, 0x1d, 0x53, 0x67, 0xd7, 0xf5, 0x07, 0xaf,
	0xdd, 0x21, 0x65, 0x49, 0xac, 0x35, 0xc9, 0x12, 0x5c, 0xc9, 0x57, 0xbd, 0xf1, 0x43, 0x6a, 0xd9,
	0x07, 0x56, 0xdf, 0xa3, 0x5a, 0xab, 0xdc, 0x52, 0xb1, 0x09, 0x9c, 0xcd, 0x5d, 0x29, 0xad, 0x5d,
	0x2b, 0x8c, 0xa8, 0x36, 0x43, 0x3a, 0x00, 0x9b, 0x7e, 0xa4, 0x88, 0xb7, 0x39, 0x1b, 0x9b, 0x7e,
	0x24, 0xd9, 0x98, 0xe5, 0x52, 0xc1, 0x16, 0x1b, 0xcc, 0xf7, 0xa9, 0xcd, 0x67, 0x42, 0xeb, 0x90,
	0x36, 0x34, 0xf7, 0x9c, 0xc3, 0xad, 0x30, 0x64, 0xa1, 0x36, 0xc7, 0xa5, 0xb8, 0x97, 0xd8, 0x36,
	0x8d, 0x22, 0xcd, 0xd1, 0x5f, 0xc3, 0x62, 0x2a, 0x6e, 0x21, 0x69, 0x83, 0x46, 0x01, 0xf3, 0x23,
	0x4a, 0x3e, 0x84, 0x66, 0x28, 0xbf, 0x51, 0x0b, 0x66, 0xd6, 0x96, 0xf2, 0x3a, 0x56, 0x6c, 0x98,
	0xa2, 0xeb, 0x3f, 0x9a, 0x80, 0xb9, 0x42, 0x2d, 0xd1, 0xa0, 0x41, 0xfd, 0x23, 0xa9, 0x4f, 0xfc,
	0x93, 0xdc, 0x82, 0x76, 0x10, 0x32, 0x27, 0xb1, 0x63, 0x13, 0x55, 0x4d, 0x28, 0xd1, 0x8c, 0x84,
	0xed, 0x70, 0x6d, 0xbb, 0x05, 0x6d, 0x2b, 0x08, 0x3c, 0xd7, 0xf2, 0x6d, 0x6a, 0xba, 0x8e, 0x5a,
	0x23, 0x29, 0x6c, 0xdb, 0x21, 0x9b, 0xd0, 0xb2, 0xd9, 0x30, 0x60, 0x3e, 0xf5, 0x85, 0x2a, 0xcd,
	0xac, 0xdd, 0x3b, 0x93, 0xcf, 0x0d, 0x85, 0x6d, 0x8c, 0x1a, 0x92, 0x3f, 0x84, 0x89, 0xc0, 0xf5,
	0x07, 0x72, 0x31, 0xdd, 0x1e, 0x43, 0x60, 0x83, 0x0d, 0x87, 0xcc, 0x97, 0xc3, 0xc5, 0x06, 0xe4,
	0xdb, 0xd0, 0x1c, 0x52, 0xc7, 0xb5, 0x62, 0x16, 0x76, 0xa7, 0xde, 0xbe, 0x71, 0xda, 0x88, 0x3c,
	0x87, 0xce, 0x68, 0x88, 0x36, 0x0d, 0xe3, 0xee, 0x34, 0x92, 0xb9, 0x35, 0x8e, 0x0c, 0x0d, 0x63,
	0x49, 0x64, 0x36, 0x6d, 0xc8, 0x81, 0x64, 0x13, 0xda, 0x21, 0xf5, 0xa8, 0x15, 0x49, 0x3a, 0xcd,
	0xb7, 0xa5, 0x33, 0x23, 0x9b, 0x21, 0x95, 0xe7, 0x30, 0x1b, 0xd1, 0xf0, 0x88, 0x86, 0xa6, 0x34,
	0x5a, 0xad, 0x33, 0x47, 0xb5, 0x87, 0xb8, 0x92, 0x50, 0x3b, 0xca, 0x94, 0x74, 0x06, 0xdd, 0x71,
	0xa2, 0xaf, 0xb4, 0x93, 0x59, 0xb3, 0x53, 0x2f, 0x98, 0x9d, 0xdb, 0x30, 0xeb, 0x31, 0xdb, 0xf2,
	0x4c, 0xcb, 0x71, 0x42, 0x1a, 0x45, 0x52, 0x13, 0xda, 0x08, 0x5c, 0x17, 0x30, 0xfd, 0x73, 0xb8,
	0x5c, 0x29, 0xed, 0x8c, 0x05, 0xae, 0xe5, 0x2c, 0x70, 0xc6, 0xbe, 0xd6, 0xf3, 0xf6, 0x95, 0xdb,
	0x26, 0x2b, 0x3e, 0x90, 0xdd, 0xe0, 0xb7, 0xfe, 0xfd, 0x3a, 0x5c, 0xac, 0x10, 0xdf, 0x58, 0xea,
	0x8a, 0x46, 0x7d, 0x44, 0x83, 0xf7, 0x78, 0x44, 0xc3, 0x68, 0x64, 0xef, 0x55, 0x91, 0x8f, 0x30,
	0xa2, 0xa1, 0x6b, 0x79, 0xa6, 0x9f, 0x0c, 0xfb, 0x34, 0x94, 0x16, 0xbf, 0x2d, 0x80, 0x3b, 0x08,
	0xe3, 0x5d, 0xb9, 0x51, 0x94, 0xd0, 0x10, 0x15, 0xb5, 0x65, 0xc8, 0x12, 0x36, 0x76, 0x07, 0xbe,
	0x15, 0x27, 0x21, 0x35, 0x2d, 0x6f, 0x80, 0xaa, 0xc8, 0x1b, 0x2b, 0xe0, 0xba, 0x37, 0x20, 0xf7,
	0x61, 0x8e, 0x9e, 0x04, 0x6e, 0x28, 0x4c, 0xb7, 0x63, 0xc5, 0x14, 0x55, 0xad, 0x65, 0x74, 0x46,
	0xe0, 0x4d, 0x2b, 0xa6, 0x9c, 0xc9, 0x28, 0xe9, 0xff, 0x25, 0xb5, 0x85, 0x0e, 0xb5, 0x0c, 0x55,
	0xd4, 0xff, 0x6d, 0x2d, 0x23, 0xe2, 0xec, 0xd4, 0xf3, 0x95, 0x2a, 0xd5, 0x06, 0x0d, 0x28, 0x8a,
	0xa2, 0x69, 0xcc, 0x08, 0x98, 0xc1, 0x41, 0x64, 0x15, 0x2e, 0x79, 0x56, 0x14, 0x9b, 0x1e, 0x1b,
	0x98, 0x09, 0xda, 0x6d, 0x93, 0x6f, 0xc4, 0x28, 0x9f, 0x09, 0x63, 0x9e, 0xd7, 0xa5, 0x16, 0x9d,
	0x1b, 0x38, 0xb2, 0x04, 0x10, 0xc5, 0x56, 0x18, 0x0b, 0x34, 0x21, 0xaf, 0x16, 0x42, 0xb0, 0xfa,
	0x01, 0xcc, 0x25, 0x01, 0xaf, 0xda, 0xf6, 0xf7, 0xa8, 0xcd, 0x7c, 0x27, 0x42, 0x99, 0x4d, 0x18,
	0x45, 0xb0, 0x7e, 0x00, 0xb7, 0x32, 0x8a, 0xa1, 0x2c, 0x63, 0xc1, 0xde, 0x6d, 0x94, 0xec, 0xdd,
	0xfd, 0xb1, 0x2b, 0xb9, 0x40, 0x62, 0x64, 0xf9, 0x7e, 0x5b, 0x87, 0x2b, 0x63, 0xf1, 0xc8, 0x0d,
	0x98, 0xb1, 0xed, 0xa1, 0xa9, 0x34, 0x40, 0xa8, 0x0b, 0xd8, 0xf6, 0xf0, 0x53, 0xa9, 0x04, 0xd2,
	0x48, 0xd6, 0xc7, 0x1b, 0xc9, 0xc6, 0xf9, 0x46, 0x72, 0xa2, 0x6c, 0x24, 0xef, 0x83, 0xc6, 0x4d,
	0x82, 0x19, 0x9f, 0x06, 0xd4, 0x74, 0x7d, 0x33, 0x89, 0xa8, 0xd4, 0xa0, 0x59, 0x0e, 0x7f, 0x7d,
	0x1a, 0xd0, 0x6d, 0xff, 0x4d, 0x44, 0xc9, 0x63, 0x98, 0xb2, 0xb9, 0x2b, 0x10, 0x75, 0xa7, 0x6e,
	0x36, 0x1e, 0xcc, 0xac, 0x5d, 0x3f, 0xdb, 0xad, 0x30, 0x24, 0x36, 0x59, 0x07, 0xa0, 0x7c, 0x7f,
	0x31, 0x6d, 0xe6, 0x08, 0xb5, 0xea, 0xac, 0xe9, 0x63, 0xc4, 0xb7, 0x32, 0xda, 0xd2, 0x8d, 0x16,
	0xb6, 0xe2, 0x9f, 0x7a, 0x0f, 0xba, 0x19, 0xf2, 0x6a, 0x72, 0xbe, 0x97, 0xd0, 0x28, 0xd6, 0xff,
	0x65, 0x0d, 0xae, 0x54, 0x54, 0xca, 0x99, 0xfb, 0x20, 0xb7, 0x00, 0xcf, 0xdd, 0xa7, 0xd4, 0xfa,
	0x7c, 0x0d, 0xf3, 0x76, 0x3a, 0x43, 0x66, 0xc6, 0x45, 0xfb, 0x12, 0x33, 0xaf, 0xd9, 0x05, 0x88,
	0xfe, 0x02, 0x66, 0x5e, 0x5a, 0xae, 0x1f, 0x53, 0x9f, 0xcb, 0x5e, 0xff, 0x18, 0x66, 0x5f, 0x05,
	0x54, 0x2c, 0x2e, 0x2e, 0xe6, 0xbc, 0x13, 0xd3, 0x82, 0xc9, 0x2d, 0x3f, 0xa6, 0xa1, 0x56, 0x23,
	0x4d, 0x98, 0xd8, 0x3a, 0x71, 0x63, 0xad, 0x4e, 0x00, 0xa6, 0x0c, 0x1a, 0x58, 0x6e, 0xa8, 0x35,
	0xf4, 0x75, 0x68, 0x6e, 0x58, 0x9e, 0xf7, 0x9c, 0x0d, 0xa9, 0xfe, 0xc1, 0x99, 0xa4, 0x00, 0xa6,
	0xb6, 0x7c, 0x74, 0x29, 0x6a, 0xbc, 0x62, 0xd3, 0x8d, 0xb0, 0x50, 0xd7, 0xf7, 0x61, 0x69, 0xf7,
	0x24, 0xc3, 0xd2, 0xab, 0x20, 0x7a, 0x13, 0xf0, 0xd5, 0x2f, 0x85, 0x4b, 0xb6, 0xa0, 0xc5, 0x14,
	0x5d, 0x94, 0x60, 0xa7, 0x38, 0xfe, 0x4c, 0xeb, 0x95, 0x1c, 0x0b, 0xc6, 0xa8, 0xa5, 0x7e, 0x13,
	0xae, 0x8f, 0xeb, 0x47, 0x2e, 0x8e, 0xcf, 0xb9, 0xcb, 0xa9, 0x86, 0x93, 0xe7, 0xe1, 0x49, 0x99,
	0x87, 0x3b, 0x79, 0x1e, 0x54, 0xbb, 0xf1, 0x0c, 0xa0, 0x02, 0x15, 0xc9, 0xcb, 0xae, 0x35, 0xe8,
	0xec, 0x9e, 0xac, 0x27, 0x8e, 0x1b, 0x2b, 0x95, 0xfa, 0x49, 0x0d, 0x66, 0x24, 0x20, 0x4a, 0xbc,
	0x98, 0x2f, 0xbd, 0xad, 0x30, 0x54, 0xfe, 0xc9, 0x56, 0x18, 0x72, 0xff, 0x1c, 0x11, 0xf6, 0x58,
	0x12, 0xda, 0xa9, 0x7b, 0x92, 0x01, 0x8d, 0x30, 0x84, 0xee, 0x34, 0xb2, 0x18, 0x42, 0xc7, 0x74,
	0x68, 0x63, 0xf1, 0x65, 0xce, 0x8d, 0xcf, 0xc1, 0xf4, 0xa7, 0x30, 0x97, 0xf2, 0x26, 0x35, 0xfa,
	0x11, 0x4c, 0x87, 0xc8, 0x16, 0x57, 0x69, 0xbe, 0x0e, 0xaf, 0xe4, 0x85, 0x91, 0x61, 0xdc, 0x50,
	0x98, 0xfa, 0xaf, 0xeb, 0x30, 0xb3, 0x35, 0xb4, 0x5c, 0x6f, 0x83, 0xf9, 0xfb, 0xee, 0x80, 0xef,
	0xa7, 0x49, 0x44, 0xc3, 0xac, 0x1b, 0xaf, 0xca, 0xbc, 0x2e, 0xb0, 0xa2, 0xe8, 0x98, 0x85, 0x8e,
	0xda, 0x6b, 0x55, 0x99, 0x5b, 0x29, 0x69, 0xca, 0xf9, 0xf6, 0x2b, 0x47, 0x05, 0x02, 0xf4, 0x9c,
	0x45, 0x71, 0x06, 0x21, 0xf5, 0xdf, 0x53, 0x84, 0x5d, 0x16, 0xc6, 0xe4, 0x1a, 0xb4, 0x42, 0x6a,
	0xbb, 0x81, 0xcb, 0x7d, 0x32, 0x61, 0x67, 0x46, 0x00, 0xbe, 0x89, 0xf9, 0x2c, 0x76, 0xf7, 0x4f,
	0x71, 0x97, 0x6a, 0x1a, 0xb2, 0xc4, 0x1d, 0xce, 0x88, 0x1e, 0xd1, 0xd0, 0x8d, 0x4f, 0xa5, 0x05,
	0x59, 0x5a, 0xc9, 0x1c, 0xbf, 0x70, 0xe0, 0x7b, 0x12, 0x01, 0xe7, 0x3e, 0x45, 0xcf, 0x6e, 0xab,
	0xcd, 0xfc, 0xb6, 0xca, 0x37, 0x67, 0xea, 0x3b, 0x34, 0x44, 0x3f, 0x86, 0x6f, 0xce, 0x58, 0xd2,
	0xdf, 0x85, 0xd9, 0x4f, 0x8e, 0x9c, 0xfe, 0x96, 0xef, 0xec, 0x32, 0xd7, 0x8f, 0x23, 0x7e, 0x54,
	0xa1, 0xbe, 0x63, 0x06, 0xbc, 0xa4, 0xc4, 0x45, 0x65, 0xad, 0xfe, 0xaf, 0x6a, 0xd0, 0xe1, 0xe8,
	0x2f, 0x29, 0xdf, 0x86, 0xb7, 0xfd, 0x7d, 0x86, 0x47, 0x1b, 0x4a, 0x43, 0x7e, 0xb2, 0x11, 0x93,
	0xc4, 0x45, 0x48, 0x69, 0xf8, 0x26, 0xf4, 0x84, 0xa1, 0xf7, 0xf8, 0x60, 0x45, 0x75, 0x1d, 0xab,
	0x41, 0x80, 0x10, 0x61, 0x01, 0xa6, 0x3c, 0x6a, 0x71, 0xb6, 0x1a, 0x42, 0x06, 0xa2, 0x44, 0x16,
	0x61, 0xda, 0xe9, 0x9b, 0x91, 0xfb, 0x05, 0x95, 0xc7, 0xa2, 0x29, 0xa7, 0xbf, 0xe7, 0x7e, 0x81,
	0x7b, 0xa1, 0x1b, 0x99, 0x07, 0xd4, 0xf2, 0xe2, 0x83, 0x53, 0x94, 0x69, 0xd3, 0x68, 0xb9, 0xd1,
	0x73, 0x01, 0x20, 0x1d, 0xa8, 0xbb, 0x8e, 0xdc, 0xf5, 0xeb, 0xae, 0xa3, 0x7f, 0xc6, 0x97, 0xda,
	0x1e, 0x8d, 0x33, 0xfa, 0xa0, 0x96, 0xda, 0x1f, 0x41, 0x9b, 0x72, 0xa8, 0x69, 0x23, 0x58, 0xda,
	0xcc, 0x82, 0x82, 0x65, 0xdb, 0xcd, 0xd0, 0x51, 0x41, 0x2c, 0xb2, 0x22, 0x61, 0xb9, 0xc8, 0xae,
	0xf0, 0x4e, 0x9f, 0x55, 0x75, 0xaa, 0xff, 0x29, 0x6f, 0xf6, 0xac, 0xb2, 0xd9, 0xd7, 0x64, 0xe8,
	0x1a, 0xf4, 0x76, 0x4f, 0x36, 0xa9, 0x47, 0x63, 0x5a, 0xd1, 0xef, 0x12, 0x5c, 0xad, 0xac, 0x95,
	0x1c, 0x1f, 0xc0, 0xcc, 0x9e, 0x67, 0xd9, 0x87, 0x72, 0xc5, 0x5c, 0x07, 0x38, 0xa6, 0xfd, 0x03,
	0xc6, 0x0e, 0xf9, 0x79, 0x55, 0x6e, 0xcf, 0x23, 0xc8, 0xd7, 0xd0, 0xd0, 0x74, 0x42, 0x32, 0xdd,
	0x65, 0x26, 0x24, 0xe2, 0xd0, 0x33, 0xc7, 0x9f, 0x6d, 0x37, 0x13, 0x8d, 0x0a, 0xe9, 0x84, 0xe4,
	0x08, 0xcb, 0xe1, 0x65, 0x64, 0x53, 0xee, 0x37, 0x2b, 0x9b, 0xaa, 0xc6, 0x6a, 0x36, 0x2b, 0x5a,
	0xaa, 0xd9, 0xac, 0x68, 0xf6, 0x35, 0x47, 0x73, 0x19, 0x2e, 0xee, 0x9e, 0xf0, 0x7d, 0x70, 0xd3,
	0xa2, 0x43, 0xe6, 0xab, 0x0e, 0x17, 0xe0, 0x52, 0x1e, 0x2c, 0x79, 0x5c, 0x84, 0xcb, 0xbb, 0x27,
	0x72, 0x1d, 0xe3, 0xca, 0x55, 0x0d, 0x3e, 0x87, 0x85, 0x62, 0x45, 0xea, 0xe6, 0xcd, 0x1d, 0x1e,
	0x39, 0x7d, 0x33, 0x5d, 0xec, 0xca, 0xc4, 0x5e, 0xcd, 0xb3, 0x98, 0xb3, 0x0e, 0xc6, 0xec, 0x61,
	0xb6, 0xa8, 0x3f, 0xe7, 0xfd, 0xbe, 0x66, 0x83, 0x81, 0x47, 0x73, 0x8e, 0x0a, 0x5f, 0xbf, 0x01,
	0x63, 0x1e, 0x77, 0xc3, 0x6a, 0x62, 0xfd, 0xf2, 0xe2, 0xb6, 0xc3, 0x17, 0x3c, 0xc5, 0xed, 0x19,
	0xcd, 0x6d, 0xd3, 0x90, 0x25, 0x7d, 0x8d, 0x33, 0x9a, 0xa7, 0x24, 0x19, 0xcd, 0x1c, 0x4e, 0x6a,
	0xb9, 0xc3, 0x89, 0xfe, 0x10, 0x08, 0xdf, 0xe8, 0xec, 0x03, 0xca, 0x2d, 0xd1, 0x79, 0x5d, 0xeb,
	0x4f, 0xb9, 0x4c, 0x33, 0xe8, 0x92, 0xfe, 0x2a, 0x4c, 0x89, 0x9d, 0x43, 0x4e, 0xd1, 0x62, 0x71,
	0xbf, 0x55, 0x0d, 0x24, 0x9a, 0xfe, 0x8b, 0x49, 0x68, 0xa5, 0x50, 0x11, 0xbd, 0x61, 0x9e, 0xec,
	0x0b, 0xbf, 0x05, 0xcb, 0xdc, 0x42, 0x2a, 0x93, 0xa7, 0x8a, 0xbc, 0x46, 0x0c, 0xd8, 0x91, 0x06,
	0x4f, 0x15, 0xc9, 0xbb, 0x40, 0x6c, 0x4e, 0xd4, 0x8c, 0x59, 0x6c, 0x79, 0x66, 0xdf, 0x63, 0xdc,
	0xfb, 0x14, 0x8e, 0xbc, 0x86, 0x35, 0xaf, 0x79, 0xc5, 0x13, 0x84, 0x93, 0x65, 0x98, 0x17, 0xd8,
	0x49, 0x44, 0x1d, 0x85, 0x3c, 0x29, 0xbc, 0x7e, 0xac, 0x78, 0x13, 0x51, 0x47, 0xe2, 0xa6, 0x94,
	0x1d, 0x37, 0x8c, 0x4f, 0x15, 0xf2, 0x54, 0x86, 0xf2, 0x26, 0xaf, 0x90, 0xd8, 0xf7, 0x40, 0x10,
	0xc0, 0xf3, 0x8b, 0x79, 0xe0, 0xc6, 0x11, 0x2e, 0xf1, 0x09, 0x63, 0x16, 0xc1, 0xfc, 0x08, 0xf3,
	0xdc, 0x8d, 0x33, 0x1c, 0x20, 0xde, 0xd0, 0x8d, 0x22, 0x1a, 0xe1, 0xa6, 0xa3, 0x38, 0xe0, 0x98,
	0x2f, 0x11, 0x4c, 0x1e, 0x80, 0xe8, 0xc7, 0x3c, 0x0e, 0xdd, 0x98, 0x0a, 0xa2, 0x2d, 0x44, 0xed,
	0x20, 0xfc, 0x33, 0x0e, 0x46, 0xaa, 0x29, 0xaf, 0x02, 0x53, 0x92, 0x85, 0x0c, 0xaf, 0x88, 0x5b,
	0xa4, 0x6b, 0x1f, 0x24, 0xfe, 0xa1, 0xd8, 0x2e, 0x66, 0x32, 0x74, 0x37, 0x38, 0x18, 0xb7, 0x8d,
	0x6b, 0xd0, 0x42, 0xc8, 0x90, 0xbb, 0xe5, 0x6d, 0xb1, 0x13, 0xa7, 0x00, 0x7e, 0x72, 0x10, 0x74,
	0x02, 0xe6, 0xb9, 0xf6, 0x69, 0x77, 0x56, 0x38, 0x30, 0x08, 0xdb, 0x45, 0x10, 0xb9, 0x0b, 0x82,
	0xa4, 0x19, 0xd1, 0x38, 0x76, 0xfd, 0x41, 0xd4, 0xed, 0xc8, 0x73, 0x03, 0x87, 0xee, 0x49, 0x20,
	0x3f, 0x5b, 0x4a, 0x4a, 0x21, 0x1b, 0x32, 0xf4, 0xe2, 0xe6, 0x32, 0x0c, 0xed, 0x2a, 0xe8, 0x88,
	0x9e, 0x43, 0x25, 0x9e, 0x96, 0x91, 0xf2, 0xa6, 0x04, 0x12, 0x1d, 0x04, 0xc0, 0x74, 0x99, 0x39,
	0xec, 0x07, 0x51, 0x77, 0x1e, 0xb1, 0x04, 0x6b, 0xdb, 0xec, 0x65, 0x3f, 0x88, 0x84, 0xad, 0x18,
	0xed, 0xca, 0x6a, 0xe9, 0xff, 0xd7, 0x1a, 0x37, 0x16, 0x59, 0xb8, 0x54, 0xf8, 0xbf, 0x00, 0x0d,
	0x57, 0xbe, 0xd0, 0x49, 0xd3, 0xf5, 0xf7, 0x99, 0x5c, 0xfa, 0x8f, 0x8b, 0xa7, 0x9c, 0x72, 0xeb,
	0x95, 0xfc, 0xf6, 0xbf, 0xe5, 0xc7, 0xe1, 0xa9, 0xd1, 0x39, 0xcc, 0x01, 0x7b, 0x26, 0x5c, 0xac,
	0x40, 0xe3, 0xae, 0xe5, 0x21, 0x3d, 0x55, 0xae, 0xe5, 0x21, 0x3d, 0x25, 0x6b, 0x30, 0x79, 0x64,
	0x79, 0x09, 0x95, 0xc7, 0x8d, 0x6b, 0x65, 0xd3, 0x33, 0xa2, 0x61, 0x08, 0xd4, 0x8f, 0xea, 0xdf,
	0xac, 0xe9, 0xdb, 0x7c, 0x68, 0xb8, 0x06, 0xf3, 0x5b, 0xc8, 0x1f, 0xc0, 0xd4, 0x59, 0xe6, 0x36,
	0xdb, 0x42, 0x22, 0x0a, 0x13, 0x96, 0x23, 0xf5, 0x55, 0xed, 0xc2, 0x6f, 0x6b, 0x30, 0x93, 0x21,
	0x34, 0xde, 0x06, 0xe6, 0x94, 0xb1, 0x5e, 0x54, 0xc6, 0x2a, 0xa5, 0x6e, 0x54, 0x2a, 0x75, 0x51,
	0x6d, 0x27, 0xde, 0x46, 0x6d, 0x27, 0x2b, 0xd4, 0x56, 0x5f, 0x07, 0x40, 0xce, 0x9f, 0x7a, 0x49,
	0x74, 0xa0, 0x3f, 0x3a, 0xef, 0xac, 0xb6, 0x17, 0x5b, 0x61, 0xac, 0xd5, 0xf8, 0x59, 0x4b, 0x18,
	0x6b, 0xad, 0xae, 0xc7, 0xa9, 0x75, 0x45, 0x22, 0xe7, 0x6e, 0x04, 0x9b, 0xd9, 0x93, 0x4e, 0x1d,
	0x9d, 0x88, 0x7b, 0x15, 0x12, 0x46, 0x62, 0xe3, 0xcf, 0x3a, 0xef, 0xa5, 0x8a, 0x20, 0x7b, 0x3d,
	0x77, 0xd3, 0xf8, 0xfb, 0x75, 0xce, 0xe8, 0x2e, 0x63, 0x5e, 0xfe, 0xe4, 0x35, 0x96, 0xd1, 0xc7,
	0xd0, 0x0c, 0x42, 0x97, 0xa1, 0xb3, 0x23, 0xf8, 0xec, 0x15, 0x96, 0x09, 0x63, 0xde, 0xae, 0xc4,
	0x30, 0x52, 0x5c, 0xf2, 0x3e, 0x4c, 0x79, 0x56, 0x9f, 0x7a, 0xe2, 0x3c, 0xc4, 0x95, 0x5b, 0xa4,
	0x5f, 0x56, 0x54, 0xfa, 0x65, 0x65, 0x2f, 0x0e, 0x5d, 0x7f, 0xf0, 0x29, 0xd7, 0x6a, 0x43, 0xe2,
	0xf2, 0xfd, 0x31, 0xa4, 0xa9, 0xdf, 0xdb, 0x34, 0x64, 0x89, 0xbc, 0x07, 0x97, 0x42, 0x1a, 0xd1,
	0xd8, 0xc4, 0xd0, 0xd1, 0x48, 0x72, 0xc2, 0x03, 0x26, 0x58, 0xf7, 0xc2, 0x8a, 0xe2, 0x54, 0x52,
	0xe4, 0x1d, 0xd0, 0xa2, 0x43, 0x37, 0x30, 0x1d, 0x1a, 0x84, 0xd4, 0x16, 0xd8, 0xe2, 0xa0, 0x31,
	0xc7, 0xe1, 0x9b, 0x23, 0xb0, 0x70, 0x2b, 0xb2, 0x22, 0x91, 0x6e, 0xc5, 0xbf, 0xaf, 0x01, 0x6c,
	0xd2, 0x23, 0xd7, 0xa6, 0x7b, 0xb6, 0xe5, 0xeb, 0x7f, 0x52, 0xd4, 0x8b, 0x4b, 0xa0, 0x49, 0xbd,
	0x48, 0xe1, 0x25, 0x05, 0xe1, 0xa7, 0xb3, 0x21, 0xd5, 0xea, 0xfc, 0x60, 0xbf, 0x17, 0xb3, 0x40,
	0x6b, 0x70, 0x84, 0x5d, 0x2b, 0x89, 0xa8, 0x36, 0xa1, 0xff, 0x39, 0xb4, 0x55, 0x6f, 0x48, 0xf1,
	0x22, 0xcc, 0x49, 0x8a, 0x0a, 0xac, 0x5d, 0x20, 0x53, 0x50, 0x7f, 0x75, 0xa8, 0xd5, 0x48, 0x07,
	0x60, 0xdb, 0xdf, 0x0d, 0xd9, 0x20, 0xa4, 0x51, 0xa4, 0xd5, 0x49, 0x1b, 0x9a, 0x3b, 0x2c, 0x7e,
	0xca, 0x12, 0xdf, 0x11, 0xb9, 0x0c, 0x99, 0xb5, 0xd8, 0x3a, 0x71, 0xa3, 0x38, 0xd2, 0x26, 0xf4,
	0xef, 0xf2, 0xa9, 0x1e, 0x0d, 0x40, 0x4d, 0xf5, 0x66, 0xf9, 0x90, 0x5d, 0x50, 0xbd, 0x51, 0x9b,
	0xf1, 0xaa, 0xb7, 0x03, 0xed, 0xdd, 0x13, 0x8e, 0x22, 0x8f, 0xb8, 0x57, 0xa1, 0x85, 0x73, 0x13,
	0xd9, 0x96, 0x0a, 0x69, 0x35, 0x39, 0x80, 0xa3, 0xf0, 0xa5, 0x1a, 0x26, 0xbe, 0xef, 0xfa, 0x03,
	0x51, 0x2f, 0x0f, 0xd1, 0x12, 0x86, 0xd2, 0x7d, 0xc3, 0x27, 0x21, 0xcb, 0xac, 0x54, 0xe5, 0x8f,
	0x73, 0x76, 0xa8, 0x53, 0xcc, 0x70, 0x65, 0x58, 0xcd, 0x4a, 0x32, 0xb5, 0x4a, 0x57, 0xe1, 0x4a,
	0x96, 0x6c, 0x3e, 0x9e, 0xb4, 0x2b, 0x1c, 0xe3, 0x62, 0xa5, 0xec, 0x79, 0xad, 0x10, 0x4f, 0x2a,
	0xea, 0x7d, 0x66, 0xf4, 0x2a, 0x98, 0xa4, 0x6f, 0xc0, 0xe5, 0x3d, 0xfb, 0x80, 0x3a, 0x89, 0x47,
	0xb7, 0xfd, 0x98, 0x86, 0x47, 0x96, 0xb7, 0x69, 0xb9, 0xde, 0x29, 0xf7, 0x93, 0x0e, 0x58, 0x22,
	0x02, 0x0b, 0x93, 0x06, 0x7e, 0x73, 0x65, 0x1f, 0xba, 0x7e, 0x12, 0x0b, 0x2b, 0x38, 0x69, 0xc8,
	0x92, 0x3e, 0x84, 0x85, 0x22, 0x91, 0xcf, 0x28, 0x3d, 0xf4, 0x4e, 0xc9, 0x7d, 0x68, 0x38, 0xd6,
	0xa9, 0x94, 0xc4, 0xe5, 0x3c, 0x3f, 0x1c, 0xc5, 0xb1, 0x4e, 0x0d, 0x8e, 0x91, 0x76, 0x57, 0xaf,
	0xec, 0xae, 0x91, 0xeb, 0xee, 0x33, 0x58, 0x2c, 0x76, 0xf7, 0x92, 0xf9, 0xf1, 0x81, 0x87, 0x5b,
	0x96, 0xea, 0x6f, 0xf2, 0xcb, 0x13, 0xfe, 0x9f, 0x35, 0xd0, 0x8a, 0x94, 0xc9, 0xdf, 0x82, 0x49,
	0x87, 0x4b, 0x44, 0x0a, 0xb5, 0x90, 0x50, 0xa8, 0x14, 0xde, 0xf3, 0x0b, 0x86, 0x68, 0x43, 0xbe,
	0x05, 0x53, 0xc7, 0x28, 0x09, 0xb9, 0x63, 0xde, 0x39, 0xbb, 0xb5, 0x90, 0xda, 0xf3, 0x0b, 0x86,
	0x6c, 0x45, 0xd6, 0x61, 0x7a, 0x28, 0x86, 0x26, 0xad, 0xd2, 0xdd, 0xb3, 0x09, 0x48, 0x39, 0x3c,
	0xbf, 0x60, 0xa8, 0x76, 0x4f, 0x66, 0x61, 0x26, 0xa0, 0xa1, 0xcb, 0x1c, 0x8c, 0xa2, 0x8a, 0x70,
	0x57, 0x46, 0x85, 0x24, 0x81, 0x67, 0x34, 0x3d, 0x83, 0xe8, 0x70, 0xb3, 0x0a, 0x63, 0xc3, 0xa3,
	0x56, 0xea, 0xac, 0xb0, 0x6a, 0x2a, 0x7b, 0x29, 0x15, 0xf2, 0x12, 0x48, 0x24, 0xa1, 0xa6, 0x2b,
	0xb9, 0x53, 0x47, 0x96, 0xeb, 0x67, 0x0f, 0xc2, 0x98, 0x8f, 0x0a, 0x90, 0x48, 0x1f, 0xc2, 0xb5,
	0xaa, 0x0e, 0x53, 0xdd, 0xff, 0x3d, 0x77, 0xf7, 0xff, 0xea, 0xd0, 0x79, 0xc2, 0x58, 0x1c, 0xc5,
	0xa1, 0x15, 0x08, 0x6f, 0x48, 0x84, 0x2a, 0x6a, 0x2a, 0x54, 0x81, 0xe5, 0x40, 0x1a, 0x86, 0xba,
	0x1b, 0x90, 0x4b, 0x30, 0xe9, 0xfa, 0x0e, 0x3d, 0xc1, 0x89, 0x6a, 0x18, 0xa2, 0x40, 0x1e, 0xc3,
	0x24, 0x5f, 0x69, 0x62, 0x7b, 0xe8, 0xac, 0xdd, 0xcc, 0xb3, 0x92, 0x76, 0xb1, 0xc3, 0x1c, 0x3c,
	0x47, 0x51, 0x43, 0xa0, 0x93, 0x47, 0x30, 0xc1, 0xa7, 0x0b, 0xf7, 0x8b, 0xce, 0xda, 0x8d, 0x33,
	0x9a, 0xa1, 0xf5, 0x40, 0x64, 0xf2, 0x21, 0x40, 0x82, 0x3b, 0x82, 0x63, 0x5a, 0xb1, 0x4c, 0xeb,
	0xf5, 0x4a, 0xdb, 0xd8, 0x6b, 0x75, 0x8b, 0xc0, 0x68, 0x49, 0xec, 0xf5, 0x38, 0x1b, 0x89, 0x9a,
	0xce, 0x47, 0xa2, 0x46, 0x31, 0x21, 0x8c, 0x9a, 0x35, 0x65, 0xf0, 0x1f, 0x41, 0x18, 0x35, 0x5b,
	0x80, 0x29, 0x87, 0x0d, 0x2d, 0xd7, 0x57, 0xa1, 0x2a, 0x51, 0x22, 0x8f, 0x60, 0xda, 0xb1, 0x62,
	0xcb, 0x71, 0x43, 0x3c, 0x10, 0x74, 0x8a, 0xde, 0xdd, 0xa6, 0x15, 0x5b, 0x9b, 0x6e, 0x88, 0xfc,
	0x2b, 0x4c, 0xa1, 0x7c, 0xdc, 0x91, 0x7c, 0x46, 0xe3, 0xdc, 0x04, 0xb8, 0x34, 0xb5, 0x82, 0xdf,
	0x85, 0x5b, 0x67, 0xe0, 0x48, 0x85, 0x78, 0xcc, 0x4f, 0x6e, 0x08, 0x92, 0x5a, 0x70, 0x6d, 0x8c,
	0x0c, 0x85, 0x4b, 0xac, 0x90, 0x45, 0xec, 0x41, 0x12, 0x17, 0xfa, 0x96, 0x39, 0xac, 0xea, 0xff,
	0xbc, 0x06, 0x57, 0x2b, 0xab, 0x65, 0xaf, 0x37, 0x60, 0xc6, 0x41, 0xa8, 0x99, 0x09, 0x5f, 0x82,
	0x00, 0x61, 0xd2, 0x63, 0x84, 0x80, 0x4e, 0x43, 0x1d, 0x75, 0x45, 0x22, 0xa0, 0x93, 0xf8, 0x50,
	0x4e, 0x7c, 0xe3, 0x3c, 0x91, 0x89, 0x29, 0xd7, 0xa0, 0x41, 0x43, 0x95, 0x74, 0xe3, 0x9f, 0xba,
	0x2b, 0xc2, 0x23, 0xfb, 0xa1, 0x35, 0x18, 0x52, 0x3f, 0xe6, 0xbc, 0x72, 0x35, 0x51, 0xeb, 0xb2,
	0x07, 0x4d, 0x2a, 0x63, 0x0b, 0x99, 0x70, 0x21, 0x96, 0xb9, 0x12, 0xc4, 0x22, 0x43, 0x2f, 0x19,
	0x53, 0x45, 0xae, 0xdc, 0xfb, 0x2c, 0xb4, 0xa9, 0x3c, 0x05, 0x8b, 0x82, 0x7e, 0x5d, 0x2c, 0xca,
	0x72, 0x57, 0xd2, 0x1f, 0xf9, 0x6f, 0x75, 0x98, 0xde, 0x13, 0x31, 0x26, 0xfd, 0x3f, 0xd7, 0x95,
	0xf3, 0x49, 0xba, 0x70, 0x49, 0x3a, 0x0d, 0xb2, 0x52, 0x3a, 0xa5, 0x17, 0xb8, 0xc7, 0xb0, 0xc3,
	0xe2, 0x5d, 0xee, 0x1d, 0xf9, 0xdc, 0x1f, 0xd1, 0xa0, 0xbd, 0xed, 0xbb, 0xb1, 0x6b, 0x79, 0xee,
	0x17, 0xae, 0x3f, 0xd0, 0xea, 0xdc, 0xb7, 0x78, 0xc3, 0x7d, 0x92, 0x26, 0x4c, 0x6c, 0x72, 0xff,
	0x76, 0x82, 0x3b, 0x35, 0x92, 0x8c, 0x41, 0xfb, 0x96, 0x67, 0xf9, 0x36, 0xd5, 0x26, 0x79, 0xcb,
	0xcd, 0xd0, 0x3d, 0xa2, 0x06, 0x0d, 0x3c, 0xcb, 0xa6, 0xda, 0x14, 0x99, 0x83, 0x19, 0x89, 0xb7,
	0x29, 0xae, 0x3e, 0xb4, 0xa1, 0xb9, 0x49, 0x07, 0xa1, 0xe5, 0x50, 0x47, 0x6b, 0xf2, 0xea, 0x4c,
	0x12, 0x40, 0x6b, 0x71, 0xc0, 0x0e, 0xa5, 0x4e, 0x64, 0xd0, 0x3e, 0x63, 0xb1, 0x06, 0x98, 0xf4,
	0xc0, 0xbb, 0x08, 0x33, 0x64, 0x11, 0x2e, 0xa6, 0x7c, 0xa1, 0x77, 0x21, 0x2a, 0xda, 0xe4, 0x32,
	0xcc, 0x7f, 0x42, 0x43, 0x9f, 0x7a, 0xd8, 0x79, 0x28, 0xc0, 0xb3, 0xd2, 0xaf, 0x3a, 0xf5, 0x6d,
	0xad, 0x93, 0xe1, 0xe3, 0x69, 0xe2, 0x79, 0xda, 0x1c, 0x77, 0x84, 0xd2, 0x01, 0x70, 0xa5, 0xd0,
	0x34, 0x42, 0xa0, 0xb3, 0x49, 0x6d, 0x36, 0xe4, 0xe7, 0x69, 0x97, 0xf9, 0xd4, 0xd1, 0xe6, 0xb9,
	0x6c, 0x46, 0x8e, 0xb3, 0x46, 0xf4, 0xbf, 0x33, 0x9d, 0x12, 0xc2, 0xc0, 0xc6, 0x53, 0x68, 0x85,
	0x34, 0xc2, 0x00, 0xbf, 0x52, 0xf9, 0x07, 0x05, 0xc3, 0x37, 0xc2, 0xe6, 0xbe, 0x87, 0x40, 0x15,
	0xea, 0x3f, 0x6a, 0x4a, 0x56, 0xe0, 0x62, 0x5a, 0x30, 0x47, 0x1e, 0x92, 0x30, 0x74, 0xf3, 0x69,
	0xd5, 0x0b, 0xe5, 0x2a, 0xdd, 0x87, 0xb9, 0x11, 0xbe, 0xcd, 0x12, 0x3f, 0x96, 0x16, 0xb0, 0x93,
	0x82, 0x37, 0x38, 0x94, 0xdc, 0x86, 0x59, 0x05, 0x31, 0x93, 0x24, 0x4d, 0xf8, 0xb5, 0x15, 0xf0,
	0x4d, 0xe2, 0x3a, 0xe4, 0x13, 0xd0, 0x52, 0xa4, 0xbf, 0x64, 0x49, 0xe8, 0x5b, 0x9e, 0xbc, 0xdc,
	0x70, 0xb3, 0x1c, 0xb2, 0x4c, 0xa5, 0x86, 0xf8, 0x46, 0xca, 0xc7, 0x1f, 0x8b, 0x86, 0x64, 0x0d,
	0x2e, 0x17, 0x89, 0x89, 0x9e, 0x45, 0xc0, 0xf9, 0x62, 0x01, 0x1f, 0x19, 0xf8, 0x33, 0xe8, 0xa6,
	0x6d, 0xa2, 0xd3, 0x28, 0xa6, 0x43, 0x73, 0x48, 0x63, 0x8b, 0xdb, 0x27, 0x79, 0xc3, 0xe1, 0x7c,
	0x46, 0x16, 0x14, 0x85, 0x3d, 0x24, 0xf0, 0x52, 0xb6, 0x27, 0xeb, 0xb0, 0x34, 0x8e, 0xb6, 0xe0,
	0x4b, 0x18, 0xd7, 0x5e, 0x75, 0x73, 0x64, 0x0f, 0xa5, 0x6d, 0x39, 0x66, 0x7c, 0x10, 0xb2, 0x64,
	0x70, 0x10, 0x24, 0x31, 0x5a, 0xdd, 0x1a, 0x97, 0xb6, 0xe5, 0xbc, 0x4e, 0xa1, 0xfc, 0x38, 0x21,
	0x62, 0x32, 0x19, 0x4c, 0x40, 0xcc, 0x39, 0x84, 0x67, 0x50, 0xef, 0x40, 0x27, 0xb4, 0x7c, 0x87,
	0x0d, 0xcd, 0xf7, 0x0f, 0x4d, 0x97, 0x05, 0x11, 0x06, 0x65, 0x6a, 0x46, 0x5b, 0x40, 0xdf, 0x3f,
	0xdc, 0x66, 0x41, 0xc4, 0xcf, 0x47, 0xd2, 0xbb, 0x6c, 0xa3, 0x69, 0xba, 0x56, 0xa9, 0x5c, 0x2b,
	0x85, 0x64, 0xe5, 0x12, 0x80, 0x08, 0x90, 0xa1, 0xb9, 0x9b, 0xc5, 0x73, 0x71, 0x0b, 0x21, 0x68,
	0xed, 0x08, 0x4c, 0x24, 0x11, 0x75, 0x30, 0x38, 0x33, 0x61, 0xe0, 0x37, 0x6f, 0x82, 0x6a, 0x87,
	0x29, 0x56, 0x0c, 0xc7, 0xb4, 0x0c, 0x74, 0xd5, 0x71, 0x35, 0x91, 0x87, 0x30, 0x89, 0x87, 0x61,
	0x0c, 0xc0, 0x9c, 0x71, 0xcc, 0x17, 0x58, 0xbd, 0xbf, 0x0d, 0x9d, 0xbc, 0xae, 0x57, 0x84, 0x35,
	0x1e, 0xe7, 0xc3, 0x1a, 0xe7, 0x4f, 0x70, 0x26, 0xb4, 0xf1, 0xbf, 0x6a, 0x30, 0xbf, 0xe1, 0xb1,
	0xc4, 0x51, 0x95, 0x2a, 0xca, 0xb8, 0x93, 0xb9, 0x27, 0x82, 0xa6, 0x5f, 0x38, 0x10, 0xf5, 0xd4,
	0x81, 0xd8, 0xc8, 0x1c, 0x38, 0xf9, 0x6a, 0xfd, 0x46, 0x61, 0x24, 0x45, 0xa2, 0x2b, 0x2f, 0x10,
	0x5b, 0x2c, 0x58, 0x75, 0xfe, 0x24, 0x30, 0xf1, 0x05, 0xf3, 0x55, 0x82, 0x0e, 0xbf, 0xc5, 0x99,
	0x74, 0xa0, 0x4e, 0x9b, 0x2d, 0x43, 0x96, 0x7a, 0x1f, 0xc2, 0x4c, 0x86, 0x44, 0x85, 0x1c, 0x2e,
	0x65, 0xe5, 0xd0, 0xca, 0x8e, 0xf2, 0x67, 0x75, 0x98, 0xdf, 0xf6, 0xa3, 0x98, 0xdb, 0xc6, 0x67,
	0x21, 0x4b, 0x02, 0x1c, 0xe5, 0x2b, 0xb8, 0x68, 0x73, 0x2e, 0xcd, 0x54, 0xab, 0x65, 0x70, 0x8a,
	0x4b, 0xf1, 0xc6, 0x39, 0xc3, 0x31, 0xe6, 0xed, 0x92, 0xd8, 0x56, 0xe1, 0xa2, 0x95, 0xc4, 0x2c,
	0xb2, 0x2d, 0x8f, 0x1f, 0xbd, 0x54, 0xe8, 0x55, 0x84, 0x9e, 0x49, 0xa6, 0x6a, 0x4b, 0x46, 0x61,
	0x1f, 0x42, 0x63, 0xe8, 0xfa, 0xd2, 0x37, 0xbe, 0x5a, 0x72, 0x75, 0xb6, 0xfd, 0xf8, 0xf1, 0xfb,
	0xe2, 0xc0, 0xce, 0xf1, 0x10, 0xdd, 0x3a, 0x91, 0xd7, 0xad, 0xce, 0x41, 0xb7, 0x4e, 0xb8, 0x3c,
	0xb8, 0x40, 0xa3, 0xee, 0x24, 0x46, 0x85, 0x45, 0x41, 0xff, 0x4d, 0x1d, 0x5a, 0xcf, 0x28, 0x1b,
	0x84, 0x56, 0x70, 0x70, 0x8a, 0x19, 0xc9, 0x90, 0x1d, 0xb9, 0x0e, 0x55, 0x49, 0xd8, 0xb4, 0x9c,
	0x99, 0x88, 0x7a, 0x76, 0x22, 0xd2, 0x49, 0x6b, 0x64, 0x26, 0x8d, 0x3b, 0x06, 0xdc, 0x0e, 0xd8,
	0x94, 0x3b, 0xa1, 0x2a, 0x39, 0xc9, 0x41, 0x1b, 0x08, 0xe1, 0xd3, 0x15, 0xb2, 0x63, 0x39, 0xa5,
	0xfc, 0x93, 0x93, 0x09, 0x2d, 0xfb, 0x50, 0x5a, 0x33, 0xfc, 0xe6, 0x5b, 0xb8, 0x7d, 0x60, 0x45,
	0x91, 0x1b, 0x29, 0x3f, 0x4e, 0x16, 0xc9, 0x75, 0x80, 0x83, 0xd3, 0x80, 0x86, 0x47, 0x6e, 0xc4,
	0x42, 0xe5, 0xc6, 0x8d, 0x20, 0x78, 0xb5, 0x89, 0x39, 0x54, 0x3a, 0x71, 0xf8, 0x4d, 0x9e, 0x42,
	0xc7, 0x95, 0xb3, 0x6e, 0x0e, 0xf8, 0xb4, 0xa3, 0x09, 0x29, 0xcd, 0x6d, 0x49, 0x33, 0x8c, 0x59,
	0x37, 0x0b, 0xd2, 0xff, 0x75, 0x3d, 0xdd, 0xab, 0x76, 0x19, 0xf3, 0xc8, 0x7b, 0x99, 0x20, 0x3c,
	0xf7, 0xcc, 0xc6, 0xac, 0x37, 0x8e, 0x2b, 0x43, 0xf4, 0x1f, 0x40, 0xcb, 0x66, 0x91, 0x69, 0x39,
	0x7c, 0xba, 0x45, 0x58, 0xa7, 0x5b, 0x6a, 0xb6, 0xc1, 0x22, 0x91, 0xbe, 0xb2, 0x59, 0xb4, 0xee,
	0x88, 0x09, 0x9f, 0x40, 0x95, 0x6c, 0x54, 0x66, 0x73, 0x46, 0xfb, 0xa1, 0x81, 0x68, 0x19, 0x1b,
	0x37, 0xf1, 0x25, 0x6c, 0xdc, 0x5d, 0xe0, 0x5b, 0x1d, 0x0d, 0x8f, 0xa8, 0xb9, 0x6f, 0xd9, 0x31,
	0x13, 0xb7, 0x9c, 0x1a, 0xc6, 0xac, 0x84, 0x3e, 0x45, 0x20, 0xdf, 0x58, 0x23, 0xdf, 0x0a, 0xcc,
	0x02, 0xee, 0x14, 0xe2, 0xce, 0xf3, 0x2a, 0x23, 0x8b, 0xaf, 0xff, 0x6a, 0x36, 0x15, 0xda, 0x5e,
	0x40, 0x6d, 0xd4, 0x10, 0xf4, 0x2a, 0xf2, 0xbe, 0x25, 0x82, 0xd0, 0xc0, 0x2c, 0x01, 0x44, 0xc7,
	0xe9, 0x2d, 0x1d, 0x19, 0xa8, 0x8c, 0x8e, 0xd5, 0x25, 0x9d, 0xef, 0x40, 0x1b, 0x73, 0x09, 0xa6,
	0x68, 0x22, 0x3d, 0xcc, 0xc2, 0xa5, 0x13, 0xcc, 0x2a, 0x08, 0xe7, 0x05, 0x45, 0x39, 0xd3, 0x1f,
	0x01, 0xc8, 0x77, 0xa0, 0x13, 0x5b, 0xe1, 0x80, 0xc6, 0xa6, 0x13, 0xe1, 0x69, 0x52, 0x8a, 0xa9,
	0x10, 0x68, 0x78, 0x8d, 0x38, 0x9b, 0x62, 0x2e, 0xda, 0x71, 0xa6, 0x94, 0x3d, 0x66, 0x4c, 0xe6,
	0x8f, 0x19, 0x1a, 0x34, 0x7c, 0xb9, 0x33, 0x4f, 0x1a, 0xfc, 0x93, 0x43, 0x86, 0xae, 0x23, 0xd5,
	0x98, 0x7f, 0xa6, 0xb9, 0x6b, 0xcb, 0x71, 0x94, 0x06, 0x63, 0xee, 0x7a, 0xdd, 0x71, 0xc2, 0xcc,
	0x39, 0x05, 0xab, 0x5b, 0xd9, 0x73, 0x8a, 0x42, 0x90, 0xca, 0x62, 0x1e, 0x31, 0x0f, 0x35, 0xb9,
	0x65, 0x80, 0x04, 0x7d, 0xca, 0x3c, 0xbe, 0x0f, 0x66, 0x10, 0xcc, 0xa1, 0x83, 0xfb, 0x60, 0xcb,
	0x68, 0x8f, 0x70, 0x5e, 0xe2, 0x35, 0x03, 0xe5, 0x4b, 0x38, 0xf4, 0x48, 0x26, 0x27, 0x40, 0x82,
	0x36, 0xe9, 0x11, 0xce, 0x73, 0x61, 0x73, 0xe7, 0x88, 0x22, 0x49, 0x31, 0x1f, 0xe5, 0xf6, 0x74,
	0x8e, 0xaf, 0x74, 0xb4, 0xf3, 0x76, 0x3a, 0xba, 0x06, 0xd3, 0x43, 0x47, 0x18, 0xda, 0xb9, 0xf3,
	0x5a, 0x4c, 0x0d, 0x1d, 0xb4, 0xab, 0xef, 0x40, 0x63, 0x40, 0x59, 0xf5, 0x8e, 0x99, 0x9a, 0x32,
	0x83, 0xe3, 0x88, 0x03, 0x4a, 0x3f, 0x19, 0x98, 0x1e, 0x3d, 0xa2, 0x1e, 0xe6, 0x2f, 0xf0, 0x04,
	0xd3, 0x4f, 0x06, 0x2f, 0x38, 0x84, 0x7c, 0x9c, 0x6e, 0x5b, 0x04, 0xb7, 0xad, 0xbb, 0x95, 0xdd,
	0x73, 0x8d, 0xad, 0xdc, 0xb0, 0x3e, 0x84, 0x16, 0x0b, 0xd4, 0xad, 0xa5, 0x8b, 0x6f, 0xb1, 0xca,
	0x9a, 0x2c, 0xd8, 0x4b, 0x7d, 0x09, 0x1a, 0xa6, 0xf7, 0x3b, 0x2f, 0xe1, 0xba, 0x69, 0xd1, 0x50,
	0x5d, 0xe5, 0xbb, 0x09, 0xed, 0x03, 0xcb, 0x1c, 0x11, 0xbf, 0x2c, 0xce, 0x56, 0x07, 0xd6, 0x2b,
	0x45, 0xe0, 0x1e, 0x74, 0x9c, 0x9c, 0x5b, 0xdd, 0x5d, 0xc0, 0x9d, 0xa5, 0x00, 0x25, 0xdf, 0x04,
	0x34, 0xbc, 0x26, 0xb7, 0x3c, 0x51, 0x77, 0xb1, 0xea, 0x26, 0x4b, 0xd6, 0x42, 0xb5, 0x38, 0x32,
	0xff, 0x8a, 0xc8, 0x1f, 0x41, 0x27, 0x6d, 0x29, 0x56, 0x48, 0x17, 0x87, 0xb8, 0x50, 0x0e, 0x41,
	0x8b, 0xd5, 0xa1, 0x9a, 0xe2, 0xea, 0xb8, 0x06, 0x30, 0x74, 0x4c, 0x15, 0xd6, 0xbe, 0x82, 0xfc,
	0x37, 0x87, 0xce, 0xae, 0x08, 0x6c, 0x2f, 0x01, 0x84, 0x96, 0xeb, 0xc8, 0x89, 0xe9, 0xc9, 0xeb,
	0x29, 0x96, 0xeb, 0x88, 0x79, 0xb9, 0x0d, 0xb3, 0xdc, 0x51, 0x37, 0x55, 0x30, 0xa3, 0x7b, 0x55,
	0x2a, 0x6f, 0x26, 0x5c, 0x42, 0xae, 0x40, 0xd3, 0xe2, 0xe7, 0x10, 0xd3, 0x65, 0xdd, 0x6b, 0x22,
	0xa1, 0x89, 0xe5, 0x6d, 0x9c, 0x78, 0x3f, 0x19, 0x72, 0x77, 0x91, 0x5a, 0x4e, 0xd4, 0x5d, 0xba,
	0x59, 0x7b, 0x30, 0x6b, 0x80, 0x9f, 0x0c, 0x5f, 0x0b, 0x08, 0xef, 0x40, 0xa5, 0xc0, 0xf8, 0x69,
	0x35, 0xea, 0x5e, 0xc7, 0x5d, 0xb1, 0x2d, 0x33, 0x60, 0x08, 0xe3, 0xfe, 0xa9, 0x43, 0x1d, 0xd7,
	0xc6, 0x20, 0x84, 0xf0, 0xd3, 0x6e, 0x28, 0x19, 0x4b, 0x30, 0xba, 0x68, 0x7c, 0x2d, 0x8b, 0x38,
	0x01, 0x1f, 0xea, 0x4d, 0xb1, 0x96, 0x05, 0x00, 0xef, 0xfd, 0xcd, 0xed, 0x5b, 0x51, 0x1c, 0x58,
	0xf1, 0x81, 0x74, 0x02, 0xba, 0xb7, 0x04, 0x15, 0x05, 0x16, 0x0e, 0x40, 0x0e, 0x31, 0xa2, 0x76,
	0x12, 0xd2, 0xae, 0x9e, 0x47, 0xdc, 0x43, 0x28, 0xf9, 0x06, 0xcc, 0xa7, 0x88, 0xfb, 0x96, 0xe7,
	0xf5, 0xf9, 0xc6, 0x79, 0x1b, 0x51, 0x35, 0x55, 0xf1, 0x54, 0xc2, 0x73, 0xc8, 0xe8, 0x1c, 0xd8,
	0xcc, 0xeb, 0xde, 0x11, 0x6f, 0x05, 0x54, 0xc5, 0xae, 0x84, 0x73, 0xb1, 0x8c, 0x90, 0x59, 0x18,
	0x77, 0xef, 0xa2, 0xe4, 0xda, 0x29, 0x22, 0x0b, 0xe3, 0x91, 0xec, 0xfa, 0xde, 0x21, 0x7a, 0xc2,
	0xf7, 0xd0, 0xe1, 0x15, 0xb2, 0x7b, 0x22, 0x60, 0xfc, 0x78, 0x90, 0x52, 0xb2, 0x3c, 0x8f, 0x1d,
	0x9b, 0xc3, 0xc4, 0x8b, 0x5d, 0x33, 0xa4, 0x81, 0xe7, 0xda, 0x56, 0xd4, 0xbd, 0x8f, 0xfc, 0xf6,
	0x14, 0xd2, 0x3a, 0xc7, 0x79, 0xc9, 0x51, 0x0c, 0x89, 0xc1, 0xbd, 0x7e, 0x21, 0x2f, 0x0c, 0x82,
	0x0d, 0x30, 0x09, 0xf2, 0x40, 0x24, 0x11, 0x04, 0x7c, 0x5b, 0x81, 0xbf, 0x8e, 0x37, 0x98, 0x5e,
	0xb1, 0x18, 0xad, 0x75, 0x15, 0x20, 0xd9, 0x56, 0x57, 0x2c, 0xb2, 0x55, 0x32, 0x38, 0xf2, 0x10,
	0x26, 0xa2, 0x80, 0xda, 0x63, 0xae, 0x56, 0x64, 0x1a, 0x20, 0x9a, 0xfe, 0x2d, 0xcc, 0x06, 0xf0,
	0x9d, 0x47, 0xdc, 0xd9, 0x94, 0x01, 0x0c, 0xd4, 0xb0, 0x18, 0x5f, 0x4e, 0x70, 0xc9, 0x70, 0x89,
	0xd7, 0x94, 0x86, 0x09, 0xb0, 0x81, 0x50, 0xfd, 0x01, 0x06, 0xe8, 0x33, 0xed, 0x25, 0x1b, 0x7c,
	0x5f, 0x89, 0x06, 0x6a, 0xa4, 0xc3, 0x68, 0xa0, 0xff, 0x09, 0x74, 0x64, 0xb0, 0x40, 0x06, 0x10,
	0xf4, 0x6f, 0x7f, 0x85, 0x94, 0x1a, 0xff, 0xde, 0xe0, 0xad, 0x3d, 0xad, 0xa1, 0xff, 0x10, 0xdf,
	0xa9, 0xe4, 0xa9, 0xaa, 0x11, 0x7c, 0x04, 0x75, 0x16, 0xc8, 0x98, 0xf8, 0x72, 0x21, 0xc0, 0x93,
	0x6b, 0x50, 0x48, 0x66, 0xd4, 0x59, 0x90, 0x4d, 0x7b, 0xd5, 0x73, 0x69, 0x2f, 0x02, 0x13, 0xfb,
	0x89, 0xe7, 0xc9, 0x00, 0x0d, 0x7e, 0xeb, 0xaf, 0xf2, 0x41, 0x90, 0xaf, 0x3f, 0xaa, 0x77, 0xf9,
	0xec, 0x16, 0x07, 0x35, 0x56, 0xac, 0x3f, 0xa8, 0xc1, 0xe5, 0x14, 0x1d, 0x39, 0x50, 0x12, 0x58,
	0x80, 0x29, 0xe1, 0xf5, 0xa7, 0x57, 0xcf, 0xc5, 0xc5, 0xc4, 0x05, 0x98, 0x12, 0xee, 0x82, 0x72,
	0x98, 0x45, 0x89, 0x7c, 0x13, 0x25, 0x26, 0x1c, 0x96, 0x07, 0x95, 0x12, 0x43, 0xf2, 0x65, 0x79,
	0xe9, 0xcb, 0xb0, 0x50, 0x64, 0x61, 0x2c, 0xbf, 0x2b, 0x2a, 0xd3, 0x28, 0x2e, 0x17, 0x9d, 0x7b,
	0x41, 0x25, 0x4d, 0xc3, 0x29, 0x7c, 0x19, 0xf6, 0xb2, 0xb8, 0x94, 0x38, 0x3c, 0x13, 0x50, 0xfa,
	0x3d, 0x5f, 0x5a, 0xc5, 0x2c, 0x51, 0xa9, 0x0b, 0xd9, 0xbf, 0x03, 0x77, 0x77, 0x4f, 0x5e, 0xb8,
	0x36, 0xf5, 0x23, 0x8a, 0xae, 0xb9, 0xe7, 0x3d, 0x39, 0x5d, 0x4f, 0xdf, 0x38, 0x6d, 0x6f, 0x66,
	0xa6, 0xc1, 0x66, 0x81, 0x08, 0x91, 0xe2, 0xc0, 0x44, 0x89, 0x5b, 0xab, 0xcc, 0x63, 0xa9, 0xf4,
	0xd0, 0xda, 0x1e, 0x01, 0xb7, 0x1d, 0xfd, 0x01, 0xdc, 0x3b, 0xaf, 0x17, 0xc9, 0xcf, 0x77, 0xe1,
	0x66, 0x19, 0x53, 0x96, 0x15, 0x2b, 0x5d, 0x98, 0xf6, 0x04, 0x04, 0x79, 0x69, 0x1b, 0xaa, 0xc8,
	0xb7, 0x3d, 0xdb, 0x4b, 0xa2, 0x98, 0x86, 0x23, 0x4e, 0x5a, 0x12, 0xb2, 0xed, 0xe8, 0xb7, 0xe1,
	0xd6, 0x19, 0xc4, 0x25, 0x07, 0x3b, 0x70, 0x3f, 0x45, 0x7a, 0xe3, 0xbb, 0x67, 0xc9, 0xa4, 0x34,
	0xf6, 0x5a, 0xc5, 0xd8, 0x97, 0xe1, 0xc1, 0xf9, 0xf4, 0x64, 0xdf, 0xaf, 0xb8, 0x21, 0x48, 0x19,
	0xc2, 0x07, 0x2b, 0xaa, 0xaf, 0xf7, 0x61, 0xc1, 0xa1, 0x51, 0xec, 0xfa, 0xa2, 0xb3, 0xcc, 0x30,
	0x45, 0xa7, 0x97, 0x32, 0xb5, 0x1b, 0xe9, 0x88, 0xf7, 0xb8, 0x7a, 0x15, 0x09, 0x8e, 0xf2, 0xe8,
	0x5f, 0x4d, 0x8c, 0xff, 0x1d, 0x6f, 0xaa, 0x4b, 0xaa, 0x7b, 0x34, 0xde, 0x93, 0x0f, 0x20, 0x04,
	0xa3, 0xd7, 0xf0, 0x92, 0x69, 0xe6, 0xda, 0x59, 0xcb, 0x18, 0x01, 0xb8, 0x45, 0xee, 0xb3, 0x30,
	0x64, 0xc7, 0x69, 0xe6, 0x45, 0x66, 0xdb, 0x3a, 0x02, 0x9c, 0xa6, 0xd2, 0xde, 0x01, 0x2d, 0xa4,
	0xfb, 0x21, 0x8d, 0x0e, 0x46, 0x98, 0x22, 0x03, 0x37, 0x27, 0xe1, 0x29, 0xea, 0x2a, 0x5c, 0xb4,
	0x1c, 0xc7, 0xe5, 0x23, 0xb7, 0x3c, 0x73, 0x9f, 0xe2, 0x6b, 0x10, 0x7e, 0x2c, 0xe3, 0x7d, 0x93,
	0x51, 0xd5, 0x53, 0x59, 0xc3, 0xfd, 0x09, 0xdb, 0x32, 0xfb, 0x89, 0xef, 0x78, 0xea, 0x8d, 0x40,
	0xd3, 0xb6, 0x9e, 0x60, 0x59, 0x04, 0xf5, 0xcb, 0x83, 0x93, 0x33, 0xd4, 0xe5, 0x36, 0x42, 0xd5,
	0xe6, 0xf2, 0xad, 0x3b, 0x99, 0xb9, 0x2b, 0x24, 0x5b, 0x1f, 0x15, 0x92, 0xad, 0x85, 0x6b, 0x78,
	0xf9, 0x46, 0x2a, 0xdb, 0xfa, 0x5f, 0x6a, 0x30, 0x9b, 0xab, 0xe1, 0x56, 0x28, 0x3a, 0x4c, 0x94,
	0x15, 0x8a, 0x0e, 0x13, 0xf2, 0x21, 0x00, 0xbe, 0x6b, 0xa1, 0x91, 0x29, 0x4f, 0x71, 0xe7, 0x24,
	0x71, 0x24, 0xf6, 0x2b, 0x9f, 0x3c, 0x86, 0x05, 0x4f, 0x0d, 0x92, 0x8f, 0x70, 0x2b, 0x9d, 0xb3,
	0x06, 0xca, 0x6d, 0x4c, 0x2d, 0xf9, 0x16, 0x80, 0xcd, 0x7c, 0x21, 0x52, 0x21, 0xe3, 0x52, 0xd2,
	0x4c, 0x72, 0xbd, 0xa1, 0xd0, 0x8c, 0x4c, 0x0b, 0xfd, 0x37, 0x35, 0xd0, 0x8a, 0x08, 0x64, 0x23,
	0x73, 0xe9, 0xb4, 0xd2, 0xd0, 0x15, 0x5b, 0xa4, 0x57, 0x50, 0xf3, 0x17, 0xa4, 0xab, 0x5f, 0x3a,
	0xe9, 0x1f, 0x43, 0x53, 0xe1, 0x93, 0x39, 0x98, 0x79, 0xb3, 0xb3, 0xb7, 0xbb, 0xb5, 0xb1, 0xfd,
	0x74, 0x7b, 0x6b, 0x53, 0xbb, 0x40, 0x9a, 0x30, 0xb1, 0xbd, 0xf3, 0xf4, 0x95, 0x78, 0x52, 0xf0,
	0xd9, 0xba, 0xb1, 0xb3, 0xbd, 0xf3, 0x4c, 0xab, 0x63, 0x04, 0xdf, 0x30, 0x5e, 0x19, 0x5a, 0x43,
	0xff, 0x3f, 0x75, 0x98, 0x93, 0x0c, 0x38, 0x52, 0x87, 0x2a, 0x1f, 0x77, 0xc9, 0xf9, 0xa9, 0x8f,
	0xe6, 0xe7, 0xfc, 0xe7, 0xaf, 0x5f, 0x53, 0x9c, 0xdc, 0x2c, 0x1f, 0xb8, 0x8e, 0x43, 0xd5, 0x6d,
	0x11, 0x59, 0x2a, 0x68, 0xc6, 0xd4, 0x97, 0xd1, 0x0c, 0xe1, 0xcb, 0xc9, 0xd3, 0x74, 0xd3, 0x10,
	0x05, 0xb2, 0x08, 0x93, 0x22, 0x60, 0xff, 0x1f, 0xd0, 0xfe, 0x3f, 0xbf, 0x60, 0x88, 0x32, 0xd1,
	0x61, 0xc6, 0xb6, 0x02, 0xcb, 0x76, 0xe3, 0x53, 0x33, 0xee, 0x77, 0xff, 0xa3, 0xaa, 0x06, 0x05,
	0x7d, 0xdd, 0x27, 0x57, 0x47, 0x57, 0x23, 0xff, 0x13, 0x3a, 0x60, 0xcf, 0x2f, 0xa4, 0xb7, 0x23,
	0x9f, 0x00, 0x34, 0xbf, 0x97, 0x58, 0x7e, 0xec, 0xc6, 0xa7, 0x39, 0x0b, 0xad, 0x64, 0xbd, 0xe5,
	0x27, 0x43, 0xbe, 0x97, 0x29, 0x53, 0xa8, 0x9b, 0xa0, 0x9f, 0x85, 0x34, 0x7a, 0xdb, 0x99, 0x9a,
	0x02, 0x91, 0xe2, 0x58, 0xaa, 0x94, 0xab, 0xa2, 0x60, 0xa4, 0xe8, 0xfa, 0x07, 0x70, 0xa3, 0xd4,
	0xc1, 0xb6, 0xcf, 0x1d, 0xcd, 0x34, 0x65, 0x5d, 0x31, 0xff, 0xb9, 0xbd, 0xab, 0xd4, 0x4c, 0x72,
	0xf5, 0x87, 0x30, 0x2d, 0xbb, 0xa9, 0x7e, 0xc8, 0x53, 0x64, 0x4a, 0x61, 0xeb, 0x8f, 0x60, 0xa9,
	0x44, 0x3c, 0xe7, 0xeb, 0x56, 0x71, 0xf4, 0x18, 0xae, 0x8f, 0x6b, 0x24, 0xf9, 0x49, 0x27, 0xbb,
	0x96, 0x99, 0xec, 0xe5, 0x8f, 0xa0, 0x9d, 0xbd, 0xf9, 0x94, 0xf7, 0xfd, 0xa6, 0xa1, 0xf1, 0x82,
	0x1d, 0x0b, 0xcf, 0xef, 0x25, 0x75, 0xdc, 0x64, 0x28, 0x6e, 0x00, 0x3d, 0x77, 0x07, 0x07, 0x5a,
	0x63, 0x99, 0xc2, 0xb4, 0xbc, 0xad, 0x81, 0xae, 0x61, 0xe2, 0x3b, 0xd6, 0xa9, 0x78, 0xbb, 0xf3,
	0x92, 0xe1, 0x37, 0x2e, 0xb4, 0xd7, 0x09, 0x8d, 0x78, 0xa1, 0x4e, 0x66, 0xa1, 0xf5, 0x19, 0x75,
	0x7c, 0x51, 0x6c, 0x90, 0x36, 0x34, 0x5f, 0x1f, 0x24, 0x21, 0x96, 0x26, 0x78, 0xab, 0xa7, 0xa1,
	0xcb, 0xbf, 0x27, 0xf1, 0x89, 0x2f, 0x1f, 0x01, 0x2f, 0x4d, 0x2d, 0xff, 0x39, 0x90, 0x72, 0x46,
	0x3c, 0x73, 0x6b, 0x29, 0x85, 0x89, 0x54, 0x61, 0xe6, 0x72, 0x51, 0x8d, 0xdb, 0x80, 0xd4, 0x5b,
	0xb2, 0x3c, 0xad, 0x8e, 0x79, 0xb6, 0x04, 0x27, 0x0a, 0xf3, 0x7d, 0x8d, 0xe5, 0xef, 0xc0, 0x7c,
	0x29, 0x71, 0x9e, 0xb9, 0xc0, 0xa4, 0x40, 0x62, 0x5c, 0x2f, 0xf0, 0x5d, 0x83, 0x12, 0xc8, 0xb0,
	0x4f, 0x43, 0xad, 0xbe, 0xfc, 0x39, 0xcc, 0x64, 0x32, 0xb0, 0x64, 0x01, 0x88, 0x6c, 0x9b, 0x81,
	0x6a, 0x17, 0x08, 0x81, 0x4e, 0x26, 0xbe, 0xe3, 0xda, 0x54, 0xdc, 0x85, 0xfa, 0xe4, 0xc8, 0xe9,
	0xcb, 0x32, 0xbe, 0xee, 0x7e, 0x12, 0x87, 0xfb, 0xd1, 0x5e, 0xd2, 0x3f, 0x62, 0x5e, 0x32, 0xa4,
	0x5a, 0x63, 0x79, 0x17, 0xe6, 0x0a, 0xe1, 0x37, 0xd2, 0x83, 0x05, 0xd9, 0x45, 0xa1, 0x46, 0x70,
	0xb9, 0x63, 0xc5, 0xee, 0x11, 0x27, 0xdf, 0x86, 0xe6, 0xd6, 0x49, 0x4c, 0x43, 0x31, 0xf4, 0x69,
	0x68, 0xec, 0xf4, 0x1d, 0x1c, 0x72, 0x3b, 0x1b, 0x8c, 0x23, 0x8b, 0x70, 0x51, 0x92, 0xcb, 0x82,
	0x85, 0x34, 0x55, 0xfb, 0xa7, 0x5c, 0x9a, 0xd3, 0xd0, 0xd8, 0xfd, 0xd3, 0x4f, 0xb5, 0xfa, 0xf2,
	0x5f, 0x40, 0x33, 0x0d, 0x4f, 0x8c, 0x64, 0xa5, 0x40, 0xe2, 0xd4, 0x80, 0x03, 0x11, 0xa2, 0xda,
	0x1c, 0xc6, 0x07, 0xae, 0x2f, 0x4e, 0x0d, 0x2f, 0x9d, 0xd0, 0x72, 0x1d, 0x91, 0xab, 0xdd, 0x3a,
	0x89, 0xdf, 0xd7, 0x26, 0x38, 0xf2, 0x0e, 0xb3, 0xd9, 0xb1, 0x36, 0x89, 0x1a, 0x77, 0x34, 0xd4,
	0xa6, 0xd6, 0x7e, 0x5e, 0x83, 0xf9, 0x5d, 0xb9, 0x5c, 0xd2, 0x07, 0x6b, 0xe4, 0x38, 0xcd, 0x16,
	0xdf, 0x1b, 0xfb, 0x94, 0x2f, 0xb7, 0x57, 0xf7, 0xee, 0x9f, 0x8b, 0xa7, 0x5e, 0x17, 0xfc, 0xf0,
	0x77, 0xff, 0xfb, 0x1f, 0xd6, 0x17, 0xc8, 0xa5, 0xd5, 0xa3, 0x3f, 0x58, 0x8d, 0x15, 0xd2, 0xaa,
	0xd8, 0xa2, 0xd7, 0x7e, 0x3c, 0x0d, 0x73, 0x8a, 0x1d, 0xb9, 0xca, 0xc8, 0xbf, 0xa9, 0xc1, 0xe5,
	0x4a, 0x17, 0x97, 0x3c, 0x2a, 0x76, 0xfa, 0x16, 0x6e, 0x77, 0xef, 0xfd, 0x2f, 0xd7, 0x48, 0xb2,
	0xbd, 0x8a, 0x6c, 0xbf, 0xd3, 0xbb, 0xc3, 0xd9, 0x96, 0x1b, 0xf9, 0xaa, 0x74, 0x3d, 0x1f, 0xf6,
	0x4f, 0x1f, 0x8e, 0x1c, 0xd4, 0x87, 0xae, 0xf3, 0x51, 0x6d, 0x99, 0xfc, 0xb3, 0x1a, 0x68, 0x45,
	0x8f, 0x98, 0xac, 0x9c, 0xd7, 0x77, 0xde, 0x2f, 0xef, 0xad, 0xbe, 0x35, 0xbe, 0x64, 0xf3, 0x1d,
	0x64, 0xf3, 0x76, 0xef, 0xfa, 0x18, 0x36, 0x25, 0x88, 0x33, 0xf8, 0xeb, 0x1a, 0x2c, 0x8e, 0xf1,
	0x9e, 0xc9, 0x07, 0x63, 0xfa, 0x3d, 0xdb, 0x7b, 0xef, 0x3d, 0xfe, 0xb2, 0xcd, 0x24, 0xd7, 0x37,
	0x91, 0xeb, 0x5e, 0xef, 0x72, 0x96, 0xeb, 0x44, 0x35, 0xe2, 0xcc, 0x9e, 0xc0, 0xb4, 0x74, 0xb6,
	0xc9, 0xdd, 0x31, 0x9d, 0xe4, 0xbd, 0xfb, 0xde, 0xbd, 0xf3, 0xd0, 0x64, 0xdf, 0xd7, 0xb1, 0xef,
	0x6e, 0xef, 0x62, 0xb6, 0x6f, 0xf9, 0xb4, 0x9d, 0xf7, 0xfc, 0x83, 0x1a, 0xb4, 0x52, 0xa7, 0x95,
	0xdc, 0x1f, 0x43, 0xb5, 0xe8, 0xb3, 0xf7, 0x1e, 0x9c, 0x8f, 0x28, 0x19, 0xb8, 0x85, 0x0c, 0x5c,
	0xed, 0x2d, 0x64, 0x19, 0x88, 0x68, 0xfc, 0x50, 0x3c, 0x8d, 0xe3, 0x3c, 0x7c, 0x2f, 0x5d, 0x8e,
	0x77, 0xc6, 0x91, 0xcd, 0x2d, 0xc6, 0xbb, 0xe7, 0x60, 0xc9, 0x9e, 0x7b, 0xd8, 0xf3, 0x25, 0x42,
	0x72, 0x3d, 0x8b, 0x85, 0xf8, 0xbb, 0x06, 0x2c, 0x16, 0x16, 0x62, 0xea, 0xa9, 0xfd, 0xa2, 0x06,
	0xad, 0xd4, 0x3b, 0x20, 0xe3, 0x74, 0x74, 0x9c, 0xb3, 0xd1, 0x7b, 0xef, 0xed, 0x1b, 0x48, 0x46,
	0x97, 0x90, 0xd1, 0x45, 0x92, 0xd5, 0x0f, 0xe7, 0xa1, 0x72, 0x2e, 0xc8, 0x3f, 0xae, 0xc1, 0xb4,
	0xf4, 0x0a, 0xc8, 0xc3, 0x73, 0x88, 0xe7, 0x9d, 0x8e, 0xde, 0xca, 0xdb, 0xa2, 0x4b, 0x4e, 0xde,
	0x45, 0x4e, 0xee, 0x91, 0x3b, 0x95, 0x9c, 0xf0, 0x95, 0xc6, 0xd1, 0x57, 0xff, 0x8a, 0xfb, 0x0a,
	0x7f, 0x4d, 0xfe, 0x5e, 0x0d, 0x26, 0xc5, 0x3f, 0xbc, 0x7c, 0xe3, 0x9c, 0x7e, 0xb2, 0x7e, 0x47,
	0xef, 0xdd, 0xb7, 0x43, 0x96, 0x2c, 0x2d, 0x23, 0x4b, 0x77, 0x88, 0x5e, 0xcd, 0x12, 0x3e, 0xb5,
	0x96, 0x0c, 0xad, 0xfd, 0xdd, 0xa5, 0x91, 0x79, 0xe5, 0x6a, 0xe8, 0xda, 0x94, 0xfc, 0xa3, 0x1a,
	0x5c, 0xaa, 0x7a, 0x80, 0x5b, 0xe6, 0xf9, 0x8c, 0xe7, 0xc0, 0x65, 0x9e, 0xcf, 0x7c, 0xd3, 0xab,
	0x23, 0xcf, 0xd7, 0x7a, 0x8b, 0x9c, 0xe7, 0x48, 0x30, 0xb2, 0x3a, 0x1c, 0xb5, 0xe0, 0x4a, 0xff,
	0xfd, 0x1a, 0x74, 0xf2, 0xef, 0x72, 0xcb, 0x4b, 0xbf, 0xf2, 0x59, 0x70, 0x79, 0xe9, 0x8f, 0x79,
	0xde, 0x7b, 0x03, 0xb9, 0xb8, 0xd2, 0xbb, 0x94, 0xe5, 0xc2, 0xb6, 0x3c, 0xef, 0x80, 0x0d, 0x91,
	0x05, 0x13, 0x26, 0xf1, 0xcd, 0x2c, 0xb9, 0x56, 0xa4, 0x98, 0x7d, 0x14, 0xdc, 0x5b, 0x1a, 0x53,
	0xab, 0x9e, 0xc4, 0x61, 0x37, 0x17, 0xc9, 0x7c, 0xb6, 0x1b, 0x0b, 0xe9, 0xfe, 0xb8, 0x06, 0x9d,
	0xfc, 0xb3, 0xc8, 0xf2, 0x18, 0x2b, 0xdf, 0x63, 0x96, 0xc7, 0x38, 0xe6, 0x75, 0xe5, 0x5d, 0xec,
	0xfc, 0x46, 0xaf, 0x97, 0xed, 0x3c, 0xa2, 0x31, 0x3e, 0x86, 0x14, 0x8f, 0x3a, 0xf8, 0x48, 0x39,
	0x23, 0xcf, 0xce, 0x61, 0xe4, 0xd9, 0xdb, 0x31, 0xf2, 0xec, 0x4b, 0x30, 0x32, 0x28, 0x31, 0xf2,
	0x0f, 0x6a, 0x30, 0x5f, 0x7a, 0x79, 0x49, 0x4a, 0xd6, 0x74, 0xdc, 0xd3, 0xcd, 0xde, 0x3b, 0x6f,
	0x81, 0x29, 0x39, 0x7a, 0x80, 0x1c, 0xe9, 0xbd, 0xa5, 0x2c, 0x47, 0x0e, 0xa2, 0x57, 0x48, 0x27,
	0xff, 0x58, 0xb2, 0x72, 0x9a, 0xca, 0x6f, 0x1e, 0x2b, 0xa7, 0xa9, 0xea, 0xd9, 0xe4, 0xb8, 0x69,
	0xc2, 0x57, 0x8e, 0x55, 0xd2, 0xc9, 0xf2, 0x32, 0x46, 0x3a, 0x15, 0xec, 0xbc, 0xf3, 0x16, 0x98,
	0xe7, 0x4b, 0xa7, 0xc0, 0xd4, 0x8f, 0x84, 0xee, 0x9c, 0x29, 0x9d, 0x67, 0x6f, 0x27, 0x9d, 0xea,
	0xd7, 0xa1, 0xca, 0x5c, 0x90, 0xa2, 0xee, 0x64, 0x18, 0x21, 0x47, 0xdc, 0x87, 0x56, 0x4f, 0x3d,
	0xc9, 0xad, 0x22, 0xe5, 0xd2, 0xeb, 0xd0, 0x9e, 0x7e, 0x16, 0x4a, 0xd5, 0xde, 0xac, 0x3a, 0xa6,
	0x27, 0x6e, 0xec, 0x20, 0x9e, 0xf4, 0x0f, 0xb4, 0x67, 0x34, 0xce, 0xbe, 0x1a, 0x8d, 0xc8, 0xed,
	0xaa, 0xa7, 0x61, 0x85, 0xd7, 0xa6, 0xbd, 0x3b, 0x67, 0x23, 0x9d, 0x35, 0xf6, 0xc3, 0x23, 0xa7,
	0xbf, 0x3a, 0x0a, 0x01, 0xfe, 0x0d, 0xcc, 0x4b, 0x16, 0x32, 0x4f, 0xcd, 0x6f, 0x9d, 0xf5, 0x3c,
	0x6d, 0x8c, 0x08, 0xca, 0x2f, 0xd8, 0xf4, 0xdb, 0xd8, 0xff, 0x12, 0xb9, 0x5a, 0xea, 0x5f, 0xbc,
	0x88, 0xc3, 0xac, 0xf8, 0xbf, 0xa8, 0xc1, 0xa2, 0xe4, 0xa0, 0x78, 0x25, 0xb8, 0xec, 0xf3, 0x9e,
	0x7d, 0xbf, 0xb8, 0xec, 0xf3, 0x9e, 0x73, 0xd7, 0x58, 0xf9, 0xbc, 0xe4, 0x56, 0x89, 0xc3, 0xbe,
	0x6a, 0x22, 0xaf, 0x17, 0x93, 0x9f, 0xd5, 0x52, 0x49, 0x8d, 0xae, 0x0f, 0x97, 0xd7, 0xcf, 0xb8,
	0x0b, 0xc8, 0xe5, 0xf5, 0x33, 0xf6, 0x2e, 0xb2, 0xda, 0x5c, 0xc8, 0x62, 0x89, 0x2b, 0x91, 0xc0,
	0x25, 0xbf, 0xaa, 0x01, 0x29, 0xdf, 0xde, 0x25, 0x15, 0x4b, 0x74, 0xcc, 0x65, 0xe2, 0xde, 0xf2,
	0xdb, 0xa0, 0xe6, 0xbd, 0x04, 0xfd, 0x46, 0x05, 0x3b, 0xaa, 0x91, 0xcf, 0x9c, 0x74, 0xe7, 0xcd,
	0x27, 0x11, 0xab, 0x17, 0x74, 0x29, 0xff, 0x58, 0xbd, 0xa0, 0xcb, 0xb9, 0xc8, 0x6a, 0xe1, 0xc8,
	0x7b, 0x1e, 0xdc, 0x83, 0x22, 0x01, 0xc0, 0xe8, 0x85, 0x55, 0x59, 0x95, 0x4b, 0x0f, 0xd2, 0xca,
	0xaa, 0x5c, 0xf1, 0x40, 0xeb, 0x2a, 0xf6, 0x7a, 0xb9, 0xa7, 0x65, 0x7b, 0x0d, 0x18, 0xc3, 0x13,
	0xc6, 0xb1, 0xe8, 0x51, 0x18, 0xc4, 0xea, 0x1e, 0x73, 0x89, 0xa9, 0xea, 0x1e, 0x0b, 0xb9, 0x28,
	0xb9, 0x78, 0x97, 0x7b, 0xc5, 0x1e, 0x57, 0xff, 0x4a, 0x26, 0xb5, 0xfe, 0x9a, 0xfc, 0xb4, 0xc6,
	0x7d, 0xb2, 0x5c, 0x2e, 0xa9, 0x7c, 0xea, 0xae, 0xce, 0x67, 0x95, 0x4f, 0xdd, 0xe3, 0x92, 0x52,
	0x77, 0x90, 0x91, 0xeb, 0xfa, 0xb5, 0x12, 0x23, 0x19, 0xaf, 0x8b, 0xcb, 0x60, 0x94, 0xb1, 0x2d,
	0xcb, 0xa0, 0x94, 0x0d, 0x2e, 0xcb, 0xa0, 0x9c, 0xf0, 0x55, 0x32, 0xd0, 0x73, 0x73, 0x8d, 0x97,
	0xa0, 0x84, 0x6f, 0xca, 0x85, 0xff, 0x93, 0x5a, 0x31, 0x07, 0x5c, 0xd6, 0xb8, 0xca, 0x6c, 0x6e,
	0x59, 0xe3, 0xaa, 0xf3, 0xa3, 0xfa, 0x3d, 0xe4, 0xe2, 0xa6, 0x7e, 0xb5, 0xcc, 0x45, 0xa8, 0x90,
	0x39, 0x27, 0x7f, 0x93, 0x4f, 0xda, 0x96, 0x2d, 0x79, 0x45, 0x42, 0xb5, 0x6c, 0xc9, 0xab, 0x52,
	0x9e, 0xe9, 0x1c, 0x5c, 0xa9, 0x62, 0x01, 0x51, 0x39, 0x03, 0x47, 0xd9, 0x47, 0x84, 0x15, 0x73,
	0x50, 0x7c, 0x9f, 0x57, 0x31, 0x07, 0xa5, 0x57, 0x71, 0xd5, 0xfb, 0x98, 0xbc, 0x48, 0x62, 0x5b,
	0xb8, 0x8f, 0xfd, 0xbc, 0x06, 0x5a, 0xf1, 0x6d, 0x5b, 0xf9, 0xb8, 0x3b, 0xe6, 0x69, 0x5c, 0xef,
	0xc1, 0xf9, 0x88, 0x79, 0x4f, 0x87, 0x2c, 0x55, 0xb3, 0x22, 0xcf, 0x9f, 0xe4, 0x9f, 0xd4, 0xe0,
	0x72, 0x6a, 0x58, 0xb3, 0x6f, 0x8e, 0xc8, 0xbb, 0x67, 0x74, 0x55, 0x7a, 0x4e, 0x55, 0x65, 0x23,
	0xc7, 0xbd, 0x62, 0xd2, 0xef, 0x23, 0x6b, 0xb7, 0xc8, 0x8d, 0x71, 0xac, 0x29, 0x16, 0xfe, 0x69,
	0x0d, 0x2e, 0xef, 0x7d, 0x55, 0xe6, 0xf6, 0xbe, 0x1a, 0x73, 0xd2, 0x80, 0xf7, 0xce, 0x63, 0x4e,
	0xc6, 0x9e, 0x16, 0xf1, 0xc1, 0x58, 0x05, 0x87, 0x2b, 0xe7, 0xf7, 0x99, 0x7d, 0x6b, 0xf6, 0x55,
	0x04, 0xb8, 0x7c, 0x1e, 0x8f, 0x6b, 0xbf, 0x9c, 0x80, 0x6e, 0x7a, 0x0e, 0x1d, 0xdd, 0xe5, 0x12,
	0x77, 0x93, 0x7e, 0x5a, 0x83, 0x76, 0xf6, 0xbf, 0x2d, 0xca, 0x6b, 0xb0, 0xe2, 0x3f, 0x34, 0xca,
	0x6b, 0xb0, 0xea, 0xef, 0x31, 0xf4, 0x87, 0xc8, 0xe1, 0xfd, 0x9e, 0x5e, 0xb4, 0x83, 0x78, 0x15,
	0x68, 0x35, 0xc6, 0x36, 0x42, 0x05, 0xb9, 0x20, 0x43, 0x98, 0x7e, 0x46, 0x63, 0x74, 0x12, 0x6e,
	0x96, 0x0f, 0x95, 0xf9, 0xbf, 0xd2, 0xe8, 0xdd, 0x3a, 0x03, 0xe3, 0x2c, 0x67, 0x6e, 0xd4, 0x3d,
	0xfa, 0x52, 0xdf, 0xaf, 0x41, 0x4b, 0xf8, 0xbf, 0x49, 0x48, 0x89, 0x5e, 0x49, 0x34, 0xef, 0x46,
	0xdf, 0x3e, 0x13, 0xe7, 0x2c, 0xfd, 0x19, 0x75, 0x6d, 0xab, 0x1e, 0x85, 0x0d, 0x9a, 0xc4, 0x77,
	0x2e, 0xa4, 0x7a, 0x48, 0xd9, 0x27, 0xeb, 0x3d, 0xfd, 0x2c, 0x94, 0xbc, 0xf1, 0xed, 0x5d, 0xad,
	0xee, 0x7b, 0x9f, 0x23, 0x7f, 0x54, 0x5b, 0x7e, 0x32, 0xf9, 0x67, 0x0d, 0x2b, 0x70, 0xfb, 0x53,
	0x98, 0x4d, 0x7b, 0xf4, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x92, 0x17, 0x31, 0xe0, 0x57,
	0x00, 0x00,
}
