/*
PDS API

Portworx Data Services API Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pds

import (
	"encoding/json"
)

// CompatibilityCompatibleVersions struct for CompatibilityCompatibleVersions
type CompatibilityCompatibleVersions struct {
	// Compatible contains all compatible versions.
	Compatible []CompatibilityCompatibleVersion `json:"compatible,omitempty"`
	DataServiceId *string `json:"data_service_id,omitempty"`
	DataServiceName *string `json:"data_service_name,omitempty"`
	// LatestCompatible contains the latest patch versions of compatible major/minor versions.
	LatestCompatible []CompatibilityCompatibleVersion `json:"latest_compatible,omitempty"`
	LatestCompatiblePatch *CompatibilityCompatibleVersion `json:"latest_compatible_patch,omitempty"`
	VersionId *string `json:"version_id,omitempty"`
	VersionName *string `json:"version_name,omitempty"`
}

// NewCompatibilityCompatibleVersions instantiates a new CompatibilityCompatibleVersions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompatibilityCompatibleVersions() *CompatibilityCompatibleVersions {
	this := CompatibilityCompatibleVersions{}
	return &this
}

// NewCompatibilityCompatibleVersionsWithDefaults instantiates a new CompatibilityCompatibleVersions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompatibilityCompatibleVersionsWithDefaults() *CompatibilityCompatibleVersions {
	this := CompatibilityCompatibleVersions{}
	return &this
}

// GetCompatible returns the Compatible field value if set, zero value otherwise.
func (o *CompatibilityCompatibleVersions) GetCompatible() []CompatibilityCompatibleVersion {
	if o == nil || o.Compatible == nil {
		var ret []CompatibilityCompatibleVersion
		return ret
	}
	return o.Compatible
}

// GetCompatibleOk returns a tuple with the Compatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompatibilityCompatibleVersions) GetCompatibleOk() ([]CompatibilityCompatibleVersion, bool) {
	if o == nil || o.Compatible == nil {
		return nil, false
	}
	return o.Compatible, true
}

// HasCompatible returns a boolean if a field has been set.
func (o *CompatibilityCompatibleVersions) HasCompatible() bool {
	if o != nil && o.Compatible != nil {
		return true
	}

	return false
}

// SetCompatible gets a reference to the given []CompatibilityCompatibleVersion and assigns it to the Compatible field.
func (o *CompatibilityCompatibleVersions) SetCompatible(v []CompatibilityCompatibleVersion) {
	o.Compatible = v
}

// GetDataServiceId returns the DataServiceId field value if set, zero value otherwise.
func (o *CompatibilityCompatibleVersions) GetDataServiceId() string {
	if o == nil || o.DataServiceId == nil {
		var ret string
		return ret
	}
	return *o.DataServiceId
}

// GetDataServiceIdOk returns a tuple with the DataServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompatibilityCompatibleVersions) GetDataServiceIdOk() (*string, bool) {
	if o == nil || o.DataServiceId == nil {
		return nil, false
	}
	return o.DataServiceId, true
}

// HasDataServiceId returns a boolean if a field has been set.
func (o *CompatibilityCompatibleVersions) HasDataServiceId() bool {
	if o != nil && o.DataServiceId != nil {
		return true
	}

	return false
}

// SetDataServiceId gets a reference to the given string and assigns it to the DataServiceId field.
func (o *CompatibilityCompatibleVersions) SetDataServiceId(v string) {
	o.DataServiceId = &v
}

// GetDataServiceName returns the DataServiceName field value if set, zero value otherwise.
func (o *CompatibilityCompatibleVersions) GetDataServiceName() string {
	if o == nil || o.DataServiceName == nil {
		var ret string
		return ret
	}
	return *o.DataServiceName
}

// GetDataServiceNameOk returns a tuple with the DataServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompatibilityCompatibleVersions) GetDataServiceNameOk() (*string, bool) {
	if o == nil || o.DataServiceName == nil {
		return nil, false
	}
	return o.DataServiceName, true
}

// HasDataServiceName returns a boolean if a field has been set.
func (o *CompatibilityCompatibleVersions) HasDataServiceName() bool {
	if o != nil && o.DataServiceName != nil {
		return true
	}

	return false
}

// SetDataServiceName gets a reference to the given string and assigns it to the DataServiceName field.
func (o *CompatibilityCompatibleVersions) SetDataServiceName(v string) {
	o.DataServiceName = &v
}

// GetLatestCompatible returns the LatestCompatible field value if set, zero value otherwise.
func (o *CompatibilityCompatibleVersions) GetLatestCompatible() []CompatibilityCompatibleVersion {
	if o == nil || o.LatestCompatible == nil {
		var ret []CompatibilityCompatibleVersion
		return ret
	}
	return o.LatestCompatible
}

// GetLatestCompatibleOk returns a tuple with the LatestCompatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompatibilityCompatibleVersions) GetLatestCompatibleOk() ([]CompatibilityCompatibleVersion, bool) {
	if o == nil || o.LatestCompatible == nil {
		return nil, false
	}
	return o.LatestCompatible, true
}

// HasLatestCompatible returns a boolean if a field has been set.
func (o *CompatibilityCompatibleVersions) HasLatestCompatible() bool {
	if o != nil && o.LatestCompatible != nil {
		return true
	}

	return false
}

// SetLatestCompatible gets a reference to the given []CompatibilityCompatibleVersion and assigns it to the LatestCompatible field.
func (o *CompatibilityCompatibleVersions) SetLatestCompatible(v []CompatibilityCompatibleVersion) {
	o.LatestCompatible = v
}

// GetLatestCompatiblePatch returns the LatestCompatiblePatch field value if set, zero value otherwise.
func (o *CompatibilityCompatibleVersions) GetLatestCompatiblePatch() CompatibilityCompatibleVersion {
	if o == nil || o.LatestCompatiblePatch == nil {
		var ret CompatibilityCompatibleVersion
		return ret
	}
	return *o.LatestCompatiblePatch
}

// GetLatestCompatiblePatchOk returns a tuple with the LatestCompatiblePatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompatibilityCompatibleVersions) GetLatestCompatiblePatchOk() (*CompatibilityCompatibleVersion, bool) {
	if o == nil || o.LatestCompatiblePatch == nil {
		return nil, false
	}
	return o.LatestCompatiblePatch, true
}

// HasLatestCompatiblePatch returns a boolean if a field has been set.
func (o *CompatibilityCompatibleVersions) HasLatestCompatiblePatch() bool {
	if o != nil && o.LatestCompatiblePatch != nil {
		return true
	}

	return false
}

// SetLatestCompatiblePatch gets a reference to the given CompatibilityCompatibleVersion and assigns it to the LatestCompatiblePatch field.
func (o *CompatibilityCompatibleVersions) SetLatestCompatiblePatch(v CompatibilityCompatibleVersion) {
	o.LatestCompatiblePatch = &v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *CompatibilityCompatibleVersions) GetVersionId() string {
	if o == nil || o.VersionId == nil {
		var ret string
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompatibilityCompatibleVersions) GetVersionIdOk() (*string, bool) {
	if o == nil || o.VersionId == nil {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *CompatibilityCompatibleVersions) HasVersionId() bool {
	if o != nil && o.VersionId != nil {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given string and assigns it to the VersionId field.
func (o *CompatibilityCompatibleVersions) SetVersionId(v string) {
	o.VersionId = &v
}

// GetVersionName returns the VersionName field value if set, zero value otherwise.
func (o *CompatibilityCompatibleVersions) GetVersionName() string {
	if o == nil || o.VersionName == nil {
		var ret string
		return ret
	}
	return *o.VersionName
}

// GetVersionNameOk returns a tuple with the VersionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompatibilityCompatibleVersions) GetVersionNameOk() (*string, bool) {
	if o == nil || o.VersionName == nil {
		return nil, false
	}
	return o.VersionName, true
}

// HasVersionName returns a boolean if a field has been set.
func (o *CompatibilityCompatibleVersions) HasVersionName() bool {
	if o != nil && o.VersionName != nil {
		return true
	}

	return false
}

// SetVersionName gets a reference to the given string and assigns it to the VersionName field.
func (o *CompatibilityCompatibleVersions) SetVersionName(v string) {
	o.VersionName = &v
}

func (o CompatibilityCompatibleVersions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Compatible != nil {
		toSerialize["compatible"] = o.Compatible
	}
	if o.DataServiceId != nil {
		toSerialize["data_service_id"] = o.DataServiceId
	}
	if o.DataServiceName != nil {
		toSerialize["data_service_name"] = o.DataServiceName
	}
	if o.LatestCompatible != nil {
		toSerialize["latest_compatible"] = o.LatestCompatible
	}
	if o.LatestCompatiblePatch != nil {
		toSerialize["latest_compatible_patch"] = o.LatestCompatiblePatch
	}
	if o.VersionId != nil {
		toSerialize["version_id"] = o.VersionId
	}
	if o.VersionName != nil {
		toSerialize["version_name"] = o.VersionName
	}
	return json.Marshal(toSerialize)
}

type NullableCompatibilityCompatibleVersions struct {
	value *CompatibilityCompatibleVersions
	isSet bool
}

func (v NullableCompatibilityCompatibleVersions) Get() *CompatibilityCompatibleVersions {
	return v.value
}

func (v *NullableCompatibilityCompatibleVersions) Set(val *CompatibilityCompatibleVersions) {
	v.value = val
	v.isSet = true
}

func (v NullableCompatibilityCompatibleVersions) IsSet() bool {
	return v.isSet
}

func (v *NullableCompatibilityCompatibleVersions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompatibilityCompatibleVersions(val *CompatibilityCompatibleVersions) *NullableCompatibilityCompatibleVersions {
	return &NullableCompatibilityCompatibleVersions{value: val, isSet: true}
}

func (v NullableCompatibilityCompatibleVersions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompatibilityCompatibleVersions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


