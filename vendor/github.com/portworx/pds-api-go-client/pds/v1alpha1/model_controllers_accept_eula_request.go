/*
PDS API

Portworx Data Services API Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pds

import (
	"encoding/json"
)

// ControllersAcceptEULARequest struct for ControllersAcceptEULARequest
type ControllersAcceptEULARequest struct {
	// Version of the EULA.
	Version *string `json:"version,omitempty"`
}

// NewControllersAcceptEULARequest instantiates a new ControllersAcceptEULARequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControllersAcceptEULARequest() *ControllersAcceptEULARequest {
	this := ControllersAcceptEULARequest{}
	return &this
}

// NewControllersAcceptEULARequestWithDefaults instantiates a new ControllersAcceptEULARequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControllersAcceptEULARequestWithDefaults() *ControllersAcceptEULARequest {
	this := ControllersAcceptEULARequest{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ControllersAcceptEULARequest) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllersAcceptEULARequest) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ControllersAcceptEULARequest) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ControllersAcceptEULARequest) SetVersion(v string) {
	o.Version = &v
}

func (o ControllersAcceptEULARequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableControllersAcceptEULARequest struct {
	value *ControllersAcceptEULARequest
	isSet bool
}

func (v NullableControllersAcceptEULARequest) Get() *ControllersAcceptEULARequest {
	return v.value
}

func (v *NullableControllersAcceptEULARequest) Set(val *ControllersAcceptEULARequest) {
	v.value = val
	v.isSet = true
}

func (v NullableControllersAcceptEULARequest) IsSet() bool {
	return v.isSet
}

func (v *NullableControllersAcceptEULARequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControllersAcceptEULARequest(val *ControllersAcceptEULARequest) *NullableControllersAcceptEULARequest {
	return &NullableControllersAcceptEULARequest{value: val, isSet: true}
}

func (v NullableControllersAcceptEULARequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControllersAcceptEULARequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


