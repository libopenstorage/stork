/*
PDS API

Portworx Data Services API Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pds

import (
	"encoding/json"
)

// PolicyRole struct for PolicyRole
type PolicyRole struct {
	Extends []string `json:"extends,omitempty"`
	Level *string `json:"level,omitempty"`
	Name *string `json:"name,omitempty"`
	Permissions []string `json:"permissions,omitempty"`
}

// NewPolicyRole instantiates a new PolicyRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyRole() *PolicyRole {
	this := PolicyRole{}
	return &this
}

// NewPolicyRoleWithDefaults instantiates a new PolicyRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyRoleWithDefaults() *PolicyRole {
	this := PolicyRole{}
	return &this
}

// GetExtends returns the Extends field value if set, zero value otherwise.
func (o *PolicyRole) GetExtends() []string {
	if o == nil || o.Extends == nil {
		var ret []string
		return ret
	}
	return o.Extends
}

// GetExtendsOk returns a tuple with the Extends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRole) GetExtendsOk() ([]string, bool) {
	if o == nil || o.Extends == nil {
		return nil, false
	}
	return o.Extends, true
}

// HasExtends returns a boolean if a field has been set.
func (o *PolicyRole) HasExtends() bool {
	if o != nil && o.Extends != nil {
		return true
	}

	return false
}

// SetExtends gets a reference to the given []string and assigns it to the Extends field.
func (o *PolicyRole) SetExtends(v []string) {
	o.Extends = v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *PolicyRole) GetLevel() string {
	if o == nil || o.Level == nil {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRole) GetLevelOk() (*string, bool) {
	if o == nil || o.Level == nil {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *PolicyRole) HasLevel() bool {
	if o != nil && o.Level != nil {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *PolicyRole) SetLevel(v string) {
	o.Level = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PolicyRole) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRole) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PolicyRole) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PolicyRole) SetName(v string) {
	o.Name = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *PolicyRole) GetPermissions() []string {
	if o == nil || o.Permissions == nil {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRole) GetPermissionsOk() ([]string, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *PolicyRole) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *PolicyRole) SetPermissions(v []string) {
	o.Permissions = v
}

func (o PolicyRole) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Extends != nil {
		toSerialize["extends"] = o.Extends
	}
	if o.Level != nil {
		toSerialize["level"] = o.Level
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullablePolicyRole struct {
	value *PolicyRole
	isSet bool
}

func (v NullablePolicyRole) Get() *PolicyRole {
	return v.value
}

func (v *NullablePolicyRole) Set(val *PolicyRole) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyRole) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyRole(val *PolicyRole) *NullablePolicyRole {
	return &NullablePolicyRole{value: val, isSet: true}
}

func (v NullablePolicyRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


