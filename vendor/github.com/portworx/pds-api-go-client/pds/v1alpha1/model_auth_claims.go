/*
PDS API

Portworx Data Services API Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pds

import (
	"encoding/json"
)

// AuthClaims struct for AuthClaims
type AuthClaims struct {
	// Audience is the intended recipient of the token.
	Aud *string `json:"aud,omitempty"`
	// Email of this account.
	Email *string `json:"email,omitempty"`
	// (optional) Groups in which this account is part of.
	Groups []string `json:"groups,omitempty"`
	// Issuer is the token issuer. For self-signed token do not prefix with `https://`.
	Iss *string `json:"iss,omitempty"`
	// Name of this account.
	Name *string `json:"name,omitempty"`
	// Roles of this account.
	Roles []string `json:"roles,omitempty"`
	// Subject identifier. Unique ID of this account.
	Sub *string `json:"sub,omitempty"`
}

// NewAuthClaims instantiates a new AuthClaims object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthClaims() *AuthClaims {
	this := AuthClaims{}
	return &this
}

// NewAuthClaimsWithDefaults instantiates a new AuthClaims object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthClaimsWithDefaults() *AuthClaims {
	this := AuthClaims{}
	return &this
}

// GetAud returns the Aud field value if set, zero value otherwise.
func (o *AuthClaims) GetAud() string {
	if o == nil || o.Aud == nil {
		var ret string
		return ret
	}
	return *o.Aud
}

// GetAudOk returns a tuple with the Aud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthClaims) GetAudOk() (*string, bool) {
	if o == nil || o.Aud == nil {
		return nil, false
	}
	return o.Aud, true
}

// HasAud returns a boolean if a field has been set.
func (o *AuthClaims) HasAud() bool {
	if o != nil && o.Aud != nil {
		return true
	}

	return false
}

// SetAud gets a reference to the given string and assigns it to the Aud field.
func (o *AuthClaims) SetAud(v string) {
	o.Aud = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AuthClaims) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthClaims) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AuthClaims) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AuthClaims) SetEmail(v string) {
	o.Email = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *AuthClaims) GetGroups() []string {
	if o == nil || o.Groups == nil {
		var ret []string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthClaims) GetGroupsOk() ([]string, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *AuthClaims) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *AuthClaims) SetGroups(v []string) {
	o.Groups = v
}

// GetIss returns the Iss field value if set, zero value otherwise.
func (o *AuthClaims) GetIss() string {
	if o == nil || o.Iss == nil {
		var ret string
		return ret
	}
	return *o.Iss
}

// GetIssOk returns a tuple with the Iss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthClaims) GetIssOk() (*string, bool) {
	if o == nil || o.Iss == nil {
		return nil, false
	}
	return o.Iss, true
}

// HasIss returns a boolean if a field has been set.
func (o *AuthClaims) HasIss() bool {
	if o != nil && o.Iss != nil {
		return true
	}

	return false
}

// SetIss gets a reference to the given string and assigns it to the Iss field.
func (o *AuthClaims) SetIss(v string) {
	o.Iss = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuthClaims) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthClaims) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuthClaims) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuthClaims) SetName(v string) {
	o.Name = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *AuthClaims) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthClaims) GetRolesOk() ([]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *AuthClaims) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *AuthClaims) SetRoles(v []string) {
	o.Roles = v
}

// GetSub returns the Sub field value if set, zero value otherwise.
func (o *AuthClaims) GetSub() string {
	if o == nil || o.Sub == nil {
		var ret string
		return ret
	}
	return *o.Sub
}

// GetSubOk returns a tuple with the Sub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthClaims) GetSubOk() (*string, bool) {
	if o == nil || o.Sub == nil {
		return nil, false
	}
	return o.Sub, true
}

// HasSub returns a boolean if a field has been set.
func (o *AuthClaims) HasSub() bool {
	if o != nil && o.Sub != nil {
		return true
	}

	return false
}

// SetSub gets a reference to the given string and assigns it to the Sub field.
func (o *AuthClaims) SetSub(v string) {
	o.Sub = &v
}

func (o AuthClaims) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aud != nil {
		toSerialize["aud"] = o.Aud
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.Iss != nil {
		toSerialize["iss"] = o.Iss
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.Sub != nil {
		toSerialize["sub"] = o.Sub
	}
	return json.Marshal(toSerialize)
}

type NullableAuthClaims struct {
	value *AuthClaims
	isSet bool
}

func (v NullableAuthClaims) Get() *AuthClaims {
	return v.value
}

func (v *NullableAuthClaims) Set(val *AuthClaims) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthClaims) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthClaims) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthClaims(val *AuthClaims) *NullableAuthClaims {
	return &NullableAuthClaims{value: val, isSet: true}
}

func (v NullableAuthClaims) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthClaims) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


