/*
PDS API

Portworx Data Services API Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pds

import (
	"encoding/json"
)

// ControllersUpdateGlobalConfigRequest struct for ControllersUpdateGlobalConfigRequest
type ControllersUpdateGlobalConfigRequest struct {
	// Specify if the TLS Preview feature should be enabled for this account.
	TlsPreviewEnabled *string `json:"tls_preview_enabled,omitempty"`
	// Specify what data service versions are available for deployment for this account.
	VersionAvailability *string `json:"version_availability,omitempty"`
	// Specify what data service versions are updatable for this account.
	VersionUpdatability *string `json:"version_updatability,omitempty"`
}

// NewControllersUpdateGlobalConfigRequest instantiates a new ControllersUpdateGlobalConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControllersUpdateGlobalConfigRequest() *ControllersUpdateGlobalConfigRequest {
	this := ControllersUpdateGlobalConfigRequest{}
	return &this
}

// NewControllersUpdateGlobalConfigRequestWithDefaults instantiates a new ControllersUpdateGlobalConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControllersUpdateGlobalConfigRequestWithDefaults() *ControllersUpdateGlobalConfigRequest {
	this := ControllersUpdateGlobalConfigRequest{}
	return &this
}

// GetTlsPreviewEnabled returns the TlsPreviewEnabled field value if set, zero value otherwise.
func (o *ControllersUpdateGlobalConfigRequest) GetTlsPreviewEnabled() string {
	if o == nil || o.TlsPreviewEnabled == nil {
		var ret string
		return ret
	}
	return *o.TlsPreviewEnabled
}

// GetTlsPreviewEnabledOk returns a tuple with the TlsPreviewEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllersUpdateGlobalConfigRequest) GetTlsPreviewEnabledOk() (*string, bool) {
	if o == nil || o.TlsPreviewEnabled == nil {
		return nil, false
	}
	return o.TlsPreviewEnabled, true
}

// HasTlsPreviewEnabled returns a boolean if a field has been set.
func (o *ControllersUpdateGlobalConfigRequest) HasTlsPreviewEnabled() bool {
	if o != nil && o.TlsPreviewEnabled != nil {
		return true
	}

	return false
}

// SetTlsPreviewEnabled gets a reference to the given string and assigns it to the TlsPreviewEnabled field.
func (o *ControllersUpdateGlobalConfigRequest) SetTlsPreviewEnabled(v string) {
	o.TlsPreviewEnabled = &v
}

// GetVersionAvailability returns the VersionAvailability field value if set, zero value otherwise.
func (o *ControllersUpdateGlobalConfigRequest) GetVersionAvailability() string {
	if o == nil || o.VersionAvailability == nil {
		var ret string
		return ret
	}
	return *o.VersionAvailability
}

// GetVersionAvailabilityOk returns a tuple with the VersionAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllersUpdateGlobalConfigRequest) GetVersionAvailabilityOk() (*string, bool) {
	if o == nil || o.VersionAvailability == nil {
		return nil, false
	}
	return o.VersionAvailability, true
}

// HasVersionAvailability returns a boolean if a field has been set.
func (o *ControllersUpdateGlobalConfigRequest) HasVersionAvailability() bool {
	if o != nil && o.VersionAvailability != nil {
		return true
	}

	return false
}

// SetVersionAvailability gets a reference to the given string and assigns it to the VersionAvailability field.
func (o *ControllersUpdateGlobalConfigRequest) SetVersionAvailability(v string) {
	o.VersionAvailability = &v
}

// GetVersionUpdatability returns the VersionUpdatability field value if set, zero value otherwise.
func (o *ControllersUpdateGlobalConfigRequest) GetVersionUpdatability() string {
	if o == nil || o.VersionUpdatability == nil {
		var ret string
		return ret
	}
	return *o.VersionUpdatability
}

// GetVersionUpdatabilityOk returns a tuple with the VersionUpdatability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllersUpdateGlobalConfigRequest) GetVersionUpdatabilityOk() (*string, bool) {
	if o == nil || o.VersionUpdatability == nil {
		return nil, false
	}
	return o.VersionUpdatability, true
}

// HasVersionUpdatability returns a boolean if a field has been set.
func (o *ControllersUpdateGlobalConfigRequest) HasVersionUpdatability() bool {
	if o != nil && o.VersionUpdatability != nil {
		return true
	}

	return false
}

// SetVersionUpdatability gets a reference to the given string and assigns it to the VersionUpdatability field.
func (o *ControllersUpdateGlobalConfigRequest) SetVersionUpdatability(v string) {
	o.VersionUpdatability = &v
}

func (o ControllersUpdateGlobalConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TlsPreviewEnabled != nil {
		toSerialize["tls_preview_enabled"] = o.TlsPreviewEnabled
	}
	if o.VersionAvailability != nil {
		toSerialize["version_availability"] = o.VersionAvailability
	}
	if o.VersionUpdatability != nil {
		toSerialize["version_updatability"] = o.VersionUpdatability
	}
	return json.Marshal(toSerialize)
}

type NullableControllersUpdateGlobalConfigRequest struct {
	value *ControllersUpdateGlobalConfigRequest
	isSet bool
}

func (v NullableControllersUpdateGlobalConfigRequest) Get() *ControllersUpdateGlobalConfigRequest {
	return v.value
}

func (v *NullableControllersUpdateGlobalConfigRequest) Set(val *ControllersUpdateGlobalConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableControllersUpdateGlobalConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableControllersUpdateGlobalConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControllersUpdateGlobalConfigRequest(val *ControllersUpdateGlobalConfigRequest) *NullableControllersUpdateGlobalConfigRequest {
	return &NullableControllersUpdateGlobalConfigRequest{value: val, isSet: true}
}

func (v NullableControllersUpdateGlobalConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControllersUpdateGlobalConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


