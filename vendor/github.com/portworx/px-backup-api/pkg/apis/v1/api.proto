/// Please use the following editor setup for this file:

// Tab size=4; Tabs as spaces; Clean up trailing whitepsace
// 'make proto' will run clang-format to fix formatiing
syntax = "proto3";

option go_package = "api";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "pkg/apis/v1/common.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (gogoproto.populate_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.testgen_all) = true;
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    security_definitions : {
        security : {
            key : "bearer"
            value : {
                type : TYPE_API_KEY
                in : IN_HEADER
                name : "Authorization"
                description : "Authentication token, prefixed by Bearer: "
                              "Bearer <token>"
            }
        }
    }
    security : {security_requirement : {key : "bearer"}}
};

message OrganizationObject {
    Metadata metadata = 1 [ (gogoproto.embed) = true ];
}

message ClusterInfo {
    PXConfig px_config = 1 [ (gogoproto.jsontag) = "pxconfig" ];
    string kubeconfig = 2 [
        (gogoproto.jsontag) = "kubeconfig",
        (gogoproto.moretags) = "secure:\"true\""
    ];
    // cloud_credential is deprecated, not to be used.
    string cloud_credential = 3;
    StatusInfo status = 4;
    // delete_backups will determine whether the backups
    // belong to given cluster needs to be deleted or not.
    bool delete_backups = 5;
    // delete_restores will determine whether the restore
    // belong to given cluster needs to be deleted or not.
    bool delete_restores = 6;
    string stork_version = 7;
    ObjectRef cloud_credential_ref = 8;
    BackupShare add_backup_share = 9;
    BackupShare del_backup_share = 10;
    BackupShareStatusInfo backup_share_status_info = 11;
    repeated string owner_group_list = 12;
    ObjectRef platform_credential_ref = 13;
    // Teleport cluster ID
    string teleport_cluster_id = 14;
    // Tenant ID
    string tenant_id = 15;
    string service_token = 16 [
        (gogoproto.jsontag) = "servicetoken",
        (gogoproto.moretags) = "secure:\"true\""
    ];
    Provider provider = 17;

    // Message for maintaining status of the cluster.
    message StatusInfo {
        enum Status {
            Invalid = 0;
            Online = 1;
            Offline = 2;
            DeletePending = 3;
            // Pending If a cluster addition is in pending state
            Pending = 4;
            // Failed If a cluster failed to be added
            Failed = 5;
            // Success If cluster was successfully added but not Online yet
            Success = 6;
        }
        Status status = 1;
        string reason = 2;
    }

    // Message for maintaining status of the backup share.
    message BackupShareStatusInfo {
        Status status = 1;
        string reason = 2;

        enum Status {
            Invalid = 0;
            // InProgress if backupshare is going on for backups belonging to
            // the cluster
            InProgress = 1;
            // Failed if backupshare fails for some backups belonging to the
            // cluster
            Failed = 2;
            // Success if backupshare is successful for all current backups
            // belonging to the cluster
            Success = 3;
            // Parital Success if backupshare is successful for only few
            // backups.
            PartialSuccess = 4;
        }
    }

    // Cloud provider type
    enum Provider {
        Invalid = 0;
        AWS = 1;
        Azure = 2;
        Google = 3;
        IBM = 4;
        Rancher = 5;
    }
    
}

message ClusterObject {
    Metadata metadata = 1 [ (gogoproto.embed) = true ];
    ClusterInfo clusterInfo = 2
        [ (gogoproto.jsontag) = "clusterinfo", (gogoproto.embed) = true ];
}

message PXConfig {
    string access_token = 1 [ (gogoproto.jsontag) = "accesstoken" ];
}

message AWSConfig {
    string access_key = 1 [ (gogoproto.jsontag) = "accesskey" ];
    string secret_key = 2 [
        (gogoproto.jsontag) = "secretkey",
        (gogoproto.moretags) = "secure:\"true\""
    ];
}

message IBMConfig {
    string api_key = 1 [
        (gogoproto.jsontag) = "api_key",
        (gogoproto.moretags) = "secure:\"true\""
    ];
}

message RancherConfig {
    string endpoint = 1 [ (gogoproto.jsontag) = "endpoint" ];
    string token = 2 [
        (gogoproto.jsontag) = "token",
        (gogoproto.moretags) = "secure:\"true\""
    ];
}

message S3Config {
    string endpoint = 1;
    string region = 2;
    bool disable_ssl = 3;
    bool disable_path_style = 4;
    string storage_class = 5;
    // Server side encryption type name
    // Currently supporting only SSE-S3 and SSE-KMS type alone.
    Sse sse_type = 6;
    enum Sse {
        Invalid = 0;
        // Server-side encryption with AWS S3 managed keys
        SSE_S3 = 1;
        // Server-side encryption with AWS Key Management Service
        SSE_KMS = 2;
    }
}

message AzureConfig {
    string account_name = 1;
    string account_key = 2 [
        (gogoproto.jsontag) = "accountkey",
        (gogoproto.moretags) = "secure:\"true\""
    ];
    string client_secret = 3 [
        (gogoproto.jsontag) = "clientsecret",
        (gogoproto.moretags) = "secure:\"true\""
    ];
    string client_id = 4 [
        (gogoproto.jsontag) = "clientid",
        (gogoproto.moretags) = "secure:\"true\""
    ];
    string tenant_id = 5 [
        (gogoproto.jsontag) = "tenantid",
        (gogoproto.moretags) = "secure:\"true\""
    ];
    // TODO: Need to see if this has to be here or in the backup object.
    string subscription_id = 6 [
        (gogoproto.jsontag) = "subscriptionid",
        (gogoproto.moretags) = "secure:\"true\""
    ];
}

message GoogleConfig {
    string project_id = 1;
    string json_key = 2 [
        (gogoproto.jsontag) = "jsonkey",
        (gogoproto.moretags) = "secure:\"true\""
    ];
}

message CloudCredentialInfo {
    Type type = 1;

    enum Type {
        Invalid = 0;
        AWS = 1;
        Azure = 2;
        Google = 3;
        IBM = 4;
        Rancher = 5;
    }

    oneof config {
        AWSConfig aws_config = 100;
        AzureConfig azure_config = 101;
        GoogleConfig google_config = 102;
        IBMConfig ibm_config = 103;
        RancherConfig rancher_config = 104;
    }
}

message CloudCredentialObject {
    Metadata metadata = 1
        [ (gogoproto.jsontag) = "metadata", (gogoproto.embed) = true ];
    CloudCredentialInfo cloud_credential_info = 2;
}

message SchedulePolicyInfo {
    IntervalPolicy interval = 1;
    DailyPolicy daily = 2;
    WeeklyPolicy weekly = 3;
    MonthlyPolicy monthly = 4;
    // list of backup schedule object that uses this schedule policy.
    repeated string backup_schedule = 5;
    // for_object_lock should be set, if this policy is planned to be used with
    // locked bucket while taking backup.
    bool for_object_lock = 6;
    // auto-delete - this option is to indicate, whether the backup
    // should be deleted after the retention of the backup object is expired
    bool auto_delete = 7;

    message IncrementalCount {
        uint64 count = 1 [ (gogoproto.jsontag) = "count" ];
    }

    message IntervalPolicy {
        // Interval in minutes at which an action should be triggered.
        int64 minutes = 1;
        // Number of objects to retain for interval policy, default value is 10.
        int64 retain = 2;
        // Number of incremental snapshots to take before taking a full
        // snapshot.
        IncrementalCount incremental_count = 3;
    }

    message DailyPolicy {
        // Time, when the policy should be triggered. Expected format is
        // time.Kitchen eg 12:04PM or 12:04pm.
        string time = 1;
        // Number of objects to retain for daily policy, default value is 10.
        int64 retain = 2;
        // Number of incremental snapshots to take before taking a full
        // snapshot.
        IncrementalCount incremental_count = 3;
    }

    message WeeklyPolicy {
        // Day of the week when the policy should be triggered.
        // For example, sunday or sun
        string day = 1;
        // Time, when the policy should be triggered. Expected format is
        // time.Kitchen eg 12:04PM or 12:04pm.
        string time = 2;
        // Number of objects to retain for weekly policy, default value is 10.
        int64 retain = 3;
        // Number of incremental snapshots to take before taking a full
        // snapshot.
        IncrementalCount incremental_count = 4;
    }

    message MonthlyPolicy {
        // Date of the month when the policy should be triggered. If a given
        // date
        // doesn't exist in a month it'll rollover to the next date of the
        // month.
        // For example if 31 is specified, it'll trigger on either 1st or 2nd
        // March
        // depending on if it is a leap year.
        int64 date = 1;
        // Time, when the policy should be triggered. Expected format is
        // time.Kitchen eg 12:04PM or 12:04pm.
        string time = 2;
        // Number of objects to retain for monthly policy, default value is 10.
        int64 retain = 3;
        // Number of incremental snapshots to take before taking a full
        // snapshot.
        IncrementalCount incremental_count = 4;
    }
}

message SchedulePolicyObject {
    Metadata metadata = 1
        [ (gogoproto.jsontag) = "metadata", (gogoproto.embed) = true ];
    SchedulePolicyInfo schedule_policy_info = 2 [ (gogoproto.embed) = true ];
}

message BackupScheduleInfo {
    // schedule_policy is deprecated, not to be used.
    string schedule_policy = 1;
    bool suspend = 2;
    ReclaimPolicyType reclaim_policy = 3;
    map<string, StatusInfoList> backup_status = 4;
    // Name of BackupLocation, is deprecated. Not to be used.
    string backup_location = 5;
    // Name of Cluster
    string cluster = 6;
    // Namespaces to backup. Only an admin can provide multiple namespaces
    repeated string namespaces = 7;
    // Label selectors to choose resources
    map<string, string> label_selectors = 8;
    // pre_exec_rule and post_exec_rule is deprecated. Not to be used.
    string pre_exec_rule = 9;
    string post_exec_rule = 10;
    bool delete_backups = 11;
    StatusInfo status = 12;
    SuspendedBy suspended_by = 13;
    repeated ResourceInfo include_resources = 14;
    string stork_version = 15;
    // deprecated, not to be used.
    string csi_snapshot_class_name = 16;
    repeated string resource_types = 17;
    ObjectRef schedule_policy_ref = 18;
    ObjectRef backup_location_ref = 19;
    ObjectRef pre_exec_rule_ref = 20;
    ObjectRef post_exec_rule_ref = 21;
    // To get type of backup (generic or non-generic)
    BackupType backup_type = 22;
    // Label selectors to choose namespaces
    string ns_label_selectors = 23;
    // Target namespace of CR
    string target_namespace = 24;
    ObjectRef cluster_ref = 25;
    // backup object type is all namespace or virtualMachine specific backup
    BackupObjectType backup_object_type = 26;
    // Skip auto rules for VirtualMachine Backup Object type
    bool skip_vm_auto_exec_rules = 27;
    // volume snapshot class mapping for csi based backup <provisioner(string), volumesnapshotclass(string)> (optional)
    map<string, string> volume_snapshot_class_mapping = 28;
    // option to take backup as direct kdmp 
    bool direct_kdmp = 29;


    message BackupType {
        Type type = 1;
        enum Type {
            Invalid = 0;
            Generic = 1;
            Normal = 2;
        }
    }

    message SuspendedBy {
        Source source = 1;
        enum Source {
            Invalid = 0;
            User = 1;
            LicenseCheck = 2;
        }
    }

    message StatusInfoList { repeated StatusInfo status = 1; }

    message StatusInfo {
        // backup name
        string backup_name = 1;
        google.protobuf.Timestamp create_time = 2;
        google.protobuf.Timestamp finish_time = 3;
        Status status = 4;
        string Reason = 5;
        enum Status {
            Invalid = 0;
            Pending = 1;
            InProgress = 2;
            Aborted = 3;
            Failed = 4;
            Deleting = 5;
            Success = 6;
            Captured = 7;
            PartialSuccess = 8;
            DeletePending = 9;
        }
    }

    enum ReclaimPolicyType {
        Invalid = 0;
        Delete = 1;
        Retain = 2;
    }
    message BackupObjectType {
        Type type = 1;
         enum Type {
             Invalid = 0;
             All = 1; // for All application backup
             VirtualMachine = 2; // virtualMachine for VirtualMachine specific backup
         }
     }
}

message BackupScheduleObject {
    Metadata metadata = 1
        [ (gogoproto.jsontag) = "metadata", (gogoproto.embed) = true ];
    BackupScheduleInfo backup_schedule_info = 2 [ (gogoproto.embed) = true ];
}

message NFSConfig {
    string server_addr = 1;
    string sub_path = 2;
    string mount_option = 3;
}

message BackupLocationInfo {
    Type type = 1;
    string path = 2;
    string encryption_key = 3 [
        (gogoproto.jsontag) = "encryptionkey",
        (gogoproto.moretags) = "secure:\"true\""
    ];
    // cloud_credential is deprecated, not to be used.
    string cloud_credential = 4;
    StatusInfo status = 5;
    bool delete_backups = 6;
    bool validate_cloud_credential = 7;
    ObjectRef cloud_credential_ref = 8;
    bool object_lock_enabled = 9;

    // Message for maintaining status of the object.
    message StatusInfo {
        Status status = 1;
        string reason = 2;

        enum Status {
            Invalid = 0;
            Valid = 1;
            DeletePending = 2;
            ValidationInProgress = 3;
            ValidationFailed = 4;
        }
    }

    enum Type {
        Invalid = 0;
        S3 = 1;
        Azure = 2;
        Google = 3;
        NFS = 4;
    }

    oneof config {
        S3Config s3_config = 100;
        NFSConfig nfs_config = 101;
    }
}

message BackupLocationObject {
    Metadata metadata = 1
        [ (gogoproto.jsontag) = "metadata", (gogoproto.embed) = true ];
    BackupLocationInfo backup_location_info = 2;
}

message ResourceInfo {
    string name = 1;
    string namespace = 2;
    string group = 3;
    string kind = 4;
    string version = 5;
}

message BackupInfo {
    // Name of BackupLocation, deprecated. Not to be used.
    string backup_location = 1;
    // Name of Cluster
    string cluster = 2;
    // Namespaces to backup. Only an admin can provide multiple namespaces
    repeated string namespaces = 3;
    // Label selectors to choose resources
    map<string, string> label_selectors = 4;
    StatusInfo status = 5;
    repeated ResourceInfo resources = 6;
    repeated Volume volumes = 7;
    string backup_path = 8;
    Stage stage = 9;
    // pre_exec_rule and post_exec_rule are deprecated, not to be used,
    string pre_exec_rule = 10;
    string post_exec_rule = 11;
    // Name of the backup schedule, if the backup was taken by schedule through
    // px-backup.
    // Otherwise it will be empty.
    BackupSchedule backup_schedule = 12;
    string cr_name = 13;
    uint64 total_size = 14;
    // Reference to cloud credential object used for backup.
    // cloud_credential is deprecated, not to be used.
    string cloud_credential = 15;
    repeated ResourceInfo include_resources = 16;
    uint64 resource_count = 17;
    string stork_version = 18;
    // deprecated, not to be used.
    string csi_snapshot_class_name = 19;
    repeated string resource_types = 20;
    ObjectRef backup_location_ref = 21;
    ObjectRef pre_exec_rule_ref = 22;
    ObjectRef post_exec_rule_ref = 23;
    ObjectRef cloud_credential_ref = 24;
    // To get type of backup (generic or non-generic)
    BackupType backup_type = 25;
    string cr_uid = 26;
    int64 retention_period = 27;
    BackupShare backup_share = 28;
    BackupShare.AccessType user_backupshare_access = 29;
    ObjectRef cluster_ref = 30;
    string ns_label_selectors = 31;
    // Name of rancher projects associated with resources
    map<string, string> rancher_projects = 32;
    // Target namespace of CR
    string target_namespace = 33;
    // this flag signifies if the backup involves large number of resources or not
    bool large_resource_enabled = 34;
    // backup object type is all namespace or virtualMachine specific backup
    BackupObjectType backup_object_type = 35;
    // Skip auto rules for VirtualMachine Backup Object type
    bool skip_vm_auto_exec_rules = 36;
    // volume snapshot class mapping for csi based backup <provisioner(string), volumesnapshotclass(string)> (optional)
    map<string, string> volume_snapshot_class_mapping = 37;
    // option to take backup as direct kdmp 
    bool direct_kdmp = 38;

    message BackupType {
        Type type = 1;

        enum Type {
            Invalid = 0;
            Generic = 1;
            Normal = 2;
        }
    }

    message BackupSchedule {
        string uid = 1;
        string name = 2;
    }

    message Volume {
        string name = 1;
        string namespace = 2;
        string pvc = 3;
        string backup_id = 4;
        StatusInfo status = 5;
        string driver_name = 6;
        repeated string zones = 7;
        map<string, string> options = 8;
        uint64 total_size = 9;
        // actual size of the backup
        // incase of incremental, it's the incremental backup size
        uint64 actual_size = 10;
        string storage_class = 11;
        string pvc_id = 12;
        string provisioner = 13;
        string volumesnapshot = 14;
    }

    // Message for maintaining status of the object.
    message StatusInfo {
        Status status = 1;
        string reason = 2;

        enum Status {
            Invalid = 0;
            Pending = 1;
            InProgress = 2;
            Aborted = 3;
            Failed = 4;
            Deleting = 5;
            Success = 6;
            Captured = 7;
            PartialSuccess = 8;
            DeletePending = 9;
            CloudBackupMissing = 10;
        }
    }

    enum Stage {
        Invalid = 0;
        Initial = 1;
        PreExecRule = 2;
        PostExecRule = 3;
        Volumes = 4;
        Applications = 5;
        Final = 6;
    }
    message BackupObjectType {
        Type type= 1;
        enum Type {
            Invalid = 0;
            All = 1; // for All application backup
            VirtualMachine = 2; // virtualMachine for VirtualMachine specific backup
        }
    }


}

// Message for Backup object which will be stored in Datastore.
message BackupObject {
    Metadata metadata = 1 [ (gogoproto.embed) = true ];
    BackupInfo backup_info = 2 [ (gogoproto.embed) = true ];
}

// Message for passing pre and post exec rules for backup
message RulesInfo {
    repeated RuleItem rules = 1 [ (gogoproto.moretags) = "yaml:\"rules\"" ];

    message RuleItem {
        map<string, string> pod_selector = 1
            [ (gogoproto.moretags) = "yaml:\"podSelector\"" ];
        repeated Action actions = 2
            [ (gogoproto.moretags) = "yaml:\"actions\"" ];
        string container = 3;
    }

    message Action {
        bool background = 1 [ (gogoproto.moretags) = "yaml:\"background\"" ];
        bool run_in_single_pod = 2
            [ (gogoproto.moretags) = "yaml:\"runInSinglePod\"" ];
        string value = 3;
    }
}

message RuleObject {
    Metadata metadata = 1 [ (gogoproto.embed) = true ];
    RulesInfo rules_info = 2 [ (gogoproto.embed) = true ];
}

message ReplacePolicy {
    enum Type {
        Invalid = 0;
        Retain = 1;
        Delete = 2;
    }
}

// Message for restore info
message RestoreInfo {
    // backup is deprecated, not to be used.
    string backup = 1;
    // Name of backup location to restore from.
    // backup_location is deprecated, not to be used.
    string backup_location = 2;
    // Label selectors to choose resources
    map<string, string> label_selectors = 3;
    // Namespace Mapping
    map<string, string> namespace_mapping = 4;
    // Restore replace policy type ("delete"/"retain")
    ReplacePolicy.Type replace_policy = 5;
    StatusInfo status = 6;
    repeated RestoredResource resources = 7;
    repeated Volume volumes = 8;
    // Name of the cluster
    string cluster = 9;
    repeated string include_optional_resource_types = 10;
    uint64 total_size = 11;
    repeated ResourceInfo include_resources = 12;
    uint64 resource_count = 13;
    string stork_version = 14;
    ObjectRef backup_location_ref = 15;
    // storage class mapping for generic backup <source, destination>
    map<string, string> storage_class_mapping = 16;
    // backup to restore from
    ObjectRef backup_ref = 17;
    // mapping of the rancher projects from the backup to which restore should
    // be done
    map<string, string> rancher_project_mapping = 18;
    // mapping of source rancher project display names to target rancher project display names
    map<string, string> rancher_project_name_mapping = 19;
    // flag signifies if the restored backup involves large number of resources or not
    bool large_resource_enabled = 20;
    // counter to show number of already restored resources
    uint64 restored_resource_count = 21;
    // current activity while doing resource restore
    RestoreResourceState restore_status = 22;
    ObjectRef cluster_ref = 23;
    // backup object type is all namespace or virtualMachine specific backup
    BackupObjectType backup_object_type = 24;

    message RestoreResourceState {
        ResourceStatus restore_status = 1;

        enum ResourceStatus {
            Preparing = 0;
            Deleting = 1;
            Verifying = 2;
            Applying = 3;
        }

    }

    message RestoredResource {
        string name = 1;
        string namespace = 2;
        string group = 3;
        string kind = 4;
        string version = 5;
        StatusInfo status = 6;
    }

    message Volume {
        string pvc = 1;
        string source_namespace = 2;
        string source_volume = 3;
        string restore_volume = 4;
        StatusInfo status = 5;
        string driver_name = 6;
        repeated string zones = 7;
        map<string, string> options = 8;
        uint64 total_size = 9;
    }

    // Message for maintaining status of the object.
    message StatusInfo {
        enum Status {
            Invalid = 0;
            Pending = 1;
            InProgress = 2;
            Aborted = 3;
            Failed = 4;
            Deleting = 5;
            Success = 6;
            Retained = 7;
            PartialSuccess = 8;
        }

        Status status = 1;
        string reason = 2;
    }
    message BackupObjectType {
       Type type = 1;
        enum Type {
            Invalid = 0;
            All = 1; // for All application backup
            VirtualMachine = 2; // virtualMachine for VirtualMachine specific backup
        }
    }
}

// Message for Restore object which will be stored in Datastore.
message RestoreObject {
    Metadata metadata = 1 [ (gogoproto.embed) = true ];
    RestoreInfo restore_info = 2 [ (gogoproto.embed) = true ];
}

message HealthStatusRequest {}
message HealthStatusResponse {}
service Health {
    // Status checks the health of the server
    rpc Status(HealthStatusRequest) returns (HealthStatusResponse) {
        option (google.api.http) = {
            get : "/v1/health"
        };
    }
}

message TimeRange {
    google.protobuf.Timestamp start_time = 1;
    google.protobuf.Timestamp end_time = 2;
}

message EnumerateOptions {
    // label selectors for the object for filtering
    map<string, string> labels = 1;
    // max objects to fetch
    uint64 max_objects = 2;
    // Time range for which to return objects
    TimeRange time_range = 3;
    // Filter to use for name of objects. Any object that contains the filter
    // will be returned
    string name_filter = 4;
    // Filter to use for cluster name of objects. Any object that contains the
    // filter will be returned
    string cluster_name_filter = 5;
    uint64 object_index = 6;
    // Ths option will be set to true by the caller, when they want to have
    // complete backup object. That means the backupObject's
    // resource list will be set to complete list of resources.
    // If this option is set to false, resource list will be
    // set to nil and rest of the backupObject details will be returned in the
    // response.
    bool include_detailed_resources = 7;
    // Filter to use with cluster uid on objects. Any object that contains the
    // filter will be returned
    // Currently backup enumerate request should pass this along with cluster
    // name.
    string cluster_uid_filter = 8;
    // Filter to use owner uids on objects. Any object that contains the
    // filter will be returned
    repeated string owners = 9;
    // filter to use backupObjectType on object
    string backup_object_type = 10;

}

service SchedulePolicy {
    // Creates new schedule policy.
    rpc Create(SchedulePolicyCreateRequest)
        returns (SchedulePolicyCreateResponse) {
        option (google.api.http) = {
            post : "/v1/schedulepolicy"
            body : "*"
        };
    }

    // Update given schedule policy details
    rpc Update(SchedulePolicyUpdateRequest)
        returns (SchedulePolicyUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/schedulepolicy"
            body : "*"
        };
    }

    // Enumerate returns a list of schedule policy
    rpc Enumerate(SchedulePolicyEnumerateRequest)
        returns (SchedulePolicyEnumerateResponse) {
        option (google.api.http) = {
            get : "/v1/schedulepolicy/{org_id}"
        };
    }

    // Inspect returns detail information about a specified schedule policy
    rpc Inspect(SchedulePolicyInspectRequest)
        returns (SchedulePolicyInspectResponse) {
        option (google.api.http) = {
            get : "/v1/schedulepolicy/{org_id}/{name}/{uid}"
        };
    }

    // Delete removes a schedule policy
    rpc Delete(SchedulePolicyDeleteRequest)
        returns (SchedulePolicyDeleteResponse) {
        option (google.api.http) = {
            delete : "/v1/schedulepolicy/{org_id}/{name}/{uid}"
        };
    }

    // UpdateOwnership updates ownership of existing object
    rpc UpdateOwnership(SchedulePolicyOwnershipUpdateRequest)
        returns (SchedulePolicyOwnershipUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/schedulepolicy/updateownership"
            body : "*"
        };
    }
}

// Define SchedulePolicyCreateRequest struct
message SchedulePolicyCreateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    SchedulePolicyInfo schedule_policy = 2;
}

// Define SchedulePolicyCreateResponse struct
message SchedulePolicyCreateResponse {}

// Define SchedulePolicyUpdateRequest struct
message SchedulePolicyUpdateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    SchedulePolicyInfo schedule_policy = 2;
}

// Define SchedulePolicyUpdateResponse struct
message SchedulePolicyUpdateResponse {}

// Define SchedulePolicyEnumerateRequest struct
message SchedulePolicyEnumerateRequest {
    string org_id = 1;
    // label selectors for the object for filtering
    map<string, string> labels = 2;
}
// Define SchedulePolicyEnumerateResponse struct

message SchedulePolicyEnumerateResponse {
    repeated SchedulePolicyObject schedule_policies = 1;
}

// Define SchedulePolicyInspectRequest struct
message SchedulePolicyInspectRequest {
    string org_id = 1;
    string name = 2;
    string uid = 3;
}

// Define SchedulePolicyInspectResponse struct
message SchedulePolicyInspectResponse {
    SchedulePolicyObject schedule_policy = 1;
}

// Define SchedulePolicyDeleteRequest struct
message SchedulePolicyDeleteRequest {
    string org_id = 1;
    string name = 2;
    string uid = 3;
}

// Define SchedulePolicyDeleteResponse struct
message SchedulePolicyDeleteResponse {}

message SchedulePolicyOwnershipUpdateRequest {
    string org_id = 1;
    string name = 2;
    Ownership ownership = 3;
    string uid = 4;
}

message SchedulePolicyOwnershipUpdateResponse {}

service BackupSchedule {
    // Creates new backup schedule
    rpc Create(BackupScheduleCreateRequest)
        returns (BackupScheduleCreateResponse) {
        option (google.api.http) = {
            post : "/v1/backupschedule"
            body : "*"
        };
    }

    // Updates a backup schedule
    rpc Update(BackupScheduleUpdateRequest)
        returns (BackupScheduleUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/backupschedule"
            body : "*"
        };
    }

    // Enumerate returns a list of backup schedule
    rpc Enumerate(BackupScheduleEnumerateRequest)
        returns (BackupScheduleEnumerateResponse) {
        option (google.api.http) = {
            get : "/v1/backupschedule/{org_id}"
        };
    }

    // Inspect returns detail information about a specified backup schedule
    rpc Inspect(BackupScheduleInspectRequest)
        returns (BackupScheduleInspectResponse) {
        option (google.api.http) = {
            get : "/v1/backupschedule/{org_id}/{name}"
        };
    }

    // Delete removes a backup schedule
    rpc Delete(BackupScheduleDeleteRequest)
        returns (BackupScheduleDeleteResponse) {
        option (google.api.http) = {
            delete : "/v1/backupschedule/{org_id}/{name}"
        };
    }
}

// Define BackupScheduleCreateRequest struct
message BackupScheduleCreateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    // schedule_policy is deprecated, not to be used
    string schedule_policy = 2;
    BackupScheduleInfo.ReclaimPolicyType reclaim_policy = 3;
    // Name of BackupLocation, is deprecated. Not to be used
    string backup_location = 4;
    // Name of Cluster
    string cluster = 5;
    // Namespaces to backup. Only an admin can provide multiple namespaces
    repeated string namespaces = 6;
    // Label selectors to choose resources
    map<string, string> label_selectors = 7;
    // pre_exec_rule and post_exec_rule are deprecated. Not to be used.
    string pre_exec_rule = 8;
    string post_exec_rule = 9;
    // List of resources to backup (optional)
    repeated ResourceInfo include_resources = 10;
    // Snapshot class name to use for backup schedule (optional)
    // deprecated, not to be used.
    string csi_snapshot_class_name = 11;
    // List of resource types to backup (optional)
    repeated string resource_types = 12;
    ObjectRef schedule_policy_ref = 13;
    ObjectRef backup_location_ref = 14;
    ObjectRef pre_exec_rule_ref = 15;
    ObjectRef post_exec_rule_ref = 16;
    // To get type of backup (generic or non-generic)
    BackupType backup_type = 17;
    string ns_label_selectors = 18;
    ObjectRef cluster_ref = 19;
    // backup object type is all namespace or virtualMachine specific backup
    BackupObjectType backup_object_type = 20;
    // Skip auto rules for VirtualMachine Backup Object type
    bool skip_vm_auto_exec_rules = 21;
    // volume snapshot class mapping for csi based backup <provisioner(string), volumesnapshotclass(string)> (optional)
    map<string, string> volume_snapshot_class_mapping = 22;
    // option to take backup as direct kdmp 
    bool direct_kdmp = 23;


    enum BackupType {
        Invalid = 0;
        Generic = 1;
        Normal = 2;
    }
    message BackupObjectType {
        Type type = 1;
        enum Type {
            Invalid = 0;
            All = 1; // for All application backup
            VirtualMachine = 2; // virtualMachine for VirtualMachine specific backup
        }
    }
}

// Define BackupScheduleCreateResponse struct
message BackupScheduleCreateResponse {}

// Define BackupScheduleUpdateRequest struct
message BackupScheduleUpdateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    // schedule_policy is deprecated, not to be used
    string schedule_policy = 2;
    BackupScheduleInfo.ReclaimPolicyType reclaim_policy = 3;
    // Name of BackupLocation, is deprecated. Not to be used
    string backup_location = 4;
    // Name of Cluster
    string cluster = 5;
    // Namespaces to backup. Only an admin can provide multiple namespaces
    repeated string namespaces = 6;
    // Label selectors to choose resources
    map<string, string> label_selectors = 7;
    // pre_exec_rule and post_exec_rule are deprecated. Not to be used.
    string pre_exec_rule = 8;
    string post_exec_rule = 9;
    bool suspend = 10;
    // List of resources to backup (optional)
    repeated ResourceInfo include_resources = 11;
    // Snapshot class name to use for backup schedule (optional)
    // deprecated, not to be used.
    string csi_snapshot_class_name = 12;
    ObjectRef schedule_policy_ref = 13;
    ObjectRef backup_location_ref = 14;
    ObjectRef pre_exec_rule_ref = 15;
    ObjectRef post_exec_rule_ref = 16;
    // volume snapshot class mapping for csi based backup <provisioner(string), volumesnapshotclass(string)> (optional)
    map<string, string> volume_snapshot_class_mapping = 17;
}

// Define BackupScheduleUpdateResponse struct
message BackupScheduleUpdateResponse {}

// Define BackupScheduleEnumerateRequest struct
message BackupScheduleEnumerateRequest {
    string org_id = 1;
    // label selectors for the object for filtering
    map<string, string> labels = 2;
    // Backuplocation name.
    // Enumerate will return list of backupschedule that
    // uses this backuplocation
    // backup_location is deprecated, not to be used.
    string backup_location = 3;
    ObjectRef backup_location_ref = 4;
    // Optional arguments for enumeration
    EnumerateOptions enumerate_options = 5;

}

// Define BackupScheduleEnumerateResponse struct
message BackupScheduleEnumerateResponse {
    repeated BackupScheduleObject backup_schedules = 1;
    uint64 total_count = 2;
}

// Define BackupScheduleInspectRequest struct
message BackupScheduleInspectRequest {
    string org_id = 1;
    string name = 2;
    string uid = 3;
}

// Define BackupScheduleInspectResponse struct
message BackupScheduleInspectResponse {
    BackupScheduleObject backup_schedule = 1;
}

// Define BackupScheduleDeleteRequest struct
message BackupScheduleDeleteRequest {
    string org_id = 1;
    string name = 2;
    // delete_backups indicates whether the cloud backup files need to
    // be deleted or retained.
    bool delete_backups = 3;
    string uid = 4;
}

// Define BackupScheduleDeleteResponse struct
message BackupScheduleDeleteResponse {}

service Cluster {

    // Creates a new cluster
    rpc Create(ClusterCreateRequest) returns (ClusterCreateResponse) {
        option (google.api.http) = {
            post : "/v1/cluster"
            body : "*"
        };
    }

    // Update given cluster details
    rpc Update(ClusterUpdateRequest) returns (ClusterUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/cluster"
            body : "*"
        };
    }

    // Enumerate returns a list of clusters
    rpc Enumerate(ClusterEnumerateRequest) returns (ClusterEnumerateResponse) {
        option (google.api.http) = {
            get : "/v1/cluster/{org_id}"
        };
    }

    // Inspect returns detail information about a specified cluster
    rpc Inspect(ClusterInspectRequest) returns (ClusterInspectResponse) {
        option (google.api.http) = {
            get : "/v1/cluster/{org_id}/{name}/{uid}"
        };
    }

    // Delete removes a cluster
    rpc Delete(ClusterDeleteRequest) returns (ClusterDeleteResponse) {
        option (google.api.http) = {
            delete : "/v1/cluster/{org_id}/{name}"
        };
    }

    // UpdateBackupShare updates ownership details for backup share at cluster
    // level
    rpc UpdateBackupShare(ClusterBackupShareUpdateRequest)
        returns (ClusterBackupShareUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/cluster/updatebackupshare"
            body : "*"
        };
    }
}

message ClusterBackupShareUpdateRequest {
    string org_id = 1;
    string name = 2;
    BackupShare add_backup_share = 3;
    BackupShare del_backup_share = 4;
    string uid = 5;
}

message ClusterBackupShareUpdateResponse {}

// Define ClusterCreateRequest struct
message ClusterCreateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    PXConfig px_config = 2 [ (gogoproto.jsontag) = "pxconfig" ];
    string kubeconfig = 3 [
        (gogoproto.jsontag) = "kubeconfig",
        (gogoproto.moretags) = "secure:\"true\""
    ];
    // cloud_credential is deprecated, not to be used.
    string cloud_credential = 4;
    ObjectRef cloud_credential_ref = 5;
    ObjectRef platform_credential_ref = 6;
    // Teleport cluster ID
    string teleport_cluster_id = 7;
    // Tenant ID of the user account (aka PDS account)
    string tenant_id = 8;
    // PDS account service token to fetch rest.Config for
    // teleport based cluster
    string service_token = 9 [
        (gogoproto.jsontag) = "servicetoken",
        (gogoproto.moretags) = "secure:\"true\""
    ];
    // This is optional field and used by BaaS only
    Provider provider = 10;
     // Cloud provider type
    enum Provider {
        Invalid = 0;
        AWS = 1;
        Azure = 2;
        Google = 3;
        IBM = 4;
        Rancher = 5;
    }
}

// Define ClusterCreateResponse struct
message ClusterCreateResponse {}

// Define ClusterUpdateRequest struct
message ClusterUpdateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    PXConfig px_config = 2 [ (gogoproto.jsontag) = "pxconfig" ];
    string kubeconfig = 3 [
        (gogoproto.jsontag) = "kubeconfig",
        (gogoproto.moretags) = "secure:\"true\""
    ];
    // cloud_credential is deprecated, not to be used.
    string cloud_credential = 4;
    ObjectRef cloud_credential_ref = 5;
    ObjectRef platform_credential_ref = 6;
}

// Define ClusterUpdateResponse struct
message ClusterUpdateResponse {}

// Define ClusterEnumerateRequest struct
message ClusterEnumerateRequest {
    string org_id = 1;
    // label selectors for the object for filtering
    map<string, string> labels = 2;
    bool include_secrets = 3;
    // cloud credential name.
    // Enumerate will return list of cluster that
    // uses this cloud credential
    // cloud_credential is deprecated, not to be used.
    string cloud_credential = 4;
    ObjectRef cloud_credential_ref = 5;
    // Set this to true, to get the backupshare enabled cluster list
    bool only_backup_share = 6;
}

// Define ClusterEnumerateResponse struct
message ClusterEnumerateResponse { repeated ClusterObject clusters = 1; }

// Define ClusterInspectRequest struct
message ClusterInspectRequest {
    string org_id = 1;
    string name = 2;
    bool include_secrets = 3;
    string uid = 4;
}

// Define ClusterInspectResponse struct
message ClusterInspectResponse { ClusterObject cluster = 1; }

// Define ClusterDeleteRequest struct
message ClusterDeleteRequest {
    string org_id = 1;
    string name = 2;
    // delete_backups indicates whether the backup related to cluster need to
    // be deleted or retained.
    bool delete_backups = 3;
    // delete_restores indicates whether the restore related to cluster  need to
    // be deleted or retained.
    bool delete_restores = 4;
    // indicate the uid of the particular object
    string uid = 5;
}

// Define ClusterInspectResponse struct
message ClusterDeleteResponse {}

service CloudCredential {
    // Creates new cloud credential
    rpc Create(CloudCredentialCreateRequest)
        returns (CloudCredentialCreateResponse) {
        option (google.api.http) = {
            post : "/v1/cloudcredential"
            body : "*"
        };
    }

    // Update given cloud credential details
    rpc Update(CloudCredentialUpdateRequest)
        returns (CloudCredentialUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/cloudcredential"
            body : "*"
        };
    }

    // Enumerate returns a list of cloud credentials
    rpc Enumerate(CloudCredentialEnumerateRequest)
        returns (CloudCredentialEnumerateResponse) {
        option (google.api.http) = {
            get : "/v1/cloudcredential/{org_id}"
        };
    }

    // Inspect returns detailed information about the specified cloud credential
    rpc Inspect(CloudCredentialInspectRequest)
        returns (CloudCredentialInspectResponse) {
        option (google.api.http) = {
            get : "/v1/cloudcredential/{org_id}/{name}/{uid}"
        };
    }

    // Delete removes a cloud credential
    rpc Delete(CloudCredentialDeleteRequest)
        returns (CloudCredentialDeleteResponse) {
        option (google.api.http) = {
            delete : "/v1/cloudcredential/{org_id}/{name}/{uid}"
        };
    }

    // UpdateOwnership updates ownership of existing object
    rpc UpdateOwnership(CloudCredentialOwnershipUpdateRequest)
        returns (CloudCredentialOwnershipUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/cloudcredential/updateownership"
            body : "*"
        };
    }
}

// Define CloudCredentialCreateRequest struct
message CloudCredentialCreateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    CloudCredentialInfo cloud_credential = 2;
}

// Define CloudCredentialCreateResponse struct
message CloudCredentialCreateResponse {
    CloudCredentialObject cloud_credential = 1;
}

// Define CloudCredentialUpdateRequest struct
message CloudCredentialUpdateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    CloudCredentialInfo cloud_credential = 2;
}

// Define CloudCredentialUpdateResponse struct
message CloudCredentialUpdateResponse {}

// Define CloudCredentialEnumerateRequest struct
message CloudCredentialEnumerateRequest {
    string org_id = 1;
    bool include_secrets = 2;
}

// Define CloudCredentialEnumerateResponse struct
message CloudCredentialEnumerateResponse {
    repeated CloudCredentialObject cloud_credentials = 1;
}

// Define CloudCredentialInspectRequest struct
message CloudCredentialInspectRequest {
    string org_id = 1;
    string name = 2;
    bool include_secrets = 3;
    string uid = 4;
}

// Define CloudCredentialInspectResponse struct
message CloudCredentialInspectResponse {
    CloudCredentialObject cloud_credential = 1;
}

// Define CloudCredentialDeleteRequest struct
message CloudCredentialDeleteRequest {
    string org_id = 1;
    string name = 2;
    string uid = 3;
}

// Define CloudCredentialInspectResponse struct
message CloudCredentialDeleteResponse {}

message CloudCredentialOwnershipUpdateRequest {
    string org_id = 1;
    // Cloud credential name to be updated.
    string name = 2;
    Ownership ownership = 3;
    string uid = 4;
}

message CloudCredentialOwnershipUpdateResponse {}

service Receiver {
    // Create new alert manager receiver
    rpc Create(ReceiverCreateRequest) 
        returns (ReceiverCreateResponse) {
            option (google.api.http) = {
                post : "/v1/receiver"
                body : "*"
            };
    }

    // Returns a list of alert manager receivers
    rpc Enumerate(ReceiverEnumerateRequest)
        returns (ReceiverEnumerateResponse) {
            option (google.api.http) = {
                get : "/v1/receiver/{org_id}"
            };
        }

    // Returns the details of a specific alert manager receiver
    rpc Inspect(ReceiverInspectRequest)
        returns (ReceiverInspectResponse) {
            option (google.api.http) = {
            get : "/v1/receiver/{org_id}/{name}/{uid}/{include_secrets}/{type}"
        };
    }

    // Update the details of a alert manager receiver
    rpc Update(ReceiverUpdateRequest)
        returns (ReceiverUpdateResponse) {
         option (google.api.http) = {
            put : "/v1/receiver"
            body : "*"
        };
    }

    // Delete a specific alert manager receiver
    rpc Delete(ReceiverDeleteRequest)
    returns (ReceiverDeleteResponse) {
        option (google.api.http) = {
            delete : "/v1/receiver/{org_id}/{name}/{uid}"
        };
    }

    // Validates SMTP service
    rpc ValidateSMTP(ReceiverValidateSMTPRequest)
    returns (ReceiverValidateSMTPResponse) {
        option (google.api.http) = {
            post: "/v1/receiver/validate"
            body: "*"
        };
    }
}

message EmailConfig {
    // Sender email address
    string from = 1;
    // Host IP Address
    string host = 2;
    // Host port default value is 25
    string port = 3;
    // Encryption if any (optional) default value is false
    bool encryption_ssl = 4;
    bool encryption_starttls = 5;
    // Authentication if any (optional) default values is false
    bool authentication = 6;
    string auth_username = 7;
    string auth_password = 8 [
        (gogoproto.jsontag) = "encryptionkey",
        (gogoproto.moretags) = "secure:\"true\""
    ];
}

message ReceiverInfo {
    Type type = 1;

    enum Type {
        INVALID  = 0;
        EMAIL = 1;
    }

    oneof config {
        EmailConfig email_config = 100;
    }
}

message ReceiverObject {
    Metadata metadata = 1
    [ (gogoproto.jsontag) = "metadata", (gogoproto.embed) = true ];
    ReceiverInfo receiver_info = 2;
}

message ReceiverCreateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    ReceiverInfo receiver_info = 2;
}

message ReceiverCreateResponse {
    ReceiverObject receiver = 1; 
}


message ReceiverEnumerateRequest {
    string org_id = 1;
    bool include_secrets = 2;
}

message ReceiverEnumerateResponse {
    repeated ReceiverObject receivers = 1;
}

message ReceiverInspectRequest {
    string org_id = 1;
    string name  = 2;
    bool include_secrets = 3;
    string uid = 4;
    string type = 5;
}

message ReceiverInspectResponse {
    ReceiverObject receiver = 1;
}

message ReceiverUpdateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    ReceiverInfo receiver_info = 2;
}

message ReceiverUpdateResponse {}

message ReceiverDeleteRequest {
    string org_id = 1;
    string name = 2;
    string uid = 3;
}

message ReceiverDeleteResponse {}

message ReceiverValidateSMTPRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    repeated string recipient_id = 2;
    oneof config {
        ReceiverInfo receiver_info_config = 100;
        ReceiverInspectRequest receiver_inspect_config = 101;

    }
}

message ReceiverValidateSMTPResponse {}

service Recipient {
    rpc Create(RecipientCreateRequest) 
        returns (RecipientCreateResponse) {
            option (google.api.http) = {
                post : "/v1/recipient"
                body : "*"
            };
    }

    // Returns a list of recipients for alerting
    rpc Enumerate(RecipientEnumerateRequest)
        returns (RecipientEnumerateResponse) {
            option (google.api.http) = {
                get : "/v1/recipient/{org_id}"
            };
        }

    // Returns the details of a specific recipient
    rpc Inspect(RecipientInspectRequest)
        returns (RecipientInspectResponse) {
            option (google.api.http) = {
            get : "/v1/recipient/{org_id}/{name}/{uid}"
        };
    }

    // Update the details of a recipient
    rpc Update(RecipientUpdateRequest)
        returns (RecipientUpdateResponse) {
         option (google.api.http) = {
            put : "/v1/recipient"
            body : "*"
        };
    }

    // Delete a specific recipient
    rpc Delete(RecipientDeleteRequest)
    returns (RecipientDeleteResponse) {
        option (google.api.http) = {
            delete : "/v1/recipient/{org_id}/{name}/{uid}"
        };
    }
}

message RecipientObject {
    Metadata metadata = 1
    [ (gogoproto.jsontag) = "metadata", (gogoproto.embed) = true ];
    RecipientInfo recipient_info = 2;
}

message RecipientInfo {
    // Type of notification on user level
    Type type = 1;
    enum Type {
        INVALID = 0;
        EMAIL = 1;
    }
    // Based on type recipient list is added
    repeated string recipient_id = 2;
    // current status set by user
    bool active = 3;
    // Link receiver object
    ObjectRef receiver_ref = 4;
    // Filter level of alert by severity
    Severity severity = 5;
    enum Severity {
        UNKNOWN = 0;
        CRITICAL = 1;
        WARNING = 2;
    }

}

message RecipientCreateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    RecipientInfo recipient_info = 2;
}

message RecipientCreateResponse {}

message RecipientEnumerateRequest {
    string org_id = 1;
    // Type of notification on user level
    Type type = 2;
    enum Type {
        INVALID = 0;
        EMAIL = 1;
    }
}

message RecipientEnumerateResponse {
    repeated RecipientObject recipients = 1;
    // Enabled will be an in memory value always fetched from Recevier Info
    bool enabled = 2;
}

message RecipientInspectRequest {
    string org_id = 1;
    string name = 2;
    string uid = 3;
}

message RecipientInspectResponse {
    RecipientObject recipient = 1;
}

message RecipientUpdateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    RecipientInfo recipient_info = 2;
}

message RecipientUpdateResponse {}

message RecipientDeleteRequest {
    string org_id = 1;
    string name = 2;
    string uid = 3;
}

message RecipientDeleteResponse {}

service BackupLocation {
    // Creates new backup location
    rpc Create(BackupLocationCreateRequest)
        returns (BackupLocationCreateResponse) {
        option (google.api.http) = {
            post : "/v1/backuplocation"
            body : "*"
        };
    }

    // Update given backup location details
    rpc Update(BackupLocationUpdateRequest)
        returns (BackupLocationUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/backuplocation"
            body : "*"
        };
    }

    // Enumerate returns a list of backup locations
    rpc Enumerate(BackupLocationEnumerateRequest)
        returns (BackupLocationEnumerateResponse) {
        option (google.api.http) = {
            get : "/v1/backuplocation/{org_id}"
        };
    }

    // Inspect returns detailed information about a specified backup location
    rpc Inspect(BackupLocationInspectRequest)
        returns (BackupLocationInspectResponse) {
        option (google.api.http) = {
            get : "/v1/backuplocation/{org_id}/{name}/{uid}"
        };
    }

    // Delete removes a backup location
    rpc Delete(BackupLocationDeleteRequest)
        returns (BackupLocationDeleteResponse) {
        option (google.api.http) = {
            delete : "/v1/backuplocation/{org_id}/{name}/{uid}"
        };
    }

    // Verify if a backup location is valid
    rpc Validate(BackupLocationValidateRequest)
        returns (BackupLocationValidateResponse) {
        option (google.api.http) = {
            post : "/v1/backuplocation/validate"
            body : "*"
        };
    }

    // UpdateOwnership updates ownership of existing object
    rpc UpdateOwnership(BackupLocationOwnershipUpdateRequest)
        returns (BackupLocationOwnershipUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/backuplocation/updateownership"
            body : "*"
        };
    }
}

// Define BackupLocationCreateRequest struct
message BackupLocationCreateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    BackupLocationInfo backup_location = 2;
}

// Define BackupLocationCreateResponse struct
message BackupLocationCreateResponse {}

// Define BackupLocationUpdateRequest struct
message BackupLocationUpdateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    BackupLocationInfo backup_location = 2;
}

// Define BackupLocationUpdateResponse struct
message BackupLocationUpdateResponse {}

// Define BackupLocationEnumerateRequest struct
message BackupLocationEnumerateRequest {
    string org_id = 1;
    // label selectors for the object for filtering
    map<string, string> labels = 2;
    // cloud credential name.
    // Enumerate will return list of backuplocation that
    // uses this cloud credential
    // cloud_credential is deprecated, not to be used.
    string cloud_credential = 3;
    ObjectRef cloud_credential_ref = 4;
    // enable include_secrets to get the encryptionKey value.
    bool include_secrets = 5;
    // If true, include backuplocation that are in ValidationInProgress state as
    // well
    bool include_validation_state = 6;
}

// Define BackupLocationEnumerateResponse struct
message BackupLocationEnumerateResponse {
    repeated BackupLocationObject backup_locations = 1;
}

// Define BackupLocationInspectRequest struct
message BackupLocationInspectRequest {
    string org_id = 1;
    string name = 2;
    string uid = 3;
    // enable include_secrets to get the encryptionKey value.
    bool include_secrets = 4;
}

// Define BackupLocationInspectResponse struct
message BackupLocationInspectResponse {
    BackupLocationObject backup_location = 1;
}

// Define BackupLocationDeleteRequest struct
message BackupLocationDeleteRequest {
    string org_id = 1;
    string name = 2;
    // delete_backups indicates whether the cloud backup files need to
    // be deleted or retained.
    bool delete_backups = 3;
    string uid = 4;
}

// Define BackupLocationDeleteResponse struct
message BackupLocationDeleteResponse {}

// Define BackupLocationValidateRequest struct
message BackupLocationValidateRequest {
    string org_id = 1;
    string name = 2;
    string uid = 3;
}

// Define BackupLocationValidateResponse struct
message BackupLocationValidateResponse {}

// Define BackupLocationOwnershipUpdateRequest struct
message BackupLocationOwnershipUpdateRequest {
    string org_id = 1;
    // Backup location to be updated
    string name = 2;
    Ownership ownership = 3;
    string uid = 4;
}

// Define BackupLocationOwnershipUpdateResponse struct
message BackupLocationOwnershipUpdateResponse {}

service Metrics {
    // Returns metrics details of backups
    rpc Inspect(MetricsInspectRequest) returns (MetricsInspectResponse) {
        option (google.api.http) = {
            get : "/v1/metrics/{org_id}"
        };
    }
}

message MetricsInspectRequest { string org_id = 1; }

message MetricsInspectResponse {
    repeated Stats stats = 1;
    message Stats {
        string cluster = 1;
        uint64 num_namespaces = 2;
        uint64 total_backup_size = 3;
        uint64 num_schedules = 4;
        ObjectRef cluster_ref = 5;
    }
}

service Backup {
    // Creates a new backup object
    rpc Create(BackupCreateRequest) returns (BackupCreateResponse) {
        option (google.api.http) = {
            post : "/v1/backup"
            body : "*"
        };
    }

    // Update given backup details
    rpc Update(BackupUpdateRequest) returns (BackupUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/backup"
            body : "*"
        };
    }

    // Enumerate returns a list of objects
    rpc Enumerate(BackupEnumerateRequest) returns (BackupEnumerateResponse) {
        option (google.api.http) = {
            get : "/v1/backup/{org_id}"
        };
    }

    // Inspect returns detail information about a specified object
    rpc Inspect(BackupInspectRequest) returns (BackupInspectResponse) {
        option (google.api.http) = {
            get : "/v1/backup/{org_id}/{name}"
        };
    }

    // Delete triggers delete of a backup
    rpc Delete(BackupDeleteRequest) returns (BackupDeleteResponse) {
        option (google.api.http) = {
            delete : "/v1/backup/{org_id}/{name}"
        };
    }

    // UpdateBackupShare updates backupshare of existing backup object
    rpc UpdateBackupShare(BackupShareUpdateRequest)
        returns (BackupShareUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/backup/updatebackupshare"
            body : "*"
        };
    }
}

// Request message structure for backup create
message BackupCreateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    // Name or UID + orgid of BackupLocation
    // backup_location is deprecated, not to be used.
    string backup_location = 2;
    // Name or UID of Cluster
    string cluster = 3;
    // Namespaces to backup. Only an admin can provide multiple namespaces
    repeated string namespaces = 4;
    // Label selectors to choose resources
    map<string, string> label_selectors = 5;
    // Pre check rule to run before backup is started
    // deprecated, not to be used.
    string pre_exec_rule = 6;
    // Post check rule to run after backup is completed
    // deprecated, not to be used.
    string post_exec_rule = 7;
    // List of resources to backup (optional)
    repeated ResourceInfo include_resources = 8;
    // Snapshot class name to use for backup (optional)
    // deprecated, not to be used.
    string csi_snapshot_class_name = 9;
    // List of resource types to backup (optional)
    repeated string resource_types = 10;
    ObjectRef backup_location_ref = 11;
    ObjectRef pre_exec_rule_ref = 12;
    ObjectRef post_exec_rule_ref = 13;
    // To get type of backup (generic or non-generic)
    BackupType backup_type = 14;
    ObjectRef cluster_ref = 15;
    string ns_label_selectors = 16;
    // backup object type is all namespace or virtualMachine specific backup
    BackupObjectType backup_object_type = 17;
    // Skip auto rules for VirtualMachine Backup Object type
    bool skip_vm_auto_exec_rules = 18;
    // volume snapshot class mapping for csi based backup <provisioner(string), volumesnapshotclass(string)> (optional)
    map<string, string> volume_snapshot_class_mapping = 19;
    // option to take backup as direct kdmp 
    bool direct_kdmp = 20;

    enum BackupType {
        Invalid = 0;
        Generic = 1;
        Normal = 2;
    }
    message BackupObjectType {
        Type type = 1;
         enum Type {
             Invalid = 0;
             All = 1; // for All application backup
             VirtualMachine = 2; // virtualMachine for VirtualMachine specific backup
         }
     }
}

// Response message structure for backup create
message BackupCreateResponse {}

// Define BackupUpdateRequest struct
message BackupUpdateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    // Reference to cloud credential object used for backup
    // cloud_credential is deprecated, not to be used.
    string cloud_credential = 2;
    ObjectRef cloud_credential_ref = 3;
}

// Define BackupUpdateResponse struct
message BackupUpdateResponse {}

//  Request message structure for enumerate object
message BackupEnumerateRequest {
    // Organization id
    string org_id = 1;
    // Optional arguments for enumeration
    EnumerateOptions enumerate_options = 2 [ (gogoproto.embed) = true ];
}

//  Response message structure for enumerate create
message BackupEnumerateResponse {
    repeated BackupObject backups = 1;
    uint64 total_count = 2;
    bool complete = 3;
}

// Request message structure for object inspect
message BackupInspectRequest {
    string name = 1;
    string org_id = 2;
    string uid = 4;
}

// Response message structure for object inspect
message BackupInspectResponse { BackupObject backup = 1; }

// Request message structure for object delete
message BackupDeleteRequest {
    string name = 1;
    string org_id = 2;
    // cluster name or uid to perform delete through
    string cluster = 3;
    string uid = 4;
    ObjectRef cluster_ref = 5;
}

// Response message structure for object delete
message BackupDeleteResponse {}

// Request message for backup share update request
message BackupShareUpdateRequest {
    string org_id = 1;
    // Backup to be updated
    string name = 2;
    BackupShare backupshare = 3;
    string uid = 4;
}

// Response message for backup share update request
message BackupShareUpdateResponse {}

service Restore {
    // Creates new restore object in datastore
    // It will also trigger a restore operation on the target cluster
    rpc Create(RestoreCreateRequest) returns (RestoreCreateResponse) {
        option (google.api.http) = {
            post : "/v1/restore"
            body : "*"
        };
    }

    // Update given restore details
    rpc Update(RestoreUpdateRequest) returns (RestoreUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/restore"
            body : "*"
        };
    }

    // Enumerate returns a list of restore objects
    rpc Enumerate(RestoreEnumerateRequest) returns (RestoreEnumerateResponse) {
        option (google.api.http) = {
            get : "/v1/restore/{org_id}"
        };
    }

    // Inspect returns detailed information about specified restore object
    rpc Inspect(RestoreInspectRequest) returns (RestoreInspectResponse) {
        option (google.api.http) = {
            get : "/v1/restore/{org_id}/{name}"
        };
    }

    // Delete removes a restore object
    rpc Delete(RestoreDeleteRequest) returns (RestoreDeleteResponse) {
        option (google.api.http) = {
            delete : "/v1/restore/{org_id}/{name}"
        };
    }
}

// Define RestoreCreateRequest struct
message RestoreCreateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    // backup is deprecated, not to be used.
    string backup = 2;
    // uid or name of cluster
    string cluster = 3;
    // mapping of the namespaces from the backup to which restore should be done
    map<string, string> namespace_mapping = 4;
    // replace policy to use if the resource already exists
    ReplacePolicy.Type replace_policy = 5;
    // optional resource types to be restored (eg Jobs)
    repeated string include_optional_resource_types = 6;
    // List of resources to restore (optional)
    repeated ResourceInfo include_resources = 7;
    // storage class mapping for generic backup <source, destination>
    map<string, string> storage_class_mapping = 8;
    // backup object reference having name and id
    ObjectRef backup_ref = 9;
    // mapping of the rancher projects from the backup to which restore should
    // be done
    map<string, string> rancher_project_mapping = 10;
    // mapping of source rancher project display names to target rancher project display names
    map<string, string> rancher_project_name_mapping = 11;
    ObjectRef cluster_ref = 12;
    // backup object type is all namespace or virtualMachine specific backup
    BackupObjectType backup_object_type = 13;

    message BackupObjectType {
        Type type = 1;
         enum Type {
             Invalid = 0;
             All = 1; // for All application backup
             VirtualMachine = 2; // virtualMachine for VirtualMachine specific backup
         }
     }
}

// Define RestoreCreateResponse struct
message RestoreCreateResponse {}

// Define RestoreUpdateRequest struct
message RestoreUpdateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
}

// Define RestoreUpdateResponse struct
message RestoreUpdateResponse {}

// Define RestoreEnumerateRequest struct
message RestoreEnumerateRequest {
    // Organization id
    string org_id = 1;
    // Optional arguments for enumeration
    EnumerateOptions enumerate_options = 2 [ (gogoproto.embed) = true ];
}

// Define RestoreEnumerateResponse struct
message RestoreEnumerateResponse {
    repeated RestoreObject restores = 1;
    uint64 total_count = 2;
    bool complete = 3;
}

// Define RestoreInspectRequest struct
message RestoreInspectRequest {
    string org_id = 1;
    string name = 2;
    // indicate the uid of the particular object
    string uid = 3;
}

// Define RestoreInspectResponse struct
message RestoreInspectResponse { RestoreObject restore = 1; }

// Define RestoreDeleteRequest struct
message RestoreDeleteRequest {
    string org_id = 1;
    string name = 2;
    // indicate the uid of the particular object
    string uid = 3;
}

// Define RestoreDeleteResponse struct
message RestoreDeleteResponse {}

service Organization {
    // Creates new organization object in datastore
    rpc Create(OrganizationCreateRequest) returns (OrganizationCreateResponse) {
        option (google.api.http) = {
            post : "/v1/organization"
            body : "*"
        };
    }
    // Enumerate returns a list of organization object
    rpc Enumerate(OrganizationEnumerateRequest)
        returns (OrganizationEnumerateResponse) {
        option (google.api.http) = {
            get : "/v1/organization"
        };
    }

    // Inspect returns detailed information about specified organization object
    rpc Inspect(OrganizationInspectRequest)
        returns (OrganizationInspectResponse) {
        option (google.api.http) = {
            get : "/v1/organization/{name}"
        };
    }

    rpc Delete(OrganizationDeleteRequest)
        returns (OrganizationDeleteResponse) {
        option (google.api.http) = {
            delete : "/v1/organization/{name}"
      };
    }
}

// Define OrganizationCreateRequest struct
message OrganizationCreateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
}

// Define OrganizationCreateResponse struct
message OrganizationCreateResponse {}

// Define OrganizationEnumerateRequest struct
message OrganizationEnumerateRequest {}

// Define OrganizationEnumerateResponse struct
message OrganizationEnumerateResponse {
    repeated OrganizationObject organizations = 1;
}

// Define OrganizationInspectRequest struct
message OrganizationInspectRequest { string name = 2; }

// Define OrganizationInspectResponse struct
message OrganizationInspectResponse { OrganizationObject organization = 1; }

// Define OrganizationDeleteRequest struct
message OrganizationDeleteRequest {
    // Name of the org to be deleted
    string name = 1;
}

// Define OrganizationDeleteResponse struct
message OrganizationDeleteResponse {}

// Request message for creating rules
message RuleCreateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    RulesInfo rules_info = 2;
}

message RuleCreateResponse {}

message RuleUpdateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    RulesInfo rules_info = 2;
}

// Define RuleUpdateResponse struct
message RuleUpdateResponse {}

// Define RuleEnumerateRequest struct
message RuleEnumerateRequest { string org_id = 1; }

// Define RuleEnumerateResponse struct
message RuleEnumerateResponse { repeated RuleObject rules = 1; }

// Define RuleInspectRequest struct
message RuleInspectRequest {
    string org_id = 1;
    string name = 2;
    string uid = 3;
}

// Define RuleInspectResponse struct
message RuleInspectResponse { RuleObject rule = 1; }

// Define RuleDeleteRequest struct
message RuleDeleteRequest {
    string org_id = 1;
    string name = 2;
    string uid = 3;
}

// Define RuleDeleteResponse struct
message RuleDeleteResponse {}

// Define RuleOwnershipUpdateRequest struct
message RuleOwnershipUpdateRequest {
    string org_id = 1;
    // Rule to be updated
    string name = 2;
    Ownership ownership = 3;
    string uid = 4;
}

// Define RuleOwnershipUpdateResponse struct
message RuleOwnershipUpdateResponse {}

service Rules {
    // Creates new rule
    rpc Create(RuleCreateRequest) returns (RuleCreateResponse) {
        option (google.api.http) = {
            post : "/v1/rule"
            body : "*"
        };
    }

    // Update given rule details
    rpc Update(RuleUpdateRequest) returns (RuleUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/rule"
            body : "*"
        };
    }

    // Enumerate returns a list of rules
    rpc Enumerate(RuleEnumerateRequest) returns (RuleEnumerateResponse) {
        option (google.api.http) = {
            get : "/v1/rule/{org_id}"
        };
    }

    // Inspect returns detailed information about the specified rule
    rpc Inspect(RuleInspectRequest) returns (RuleInspectResponse) {
        option (google.api.http) = {
            get : "/v1/rule/{org_id}/{name}/{uid}"
        };
    }

    // Delete removes rule from px-backup
    rpc Delete(RuleDeleteRequest) returns (RuleDeleteResponse) {
        option (google.api.http) = {
            delete : "/v1/rule/{org_id}/{name}/{uid}"
        };
    }

    // UpdateOwnership updates ownership of existing object
    rpc UpdateOwnership(RuleOwnershipUpdateRequest)
        returns (RuleOwnershipUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/rule/updateownership"
            body : "*"
        };
    }
}

service Version {
    // gets the version of the server
    rpc Get(VersionGetRequest) returns (VersionGetResponse) {
        option (google.api.http) = {
            get : "/v1/version"
        };
    }
}

message VersionInfo {
    string major = 1;
    string minor = 2;
    string patch = 3;
    string changes = 4;
    string git_commit = 5;
    string build_date = 6;
}

message VersionGetRequest {}

message VersionGetResponse {
    // version information of the server
    VersionInfo version = 1;
}

message LicenseActivateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    oneof activation {
        string activation_id = 2;
        bytes license_data = 3;
        string usage_based_id = 4;
        string usaged_based_airgapped_id = 5;
    }
}

message LicenseActivateResponse {}

message LicenseUpdateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    string usage_based_id = 2;
}

message LicenseUpdateResponse {}

message LicenseInspectRequest { string org_id = 1; }

message LicenseInspectResponse { LicenseResponseInfo license_resp_info = 1; }

message LicenseResponseInfo {
    repeated FeatureInfo feature_info = 1;
    Status status = 2;

    message FeatureInfo {
        // Feature name
        string name = 1;
        // Consumed count
        int64 consumed = 2;
        // License entitlement info
        repeated EntitlementInfo entitlement_info = 3;
    }

    message EntitlementInfo {
        // Entitled count
        int64 count = 1;
        // Expiry time of license
        google.protobuf.Timestamp expires = 3;
        // Start time of license
        google.protobuf.Timestamp starts = 4;
        // License type defined in common.proto
        LicenseType type = 5;
    }

    message Status {
        // Representing if license is active or expired
        string status = 1;
        // Reason for above status
        string reason = 2;
    }
}

message LicenseUsageAirgappedObject {
    Metadata metadata = 1 [ (gogoproto.embed) = true ];
    int64 node_count = 2;
    // Time at which license consumption is recorded in epoch time format
    int64 report_time = 3;
}

message LicenseUsageAirgappedRequest {
    string org_id = 1;
    // index from where object fetch has to happen
    uint64 object_index = 2;
    // max objects to fetch
    uint64 max_objects = 3;
}

message LicenseUsageAirgappedResponse {
    repeated LicenseUsageAirgappedObject licenseUsageAirgapped = 1;
    bool complete = 2;
    uint64 total_count = 3;
}

service License {
    // Activate activate a new license
    rpc Activate(LicenseActivateRequest) returns (LicenseActivateResponse) {
        option (google.api.http) = {
            post : "/v1/license"
            body : "*"
        };
    }

    // Enumerate returns a list of license for given cluster
    rpc Inspect(LicenseInspectRequest) returns (LicenseInspectResponse) {
        option (google.api.http) = {
            get : "/v1/license/{org_id}"
        };
    }

    // Updates Usage Based activation ID
    rpc Update(LicenseUpdateRequest) returns (LicenseUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/license"
            body : "*"
        };
    }

    rpc EnumerateLicenseUsageAirGapped(LicenseUsageAirgappedRequest)
        returns (LicenseUsageAirgappedResponse) {
        option (google.api.http) = {
            get : "/v1/license/{org_id}/license_usage_airgapped"
        };
    }
}

service ManagedClusters {

    // Enumerate returns a list of managed clusters from providers like
    // AWS, Azure, GCE, IBM
    // using the given credentials
    rpc Enumerate(ManagedClusterEnumerateRequest)
        returns (ManagedClusterEnumerateResponse) {
        option (google.api.http) = {
            get : "/v1/managedcluster/{org_id}"
        };
    }

    // Inspect returns detailed information on a managed cluster from providers
    // like
    // AWS, Azure, GCE, IBM
    // using the given credentials
    rpc Inspect(ManagedClusterInspectRequest)
        returns (ManagedClusterInspectResponse) {
        option (google.api.http) = {
            get : "/v1/managedcluster/{org_id}"
        };
    }

    // Bulk add discovered clusters
    rpc BulkAdd(ManagedClusterBulkAddRequest)
        returns (ManagedClusterBulkAddResponse) {
        option (google.api.http) = {
            post : "/v1/managedclusters"
            body : "*"
        };
    }
}

// Define ManagedClusterEnumerateRequest struct
message ManagedClusterEnumerateRequest {
    string org_id = 1;
    // cloud credential name.
    // Enumerate will return list of managed clusters that
    // this cloud credential has access to
    ObjectRef cloud_credential = 2;
    bool include_secrets = 3;
    // Number of entries to be fetched
    int64 max_results = 4;
    Provider provider = 5;

    message AWSConfig {
        // Region for scanning clusters
        string region = 1;
        // Used for sending token, needed for pagination
        string next_token = 2;
    }

    message GoogleConfig {}
    message AzureConfig {}

    // Cloud provider type
    enum Provider {
        Invalid = 0;
        AWS = 1;
        Azure = 2;
        Google = 3;
    }

    oneof Config {
        AWSConfig aws_config = 100;
        GoogleConfig google_config = 101;
        AzureConfig azure_config = 102;
    }

}

// Define ManagedClusterObject struct
message ManagedClusterObject {
    // Name of the managed cluster
    // This is usually the user friendly name of the cluster
    string name = 1;
    // UID of the managed cluster
    // This is the UID returned by the managed cluster provider
    string uid = 2;
    // Cloud Credential name used for fetching this cluster's details
    ObjectRef cloud_credential = 3;
    // Kubeconfig if the provider supports using kubeconfigs
    string kubeconfig = 4 [
        (gogoproto.jsontag) = "kubeconfig",
        (gogoproto.moretags) = "secure:\"true\""
    ];
    // k8s version
    string k8s_version = 5;
    // This flag indicates if the discovered cluster is already added in the
    // objectstore.
    // This will help UI to help user understand which clusters are already
    // added and need to
    // be added.

    Status status = 6;

    // Status hold if the cluster is already present in datastore or not
    enum Status {
        Invalid = 0;
        NotAdded = 1;
        Added = 2;
    }
}

// Define ClusterEnumerateResponse struct
message ManagedClusterEnumerateResponse {
    repeated ManagedClusterObject cluster = 1;
    Provider provider = 2;

    message AWSConfig {
        // For ListClusters() AWS provides pagination and next_token
        // is pointer for next set of cluster fetch
        string next_token = 1;
    }

    message GoogleConfig {}
    message AzureConfig {}

    // Cloud provider type
    enum Provider {
        Invalid = 0;
        AWS = 1;
        Azure = 2;
        Google = 3;
    }

    oneof Config {
        AWSConfig aws_config = 100;
        GoogleConfig google_config = 101;
        AzureConfig azure_config = 102;
    }

}

// Define ManagedClusterInspectRequest struct
message ManagedClusterInspectRequest {
    string org_id = 1;
    // Managed cluster name to be searched for
    string name = 2;
    // cloud credential name.
    // Enumerate will return list of managed clusters that
    // this cloud credential has access to
    ObjectRef cloud_credential = 3;
    bool include_secrets = 4;
    Provider provider = 5;
    // indicate the uid of the particular object
    string uid = 6;

    message AWSConfig {
        // Region for scanning clusters
        string region = 1;
    }

    message GoogleConfig {}
    message AzureConfig {}

    // Cloud provider type
    enum Provider {
        Invalid = 0;
        AWS = 1;
        Azure = 2;
        Google = 3;
    }


    oneof Config {
        AWSConfig aws_config = 100;
        GoogleConfig google_config = 101;
        AzureConfig azure_config = 102;
    }

}

// Define ClusterInspectResponse struct
message ManagedClusterInspectResponse { ManagedClusterObject cluster = 1; }

message ManagedClusterBulkAddRequest {
    string org_id = 1;
    ObjectRef cloud_credential = 2;
    // Region for scanning cluster
    // cluster name to be added
    repeated string cluster_name = 3;
    Provider provider = 4;

    message AWSConfig {
        // Region for scanning clusters
        string region = 1;
    }
    message GoogleConfig {}
    message AzureConfig {}

    // Cloud provider type
    enum Provider {
        Invalid = 0;
        AWS = 1;
        Azure = 2;
        Google = 3;
    }

    oneof Config {
        AWSConfig aws_config = 100;
        GoogleConfig google_config = 101;
        AzureConfig azure_config = 102;
    }

}

message ManagedClusterBulkAddResponse {}

service ActivityTimeLine {
    // Enumerate returns a list of activity data for a given time period
    rpc Enumerate(ActivityEnumerateRequest)
        returns (ActivityEnumerateResponse) {
        option (google.api.http) = {
            get : "/v1/restore/{org_id}/{days}/{interval}"
        };
    }
}

message ActivityEnumerateRequest {
    string org_id = 1;
    // Time period for which activity is needed
    int32 days = 2;
    // Interval for which we want the activity
    // For now Hourly and Daily are supported
    Interval interval = 3;
    string time_zone = 4;
    string cluster = 5;
    // For which type of Actvity data eg: backup, restore, etc..
    string kind = 6;
    ObjectRef cluster_ref = 7;

    enum Interval {
        Invalid = 0;
        Hourly = 1;
        Daily = 2;
    }
}

message ActivityEnumerateResponse {
    repeated Data activity_data = 1;

    message Data {
        google.protobuf.Timestamp start_time = 1;
        google.protobuf.Timestamp end_time = 2;
        uint64 successful = 3;
        uint64 failed = 4;
        uint64 in_progress = 5;
        double completion_time = 6;
        // Total number of backups in a given time frame (success/failure)
        uint64 total = 7;
    }
}

// Defines a RoleObject object.
message RoleObject {
    // Metadata of the object
    Metadata metadata = 1 [ (gogoproto.embed) = true ];
    // RoleConfig associated with role object
    repeated RoleConfig rules = 2;
    // Keyclock UID associated with role
    string role_id = 3;
}

// RoleConfig object for set of rules associated with each role object
// services - PX-Backup services names
// apis - allowed apis for px-backup services
message RoleConfig {
    // The gRPC service name
    repeated string services = 1;
    // The API name in the service in lowercase
    repeated string apis = 2;
}

service Role {
    // Creates new role object in datastore
    rpc Create(RoleCreateRequest) returns (RoleCreateResponse) {
        option (google.api.http) = {
            post : "/v1/role"
            body : "*"
        };
    }
    // Enumerate returns a list of roles object
    rpc Enumerate(RoleEnumerateRequest) returns (RoleEnumerateResponse) {
        option (google.api.http) = {
            get : "/v1/role/{org_id}"
        };
    }

    // Inspect returns detailed information about requested role object
    rpc Inspect(RoleInspectRequest) returns (RoleInspectResponse) {
        option (google.api.http) = {
            get : "/v1/role/{org_id}/{name}/{uid}"
        };
    }
    // Update given role information
    rpc Update(RoleUpdateRequest) returns (RoleUpdateResponse) {
        option (google.api.http) = {
            put : "/v1/role"
            body : "*"
        };
    }
    // Delete removes given role from px-backup
    rpc Delete(RoleDeleteRequest) returns (RoleDeleteResponse) {
        option (google.api.http) = {
            delete : "/v1/role/{org_id}/{name}/{uid}"
        };
    }
    // Permission returns list of service,apis permission for given user
    rpc Permission(RolePermissionRequest) returns (RolePermissionResponse) {
        option (google.api.http) = {
            get : "/v1/role"
        };
    }
}

// RoleCreateRequest defines roleobject create structure
// Metadata with each role object
// RoleConfig set of rules over api services for given role object
message RoleCreateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    repeated RoleConfig rules = 2;
    // Keyclock UID associated with role
    string role_id = 3;
}

message RoleCreateResponse {}
// RoleUpdateRequest defines roleobject update structure
message RoleUpdateRequest {
    CreateMetadata metadata = 1 [ (gogoproto.embed) = true ];
    repeated RoleConfig rules = 2;
    // Keyclock UID associated with role
    string role_id = 3;
}

// Define RoleUpdateResponse struct
message RoleUpdateResponse {}

// Define RoleEnumerateRequest struct
message RoleEnumerateRequest {
    string org_id = 1;
    // Optional arguments for enumeration
    EnumerateOptions enumerate_options = 2 [ (gogoproto.embed) = true ];
}

// Define RoleEnumerateResponse struct
message RoleEnumerateResponse { repeated RoleObject roles = 1; }

// Define RoleInspectRequest struct
message RoleInspectRequest {
    string org_id = 1;
    string name = 2;
    string uid = 3;
}

// Define RoleInspectResponse struct
message RoleInspectResponse { RoleObject role = 1; }

// Define RoleDeleteRequest struct
message RoleDeleteRequest {
    string org_id = 1;
    string name = 2;
    string uid = 3;
}

// Define RoleDeleteResponse struct
message RoleDeleteResponse {}

// Define RolePermissionRequest struct
message RolePermissionRequest { string org_id = 1; }

// Define RolePermissionResponse struct
message RolePermissionResponse { map<string, Permission> rules = 1; }

// Define Permission struct
message Permission { bool full_access = 1; }

// ActivityDataObject defines activity data to be stored
message ActivityDataObject {
    Metadata metadata = 1 [ (gogoproto.embed) = true ];
    string kind = 2;
    // Final status of activity
    Status status = 3;
    // Completion time in seconds
    double completion_time = 4;
    // Captures transistion times between different status
    repeated Opcycle opcycle = 5;
    string cluster = 6;
    ObjectRef cluster_ref = 7;

    message Opcycle {
        google.protobuf.Timestamp start_time = 1;
        google.protobuf.Timestamp last_updated_time = 2;
        Status status = 3;
    }

    enum Status {
        Invalid = 0;
        Inprogress = 1;
        Success = 2;
        Failed = 3;
        Deleting = 4;
        Deleted = 5;
    }
}
