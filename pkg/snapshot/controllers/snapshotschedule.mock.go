// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/github.com/portworx/sched-ops/k8s/stork/stork.go
//
// Generated by this command:
//
//	mockgen -source=vendor/github.com/portworx/sched-ops/k8s/stork/stork.go -destination=pkg/snapshot/controllers/snapshotschedule.mock.go --mock_names Ops=MockSnapshotScheduleOps -package controllers
//

// Package controllers is a generated GoMock package.
package controllers

import (
	reflect "reflect"
	time "time"

	v1 "github.com/kubernetes-incubator/external-storage/snapshot/pkg/apis/crd/v1"
	v1alpha1 "github.com/libopenstorage/stork/pkg/apis/stork/v1alpha1"
	stork "github.com/portworx/sched-ops/k8s/stork"
	gomock "go.uber.org/mock/gomock"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MockSnapshotScheduleOps is a mock of Ops interface.
type MockSnapshotScheduleOps struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotScheduleOpsMockRecorder
}

// MockSnapshotScheduleOpsMockRecorder is the mock recorder for MockSnapshotScheduleOps.
type MockSnapshotScheduleOpsMockRecorder struct {
	mock *MockSnapshotScheduleOps
}

// NewMockSnapshotScheduleOps creates a new mock instance.
func NewMockSnapshotScheduleOps(ctrl *gomock.Controller) *MockSnapshotScheduleOps {
	mock := &MockSnapshotScheduleOps{ctrl: ctrl}
	mock.recorder = &MockSnapshotScheduleOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotScheduleOps) EXPECT() *MockSnapshotScheduleOpsMockRecorder {
	return m.recorder
}

// CreateAction mocks base method.
func (m *MockSnapshotScheduleOps) CreateAction(arg0 *v1alpha1.Action) (*v1alpha1.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAction", arg0)
	ret0, _ := ret[0].(*v1alpha1.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAction indicates an expected call of CreateAction.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateAction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAction", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateAction), arg0)
}

// CreateApplicationBackup mocks base method.
func (m *MockSnapshotScheduleOps) CreateApplicationBackup(arg0 *v1alpha1.ApplicationBackup) (*v1alpha1.ApplicationBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationBackup", arg0)
	ret0, _ := ret[0].(*v1alpha1.ApplicationBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationBackup indicates an expected call of CreateApplicationBackup.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateApplicationBackup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationBackup", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateApplicationBackup), arg0)
}

// CreateApplicationBackupSchedule mocks base method.
func (m *MockSnapshotScheduleOps) CreateApplicationBackupSchedule(arg0 *v1alpha1.ApplicationBackupSchedule) (*v1alpha1.ApplicationBackupSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationBackupSchedule", arg0)
	ret0, _ := ret[0].(*v1alpha1.ApplicationBackupSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationBackupSchedule indicates an expected call of CreateApplicationBackupSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateApplicationBackupSchedule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationBackupSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateApplicationBackupSchedule), arg0)
}

// CreateApplicationClone mocks base method.
func (m *MockSnapshotScheduleOps) CreateApplicationClone(arg0 *v1alpha1.ApplicationClone) (*v1alpha1.ApplicationClone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationClone", arg0)
	ret0, _ := ret[0].(*v1alpha1.ApplicationClone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationClone indicates an expected call of CreateApplicationClone.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateApplicationClone(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationClone", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateApplicationClone), arg0)
}

// CreateApplicationRegistration mocks base method.
func (m *MockSnapshotScheduleOps) CreateApplicationRegistration(arg0 *v1alpha1.ApplicationRegistration) (*v1alpha1.ApplicationRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationRegistration", arg0)
	ret0, _ := ret[0].(*v1alpha1.ApplicationRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationRegistration indicates an expected call of CreateApplicationRegistration.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateApplicationRegistration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationRegistration", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateApplicationRegistration), arg0)
}

// CreateApplicationRestore mocks base method.
func (m *MockSnapshotScheduleOps) CreateApplicationRestore(arg0 *v1alpha1.ApplicationRestore) (*v1alpha1.ApplicationRestore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationRestore", arg0)
	ret0, _ := ret[0].(*v1alpha1.ApplicationRestore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationRestore indicates an expected call of CreateApplicationRestore.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateApplicationRestore(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationRestore", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateApplicationRestore), arg0)
}

// CreateBackupLocation mocks base method.
func (m *MockSnapshotScheduleOps) CreateBackupLocation(arg0 *v1alpha1.BackupLocation) (*v1alpha1.BackupLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupLocation", arg0)
	ret0, _ := ret[0].(*v1alpha1.BackupLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackupLocation indicates an expected call of CreateBackupLocation.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateBackupLocation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupLocation", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateBackupLocation), arg0)
}

// CreateClusterDomainUpdate mocks base method.
func (m *MockSnapshotScheduleOps) CreateClusterDomainUpdate(arg0 *v1alpha1.ClusterDomainUpdate) (*v1alpha1.ClusterDomainUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterDomainUpdate", arg0)
	ret0, _ := ret[0].(*v1alpha1.ClusterDomainUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterDomainUpdate indicates an expected call of CreateClusterDomainUpdate.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateClusterDomainUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterDomainUpdate", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateClusterDomainUpdate), arg0)
}

// CreateClusterDomainsStatus mocks base method.
func (m *MockSnapshotScheduleOps) CreateClusterDomainsStatus(arg0 *v1alpha1.ClusterDomainsStatus) (*v1alpha1.ClusterDomainsStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterDomainsStatus", arg0)
	ret0, _ := ret[0].(*v1alpha1.ClusterDomainsStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterDomainsStatus indicates an expected call of CreateClusterDomainsStatus.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateClusterDomainsStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterDomainsStatus", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateClusterDomainsStatus), arg0)
}

// CreateClusterPair mocks base method.
func (m *MockSnapshotScheduleOps) CreateClusterPair(arg0 *v1alpha1.ClusterPair) (*v1alpha1.ClusterPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterPair", arg0)
	ret0, _ := ret[0].(*v1alpha1.ClusterPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterPair indicates an expected call of CreateClusterPair.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateClusterPair(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterPair", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateClusterPair), arg0)
}

// CreateGroupSnapshot mocks base method.
func (m *MockSnapshotScheduleOps) CreateGroupSnapshot(arg0 *v1alpha1.GroupVolumeSnapshot) (*v1alpha1.GroupVolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupSnapshot", arg0)
	ret0, _ := ret[0].(*v1alpha1.GroupVolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupSnapshot indicates an expected call of CreateGroupSnapshot.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateGroupSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupSnapshot", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateGroupSnapshot), arg0)
}

// CreateMigration mocks base method.
func (m *MockSnapshotScheduleOps) CreateMigration(arg0 *v1alpha1.Migration) (*v1alpha1.Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMigration", arg0)
	ret0, _ := ret[0].(*v1alpha1.Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMigration indicates an expected call of CreateMigration.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateMigration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMigration", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateMigration), arg0)
}

// CreateMigrationSchedule mocks base method.
func (m *MockSnapshotScheduleOps) CreateMigrationSchedule(arg0 *v1alpha1.MigrationSchedule) (*v1alpha1.MigrationSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMigrationSchedule", arg0)
	ret0, _ := ret[0].(*v1alpha1.MigrationSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMigrationSchedule indicates an expected call of CreateMigrationSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateMigrationSchedule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMigrationSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateMigrationSchedule), arg0)
}

// CreateNamespacedSchedulePolicy mocks base method.
func (m *MockSnapshotScheduleOps) CreateNamespacedSchedulePolicy(arg0 *v1alpha1.NamespacedSchedulePolicy) (*v1alpha1.NamespacedSchedulePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespacedSchedulePolicy", arg0)
	ret0, _ := ret[0].(*v1alpha1.NamespacedSchedulePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespacedSchedulePolicy indicates an expected call of CreateNamespacedSchedulePolicy.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateNamespacedSchedulePolicy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespacedSchedulePolicy", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateNamespacedSchedulePolicy), arg0)
}

// CreatePlatformCredential mocks base method.
func (m *MockSnapshotScheduleOps) CreatePlatformCredential(arg0 *v1alpha1.PlatformCredential) (*v1alpha1.PlatformCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlatformCredential", arg0)
	ret0, _ := ret[0].(*v1alpha1.PlatformCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlatformCredential indicates an expected call of CreatePlatformCredential.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreatePlatformCredential(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatformCredential", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreatePlatformCredential), arg0)
}

// CreateResourceTransformation mocks base method.
func (m *MockSnapshotScheduleOps) CreateResourceTransformation(arg0 *v1alpha1.ResourceTransformation) (*v1alpha1.ResourceTransformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceTransformation", arg0)
	ret0, _ := ret[0].(*v1alpha1.ResourceTransformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceTransformation indicates an expected call of CreateResourceTransformation.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateResourceTransformation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceTransformation", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateResourceTransformation), arg0)
}

// CreateRule mocks base method.
func (m *MockSnapshotScheduleOps) CreateRule(rule *v1alpha1.Rule) (*v1alpha1.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRule", rule)
	ret0, _ := ret[0].(*v1alpha1.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRule indicates an expected call of CreateRule.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateRule(rule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateRule), rule)
}

// CreateSchedulePolicy mocks base method.
func (m *MockSnapshotScheduleOps) CreateSchedulePolicy(arg0 *v1alpha1.SchedulePolicy) (*v1alpha1.SchedulePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedulePolicy", arg0)
	ret0, _ := ret[0].(*v1alpha1.SchedulePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchedulePolicy indicates an expected call of CreateSchedulePolicy.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateSchedulePolicy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedulePolicy", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateSchedulePolicy), arg0)
}

// CreateSnapshotSchedule mocks base method.
func (m *MockSnapshotScheduleOps) CreateSnapshotSchedule(arg0 *v1alpha1.VolumeSnapshotSchedule) (*v1alpha1.VolumeSnapshotSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotSchedule", arg0)
	ret0, _ := ret[0].(*v1alpha1.VolumeSnapshotSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotSchedule indicates an expected call of CreateSnapshotSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateSnapshotSchedule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateSnapshotSchedule), arg0)
}

// CreateVolumeSnapshotRestore mocks base method.
func (m *MockSnapshotScheduleOps) CreateVolumeSnapshotRestore(snap *v1alpha1.VolumeSnapshotRestore) (*v1alpha1.VolumeSnapshotRestore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeSnapshotRestore", snap)
	ret0, _ := ret[0].(*v1alpha1.VolumeSnapshotRestore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeSnapshotRestore indicates an expected call of CreateVolumeSnapshotRestore.
func (mr *MockSnapshotScheduleOpsMockRecorder) CreateVolumeSnapshotRestore(snap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeSnapshotRestore", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).CreateVolumeSnapshotRestore), snap)
}

// DeleteAction mocks base method.
func (m *MockSnapshotScheduleOps) DeleteAction(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAction indicates an expected call of DeleteAction.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteAction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAction", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteAction), arg0, arg1)
}

// DeleteApplicationBackup mocks base method.
func (m *MockSnapshotScheduleOps) DeleteApplicationBackup(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationBackup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplicationBackup indicates an expected call of DeleteApplicationBackup.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteApplicationBackup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationBackup", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteApplicationBackup), arg0, arg1)
}

// DeleteApplicationBackupSchedule mocks base method.
func (m *MockSnapshotScheduleOps) DeleteApplicationBackupSchedule(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationBackupSchedule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplicationBackupSchedule indicates an expected call of DeleteApplicationBackupSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteApplicationBackupSchedule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationBackupSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteApplicationBackupSchedule), arg0, arg1)
}

// DeleteApplicationClone mocks base method.
func (m *MockSnapshotScheduleOps) DeleteApplicationClone(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationClone", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplicationClone indicates an expected call of DeleteApplicationClone.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteApplicationClone(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationClone", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteApplicationClone), arg0, arg1)
}

// DeleteApplicationRegistration mocks base method.
func (m *MockSnapshotScheduleOps) DeleteApplicationRegistration(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationRegistration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplicationRegistration indicates an expected call of DeleteApplicationRegistration.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteApplicationRegistration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationRegistration", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteApplicationRegistration), arg0)
}

// DeleteApplicationRestore mocks base method.
func (m *MockSnapshotScheduleOps) DeleteApplicationRestore(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplicationRestore indicates an expected call of DeleteApplicationRestore.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteApplicationRestore(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationRestore", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteApplicationRestore), arg0, arg1)
}

// DeleteBackupLocation mocks base method.
func (m *MockSnapshotScheduleOps) DeleteBackupLocation(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupLocation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackupLocation indicates an expected call of DeleteBackupLocation.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteBackupLocation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupLocation", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteBackupLocation), arg0, arg1)
}

// DeleteClusterDomainUpdate mocks base method.
func (m *MockSnapshotScheduleOps) DeleteClusterDomainUpdate(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterDomainUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterDomainUpdate indicates an expected call of DeleteClusterDomainUpdate.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteClusterDomainUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterDomainUpdate", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteClusterDomainUpdate), arg0)
}

// DeleteClusterDomainsStatus mocks base method.
func (m *MockSnapshotScheduleOps) DeleteClusterDomainsStatus(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterDomainsStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterDomainsStatus indicates an expected call of DeleteClusterDomainsStatus.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteClusterDomainsStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterDomainsStatus", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteClusterDomainsStatus), arg0)
}

// DeleteClusterPair mocks base method.
func (m *MockSnapshotScheduleOps) DeleteClusterPair(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterPair", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterPair indicates an expected call of DeleteClusterPair.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteClusterPair(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterPair", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteClusterPair), arg0, arg1)
}

// DeleteGroupSnapshot mocks base method.
func (m *MockSnapshotScheduleOps) DeleteGroupSnapshot(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupSnapshot", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroupSnapshot indicates an expected call of DeleteGroupSnapshot.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteGroupSnapshot(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupSnapshot", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteGroupSnapshot), name, namespace)
}

// DeleteMigration mocks base method.
func (m *MockSnapshotScheduleOps) DeleteMigration(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMigration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMigration indicates an expected call of DeleteMigration.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteMigration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMigration", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteMigration), arg0, arg1)
}

// DeleteMigrationSchedule mocks base method.
func (m *MockSnapshotScheduleOps) DeleteMigrationSchedule(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMigrationSchedule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMigrationSchedule indicates an expected call of DeleteMigrationSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteMigrationSchedule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMigrationSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteMigrationSchedule), arg0, arg1)
}

// DeleteNamespacedSchedulePolicy mocks base method.
func (m *MockSnapshotScheduleOps) DeleteNamespacedSchedulePolicy(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespacedSchedulePolicy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespacedSchedulePolicy indicates an expected call of DeleteNamespacedSchedulePolicy.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteNamespacedSchedulePolicy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespacedSchedulePolicy", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteNamespacedSchedulePolicy), arg0, arg1)
}

// DeletePlatformCredential mocks base method.
func (m *MockSnapshotScheduleOps) DeletePlatformCredential(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlatformCredential", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlatformCredential indicates an expected call of DeletePlatformCredential.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeletePlatformCredential(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlatformCredential", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeletePlatformCredential), arg0, arg1)
}

// DeleteResourceTransformation mocks base method.
func (m *MockSnapshotScheduleOps) DeleteResourceTransformation(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceTransformation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceTransformation indicates an expected call of DeleteResourceTransformation.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteResourceTransformation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceTransformation", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteResourceTransformation), arg0, arg1)
}

// DeleteRule mocks base method.
func (m *MockSnapshotScheduleOps) DeleteRule(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteRule(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteRule), name, namespace)
}

// DeleteSchedulePolicy mocks base method.
func (m *MockSnapshotScheduleOps) DeleteSchedulePolicy(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchedulePolicy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchedulePolicy indicates an expected call of DeleteSchedulePolicy.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteSchedulePolicy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchedulePolicy", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteSchedulePolicy), arg0)
}

// DeleteSnapshotSchedule mocks base method.
func (m *MockSnapshotScheduleOps) DeleteSnapshotSchedule(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshotSchedule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshotSchedule indicates an expected call of DeleteSnapshotSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteSnapshotSchedule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteSnapshotSchedule), arg0, arg1)
}

// DeleteVolumeSnapshotRestore mocks base method.
func (m *MockSnapshotScheduleOps) DeleteVolumeSnapshotRestore(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeSnapshotRestore", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumeSnapshotRestore indicates an expected call of DeleteVolumeSnapshotRestore.
func (mr *MockSnapshotScheduleOpsMockRecorder) DeleteVolumeSnapshotRestore(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeSnapshotRestore", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).DeleteVolumeSnapshotRestore), name, namespace)
}

// GetAction mocks base method.
func (m *MockSnapshotScheduleOps) GetAction(arg0, arg1 string) (*v1alpha1.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAction", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAction indicates an expected call of GetAction.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetAction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAction", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetAction), arg0, arg1)
}

// GetApplicationBackup mocks base method.
func (m *MockSnapshotScheduleOps) GetApplicationBackup(arg0, arg1 string) (*v1alpha1.ApplicationBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationBackup", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ApplicationBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationBackup indicates an expected call of GetApplicationBackup.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetApplicationBackup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationBackup", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetApplicationBackup), arg0, arg1)
}

// GetApplicationBackupSchedule mocks base method.
func (m *MockSnapshotScheduleOps) GetApplicationBackupSchedule(arg0, arg1 string) (*v1alpha1.ApplicationBackupSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationBackupSchedule", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ApplicationBackupSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationBackupSchedule indicates an expected call of GetApplicationBackupSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetApplicationBackupSchedule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationBackupSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetApplicationBackupSchedule), arg0, arg1)
}

// GetApplicationClone mocks base method.
func (m *MockSnapshotScheduleOps) GetApplicationClone(arg0, arg1 string) (*v1alpha1.ApplicationClone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationClone", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ApplicationClone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationClone indicates an expected call of GetApplicationClone.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetApplicationClone(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationClone", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetApplicationClone), arg0, arg1)
}

// GetApplicationRegistration mocks base method.
func (m *MockSnapshotScheduleOps) GetApplicationRegistration(arg0 string) (*v1alpha1.ApplicationRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationRegistration", arg0)
	ret0, _ := ret[0].(*v1alpha1.ApplicationRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationRegistration indicates an expected call of GetApplicationRegistration.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetApplicationRegistration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationRegistration", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetApplicationRegistration), arg0)
}

// GetApplicationRestore mocks base method.
func (m *MockSnapshotScheduleOps) GetApplicationRestore(arg0, arg1 string) (*v1alpha1.ApplicationRestore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationRestore", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ApplicationRestore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationRestore indicates an expected call of GetApplicationRestore.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetApplicationRestore(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationRestore", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetApplicationRestore), arg0, arg1)
}

// GetBackupLocation mocks base method.
func (m *MockSnapshotScheduleOps) GetBackupLocation(arg0, arg1 string) (*v1alpha1.BackupLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupLocation", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.BackupLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupLocation indicates an expected call of GetBackupLocation.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetBackupLocation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupLocation", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetBackupLocation), arg0, arg1)
}

// GetClusterDomainUpdate mocks base method.
func (m *MockSnapshotScheduleOps) GetClusterDomainUpdate(arg0 string) (*v1alpha1.ClusterDomainUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterDomainUpdate", arg0)
	ret0, _ := ret[0].(*v1alpha1.ClusterDomainUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterDomainUpdate indicates an expected call of GetClusterDomainUpdate.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetClusterDomainUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterDomainUpdate", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetClusterDomainUpdate), arg0)
}

// GetClusterDomainsStatus mocks base method.
func (m *MockSnapshotScheduleOps) GetClusterDomainsStatus(arg0 string) (*v1alpha1.ClusterDomainsStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterDomainsStatus", arg0)
	ret0, _ := ret[0].(*v1alpha1.ClusterDomainsStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterDomainsStatus indicates an expected call of GetClusterDomainsStatus.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetClusterDomainsStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterDomainsStatus", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetClusterDomainsStatus), arg0)
}

// GetClusterPair mocks base method.
func (m *MockSnapshotScheduleOps) GetClusterPair(arg0, arg1 string) (*v1alpha1.ClusterPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterPair", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ClusterPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterPair indicates an expected call of GetClusterPair.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetClusterPair(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterPair", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetClusterPair), arg0, arg1)
}

// GetGroupSnapshot mocks base method.
func (m *MockSnapshotScheduleOps) GetGroupSnapshot(name, namespace string) (*v1alpha1.GroupVolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupSnapshot", name, namespace)
	ret0, _ := ret[0].(*v1alpha1.GroupVolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupSnapshot indicates an expected call of GetGroupSnapshot.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetGroupSnapshot(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupSnapshot", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetGroupSnapshot), name, namespace)
}

// GetMigration mocks base method.
func (m *MockSnapshotScheduleOps) GetMigration(arg0, arg1 string) (*v1alpha1.Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigration", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigration indicates an expected call of GetMigration.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetMigration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigration", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetMigration), arg0, arg1)
}

// GetMigrationSchedule mocks base method.
func (m *MockSnapshotScheduleOps) GetMigrationSchedule(arg0, arg1 string) (*v1alpha1.MigrationSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigrationSchedule", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.MigrationSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigrationSchedule indicates an expected call of GetMigrationSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetMigrationSchedule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrationSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetMigrationSchedule), arg0, arg1)
}

// GetNamespacedSchedulePolicy mocks base method.
func (m *MockSnapshotScheduleOps) GetNamespacedSchedulePolicy(arg0, arg1 string) (*v1alpha1.NamespacedSchedulePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespacedSchedulePolicy", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.NamespacedSchedulePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespacedSchedulePolicy indicates an expected call of GetNamespacedSchedulePolicy.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetNamespacedSchedulePolicy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespacedSchedulePolicy", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetNamespacedSchedulePolicy), arg0, arg1)
}

// GetPlatformCredential mocks base method.
func (m *MockSnapshotScheduleOps) GetPlatformCredential(arg0, arg1 string) (*v1alpha1.PlatformCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformCredential", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.PlatformCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformCredential indicates an expected call of GetPlatformCredential.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetPlatformCredential(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformCredential", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetPlatformCredential), arg0, arg1)
}

// GetResourceTransformation mocks base method.
func (m *MockSnapshotScheduleOps) GetResourceTransformation(arg0, arg1 string) (*v1alpha1.ResourceTransformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceTransformation", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.ResourceTransformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceTransformation indicates an expected call of GetResourceTransformation.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetResourceTransformation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceTransformation", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetResourceTransformation), arg0, arg1)
}

// GetRule mocks base method.
func (m *MockSnapshotScheduleOps) GetRule(name, namespace string) (*v1alpha1.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", name, namespace)
	ret0, _ := ret[0].(*v1alpha1.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetRule(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetRule), name, namespace)
}

// GetSchedulePolicy mocks base method.
func (m *MockSnapshotScheduleOps) GetSchedulePolicy(arg0 string) (*v1alpha1.SchedulePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedulePolicy", arg0)
	ret0, _ := ret[0].(*v1alpha1.SchedulePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedulePolicy indicates an expected call of GetSchedulePolicy.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetSchedulePolicy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedulePolicy", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetSchedulePolicy), arg0)
}

// GetSnapshotSchedule mocks base method.
func (m *MockSnapshotScheduleOps) GetSnapshotSchedule(arg0, arg1 string) (*v1alpha1.VolumeSnapshotSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotSchedule", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.VolumeSnapshotSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotSchedule indicates an expected call of GetSnapshotSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetSnapshotSchedule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetSnapshotSchedule), arg0, arg1)
}

// GetSnapshotsForGroupSnapshot mocks base method.
func (m *MockSnapshotScheduleOps) GetSnapshotsForGroupSnapshot(name, namespace string) ([]*v1.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotsForGroupSnapshot", name, namespace)
	ret0, _ := ret[0].([]*v1.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotsForGroupSnapshot indicates an expected call of GetSnapshotsForGroupSnapshot.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetSnapshotsForGroupSnapshot(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotsForGroupSnapshot", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetSnapshotsForGroupSnapshot), name, namespace)
}

// GetVolumeSnapshotRestore mocks base method.
func (m *MockSnapshotScheduleOps) GetVolumeSnapshotRestore(name, namespace string) (*v1alpha1.VolumeSnapshotRestore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeSnapshotRestore", name, namespace)
	ret0, _ := ret[0].(*v1alpha1.VolumeSnapshotRestore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeSnapshotRestore indicates an expected call of GetVolumeSnapshotRestore.
func (mr *MockSnapshotScheduleOpsMockRecorder) GetVolumeSnapshotRestore(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeSnapshotRestore", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).GetVolumeSnapshotRestore), name, namespace)
}

// ListActions mocks base method.
func (m *MockSnapshotScheduleOps) ListActions(namespace string) (*v1alpha1.ActionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActions", namespace)
	ret0, _ := ret[0].(*v1alpha1.ActionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActions indicates an expected call of ListActions.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListActions(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActions", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListActions), namespace)
}

// ListApplicationBackupSchedules mocks base method.
func (m *MockSnapshotScheduleOps) ListApplicationBackupSchedules(namespace string, filterOptions v10.ListOptions) (*v1alpha1.ApplicationBackupScheduleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationBackupSchedules", namespace, filterOptions)
	ret0, _ := ret[0].(*v1alpha1.ApplicationBackupScheduleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationBackupSchedules indicates an expected call of ListApplicationBackupSchedules.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListApplicationBackupSchedules(namespace, filterOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationBackupSchedules", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListApplicationBackupSchedules), namespace, filterOptions)
}

// ListApplicationBackups mocks base method.
func (m *MockSnapshotScheduleOps) ListApplicationBackups(namespace string, filterOptions v10.ListOptions) (*v1alpha1.ApplicationBackupList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationBackups", namespace, filterOptions)
	ret0, _ := ret[0].(*v1alpha1.ApplicationBackupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationBackups indicates an expected call of ListApplicationBackups.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListApplicationBackups(namespace, filterOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationBackups", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListApplicationBackups), namespace, filterOptions)
}

// ListApplicationClones mocks base method.
func (m *MockSnapshotScheduleOps) ListApplicationClones(arg0 string) (*v1alpha1.ApplicationCloneList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationClones", arg0)
	ret0, _ := ret[0].(*v1alpha1.ApplicationCloneList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationClones indicates an expected call of ListApplicationClones.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListApplicationClones(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationClones", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListApplicationClones), arg0)
}

// ListApplicationRegistrations mocks base method.
func (m *MockSnapshotScheduleOps) ListApplicationRegistrations() (*v1alpha1.ApplicationRegistrationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationRegistrations")
	ret0, _ := ret[0].(*v1alpha1.ApplicationRegistrationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationRegistrations indicates an expected call of ListApplicationRegistrations.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListApplicationRegistrations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationRegistrations", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListApplicationRegistrations))
}

// ListApplicationRestores mocks base method.
func (m *MockSnapshotScheduleOps) ListApplicationRestores(namespace string, filterOptions v10.ListOptions) (*v1alpha1.ApplicationRestoreList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationRestores", namespace, filterOptions)
	ret0, _ := ret[0].(*v1alpha1.ApplicationRestoreList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationRestores indicates an expected call of ListApplicationRestores.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListApplicationRestores(namespace, filterOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationRestores", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListApplicationRestores), namespace, filterOptions)
}

// ListBackupLocations mocks base method.
func (m *MockSnapshotScheduleOps) ListBackupLocations(namespace string, filterOptions v10.ListOptions) (*v1alpha1.BackupLocationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupLocations", namespace, filterOptions)
	ret0, _ := ret[0].(*v1alpha1.BackupLocationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupLocations indicates an expected call of ListBackupLocations.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListBackupLocations(namespace, filterOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupLocations", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListBackupLocations), namespace, filterOptions)
}

// ListClusterDomainStatuses mocks base method.
func (m *MockSnapshotScheduleOps) ListClusterDomainStatuses() (*v1alpha1.ClusterDomainsStatusList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterDomainStatuses")
	ret0, _ := ret[0].(*v1alpha1.ClusterDomainsStatusList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterDomainStatuses indicates an expected call of ListClusterDomainStatuses.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListClusterDomainStatuses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterDomainStatuses", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListClusterDomainStatuses))
}

// ListClusterDomainUpdates mocks base method.
func (m *MockSnapshotScheduleOps) ListClusterDomainUpdates() (*v1alpha1.ClusterDomainUpdateList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterDomainUpdates")
	ret0, _ := ret[0].(*v1alpha1.ClusterDomainUpdateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterDomainUpdates indicates an expected call of ListClusterDomainUpdates.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListClusterDomainUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterDomainUpdates", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListClusterDomainUpdates))
}

// ListClusterPairs mocks base method.
func (m *MockSnapshotScheduleOps) ListClusterPairs(arg0 string) (*v1alpha1.ClusterPairList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterPairs", arg0)
	ret0, _ := ret[0].(*v1alpha1.ClusterPairList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterPairs indicates an expected call of ListClusterPairs.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListClusterPairs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterPairs", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListClusterPairs), arg0)
}

// ListGroupSnapshots mocks base method.
func (m *MockSnapshotScheduleOps) ListGroupSnapshots(namespace string) (*v1alpha1.GroupVolumeSnapshotList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupSnapshots", namespace)
	ret0, _ := ret[0].(*v1alpha1.GroupVolumeSnapshotList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupSnapshots indicates an expected call of ListGroupSnapshots.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListGroupSnapshots(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupSnapshots", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListGroupSnapshots), namespace)
}

// ListMigrationSchedules mocks base method.
func (m *MockSnapshotScheduleOps) ListMigrationSchedules(arg0 string) (*v1alpha1.MigrationScheduleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMigrationSchedules", arg0)
	ret0, _ := ret[0].(*v1alpha1.MigrationScheduleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMigrationSchedules indicates an expected call of ListMigrationSchedules.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListMigrationSchedules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMigrationSchedules", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListMigrationSchedules), arg0)
}

// ListMigrations mocks base method.
func (m *MockSnapshotScheduleOps) ListMigrations(arg0 string) (*v1alpha1.MigrationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMigrations", arg0)
	ret0, _ := ret[0].(*v1alpha1.MigrationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMigrations indicates an expected call of ListMigrations.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListMigrations(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMigrations", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListMigrations), arg0)
}

// ListNamespacedSchedulePolicies mocks base method.
func (m *MockSnapshotScheduleOps) ListNamespacedSchedulePolicies(namespace string, filterOptions v10.ListOptions) (*v1alpha1.NamespacedSchedulePolicyList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespacedSchedulePolicies", namespace, filterOptions)
	ret0, _ := ret[0].(*v1alpha1.NamespacedSchedulePolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespacedSchedulePolicies indicates an expected call of ListNamespacedSchedulePolicies.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListNamespacedSchedulePolicies(namespace, filterOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespacedSchedulePolicies", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListNamespacedSchedulePolicies), namespace, filterOptions)
}

// ListPlatformCredential mocks base method.
func (m *MockSnapshotScheduleOps) ListPlatformCredential(namespace string, filterOptions v10.ListOptions) (*v1alpha1.PlatformCredentialList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlatformCredential", namespace, filterOptions)
	ret0, _ := ret[0].(*v1alpha1.PlatformCredentialList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlatformCredential indicates an expected call of ListPlatformCredential.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListPlatformCredential(namespace, filterOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlatformCredential", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListPlatformCredential), namespace, filterOptions)
}

// ListResourceTransformations mocks base method.
func (m *MockSnapshotScheduleOps) ListResourceTransformations(namespace string, filterOptions v10.ListOptions) (*v1alpha1.ResourceTransformationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceTransformations", namespace, filterOptions)
	ret0, _ := ret[0].(*v1alpha1.ResourceTransformationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceTransformations indicates an expected call of ListResourceTransformations.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListResourceTransformations(namespace, filterOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceTransformations", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListResourceTransformations), namespace, filterOptions)
}

// ListRules mocks base method.
func (m *MockSnapshotScheduleOps) ListRules(namespace string, filterOptions v10.ListOptions) (*v1alpha1.RuleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules", namespace, filterOptions)
	ret0, _ := ret[0].(*v1alpha1.RuleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListRules(namespace, filterOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListRules), namespace, filterOptions)
}

// ListSchedulePolicies mocks base method.
func (m *MockSnapshotScheduleOps) ListSchedulePolicies() (*v1alpha1.SchedulePolicyList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchedulePolicies")
	ret0, _ := ret[0].(*v1alpha1.SchedulePolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchedulePolicies indicates an expected call of ListSchedulePolicies.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListSchedulePolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedulePolicies", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListSchedulePolicies))
}

// ListSnapshotSchedules mocks base method.
func (m *MockSnapshotScheduleOps) ListSnapshotSchedules(arg0 string) (*v1alpha1.VolumeSnapshotScheduleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshotSchedules", arg0)
	ret0, _ := ret[0].(*v1alpha1.VolumeSnapshotScheduleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshotSchedules indicates an expected call of ListSnapshotSchedules.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListSnapshotSchedules(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotSchedules", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListSnapshotSchedules), arg0)
}

// ListVolumeSnapshotRestore mocks base method.
func (m *MockSnapshotScheduleOps) ListVolumeSnapshotRestore(namespace string) (*v1alpha1.VolumeSnapshotRestoreList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumeSnapshotRestore", namespace)
	ret0, _ := ret[0].(*v1alpha1.VolumeSnapshotRestoreList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumeSnapshotRestore indicates an expected call of ListVolumeSnapshotRestore.
func (mr *MockSnapshotScheduleOpsMockRecorder) ListVolumeSnapshotRestore(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumeSnapshotRestore", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ListVolumeSnapshotRestore), namespace)
}

// SetConfig mocks base method.
func (m *MockSnapshotScheduleOps) SetConfig(config *rest.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfig", config)
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockSnapshotScheduleOpsMockRecorder) SetConfig(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).SetConfig), config)
}

// UpdateAction mocks base method.
func (m *MockSnapshotScheduleOps) UpdateAction(arg0 *v1alpha1.Action) (*v1alpha1.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAction", arg0)
	ret0, _ := ret[0].(*v1alpha1.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAction indicates an expected call of UpdateAction.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateAction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAction", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateAction), arg0)
}

// UpdateApplicationBackup mocks base method.
func (m *MockSnapshotScheduleOps) UpdateApplicationBackup(arg0 *v1alpha1.ApplicationBackup) (*v1alpha1.ApplicationBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationBackup", arg0)
	ret0, _ := ret[0].(*v1alpha1.ApplicationBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationBackup indicates an expected call of UpdateApplicationBackup.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateApplicationBackup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationBackup", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateApplicationBackup), arg0)
}

// UpdateApplicationBackupSchedule mocks base method.
func (m *MockSnapshotScheduleOps) UpdateApplicationBackupSchedule(arg0 *v1alpha1.ApplicationBackupSchedule) (*v1alpha1.ApplicationBackupSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationBackupSchedule", arg0)
	ret0, _ := ret[0].(*v1alpha1.ApplicationBackupSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationBackupSchedule indicates an expected call of UpdateApplicationBackupSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateApplicationBackupSchedule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationBackupSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateApplicationBackupSchedule), arg0)
}

// UpdateApplicationClone mocks base method.
func (m *MockSnapshotScheduleOps) UpdateApplicationClone(arg0 *v1alpha1.ApplicationClone) (*v1alpha1.ApplicationClone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationClone", arg0)
	ret0, _ := ret[0].(*v1alpha1.ApplicationClone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationClone indicates an expected call of UpdateApplicationClone.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateApplicationClone(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationClone", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateApplicationClone), arg0)
}

// UpdateApplicationRegistration mocks base method.
func (m *MockSnapshotScheduleOps) UpdateApplicationRegistration(arg0 *v1alpha1.ApplicationRegistration) (*v1alpha1.ApplicationRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationRegistration", arg0)
	ret0, _ := ret[0].(*v1alpha1.ApplicationRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationRegistration indicates an expected call of UpdateApplicationRegistration.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateApplicationRegistration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationRegistration", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateApplicationRegistration), arg0)
}

// UpdateApplicationRestore mocks base method.
func (m *MockSnapshotScheduleOps) UpdateApplicationRestore(arg0 *v1alpha1.ApplicationRestore) (*v1alpha1.ApplicationRestore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationRestore", arg0)
	ret0, _ := ret[0].(*v1alpha1.ApplicationRestore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationRestore indicates an expected call of UpdateApplicationRestore.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateApplicationRestore(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationRestore", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateApplicationRestore), arg0)
}

// UpdateBackupLocation mocks base method.
func (m *MockSnapshotScheduleOps) UpdateBackupLocation(arg0 *v1alpha1.BackupLocation) (*v1alpha1.BackupLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackupLocation", arg0)
	ret0, _ := ret[0].(*v1alpha1.BackupLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackupLocation indicates an expected call of UpdateBackupLocation.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateBackupLocation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackupLocation", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateBackupLocation), arg0)
}

// UpdateClusterDomainUpdate mocks base method.
func (m *MockSnapshotScheduleOps) UpdateClusterDomainUpdate(arg0 *v1alpha1.ClusterDomainUpdate) (*v1alpha1.ClusterDomainUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterDomainUpdate", arg0)
	ret0, _ := ret[0].(*v1alpha1.ClusterDomainUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterDomainUpdate indicates an expected call of UpdateClusterDomainUpdate.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateClusterDomainUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterDomainUpdate", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateClusterDomainUpdate), arg0)
}

// UpdateClusterDomainsStatus mocks base method.
func (m *MockSnapshotScheduleOps) UpdateClusterDomainsStatus(arg0 *v1alpha1.ClusterDomainsStatus) (*v1alpha1.ClusterDomainsStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterDomainsStatus", arg0)
	ret0, _ := ret[0].(*v1alpha1.ClusterDomainsStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterDomainsStatus indicates an expected call of UpdateClusterDomainsStatus.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateClusterDomainsStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterDomainsStatus", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateClusterDomainsStatus), arg0)
}

// UpdateClusterPair mocks base method.
func (m *MockSnapshotScheduleOps) UpdateClusterPair(arg0 *v1alpha1.ClusterPair) (*v1alpha1.ClusterPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterPair", arg0)
	ret0, _ := ret[0].(*v1alpha1.ClusterPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterPair indicates an expected call of UpdateClusterPair.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateClusterPair(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterPair", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateClusterPair), arg0)
}

// UpdateGroupSnapshot mocks base method.
func (m *MockSnapshotScheduleOps) UpdateGroupSnapshot(arg0 *v1alpha1.GroupVolumeSnapshot) (*v1alpha1.GroupVolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupSnapshot", arg0)
	ret0, _ := ret[0].(*v1alpha1.GroupVolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupSnapshot indicates an expected call of UpdateGroupSnapshot.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateGroupSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupSnapshot", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateGroupSnapshot), arg0)
}

// UpdateMigration mocks base method.
func (m *MockSnapshotScheduleOps) UpdateMigration(arg0 *v1alpha1.Migration) (*v1alpha1.Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMigration", arg0)
	ret0, _ := ret[0].(*v1alpha1.Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMigration indicates an expected call of UpdateMigration.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateMigration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMigration", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateMigration), arg0)
}

// UpdateMigrationSchedule mocks base method.
func (m *MockSnapshotScheduleOps) UpdateMigrationSchedule(arg0 *v1alpha1.MigrationSchedule) (*v1alpha1.MigrationSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMigrationSchedule", arg0)
	ret0, _ := ret[0].(*v1alpha1.MigrationSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMigrationSchedule indicates an expected call of UpdateMigrationSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateMigrationSchedule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMigrationSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateMigrationSchedule), arg0)
}

// UpdateNamespacedSchedulePolicy mocks base method.
func (m *MockSnapshotScheduleOps) UpdateNamespacedSchedulePolicy(arg0 *v1alpha1.NamespacedSchedulePolicy) (*v1alpha1.NamespacedSchedulePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespacedSchedulePolicy", arg0)
	ret0, _ := ret[0].(*v1alpha1.NamespacedSchedulePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespacedSchedulePolicy indicates an expected call of UpdateNamespacedSchedulePolicy.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateNamespacedSchedulePolicy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespacedSchedulePolicy", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateNamespacedSchedulePolicy), arg0)
}

// UpdatePlatformCredential mocks base method.
func (m *MockSnapshotScheduleOps) UpdatePlatformCredential(arg0 *v1alpha1.PlatformCredential) (*v1alpha1.PlatformCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlatformCredential", arg0)
	ret0, _ := ret[0].(*v1alpha1.PlatformCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlatformCredential indicates an expected call of UpdatePlatformCredential.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdatePlatformCredential(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlatformCredential", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdatePlatformCredential), arg0)
}

// UpdateResourceTransformation mocks base method.
func (m *MockSnapshotScheduleOps) UpdateResourceTransformation(arg0 *v1alpha1.ResourceTransformation) (*v1alpha1.ResourceTransformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceTransformation", arg0)
	ret0, _ := ret[0].(*v1alpha1.ResourceTransformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceTransformation indicates an expected call of UpdateResourceTransformation.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateResourceTransformation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceTransformation", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateResourceTransformation), arg0)
}

// UpdateRule mocks base method.
func (m *MockSnapshotScheduleOps) UpdateRule(rule *v1alpha1.Rule) (*v1alpha1.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRule", rule)
	ret0, _ := ret[0].(*v1alpha1.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRule indicates an expected call of UpdateRule.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateRule(rule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateRule), rule)
}

// UpdateSchedulePolicy mocks base method.
func (m *MockSnapshotScheduleOps) UpdateSchedulePolicy(arg0 *v1alpha1.SchedulePolicy) (*v1alpha1.SchedulePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedulePolicy", arg0)
	ret0, _ := ret[0].(*v1alpha1.SchedulePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchedulePolicy indicates an expected call of UpdateSchedulePolicy.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateSchedulePolicy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedulePolicy", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateSchedulePolicy), arg0)
}

// UpdateSnapshotSchedule mocks base method.
func (m *MockSnapshotScheduleOps) UpdateSnapshotSchedule(arg0 *v1alpha1.VolumeSnapshotSchedule) (*v1alpha1.VolumeSnapshotSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshotSchedule", arg0)
	ret0, _ := ret[0].(*v1alpha1.VolumeSnapshotSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSnapshotSchedule indicates an expected call of UpdateSnapshotSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateSnapshotSchedule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshotSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateSnapshotSchedule), arg0)
}

// UpdateVolumeSnapshotRestore mocks base method.
func (m *MockSnapshotScheduleOps) UpdateVolumeSnapshotRestore(snap *v1alpha1.VolumeSnapshotRestore) (*v1alpha1.VolumeSnapshotRestore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolumeSnapshotRestore", snap)
	ret0, _ := ret[0].(*v1alpha1.VolumeSnapshotRestore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolumeSnapshotRestore indicates an expected call of UpdateVolumeSnapshotRestore.
func (mr *MockSnapshotScheduleOpsMockRecorder) UpdateVolumeSnapshotRestore(snap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeSnapshotRestore", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).UpdateVolumeSnapshotRestore), snap)
}

// ValidateApplicationBackup mocks base method.
func (m *MockSnapshotScheduleOps) ValidateApplicationBackup(arg0, arg1 string, arg2, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateApplicationBackup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateApplicationBackup indicates an expected call of ValidateApplicationBackup.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateApplicationBackup(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateApplicationBackup", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateApplicationBackup), arg0, arg1, arg2, arg3)
}

// ValidateApplicationBackupSchedule mocks base method.
func (m *MockSnapshotScheduleOps) ValidateApplicationBackupSchedule(arg0, arg1 string, arg2 int, arg3, arg4 time.Duration) (map[v1alpha1.SchedulePolicyType][]*v1alpha1.ScheduledApplicationBackupStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateApplicationBackupSchedule", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(map[v1alpha1.SchedulePolicyType][]*v1alpha1.ScheduledApplicationBackupStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateApplicationBackupSchedule indicates an expected call of ValidateApplicationBackupSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateApplicationBackupSchedule(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateApplicationBackupSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateApplicationBackupSchedule), arg0, arg1, arg2, arg3, arg4)
}

// ValidateApplicationClone mocks base method.
func (m *MockSnapshotScheduleOps) ValidateApplicationClone(arg0, arg1 string, arg2, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateApplicationClone", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateApplicationClone indicates an expected call of ValidateApplicationClone.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateApplicationClone(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateApplicationClone", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateApplicationClone), arg0, arg1, arg2, arg3)
}

// ValidateApplicationRegistration mocks base method.
func (m *MockSnapshotScheduleOps) ValidateApplicationRegistration(arg0 string, arg1, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateApplicationRegistration", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateApplicationRegistration indicates an expected call of ValidateApplicationRegistration.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateApplicationRegistration(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateApplicationRegistration", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateApplicationRegistration), arg0, arg1, arg2)
}

// ValidateApplicationRestore mocks base method.
func (m *MockSnapshotScheduleOps) ValidateApplicationRestore(arg0, arg1 string, arg2, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateApplicationRestore", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateApplicationRestore indicates an expected call of ValidateApplicationRestore.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateApplicationRestore(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateApplicationRestore", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateApplicationRestore), arg0, arg1, arg2, arg3)
}

// ValidateBackupLocation mocks base method.
func (m *MockSnapshotScheduleOps) ValidateBackupLocation(arg0, arg1 string, arg2, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBackupLocation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBackupLocation indicates an expected call of ValidateBackupLocation.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateBackupLocation(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBackupLocation", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateBackupLocation), arg0, arg1, arg2, arg3)
}

// ValidateClusterDomainUpdate mocks base method.
func (m *MockSnapshotScheduleOps) ValidateClusterDomainUpdate(arg0 string, arg1, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateClusterDomainUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateClusterDomainUpdate indicates an expected call of ValidateClusterDomainUpdate.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateClusterDomainUpdate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateClusterDomainUpdate", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateClusterDomainUpdate), arg0, arg1, arg2)
}

// ValidateClusterDomainsStatus mocks base method.
func (m *MockSnapshotScheduleOps) ValidateClusterDomainsStatus(arg0 string, arg1 map[string]bool, arg2, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateClusterDomainsStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateClusterDomainsStatus indicates an expected call of ValidateClusterDomainsStatus.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateClusterDomainsStatus(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateClusterDomainsStatus", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateClusterDomainsStatus), arg0, arg1, arg2, arg3)
}

// ValidateClusterPair mocks base method.
func (m *MockSnapshotScheduleOps) ValidateClusterPair(arg0, arg1 string, arg2, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateClusterPair", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateClusterPair indicates an expected call of ValidateClusterPair.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateClusterPair(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateClusterPair", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateClusterPair), arg0, arg1, arg2, arg3)
}

// ValidateGroupSnapshot mocks base method.
func (m *MockSnapshotScheduleOps) ValidateGroupSnapshot(name, namespace string, retry bool, timeout, retryInterval time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateGroupSnapshot", name, namespace, retry, timeout, retryInterval)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateGroupSnapshot indicates an expected call of ValidateGroupSnapshot.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateGroupSnapshot(name, namespace, retry, timeout, retryInterval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateGroupSnapshot", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateGroupSnapshot), name, namespace, retry, timeout, retryInterval)
}

// ValidateMigration mocks base method.
func (m *MockSnapshotScheduleOps) ValidateMigration(arg0, arg1 string, arg2, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateMigration", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateMigration indicates an expected call of ValidateMigration.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateMigration(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateMigration", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateMigration), arg0, arg1, arg2, arg3)
}

// ValidateMigrationSchedule mocks base method.
func (m *MockSnapshotScheduleOps) ValidateMigrationSchedule(arg0, arg1 string, arg2, arg3 time.Duration) (map[v1alpha1.SchedulePolicyType][]*v1alpha1.ScheduledMigrationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateMigrationSchedule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[v1alpha1.SchedulePolicyType][]*v1alpha1.ScheduledMigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateMigrationSchedule indicates an expected call of ValidateMigrationSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateMigrationSchedule(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateMigrationSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateMigrationSchedule), arg0, arg1, arg2, arg3)
}

// ValidatePlatformCredential mocks base method.
func (m *MockSnapshotScheduleOps) ValidatePlatformCredential(arg0, arg1 string, arg2, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePlatformCredential", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePlatformCredential indicates an expected call of ValidatePlatformCredential.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidatePlatformCredential(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePlatformCredential", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidatePlatformCredential), arg0, arg1, arg2, arg3)
}

// ValidateResourceTransformation mocks base method.
func (m *MockSnapshotScheduleOps) ValidateResourceTransformation(arg0, arg1 string, arg2, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateResourceTransformation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateResourceTransformation indicates an expected call of ValidateResourceTransformation.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateResourceTransformation(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateResourceTransformation", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateResourceTransformation), arg0, arg1, arg2, arg3)
}

// ValidateSnapshotSchedule mocks base method.
func (m *MockSnapshotScheduleOps) ValidateSnapshotSchedule(arg0, arg1 string, arg2, arg3 time.Duration) (map[v1alpha1.SchedulePolicyType][]*v1alpha1.ScheduledVolumeSnapshotStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSnapshotSchedule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[v1alpha1.SchedulePolicyType][]*v1alpha1.ScheduledVolumeSnapshotStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSnapshotSchedule indicates an expected call of ValidateSnapshotSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateSnapshotSchedule(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSnapshotSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateSnapshotSchedule), arg0, arg1, arg2, arg3)
}

// ValidateVolumeSnapshotRestore mocks base method.
func (m *MockSnapshotScheduleOps) ValidateVolumeSnapshotRestore(name, namespace string, timeout, retry time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVolumeSnapshotRestore", name, namespace, timeout, retry)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVolumeSnapshotRestore indicates an expected call of ValidateVolumeSnapshotRestore.
func (mr *MockSnapshotScheduleOpsMockRecorder) ValidateVolumeSnapshotRestore(name, namespace, timeout, retry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVolumeSnapshotRestore", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).ValidateVolumeSnapshotRestore), name, namespace, timeout, retry)
}

// WatchApplicationBackup mocks base method.
func (m *MockSnapshotScheduleOps) WatchApplicationBackup(namespace string, fn stork.WatchFunc, listOptions v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationBackup", namespace, fn, listOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchApplicationBackup indicates an expected call of WatchApplicationBackup.
func (mr *MockSnapshotScheduleOpsMockRecorder) WatchApplicationBackup(namespace, fn, listOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationBackup", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).WatchApplicationBackup), namespace, fn, listOptions)
}

// WatchApplicationBackupSchedule mocks base method.
func (m *MockSnapshotScheduleOps) WatchApplicationBackupSchedule(namespace string, fn stork.WatchFunc, listOptions v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationBackupSchedule", namespace, fn, listOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchApplicationBackupSchedule indicates an expected call of WatchApplicationBackupSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) WatchApplicationBackupSchedule(namespace, fn, listOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationBackupSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).WatchApplicationBackupSchedule), namespace, fn, listOptions)
}

// WatchApplicationClone mocks base method.
func (m *MockSnapshotScheduleOps) WatchApplicationClone(namespace string, fn stork.WatchFunc, listOptions v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationClone", namespace, fn, listOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchApplicationClone indicates an expected call of WatchApplicationClone.
func (mr *MockSnapshotScheduleOpsMockRecorder) WatchApplicationClone(namespace, fn, listOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationClone", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).WatchApplicationClone), namespace, fn, listOptions)
}

// WatchApplicationRestore mocks base method.
func (m *MockSnapshotScheduleOps) WatchApplicationRestore(namespace string, fn stork.WatchFunc, listOptions v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationRestore", namespace, fn, listOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchApplicationRestore indicates an expected call of WatchApplicationRestore.
func (mr *MockSnapshotScheduleOpsMockRecorder) WatchApplicationRestore(namespace, fn, listOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationRestore", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).WatchApplicationRestore), namespace, fn, listOptions)
}

// WatchClusterPair mocks base method.
func (m *MockSnapshotScheduleOps) WatchClusterPair(namespace string, fn stork.WatchFunc, listOptions v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchClusterPair", namespace, fn, listOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchClusterPair indicates an expected call of WatchClusterPair.
func (mr *MockSnapshotScheduleOpsMockRecorder) WatchClusterPair(namespace, fn, listOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchClusterPair", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).WatchClusterPair), namespace, fn, listOptions)
}

// WatchMigration mocks base method.
func (m *MockSnapshotScheduleOps) WatchMigration(namespace string, fn stork.WatchFunc, listOptions v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMigration", namespace, fn, listOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchMigration indicates an expected call of WatchMigration.
func (mr *MockSnapshotScheduleOpsMockRecorder) WatchMigration(namespace, fn, listOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMigration", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).WatchMigration), namespace, fn, listOptions)
}

// WatchMigrationSchedule mocks base method.
func (m *MockSnapshotScheduleOps) WatchMigrationSchedule(namespace string, fn stork.WatchFunc, listOptions v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMigrationSchedule", namespace, fn, listOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchMigrationSchedule indicates an expected call of WatchMigrationSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) WatchMigrationSchedule(namespace, fn, listOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMigrationSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).WatchMigrationSchedule), namespace, fn, listOptions)
}

// WatchStorkResources mocks base method.
func (m *MockSnapshotScheduleOps) WatchStorkResources(arg0 string, arg1 runtime.Object) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchStorkResources", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchStorkResources indicates an expected call of WatchStorkResources.
func (mr *MockSnapshotScheduleOpsMockRecorder) WatchStorkResources(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchStorkResources", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).WatchStorkResources), arg0, arg1)
}

// WatchVolumeSnapshotSchedule mocks base method.
func (m *MockSnapshotScheduleOps) WatchVolumeSnapshotSchedule(namespace string, fn stork.WatchFunc, listOptions v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchVolumeSnapshotSchedule", namespace, fn, listOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchVolumeSnapshotSchedule indicates an expected call of WatchVolumeSnapshotSchedule.
func (mr *MockSnapshotScheduleOpsMockRecorder) WatchVolumeSnapshotSchedule(namespace, fn, listOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchVolumeSnapshotSchedule", reflect.TypeOf((*MockSnapshotScheduleOps)(nil).WatchVolumeSnapshotSchedule), namespace, fn, listOptions)
}
