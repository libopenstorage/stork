// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/github.com/portworx/sched-ops/k8s/externalstorage/externalstorage.go
//
// Generated by this command:
//
//	mockgen -source=vendor/github.com/portworx/sched-ops/k8s/externalstorage/externalstorage.go -destination=pkg/snapshot/controllers/snapshot.mock.go
//

// Package mock_externalstorage is a generated GoMock package.
package controllers

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"

	v1 "github.com/kubernetes-incubator/external-storage/snapshot/pkg/apis/crd/v1"
	rest "k8s.io/client-go/rest"
)

// MockOps is a mock of Ops interface.
type MockOps struct {
	ctrl     *gomock.Controller
	recorder *MockOpsMockRecorder
}

// MockOpsMockRecorder is the mock recorder for MockOps.
type MockOpsMockRecorder struct {
	mock *MockOps
}

// NewMockOps creates a new mock instance.
func NewMockOps(ctrl *gomock.Controller) *MockOps {
	mock := &MockOps{ctrl: ctrl}
	mock.recorder = &MockOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOps) EXPECT() *MockOpsMockRecorder {
	return m.recorder
}

// CreateSnapshot mocks base method.
func (m *MockOps) CreateSnapshot(arg0 *v1.VolumeSnapshot) (*v1.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", arg0)
	ret0, _ := ret[0].(*v1.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockOpsMockRecorder) CreateSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockOps)(nil).CreateSnapshot), arg0)
}

// CreateSnapshotData mocks base method.
func (m *MockOps) CreateSnapshotData(arg0 *v1.VolumeSnapshotData) (*v1.VolumeSnapshotData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotData", arg0)
	ret0, _ := ret[0].(*v1.VolumeSnapshotData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotData indicates an expected call of CreateSnapshotData.
func (mr *MockOpsMockRecorder) CreateSnapshotData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotData", reflect.TypeOf((*MockOps)(nil).CreateSnapshotData), arg0)
}

// DeleteSnapshot mocks base method.
func (m *MockOps) DeleteSnapshot(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockOpsMockRecorder) DeleteSnapshot(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockOps)(nil).DeleteSnapshot), name, namespace)
}

// DeleteSnapshotData mocks base method.
func (m *MockOps) DeleteSnapshotData(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshotData", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshotData indicates an expected call of DeleteSnapshotData.
func (mr *MockOpsMockRecorder) DeleteSnapshotData(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotData", reflect.TypeOf((*MockOps)(nil).DeleteSnapshotData), name)
}

// GetSnapshot mocks base method.
func (m *MockOps) GetSnapshot(name, namespace string) (*v1.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", name, namespace)
	ret0, _ := ret[0].(*v1.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockOpsMockRecorder) GetSnapshot(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockOps)(nil).GetSnapshot), name, namespace)
}

// GetSnapshotData mocks base method.
func (m *MockOps) GetSnapshotData(name string) (*v1.VolumeSnapshotData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotData", name)
	ret0, _ := ret[0].(*v1.VolumeSnapshotData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotData indicates an expected call of GetSnapshotData.
func (mr *MockOpsMockRecorder) GetSnapshotData(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotData", reflect.TypeOf((*MockOps)(nil).GetSnapshotData), name)
}

// GetSnapshotStatus mocks base method.
func (m *MockOps) GetSnapshotStatus(name, namespace string) (*v1.VolumeSnapshotStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotStatus", name, namespace)
	ret0, _ := ret[0].(*v1.VolumeSnapshotStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotStatus indicates an expected call of GetSnapshotStatus.
func (mr *MockOpsMockRecorder) GetSnapshotStatus(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotStatus", reflect.TypeOf((*MockOps)(nil).GetSnapshotStatus), name, namespace)
}

// GetVolumeForSnapshot mocks base method.
func (m *MockOps) GetVolumeForSnapshot(name, namespace string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeForSnapshot", name, namespace)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeForSnapshot indicates an expected call of GetVolumeForSnapshot.
func (mr *MockOpsMockRecorder) GetVolumeForSnapshot(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeForSnapshot", reflect.TypeOf((*MockOps)(nil).GetVolumeForSnapshot), name, namespace)
}

// ListSnapshots mocks base method.
func (m *MockOps) ListSnapshots(namespace string) (*v1.VolumeSnapshotList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", namespace)
	ret0, _ := ret[0].(*v1.VolumeSnapshotList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots.
func (mr *MockOpsMockRecorder) ListSnapshots(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockOps)(nil).ListSnapshots), namespace)
}

// SetConfig mocks base method.
func (m *MockOps) SetConfig(config *rest.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfig", config)
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockOpsMockRecorder) SetConfig(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockOps)(nil).SetConfig), config)
}

// UpdateSnapshot mocks base method.
func (m *MockOps) UpdateSnapshot(arg0 *v1.VolumeSnapshot) (*v1.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshot", arg0)
	ret0, _ := ret[0].(*v1.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSnapshot indicates an expected call of UpdateSnapshot.
func (mr *MockOpsMockRecorder) UpdateSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshot", reflect.TypeOf((*MockOps)(nil).UpdateSnapshot), arg0)
}

// ValidateSnapshot mocks base method.
func (m *MockOps) ValidateSnapshot(name, namespace string, retry bool, timeout, retryInterval time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSnapshot", name, namespace, retry, timeout, retryInterval)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateSnapshot indicates an expected call of ValidateSnapshot.
func (mr *MockOpsMockRecorder) ValidateSnapshot(name, namespace, retry, timeout, retryInterval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSnapshot", reflect.TypeOf((*MockOps)(nil).ValidateSnapshot), name, namespace, retry, timeout, retryInterval)
}

// ValidateSnapshotData mocks base method.
func (m *MockOps) ValidateSnapshotData(name string, retry bool, timeout, retryInterval time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSnapshotData", name, retry, timeout, retryInterval)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateSnapshotData indicates an expected call of ValidateSnapshotData.
func (mr *MockOpsMockRecorder) ValidateSnapshotData(name, retry, timeout, retryInterval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSnapshotData", reflect.TypeOf((*MockOps)(nil).ValidateSnapshotData), name, retry, timeout, retryInterval)
}
