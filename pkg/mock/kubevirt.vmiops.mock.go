// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/portworx/sched-ops/k8s/kubevirt-dynamic (interfaces: VirtualMachineInstanceOps)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kubevirtdynamic "github.com/portworx/sched-ops/k8s/kubevirt-dynamic"
)

// MockVirtualMachineInstanceOps is a mock of VirtualMachineInstanceOps interface.
type MockVirtualMachineInstanceOps struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineInstanceOpsMockRecorder
}

// MockVirtualMachineInstanceOpsMockRecorder is the mock recorder for MockVirtualMachineInstanceOps.
type MockVirtualMachineInstanceOpsMockRecorder struct {
	mock *MockVirtualMachineInstanceOps
}

// NewMockVirtualMachineInstanceOps creates a new mock instance.
func NewMockVirtualMachineInstanceOps(ctrl *gomock.Controller) *MockVirtualMachineInstanceOps {
	mock := &MockVirtualMachineInstanceOps{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineInstanceOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineInstanceOps) EXPECT() *MockVirtualMachineInstanceOpsMockRecorder {
	return m.recorder
}

// GetVirtualMachineInstance mocks base method.
func (m *MockVirtualMachineInstanceOps) GetVirtualMachineInstance(arg0 context.Context, arg1, arg2 string) (*kubevirtdynamic.VirtualMachineInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kubevirtdynamic.VirtualMachineInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineInstance indicates an expected call of GetVirtualMachineInstance.
func (mr *MockVirtualMachineInstanceOpsMockRecorder) GetVirtualMachineInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineInstance", reflect.TypeOf((*MockVirtualMachineInstanceOps)(nil).GetVirtualMachineInstance), arg0, arg1, arg2)
}
