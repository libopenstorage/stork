// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/portworx/sched-ops/k8s/kubevirt (interfaces: Ops)

// Package kubevirt is a generated GoMock package.
package kubevirt

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
	v10 "kubevirt.io/api/core/v1"
	kubecli "kubevirt.io/client-go/kubecli"
)

// MockOps is a mock of Ops interface.
type MockOps struct {
	ctrl     *gomock.Controller
	recorder *MockOpsMockRecorder
}

// MockOpsMockRecorder is the mock recorder for MockOps.
type MockOpsMockRecorder struct {
	mock *MockOps
}

// NewMockOps creates a new mock instance.
func NewMockOps(ctrl *gomock.Controller) *MockOps {
	mock := &MockOps{ctrl: ctrl}
	mock.recorder = &MockOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOps) EXPECT() *MockOpsMockRecorder {
	return m.recorder
}

// BatchListVirtualMachines mocks base method.
func (m *MockOps) BatchListVirtualMachines(arg0 string, arg1 *v1.ListOptions) (*v10.VirtualMachineList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchListVirtualMachines", arg0, arg1)
	ret0, _ := ret[0].(*v10.VirtualMachineList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchListVirtualMachines indicates an expected call of BatchListVirtualMachines.
func (mr *MockOpsMockRecorder) BatchListVirtualMachines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchListVirtualMachines", reflect.TypeOf((*MockOps)(nil).BatchListVirtualMachines), arg0, arg1)
}

// CreateVirtualMachine mocks base method.
func (m *MockOps) CreateVirtualMachine(arg0 *v10.VirtualMachine) (*v10.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachine", arg0)
	ret0, _ := ret[0].(*v10.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualMachine indicates an expected call of CreateVirtualMachine.
func (mr *MockOpsMockRecorder) CreateVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachine", reflect.TypeOf((*MockOps)(nil).CreateVirtualMachine), arg0)
}

// DeleteVirtualMachine mocks base method.
func (m *MockOps) DeleteVirtualMachine(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMachine indicates an expected call of DeleteVirtualMachine.
func (mr *MockOpsMockRecorder) DeleteVirtualMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachine", reflect.TypeOf((*MockOps)(nil).DeleteVirtualMachine), arg0, arg1)
}

// GetKubevirtClient mocks base method.
func (m *MockOps) GetKubevirtClient() kubecli.KubevirtClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubevirtClient")
	ret0, _ := ret[0].(kubecli.KubevirtClient)
	return ret0
}

// GetKubevirtClient indicates an expected call of GetKubevirtClient.
func (mr *MockOpsMockRecorder) GetKubevirtClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubevirtClient", reflect.TypeOf((*MockOps)(nil).GetKubevirtClient))
}

// GetVMConfigMaps mocks base method.
func (m *MockOps) GetVMConfigMaps(arg0 *v10.VirtualMachine) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMConfigMaps", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetVMConfigMaps indicates an expected call of GetVMConfigMaps.
func (mr *MockOpsMockRecorder) GetVMConfigMaps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMConfigMaps", reflect.TypeOf((*MockOps)(nil).GetVMConfigMaps), arg0)
}

// GetVMDataVolumes mocks base method.
func (m *MockOps) GetVMDataVolumes(arg0 *v10.VirtualMachine) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMDataVolumes", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetVMDataVolumes indicates an expected call of GetVMDataVolumes.
func (mr *MockOpsMockRecorder) GetVMDataVolumes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMDataVolumes", reflect.TypeOf((*MockOps)(nil).GetVMDataVolumes), arg0)
}

// GetVMPersistentVolumeClaims mocks base method.
func (m *MockOps) GetVMPersistentVolumeClaims(arg0 *v10.VirtualMachine) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMPersistentVolumeClaims", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetVMPersistentVolumeClaims indicates an expected call of GetVMPersistentVolumeClaims.
func (mr *MockOpsMockRecorder) GetVMPersistentVolumeClaims(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMPersistentVolumeClaims", reflect.TypeOf((*MockOps)(nil).GetVMPersistentVolumeClaims), arg0)
}

// GetVMSecrets mocks base method.
func (m *MockOps) GetVMSecrets(arg0 *v10.VirtualMachine) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMSecrets", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetVMSecrets indicates an expected call of GetVMSecrets.
func (mr *MockOpsMockRecorder) GetVMSecrets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMSecrets", reflect.TypeOf((*MockOps)(nil).GetVMSecrets), arg0)
}

// GetVersion mocks base method.
func (m *MockOps) GetVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockOpsMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockOps)(nil).GetVersion))
}

// GetVirtualMachine mocks base method.
func (m *MockOps) GetVirtualMachine(arg0, arg1 string) (*v10.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*v10.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachine indicates an expected call of GetVirtualMachine.
func (mr *MockOpsMockRecorder) GetVirtualMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachine", reflect.TypeOf((*MockOps)(nil).GetVirtualMachine), arg0, arg1)
}

// GetVirtualMachineInstance mocks base method.
func (m *MockOps) GetVirtualMachineInstance(arg0 context.Context, arg1, arg2 string) (*v10.VirtualMachineInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v10.VirtualMachineInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineInstance indicates an expected call of GetVirtualMachineInstance.
func (mr *MockOpsMockRecorder) GetVirtualMachineInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineInstance", reflect.TypeOf((*MockOps)(nil).GetVirtualMachineInstance), arg0, arg1, arg2)
}

// IsVirtualMachineRunning mocks base method.
func (m *MockOps) IsVirtualMachineRunning(arg0 *v10.VirtualMachine) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVirtualMachineRunning", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsVirtualMachineRunning indicates an expected call of IsVirtualMachineRunning.
func (mr *MockOpsMockRecorder) IsVirtualMachineRunning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVirtualMachineRunning", reflect.TypeOf((*MockOps)(nil).IsVirtualMachineRunning), arg0)
}

// ListVirtualMachines mocks base method.
func (m *MockOps) ListVirtualMachines(arg0 string) (*v10.VirtualMachineList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachines", arg0)
	ret0, _ := ret[0].(*v10.VirtualMachineList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachines indicates an expected call of ListVirtualMachines.
func (mr *MockOpsMockRecorder) ListVirtualMachines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachines", reflect.TypeOf((*MockOps)(nil).ListVirtualMachines), arg0)
}

// RestartVirtualMachine mocks base method.
func (m *MockOps) RestartVirtualMachine(arg0 *v10.VirtualMachine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestartVirtualMachine indicates an expected call of RestartVirtualMachine.
func (mr *MockOpsMockRecorder) RestartVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartVirtualMachine", reflect.TypeOf((*MockOps)(nil).RestartVirtualMachine), arg0)
}

// SetConfig mocks base method.
func (m *MockOps) SetConfig(arg0 *rest.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfig", arg0)
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockOpsMockRecorder) SetConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockOps)(nil).SetConfig), arg0)
}

// StartVirtualMachine mocks base method.
func (m *MockOps) StartVirtualMachine(arg0 *v10.VirtualMachine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartVirtualMachine indicates an expected call of StartVirtualMachine.
func (mr *MockOpsMockRecorder) StartVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVirtualMachine", reflect.TypeOf((*MockOps)(nil).StartVirtualMachine), arg0)
}

// StopVirtualMachine mocks base method.
func (m *MockOps) StopVirtualMachine(arg0 *v10.VirtualMachine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopVirtualMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopVirtualMachine indicates an expected call of StopVirtualMachine.
func (mr *MockOpsMockRecorder) StopVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVirtualMachine", reflect.TypeOf((*MockOps)(nil).StopVirtualMachine), arg0)
}

// UpdateVirtualMachine mocks base method.
func (m *MockOps) UpdateVirtualMachine(arg0 *v10.VirtualMachine) (*v10.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualMachine", arg0)
	ret0, _ := ret[0].(*v10.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualMachine indicates an expected call of UpdateVirtualMachine.
func (mr *MockOpsMockRecorder) UpdateVirtualMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMachine", reflect.TypeOf((*MockOps)(nil).UpdateVirtualMachine), arg0)
}

// ValidateVirtualMachineRunning mocks base method.
func (m *MockOps) ValidateVirtualMachineRunning(arg0, arg1 string, arg2, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVirtualMachineRunning", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVirtualMachineRunning indicates an expected call of ValidateVirtualMachineRunning.
func (mr *MockOpsMockRecorder) ValidateVirtualMachineRunning(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVirtualMachineRunning", reflect.TypeOf((*MockOps)(nil).ValidateVirtualMachineRunning), arg0, arg1, arg2, arg3)
}
