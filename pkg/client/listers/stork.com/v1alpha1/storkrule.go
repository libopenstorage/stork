/*
Copyright 2018 Openstorage.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/libopenstorage/stork/pkg/apis/stork.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorkRuleLister helps list StorkRules.
type StorkRuleLister interface {
	// List lists all StorkRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StorkRule, err error)
	// StorkRules returns an object that can list and get StorkRules.
	StorkRules(namespace string) StorkRuleNamespaceLister
	StorkRuleListerExpansion
}

// storkRuleLister implements the StorkRuleLister interface.
type storkRuleLister struct {
	indexer cache.Indexer
}

// NewStorkRuleLister returns a new StorkRuleLister.
func NewStorkRuleLister(indexer cache.Indexer) StorkRuleLister {
	return &storkRuleLister{indexer: indexer}
}

// List lists all StorkRules in the indexer.
func (s *storkRuleLister) List(selector labels.Selector) (ret []*v1alpha1.StorkRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorkRule))
	})
	return ret, err
}

// StorkRules returns an object that can list and get StorkRules.
func (s *storkRuleLister) StorkRules(namespace string) StorkRuleNamespaceLister {
	return storkRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorkRuleNamespaceLister helps list and get StorkRules.
type StorkRuleNamespaceLister interface {
	// List lists all StorkRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StorkRule, err error)
	// Get retrieves the StorkRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StorkRule, error)
	StorkRuleNamespaceListerExpansion
}

// storkRuleNamespaceLister implements the StorkRuleNamespaceLister
// interface.
type storkRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorkRules in the indexer for a given namespace.
func (s storkRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorkRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorkRule))
	})
	return ret, err
}

// Get retrieves the StorkRule from the indexer for a given namespace and name.
func (s storkRuleNamespaceLister) Get(name string) (*v1alpha1.StorkRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storkrule"), name)
	}
	return obj.(*v1alpha1.StorkRule), nil
}
