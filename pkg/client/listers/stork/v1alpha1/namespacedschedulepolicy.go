/*
Copyright 2018 Openstorage.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/libopenstorage/stork/pkg/apis/stork/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NamespacedSchedulePolicyLister helps list NamespacedSchedulePolicies.
// All objects returned here must be treated as read-only.
type NamespacedSchedulePolicyLister interface {
	// List lists all NamespacedSchedulePolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NamespacedSchedulePolicy, err error)
	// NamespacedSchedulePolicies returns an object that can list and get NamespacedSchedulePolicies.
	NamespacedSchedulePolicies(namespace string) NamespacedSchedulePolicyNamespaceLister
	NamespacedSchedulePolicyListerExpansion
}

// namespacedSchedulePolicyLister implements the NamespacedSchedulePolicyLister interface.
type namespacedSchedulePolicyLister struct {
	indexer cache.Indexer
}

// NewNamespacedSchedulePolicyLister returns a new NamespacedSchedulePolicyLister.
func NewNamespacedSchedulePolicyLister(indexer cache.Indexer) NamespacedSchedulePolicyLister {
	return &namespacedSchedulePolicyLister{indexer: indexer}
}

// List lists all NamespacedSchedulePolicies in the indexer.
func (s *namespacedSchedulePolicyLister) List(selector labels.Selector) (ret []*v1alpha1.NamespacedSchedulePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamespacedSchedulePolicy))
	})
	return ret, err
}

// NamespacedSchedulePolicies returns an object that can list and get NamespacedSchedulePolicies.
func (s *namespacedSchedulePolicyLister) NamespacedSchedulePolicies(namespace string) NamespacedSchedulePolicyNamespaceLister {
	return namespacedSchedulePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NamespacedSchedulePolicyNamespaceLister helps list and get NamespacedSchedulePolicies.
// All objects returned here must be treated as read-only.
type NamespacedSchedulePolicyNamespaceLister interface {
	// List lists all NamespacedSchedulePolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NamespacedSchedulePolicy, err error)
	// Get retrieves the NamespacedSchedulePolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NamespacedSchedulePolicy, error)
	NamespacedSchedulePolicyNamespaceListerExpansion
}

// namespacedSchedulePolicyNamespaceLister implements the NamespacedSchedulePolicyNamespaceLister
// interface.
type namespacedSchedulePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NamespacedSchedulePolicies in the indexer for a given namespace.
func (s namespacedSchedulePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NamespacedSchedulePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamespacedSchedulePolicy))
	})
	return ret, err
}

// Get retrieves the NamespacedSchedulePolicy from the indexer for a given namespace and name.
func (s namespacedSchedulePolicyNamespaceLister) Get(name string) (*v1alpha1.NamespacedSchedulePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("namespacedschedulepolicy"), name)
	}
	return obj.(*v1alpha1.NamespacedSchedulePolicy), nil
}
