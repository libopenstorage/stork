/*
Copyright 2018 Openstorage.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/libopenstorage/stork/pkg/apis/stork/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterDomainUpdateLister helps list ClusterDomainUpdates.
type ClusterDomainUpdateLister interface {
	// List lists all ClusterDomainUpdates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterDomainUpdate, err error)
	// ClusterDomainUpdates returns an object that can list and get ClusterDomainUpdates.
	ClusterDomainUpdates(namespace string) ClusterDomainUpdateNamespaceLister
	ClusterDomainUpdateListerExpansion
}

// clusterDomainUpdateLister implements the ClusterDomainUpdateLister interface.
type clusterDomainUpdateLister struct {
	indexer cache.Indexer
}

// NewClusterDomainUpdateLister returns a new ClusterDomainUpdateLister.
func NewClusterDomainUpdateLister(indexer cache.Indexer) ClusterDomainUpdateLister {
	return &clusterDomainUpdateLister{indexer: indexer}
}

// List lists all ClusterDomainUpdates in the indexer.
func (s *clusterDomainUpdateLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterDomainUpdate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterDomainUpdate))
	})
	return ret, err
}

// ClusterDomainUpdates returns an object that can list and get ClusterDomainUpdates.
func (s *clusterDomainUpdateLister) ClusterDomainUpdates(namespace string) ClusterDomainUpdateNamespaceLister {
	return clusterDomainUpdateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterDomainUpdateNamespaceLister helps list and get ClusterDomainUpdates.
type ClusterDomainUpdateNamespaceLister interface {
	// List lists all ClusterDomainUpdates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterDomainUpdate, err error)
	// Get retrieves the ClusterDomainUpdate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ClusterDomainUpdate, error)
	ClusterDomainUpdateNamespaceListerExpansion
}

// clusterDomainUpdateNamespaceLister implements the ClusterDomainUpdateNamespaceLister
// interface.
type clusterDomainUpdateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterDomainUpdates in the indexer for a given namespace.
func (s clusterDomainUpdateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterDomainUpdate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterDomainUpdate))
	})
	return ret, err
}

// Get retrieves the ClusterDomainUpdate from the indexer for a given namespace and name.
func (s clusterDomainUpdateNamespaceLister) Get(name string) (*v1alpha1.ClusterDomainUpdate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterdomainupdate"), name)
	}
	return obj.(*v1alpha1.ClusterDomainUpdate), nil
}
