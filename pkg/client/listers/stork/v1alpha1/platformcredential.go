/*
Copyright 2018 Openstorage.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/libopenstorage/stork/pkg/apis/stork/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PlatformCredentialLister helps list PlatformCredentials.
// All objects returned here must be treated as read-only.
type PlatformCredentialLister interface {
	// List lists all PlatformCredentials in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PlatformCredential, err error)
	// PlatformCredentials returns an object that can list and get PlatformCredentials.
	PlatformCredentials(namespace string) PlatformCredentialNamespaceLister
	PlatformCredentialListerExpansion
}

// platformCredentialLister implements the PlatformCredentialLister interface.
type platformCredentialLister struct {
	indexer cache.Indexer
}

// NewPlatformCredentialLister returns a new PlatformCredentialLister.
func NewPlatformCredentialLister(indexer cache.Indexer) PlatformCredentialLister {
	return &platformCredentialLister{indexer: indexer}
}

// List lists all PlatformCredentials in the indexer.
func (s *platformCredentialLister) List(selector labels.Selector) (ret []*v1alpha1.PlatformCredential, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PlatformCredential))
	})
	return ret, err
}

// PlatformCredentials returns an object that can list and get PlatformCredentials.
func (s *platformCredentialLister) PlatformCredentials(namespace string) PlatformCredentialNamespaceLister {
	return platformCredentialNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PlatformCredentialNamespaceLister helps list and get PlatformCredentials.
// All objects returned here must be treated as read-only.
type PlatformCredentialNamespaceLister interface {
	// List lists all PlatformCredentials in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PlatformCredential, err error)
	// Get retrieves the PlatformCredential from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PlatformCredential, error)
	PlatformCredentialNamespaceListerExpansion
}

// platformCredentialNamespaceLister implements the PlatformCredentialNamespaceLister
// interface.
type platformCredentialNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PlatformCredentials in the indexer for a given namespace.
func (s platformCredentialNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PlatformCredential, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PlatformCredential))
	})
	return ret, err
}

// Get retrieves the PlatformCredential from the indexer for a given namespace and name.
func (s platformCredentialNamespaceLister) Get(name string) (*v1alpha1.PlatformCredential, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("platformcredential"), name)
	}
	return obj.(*v1alpha1.PlatformCredential), nil
}
